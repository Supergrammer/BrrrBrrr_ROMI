
brbr_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d34  08007d34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d3c  08007d3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002adc  20000078  08007dc8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002b54  08007dc8  00022b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249fd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004186  00000000  00000000  00044aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001870  00000000  00000000  00048c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  0004a498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026581  00000000  00000000  0004bc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000110eb  00000000  00000000  000721d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d25a1  00000000  00000000  000832bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015585d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f40  00000000  00000000  001558d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073a8 	.word	0x080073a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080073a8 	.word	0x080073a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <_ZN3ros3MsgC1Ev+0x1c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	08007cbc 	.word	0x08007cbc

0800051c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
      data()
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ffe8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffce 	bl	80004d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08007ca4 	.word	0x08007ca4

0800054c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6859      	ldr	r1, [r3, #4]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	4413      	add	r3, r2
 8000564:	b2ca      	uxtb	r2, r1
 8000566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	0a19      	lsrs	r1, r3, #8
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	4413      	add	r3, r2
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0c19      	lsrs	r1, r3, #16
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3302      	adds	r3, #2
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0e19      	lsrs	r1, r3, #24
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3303      	adds	r3, #3
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	4413      	add	r3, r2
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3304      	adds	r3, #4
 80005a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	0a19      	lsrs	r1, r3, #8
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	0c19      	lsrs	r1, r3, #16
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3302      	adds	r3, #2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	0e19      	lsrs	r1, r3, #24
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3303      	adds	r3, #3
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3304      	adds	r3, #4
 80005ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80005ee:	68fb      	ldr	r3, [r7, #12]
    }
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	440b      	add	r3, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3302      	adds	r3, #2
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	440b      	add	r3, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	041b      	lsls	r3, r3, #16
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3303      	adds	r3, #3
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	440b      	add	r3, r1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3304      	adds	r3, #4
 800065e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	440b      	add	r3, r1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3302      	adds	r3, #2
 800068c:	6839      	ldr	r1, [r7, #0]
 800068e:	440b      	add	r3, r1
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3303      	adds	r3, #3
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	440b      	add	r3, r1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	061b      	lsls	r3, r3, #24
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3304      	adds	r3, #4
 80006b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80006b6:	68fb      	ldr	r3, [r7, #12]
    }
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	080073c0 	.word	0x080073c0

080006e0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	080073d0 	.word	0x080073d0

080006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	809a      	strh	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
    {
    }
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08007c8c 	.word	0x08007c8c
 8000740:	080073f4 	.word	0x080073f4

08000744 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8899      	ldrh	r1, [r3, #4]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	b2ca      	uxtb	r2, r1
 800075e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	b299      	uxth	r1, r3
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	b2ca      	uxtb	r2, r1
 8000772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3302      	adds	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd22 	bl	80001c8 <strlen>
 8000784:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	69b9      	ldr	r1, [r7, #24]
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fa55 	bl	8001c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	3304      	adds	r3, #4
 8000798:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	18d0      	adds	r0, r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	4619      	mov	r1, r3
 80007a8:	f006 fcb6 	bl	8007118 <memcpy>
      offset += length_topic_name;
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	4413      	add	r3, r2
 80007b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd05 	bl	80001c8 <strlen>
 80007be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	6979      	ldr	r1, [r7, #20]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fa38 	bl	8001c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	18d0      	adds	r0, r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f006 fc99 	bl	8007118 <memcpy>
      offset += length_message_type;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fce8 	bl	80001c8 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	6939      	ldr	r1, [r7, #16]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fa1b 	bl	8001c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3304      	adds	r3, #4
 800080c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	18d0      	adds	r0, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4619      	mov	r1, r3
 800081c:	f006 fc7c 	bl	8007118 <memcpy>
      offset += length_md5sum;
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4413      	add	r3, r2
 8000826:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800082e:	68f9      	ldr	r1, [r7, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	0a19      	lsrs	r1, r3, #8
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3301      	adds	r3, #1
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	0c19      	lsrs	r1, r3, #16
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3302      	adds	r3, #2
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	b2ca      	uxtb	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	0e19      	lsrs	r1, r3, #24
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3303      	adds	r3, #3
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000870:	69fb      	ldr	r3, [r7, #28]
    }
 8000872:	4618      	mov	r0, r3
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800087a:	b580      	push	{r7, lr}
 800087c:	b08a      	sub	sp, #40	; 0x28
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	b21a      	sxth	r2, r3
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	3301      	adds	r3, #1
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3302      	adds	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	441a      	add	r2, r3
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f9d7 	bl	8001c7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	3304      	adds	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	d20c      	bcs.n	80008fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	441a      	add	r2, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	440b      	add	r3, r1
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	3301      	adds	r3, #1
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
 80008fa:	e7ec      	b.n	80008d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	3b01      	subs	r3, #1
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	3b01      	subs	r3, #1
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	441a      	add	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	4413      	add	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	441a      	add	r2, r3
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f9a4 	bl	8001c7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	3304      	adds	r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4413      	add	r3, r2
 8000942:	6a3a      	ldr	r2, [r7, #32]
 8000944:	429a      	cmp	r2, r3
 8000946:	d20c      	bcs.n	8000962 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	441a      	add	r2, r3
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3b01      	subs	r3, #1
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	440b      	add	r3, r1
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	3301      	adds	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	e7ec      	b.n	800093c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	3b01      	subs	r3, #1
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	3b01      	subs	r3, #1
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	441a      	add	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4413      	add	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	441a      	add	r2, r3
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f971 	bl	8001c7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	3304      	adds	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d20c      	bcs.n	80009c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	441a      	add	r2, r3
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	440b      	add	r3, r1
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	e7ec      	b.n	80009a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	3b01      	subs	r3, #1
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	3b01      	subs	r3, #1
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	441a      	add	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	440a      	add	r2, r1
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3301      	adds	r3, #1
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	440b      	add	r3, r1
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	3302      	adds	r3, #2
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	440b      	add	r3, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	3303      	adds	r3, #3
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a40:	69bb      	ldr	r3, [r7, #24]
    }
 8000a42:	4618      	mov	r0, r3
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	080073f8 	.word	0x080073f8

08000a68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	08007414 	.word	0x08007414

08000a84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd34 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	711a      	strb	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000aa4:	609a      	str	r2, [r3, #8]
    {
    }
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08007c74 	.word	0x08007c74
 8000ab4:	080073f4 	.word	0x080073f4

08000ab8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7912      	ldrb	r2, [r2, #4]
 8000ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb73 	bl	80001c8 <strlen>
 8000ae2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f8a6 	bl	8001c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	18d0      	adds	r0, r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f006 fb07 	bl	8007118 <memcpy>
      offset += length_msg;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b12:	68fb      	ldr	r3, [r7, #12]
    }
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f896 	bl	8001c7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3304      	adds	r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20c      	bcs.n	8000b7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	441a      	add	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e7ec      	b.n	8000b58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	3b01      	subs	r3, #1
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	441a      	add	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
     return offset;
 8000ba2:	693b      	ldr	r3, [r7, #16]
    }
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	08007438 	.word	0x08007438

08000bc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	0800744c 	.word	0x0800744c

08000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc84 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08007c5c 	.word	0x08007c5c

08000c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0c19      	lsrs	r1, r3, #16
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3302      	adds	r3, #2
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0e19      	lsrs	r1, r3, #24
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3303      	adds	r3, #3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3304      	adds	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d22b      	bcs.n	8000cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	0a19      	lsrs	r1, r3, #8
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	0e19      	lsrs	r1, r3, #24
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3304      	adds	r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	e7ce      	b.n	8000c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6919      	ldr	r1, [r3, #16]
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	0a19      	lsrs	r1, r3, #8
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	0c19      	lsrs	r1, r3, #16
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	3302      	adds	r3, #2
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	0e19      	lsrs	r1, r3, #24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3303      	adds	r3, #3
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3304      	adds	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d22b      	bcs.n	8000d9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	b2ca      	uxtb	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	0a19      	lsrs	r1, r3, #8
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	3301      	adds	r3, #1
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	0c19      	lsrs	r1, r3, #16
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3302      	adds	r3, #2
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2ca      	uxtb	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	0e19      	lsrs	r1, r3, #24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	3303      	adds	r3, #3
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3304      	adds	r3, #4
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e7ce      	b.n	8000d38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69d9      	ldr	r1, [r3, #28]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	b2ca      	uxtb	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	0a19      	lsrs	r1, r3, #8
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	0c19      	lsrs	r1, r3, #16
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	0e19      	lsrs	r1, r3, #24
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	3304      	adds	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d228      	bcs.n	8000e44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e2 	bl	80001c8 <strlen>
 8000e04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	6979      	ldr	r1, [r7, #20]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 ff15 	bl	8001c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	3304      	adds	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	18d0      	adds	r0, r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f006 f972 	bl	8007118 <memcpy>
      offset += length_stringsi;
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	e7d1      	b.n	8000de8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e46:	4618      	mov	r0, r3
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b08e      	sub	sp, #56	; 0x38
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	6a3a      	ldr	r2, [r7, #32]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	061b      	lsls	r3, r3, #24
 8000e96:	6a3a      	ldr	r2, [r7, #32]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d90a      	bls.n	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f006 f942 	bl	8007140 <realloc>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a3a      	ldr	r2, [r7, #32]
 8000ec6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d236      	bcs.n	8000f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	440a      	add	r2, r1
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	3301      	adds	r3, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	3302      	adds	r3, #2
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	3303      	adds	r3, #3
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	440b      	add	r3, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	3304      	adds	r3, #4
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3e:	3301      	adds	r3, #1
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
 8000f42:	e7c3      	b.n	8000ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3301      	adds	r3, #1
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	3302      	adds	r3, #2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f74:	3303      	adds	r3, #3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f86:	3304      	adds	r3, #4
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d90a      	bls.n	8000faa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f006 f8ce 	bl	8007140 <realloc>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d236      	bcs.n	800102c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	440a      	add	r2, r1
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	440b      	add	r3, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	440b      	add	r3, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3304      	adds	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	3214      	adds	r2, #20
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800102a:	e7c3      	b.n	8000fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	3301      	adds	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	3302      	adds	r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	3303      	adds	r3, #3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	3304      	adds	r3, #4
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	d90a      	bls.n	8001092 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f006 f85a 	bl	8007140 <realloc>
 800108c:	4602      	mov	r2, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d23f      	bcs.n	8001126 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	441a      	add	r2, r3
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fde1 	bl	8001c7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	3304      	adds	r3, #4
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d20c      	bcs.n	80010e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	441a      	add	r2, r3
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	440b      	add	r3, r1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3301      	adds	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e7ec      	b.n	80010c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	3b01      	subs	r3, #1
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	3b01      	subs	r3, #1
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	441a      	add	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	3220      	adds	r2, #32
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	3301      	adds	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
 8001124:	e7ba      	b.n	800109c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001128:	4618      	mov	r0, r3
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	08007bc8 	.word	0x08007bc8

0800114c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	08007470 	.word	0x08007470

08001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	425b      	negs	r3, r3
 80011c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <_ZN13STM32HardwareC1Ev+0x34>)
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000ac8 	.word	0x20000ac8

0800120c <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffc4 	bl	80011ae <_ZN13STM32Hardware10getRdmaIndEv>
 8001226:	4603      	mov	r3, r0
 8001228:	429c      	cmp	r4, r3
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d012      	beq.n	800125c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800125c:	68fb      	ldr	r3, [r7, #12]
    }
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
	...

08001268 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b20      	cmp	r3, #32
 800127c:	d108      	bne.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <_ZN13STM32Hardware5flushEv+0x2a>
 8001290:	2300      	movs	r3, #0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03f      	beq.n	8001316 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d031      	beq.n	8001310 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d20a      	bcs.n	80012d2 <_ZN13STM32Hardware5flushEv+0x6a>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	e006      	b.n	80012e0 <_ZN13STM32Hardware5flushEv+0x78>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80012de:	b29b      	uxth	r3, r3
 80012e0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f004 ff1c 	bl	8006134 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4413      	add	r3, r2
 8001306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
      }
    }
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000094 	.word	0x20000094

08001324 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133a:	bfa8      	it	ge
 800133c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001340:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001348:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	4293      	cmp	r3, r2
 8001350:	bf28      	it	cs
 8001352:	4613      	movcs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800135c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	4618      	mov	r0, r3
 800136a:	f005 fed5 	bl	8007118 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00b      	beq.n	80013a2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	18d1      	adds	r1, r2, r3
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	461a      	mov	r2, r3
 800139e:	f005 febb 	bl	8007118 <memcpy>
      }

      flush();
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ff60 	bl	8001268 <_ZN13STM32Hardware5flushEv>
    }
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	f002 fbae 	bl	8003b18 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
      data("")
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f892 	bl	80004fc <_ZN3ros3MsgC1Ev>
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80013e2:	605a      	str	r2, [r3, #4]
    {
    }
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08007c30 	.word	0x08007c30
 80013f4:	080073f4 	.word	0x080073f4

080013f8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fedc 	bl	80001c8 <strlen>
 8001410:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fc0f 	bl	8001c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	18d0      	adds	r0, r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	4619      	mov	r1, r3
 8001434:	f005 fe70 	bl	8007118 <memcpy>
      offset += length_data;
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001440:	68fb      	ldr	r3, [r7, #12]
    }
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	441a      	add	r2, r3
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fc08 	bl	8001c7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	3304      	adds	r3, #4
 800146e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	d20c      	bcs.n	800149a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	441a      	add	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3b01      	subs	r3, #1
 800148a:	6839      	ldr	r1, [r7, #0]
 800148c:	440b      	add	r3, r1
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e7ec      	b.n	8001474 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	3b01      	subs	r3, #1
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	441a      	add	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
     return offset;
 80014be:	693b      	ldr	r3, [r7, #16]
    }
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08007494 	.word	0x08007494

080014e4 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	080074a4 	.word	0x080074a4

08001500 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
      data(0)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fff6 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	e9c2 3402 	strd	r3, r4, [r2, #8]
    {
    }
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	08007c18 	.word	0x08007c18

08001534 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001534:	b490      	push	{r4, r7}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001548:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800154c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	440a      	add	r2, r1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800155a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	f04f 0400 	mov.w	r4, #0
 8001566:	0a0b      	lsrs	r3, r1, #8
 8001568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800156c:	0a14      	lsrs	r4, r2, #8
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	3201      	adds	r2, #1
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	440a      	add	r2, r1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800157a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f04f 0400 	mov.w	r4, #0
 8001586:	0c0b      	lsrs	r3, r1, #16
 8001588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800158c:	0c14      	lsrs	r4, r2, #16
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	3202      	adds	r2, #2
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	440a      	add	r2, r1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800159a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	0e0b      	lsrs	r3, r1, #24
 80015a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ac:	0e14      	lsrs	r4, r2, #24
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	3203      	adds	r2, #3
 80015b2:	6839      	ldr	r1, [r7, #0]
 80015b4:	440a      	add	r2, r1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80015ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	f04f 0400 	mov.w	r4, #0
 80015c6:	0013      	movs	r3, r2
 80015c8:	2400      	movs	r4, #0
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	3204      	adds	r2, #4
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440a      	add	r2, r1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80015d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	f04f 0400 	mov.w	r4, #0
 80015e2:	0a13      	lsrs	r3, r2, #8
 80015e4:	2400      	movs	r4, #0
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	3205      	adds	r2, #5
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440a      	add	r2, r1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80015f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	f04f 0400 	mov.w	r4, #0
 80015fe:	0c13      	lsrs	r3, r2, #16
 8001600:	2400      	movs	r4, #0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	3206      	adds	r2, #6
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	440a      	add	r2, r1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800160e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	f04f 0400 	mov.w	r4, #0
 800161a:	0e13      	lsrs	r3, r2, #24
 800161c:	2400      	movs	r4, #0
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	3207      	adds	r2, #7
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	440a      	add	r2, r1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->data);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3308      	adds	r3, #8
 800162e:	617b      	str	r3, [r7, #20]
      return offset;
 8001630:	697b      	ldr	r3, [r7, #20]
    }
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bc90      	pop	{r4, r7}
 800163a:	4770      	bx	lr

0800163c <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800163c:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8001640:	b087      	sub	sp, #28
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f04f 0400 	mov.w	r4, #0
 8001654:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001658:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	4403      	add	r3, r0
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	fa5f f883 	uxtb.w	r8, r3
 8001668:	f04f 0900 	mov.w	r9, #0
 800166c:	ea48 0301 	orr.w	r3, r8, r1
 8001670:	ea49 0402 	orr.w	r4, r9, r2
 8001674:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001678:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0b00 	mov.w	fp, #0
 8001690:	f04f 0c00 	mov.w	ip, #0
 8001694:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001698:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800169c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80016a0:	ea4b 0308 	orr.w	r3, fp, r8
 80016a4:	ea4c 0409 	orr.w	r4, ip, r9
 80016a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3302      	adds	r3, #2
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2d9      	uxtb	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0b00 	mov.w	fp, #0
 80016c4:	f04f 0c00 	mov.w	ip, #0
 80016c8:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80016cc:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80016d0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80016d4:	ea4b 0308 	orr.w	r3, fp, r8
 80016d8:	ea4c 0409 	orr.w	r4, ip, r9
 80016dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3303      	adds	r3, #3
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	4403      	add	r3, r0
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	0a1e      	lsrs	r6, r3, #8
 80016f6:	061d      	lsls	r5, r3, #24
 80016f8:	ea41 0305 	orr.w	r3, r1, r5
 80016fc:	ea42 0406 	orr.w	r4, r2, r6
 8001700:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3304      	adds	r3, #4
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	4403      	add	r3, r0
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2dd      	uxtb	r5, r3
 8001714:	f04f 0600 	mov.w	r6, #0
 8001718:	f04f 0800 	mov.w	r8, #0
 800171c:	f04f 0900 	mov.w	r9, #0
 8001720:	46a9      	mov	r9, r5
 8001722:	f04f 0800 	mov.w	r8, #0
 8001726:	ea48 0301 	orr.w	r3, r8, r1
 800172a:	ea49 0402 	orr.w	r4, r9, r2
 800172e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001732:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3305      	adds	r3, #5
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	4403      	add	r3, r0
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2dd      	uxtb	r5, r3
 8001742:	f04f 0600 	mov.w	r6, #0
 8001746:	f04f 0800 	mov.w	r8, #0
 800174a:	f04f 0900 	mov.w	r9, #0
 800174e:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8001752:	f04f 0800 	mov.w	r8, #0
 8001756:	ea48 0301 	orr.w	r3, r8, r1
 800175a:	ea49 0402 	orr.w	r4, r9, r2
 800175e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001762:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3306      	adds	r3, #6
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	4403      	add	r3, r0
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2dd      	uxtb	r5, r3
 8001772:	f04f 0600 	mov.w	r6, #0
 8001776:	f04f 0800 	mov.w	r8, #0
 800177a:	f04f 0900 	mov.w	r9, #0
 800177e:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8001782:	f04f 0800 	mov.w	r8, #0
 8001786:	ea48 0301 	orr.w	r3, r8, r1
 800178a:	ea49 0402 	orr.w	r4, r9, r2
 800178e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001792:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3307      	adds	r3, #7
 800179a:	6838      	ldr	r0, [r7, #0]
 800179c:	4403      	add	r3, r0
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2dd      	uxtb	r5, r3
 80017a2:	f04f 0600 	mov.w	r6, #0
 80017a6:	f04f 0800 	mov.w	r8, #0
 80017aa:	f04f 0900 	mov.w	r9, #0
 80017ae:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80017b2:	f04f 0800 	mov.w	r8, #0
 80017b6:	ea48 0301 	orr.w	r3, r8, r1
 80017ba:	ea49 0402 	orr.w	r4, r9, r2
 80017be:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->data = u_data.real;
 80017c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->data);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3308      	adds	r3, #8
 80017d0:	617b      	str	r3, [r7, #20]
     return offset;
 80017d2:	697b      	ldr	r3, [r7, #20]
    }
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80017de:	4770      	bx	lr

080017e0 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	080074c8 	.word	0x080074c8

080017fc <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	080074d8 	.word	0x080074d8

08001818 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
      data(0)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe6a 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_ZN8std_msgs5Int32C1Ev+0x28>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
    {
    }
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	08007c00 	.word	0x08007c00

08001844 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	4413      	add	r3, r2
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0a19      	lsrs	r1, r3, #8
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	b2ca      	uxtb	r2, r1
 8001872:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	0c19      	lsrs	r1, r3, #16
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3302      	adds	r3, #2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	b2ca      	uxtb	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0e19      	lsrs	r1, r3, #24
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3303      	adds	r3, #3
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	b2ca      	uxtb	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3304      	adds	r3, #4
 8001898:	60fb      	str	r3, [r7, #12]
      return offset;
 800189a:	68fb      	ldr	r3, [r7, #12]
    }
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	440a      	add	r2, r1
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	440b      	add	r3, r1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3302      	adds	r3, #2
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	440b      	add	r3, r1
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	041b      	lsls	r3, r3, #16
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3303      	adds	r3, #3
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	440b      	add	r3, r1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3304      	adds	r3, #4
 8001908:	60fb      	str	r3, [r7, #12]
     return offset;
 800190a:	68fb      	ldr	r3, [r7, #12]
    }
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	080074fc 	.word	0x080074fc

08001934 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	0800750c 	.word	0x0800750c

08001950 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001954:	f002 f87a 	bl	8003a4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001958:	f000 f80e 	bl	8001978 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800195c:	f000 f90a 	bl	8001b74 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8001960:	f000 f8e0 	bl	8001b24 <_ZL11MX_DMA_Initv>
	MX_I2C1_Init();
 8001964:	f000 f87c 	bl	8001a60 <_ZL12MX_I2C1_Initv>

	MX_USART1_UART_Init();
 8001968:	f000 f8ae 	bl	8001ac8 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	setup();
 800196c:	f000 ffe2 	bl	8002934 <_Z5setupv>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		loop();
 8001970:	f001 f810 	bl	8002994 <_Z4loopv>
 8001974:	e7fc      	b.n	8001970 <main+0x20>
	...

08001978 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	2230      	movs	r2, #48	; 0x30
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f005 fbd1 	bl	800712e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <_Z18SystemClock_Configv+0xe0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <_Z18SystemClock_Configv+0xe0>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <_Z18SystemClock_Configv+0xe0>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <_Z18SystemClock_Configv+0xe4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <_Z18SystemClock_Configv+0xe4>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <_Z18SystemClock_Configv+0xe4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d4:	2302      	movs	r3, #2
 80019d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019dc:	2310      	movs	r3, #16
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e0:	2302      	movs	r3, #2
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80019e8:	2308      	movs	r3, #8
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80019ec:	23a8      	movs	r3, #168	; 0xa8
 80019ee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 f877 	bl	8004af0 <HAL_RCC_OscConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 8001a12:	f000 f90d 	bl	8001c30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a16:	230f      	movs	r3, #15
 8001a18:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a26:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2105      	movs	r1, #5
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 facb 	bl	8004fd0 <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <_Z18SystemClock_Configv+0xd6>
		Error_Handler();
 8001a4a:	f000 f8f1 	bl	8001c30 <Error_Handler>
	}
}
 8001a4e:	bf00      	nop
 8001a50:	3750      	adds	r7, #80	; 0x50
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000

08001a60 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a66:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <_ZL12MX_I2C1_Initv+0x60>)
 8001a68:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a6c:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <_ZL12MX_I2C1_Initv+0x64>)
 8001a6e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a82:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <_ZL12MX_I2C1_Initv+0x5c>)
 8001a9e:	f002 feef 	bl	8004880 <HAL_I2C_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 8001ab2:	f000 f8bd 	bl	8001c30 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000a74 	.word	0x20000a74
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	000186a0 	.word	0x000186a0

08001ac8 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001ad0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b00:	f004 faca 	bl	8006098 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8001b14:	f000 f88c 	bl	8001c30 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000ac8 	.word	0x20000ac8
 8001b20:	40011000 	.word	0x40011000

08001b24 <_ZL11MX_DMA_Initv>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <_ZL11MX_DMA_Initv+0x4c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <_ZL11MX_DMA_Initv+0x4c>)
 8001b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <_ZL11MX_DMA_Initv+0x4c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	203a      	movs	r0, #58	; 0x3a
 8001b4c:	f002 f8ed 	bl	8003d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b50:	203a      	movs	r0, #58	; 0x3a
 8001b52:	f002 f906 	bl	8003d62 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2046      	movs	r0, #70	; 0x46
 8001b5c:	f002 f8e5 	bl	8003d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b60:	2046      	movs	r0, #70	; 0x46
 8001b62:	f002 f8fe 	bl	8003d62 <HAL_NVIC_EnableIRQ>

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <_ZL12MX_GPIO_Initv+0xb4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	213c      	movs	r1, #60	; 0x3c
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <_ZL12MX_GPIO_Initv+0xb8>)
 8001c00:	f002 fe0c 	bl	800481c <HAL_GPIO_WritePin>
			MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
					| MOTOR_B_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
 8001c04:	233c      	movs	r3, #60	; 0x3c
 8001c06:	617b      	str	r3, [r7, #20]
			| MOTOR_B_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4804      	ldr	r0, [pc, #16]	; (8001c2c <_ZL12MX_GPIO_Initv+0xb8>)
 8001c1c:	f002 fc4c 	bl	80044b8 <HAL_GPIO_Init>

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021000 	.word	0x40021000

08001c30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d80d      	bhi.n	8001c6e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	fa22 f103 	lsr.w	r1, r2, r3
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	b2ca      	uxtb	r2, r1
 8001c64:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e7ee      	b.n	8001c4c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d811      	bhi.n	8001cb8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	440a      	add	r2, r1
 8001c9e:	7812      	ldrb	r2, [r2, #0]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	00d2      	lsls	r2, r2, #3
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	e7ea      	b.n	8001c8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	08007c48 	.word	0x08007c48

08001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ffe8 	bl	8001cc4 <_ZN3ros15NodeHandleBase_C1Ev>
 8001cf4:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fa68 	bl	80011d4 <_ZN13STM32HardwareC1Ev>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe ff66 	bl	8000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b18      	cmp	r3, #24
 8001d20:	d80b      	bhi.n	8001d3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e7f0      	b.n	8001d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b18      	cmp	r3, #24
 8001d42:	d80a      	bhi.n	8001d5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	3301      	adds	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e7f1      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d64:	d20a      	bcs.n	8001d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	e7f0      	b.n	8001d5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d86:	d20a      	bcs.n	8001d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	e7f0      	b.n	8001d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	08007bec 	.word	0x08007bec

08001de4 <_Z41__static_initialization_and_destruction_0ii>:
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d134      	bne.n	8001e5e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d12f      	bne.n	8001e5e <_Z41__static_initialization_and_destruction_0ii+0x7a>

extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

// ROS node handler
static ros::NodeHandle nh;
 8001dfe:	481a      	ldr	r0, [pc, #104]	; (8001e68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001e00:	f7ff ff70 	bl	8001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>

// ROS message struct
static std_msgs::String debug_msg;
 8001e04:	4819      	ldr	r0, [pc, #100]	; (8001e6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001e06:	f7ff fadf 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8001e0a:	4819      	ldr	r0, [pc, #100]	; (8001e70 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001e0c:	f7ff fb78 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8001e10:	4818      	ldr	r0, [pc, #96]	; (8001e74 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001e12:	f7ff fb75 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>

static std_msgs::Int32 sec_msg;
 8001e16:	4818      	ldr	r0, [pc, #96]	; (8001e78 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001e18:	f7ff fcfe 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>
static std_msgs::Int32 nsec_msg;
 8001e1c:	4817      	ldr	r0, [pc, #92]	; (8001e7c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001e1e:	f7ff fcfb 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>

// ROS message publisher handler
static ros::Publisher debug_pub("debug", &debug_msg);
 8001e22:	2300      	movs	r3, #0
 8001e24:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001e26:	4916      	ldr	r1, [pc, #88]	; (8001e80 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001e2a:	f7ff f99d 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001e32:	4915      	ldr	r1, [pc, #84]	; (8001e88 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001e34:	4815      	ldr	r0, [pc, #84]	; (8001e8c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001e36:	f7ff f997 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001e3e:	4914      	ldr	r1, [pc, #80]	; (8001e90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001e40:	4814      	ldr	r0, [pc, #80]	; (8001e94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001e42:	f7ff f991 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

static ros::Publisher sec_pub("time_sec", &sec_msg);
 8001e46:	2300      	movs	r3, #0
 8001e48:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001e4a:	4913      	ldr	r1, [pc, #76]	; (8001e98 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001e4c:	4813      	ldr	r0, [pc, #76]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001e4e:	f7ff f98b 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("time_nsec", &nsec_msg);
 8001e52:	2300      	movs	r3, #0
 8001e54:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001e56:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001e5a:	f7ff f985 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000098 	.word	0x20000098
 8001e6c:	200009d4 	.word	0x200009d4
 8001e70:	200009e0 	.word	0x200009e0
 8001e74:	200009f0 	.word	0x200009f0
 8001e78:	20000a00 	.word	0x20000a00
 8001e7c:	20000a08 	.word	0x20000a08
 8001e80:	08007530 	.word	0x08007530
 8001e84:	20000a10 	.word	0x20000a10
 8001e88:	08007538 	.word	0x08007538
 8001e8c:	20000a24 	.word	0x20000a24
 8001e90:	08007548 	.word	0x08007548
 8001e94:	20000a38 	.word	0x20000a38
 8001e98:	08007558 	.word	0x08007558
 8001e9c:	20000a4c 	.word	0x20000a4c
 8001ea0:	08007564 	.word	0x08007564
 8001ea4:	20000a60 	.word	0x20000a60

08001ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b63      	cmp	r3, #99	; 0x63
 8001eb8:	dd09      	ble.n	8001ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001ec0:	f083 0301 	eor.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e077      	b.n	8001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001eda:	3207      	adds	r2, #7
 8001edc:	4611      	mov	r1, r2
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
 8001ee2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	22ff      	movs	r2, #255	; 0xff
 8001ee8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	22fe      	movs	r2, #254	; 0xfe
 8001ef0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	121b      	asrs	r3, r3, #8
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001f18:	4413      	add	r3, r2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	121b      	asrs	r3, r3, #8
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001f42:	2305      	movs	r3, #5
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3307      	adds	r3, #7
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	da0d      	bge.n	8001f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4413      	add	r3, r2
 8001f56:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4413      	add	r3, r2
 8001f62:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e7ec      	b.n	8001f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3307      	adds	r3, #7
 8001f70:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	425a      	negs	r2, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	bf58      	it	pl
 8001f7c:	4253      	negpl	r3, r2
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	1c59      	adds	r1, r3, #1
 8001f84:	6179      	str	r1, [r7, #20]
 8001f86:	43d2      	mvns	r2, r2
 8001f88:	b2d1      	uxtb	r1, r2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	460a      	mov	r2, r1
 8001f90:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9a:	dc0a      	bgt.n	8001fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1d18      	adds	r0, r3, #4
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7ff f9bb 	bl	8001324 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	e005      	b.n	8001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001fb2:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f9f2 	bl	800239e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08007570 	.word	0x08007570

08001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f9e9 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8001fde:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d903      	bls.n	8001ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d903      	bls.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800201e:	2b00      	cmp	r3, #0
 8002020:	d014      	beq.n	800204c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f9c2 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002038:	429a      	cmp	r2, r3
 800203a:	bf8c      	ite	hi
 800203c:	2301      	movhi	r3, #1
 800203e:	2300      	movls	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002046:	f06f 0301 	mvn.w	r3, #1
 800204a:	e197      	b.n	800237c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3304      	adds	r3, #4
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f8db 	bl	800120c <_ZN13STM32Hardware4readEv>
 8002056:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f2c0 8177 	blt.w	800234e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002076:	2b07      	cmp	r3, #7
 8002078:	d11e      	bne.n	80020b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	b2d1      	uxtb	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	460a      	mov	r2, r1
 8002092:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800209c:	1e5a      	subs	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1b4      	bne.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2208      	movs	r2, #8
 80020b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020b6:	e7af      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d128      	bne.n	8002114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2bff      	cmp	r3, #255	; 0xff
 80020c6:	d10d      	bne.n	80020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f103 0214 	add.w	r2, r3, #20
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80020e2:	e799      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f961 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	bf8c      	ite	hi
 80020fc:	2301      	movhi	r3, #1
 80020fe:	2300      	movls	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d088      	beq.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800210e:	f06f 0301 	mvn.w	r3, #1
 8002112:	e133      	b.n	800237c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800211a:	2b01      	cmp	r3, #1
 800211c:	d11b      	bne.n	8002156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2bfe      	cmp	r3, #254	; 0xfe
 8002122:	d107      	bne.n	8002134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002132:	e771      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002142:	f083 0301 	eor.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f43f af65 	beq.w	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f933 	bl	80023ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002154:	e760      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800215c:	2b02      	cmp	r3, #2
 800215e:	d113      	bne.n	8002188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002186:	e747      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800218e:	2b03      	cmp	r3, #3
 8002190:	d110      	bne.n	80021b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	441a      	add	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80021b2:	e731      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d116      	bne.n	80021ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80021c4:	425a      	negs	r2, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	bf58      	it	pl
 80021cc:	4253      	negpl	r3, r2
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d107      	bne.n	80021e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80021e0:	e71a      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80021ea:	e715      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d10f      	bne.n	8002216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002214:	e700      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800221c:	2b06      	cmp	r3, #6
 800221e:	d117      	bne.n	8002250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	441a      	add	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2207      	movs	r2, #7
 8002236:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002240:	2b00      	cmp	r3, #0
 8002242:	f47f aee9 	bne.w	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2208      	movs	r2, #8
 800224a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800224e:	e6e3      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002256:	2b08      	cmp	r3, #8
 8002258:	f47f aede 	bne.w	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800226a:	425a      	negs	r2, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	bf58      	it	pl
 8002272:	4253      	negpl	r3, r2
 8002274:	2bff      	cmp	r3, #255	; 0xff
 8002276:	f47f aecf 	bne.w	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d110      	bne.n	80022a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f898 	bl	80023ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8b3 	bl	80023f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	e06a      	b.n	800237c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80022ac:	2b0a      	cmp	r3, #10
 80022ae:	d107      	bne.n	80022c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80022b6:	4619      	mov	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f97b 	bl	80025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80022be:	e6ab      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d10e      	bne.n	80022e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f7fe fdb8 	bl	8000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80022e6:	e697      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80022ee:	2b0b      	cmp	r3, #11
 80022f0:	d104      	bne.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80022fa:	e68d      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002302:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f202 2222 	addw	r2, r2, #546	; 0x222
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f43f ae81 	beq.w	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800231c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002326:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002330:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f202 2222 	addw	r2, r2, #546	; 0x222
 800233a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002348:	4611      	mov	r1, r2
 800234a:	4798      	blx	r3
    while (true)
 800234c:	e664      	b.n	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800234e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00f      	beq.n	800237a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002368:	4293      	cmp	r3, r2
 800236a:	d906      	bls.n	800237a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f824 	bl	80023ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800237a:	2300      	movs	r3, #0
  }
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    return configured_;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	2103      	movs	r1, #3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f94d 	bl	800264c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8a8 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f107 020c 	add.w	r2, r7, #12
 80023d6:	210a      	movs	r1, #10
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
    rt_time = hardware_.time();
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe ffe5 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 80023e6:	4602      	mov	r2, r0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 80023f6:	b590      	push	{r4, r7, lr}
 80023f8:	b08b      	sub	sp, #44	; 0x2c
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f97a 	bl	80006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	2b18      	cmp	r3, #24
 8002410:	dc63      	bgt.n	80024da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d056      	beq.n	80024d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	b29b      	uxth	r3, r3
 8002436:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3308      	adds	r3, #8
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4608      	mov	r0, r1
 8002472:	4798      	blx	r3
 8002474:	4603      	mov	r3, r0
 8002476:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4608      	mov	r0, r1
 80024a0:	4798      	blx	r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80024a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024aa:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681c      	ldr	r4, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fe68 	bl	8001196 <_ZN3ros9Publisher15getEndpointTypeEv>
 80024c6:	4601      	mov	r1, r0
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	461a      	mov	r2, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
 80024d8:	e798      	b.n	800240c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	2b18      	cmp	r3, #24
 80024e2:	dc5f      	bgt.n	80025a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d053      	beq.n	800259c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	b29b      	uxth	r3, r3
 8002504:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800251e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	f202 2222 	addw	r2, r2, #546	; 0x222
 800252a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3308      	adds	r3, #8
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4608      	mov	r0, r1
 8002536:	4798      	blx	r3
 8002538:	4603      	mov	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002540:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4608      	mov	r0, r1
 800255c:	4798      	blx	r3
 800255e:	4603      	mov	r3, r0
 8002560:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002566:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681c      	ldr	r4, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002572:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002576:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4608      	mov	r0, r1
 800258e:	4798      	blx	r3
 8002590:	4601      	mov	r1, r0
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	461a      	mov	r2, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e79c      	b.n	80024de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80025ac:	bf00      	nop
 80025ae:	372c      	adds	r7, #44	; 0x2c
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffaa 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe feef 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe f809 	bl	80005fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4915      	ldr	r1, [pc, #84]	; (8002644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80025f0:	fba1 1303 	umull	r1, r3, r1, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002600:	fba3 0302 	umull	r0, r3, r3, r2
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260a:	fb00 f303 	mul.w	r3, r0, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	440b      	add	r3, r1
 8002618:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	3304      	adds	r3, #4
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f82e 	bl	8002684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe febf 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	10624dd3 	.word	0x10624dd3
 8002648:	000f4240 	.word	0x000f4240

0800264c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	460b      	mov	r3, r1
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fa10 	bl	8000a84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002664:	7afb      	ldrb	r3, [r7, #11]
 8002666:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f107 0214 	add.w	r2, r7, #20
 8002676:	2107      	movs	r1, #7
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	4798      	blx	r3
  }
 800267c:	bf00      	nop
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fe8c 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8002698:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4915      	ldr	r1, [pc, #84]	; (80026f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80026a2:	fba1 1303 	umull	r1, r3, r1, r3
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	1e5a      	subs	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80026ba:	fba3 0302 	umull	r0, r3, r3, r2
 80026be:	099b      	lsrs	r3, r3, #6
 80026c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c4:	fb00 f303 	mul.w	r3, r0, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	1aca      	subs	r2, r1, r3
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80026d4:	4413      	add	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f004 fca2 	bl	8007034 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	10624dd3 	.word	0x10624dd3
 80026fc:	000f4240 	.word	0x000f4240
 8002700:	3b9aca00 	.word	0x3b9aca00

08002704 <_GLOBAL__sub_I_hi2c1>:
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
 8002708:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800270c:	2001      	movs	r0, #1
 800270e:	f7ff fb69 	bl	8001de4 <_Z41__static_initialization_and_destruction_0ii>
 8002712:	bd80      	pop	{r7, pc}

08002714 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68d8      	ldr	r0, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6891      	ldr	r1, [r2, #8]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4798      	blx	r3
 8002732:	4603      	mov	r3, r0
  };
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZN13STM32Hardware4initEv>:
    void init(){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f804 	bl	8002752 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_ZN13STM32Hardware10reset_rbufEv>:
    void reset_rbuf(void){
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002766:	4619      	mov	r1, r3
 8002768:	f003 fd50 	bl	800620c <HAL_UART_Receive_DMA>
    }
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
      data(0)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd febc 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	605a      	str	r2, [r3, #4]
    {
    }
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08007cec 	.word	0x08007cec

080027a0 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0a19      	lsrs	r1, r3, #8
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3301      	adds	r3, #1
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	0c19      	lsrs	r1, r3, #16
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3302      	adds	r3, #2
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	0e19      	lsrs	r1, r3, #24
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3303      	adds	r3, #3
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3304      	adds	r3, #4
 80027f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80027f6:	68fb      	ldr	r3, [r7, #12]
    }
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	440a      	add	r2, r1
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3301      	adds	r3, #1
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	440b      	add	r3, r1
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	4313      	orrs	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3302      	adds	r3, #2
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	440b      	add	r3, r1
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	4313      	orrs	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3303      	adds	r3, #3
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	440b      	add	r3, r1
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	4313      	orrs	r3, r2
 8002858:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3304      	adds	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
     return offset;
 8002866:	68fb      	ldr	r3, [r7, #12]
    }
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	0800771c 	.word	0x0800771c

08002890 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	08007730 	.word	0x08007730

080028ac <HAL_UART_TxCpltCallback>:

TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
char log_msg[200];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_UART_TxCpltCallback+0x20>)
 80028b6:	f000 f8ad 	bl	8002a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fcd3 	bl	8001268 <_ZN13STM32Hardware5flushEv>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000bc8 	.word	0x20000bc8

080028d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HAL_UART_RxCpltCallback+0x20>)
 80028da:	f000 f89b 	bl	8002a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80028de:	4603      	mov	r3, r0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff36 	bl	8002752 <_ZN13STM32Hardware10reset_rbufEv>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000bc8 	.word	0x20000bc8

080028f4 <_Z16lwheel_vtargetCBRKN8std_msgs7Float32E>:


void lwheel_vtargetCB(const std_msgs::Float32 &msg) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	vel_target[LEFT] = msg.data;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a03      	ldr	r2, [pc, #12]	; (8002910 <_Z16lwheel_vtargetCBRKN8std_msgs7Float32E+0x1c>)
 8002902:	6013      	str	r3, [r2, #0]

}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	20002b3c 	.word	0x20002b3c

08002914 <_Z16rwheel_vtargetCBRKN8std_msgs7Float32E>:

void rwheel_vtargetCB(const std_msgs::Float32 &msg) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	vel_target[RIGHT] = msg.data;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a03      	ldr	r2, [pc, #12]	; (8002930 <_Z16rwheel_vtargetCBRKN8std_msgs7Float32E+0x1c>)
 8002922:	6053      	str	r3, [r2, #4]
	moveForword();
 8002924:	f000 ff40 	bl	80037a8 <_Z11moveForwordv>
//	strcpy(log_msg, "good job!");
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20002b3c 	.word	0x20002b3c

08002934 <_Z5setupv>:

// ROS message subscriber handler
static ros::Subscriber<std_msgs::Float32> lwheel_vtarget_sub("/lwheel_vtarget", lwheel_vtargetCB);
static ros::Subscriber<std_msgs::Float32> rwheel_vtarget_sub("/rwheel_vtarget", rwheel_vtargetCB);

void setup(void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	wheelDirInit();
 8002938:	f000 fe5a 	bl	80035f0 <_Z12wheelDirInitv>
	wheelPWMInit();
 800293c:	f000 fe8a 	bl	8003654 <_Z12wheelPWMInitv>

	encoderInit();
 8002940:	f000 fcec 	bl	800331c <_Z11encoderInitv>

	nh.initNode();
 8002944:	480d      	ldr	r0, [pc, #52]	; (800297c <_Z5setupv+0x48>)
 8002946:	f000 f8a5 	bl	8002a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_encoder_pub);
 800294a:	490d      	ldr	r1, [pc, #52]	; (8002980 <_Z5setupv+0x4c>)
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <_Z5setupv+0x48>)
 800294e:	f000 f8be 	bl	8002ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_encoder_pub);
 8002952:	490c      	ldr	r1, [pc, #48]	; (8002984 <_Z5setupv+0x50>)
 8002954:	4809      	ldr	r0, [pc, #36]	; (800297c <_Z5setupv+0x48>)
 8002956:	f000 f8ba 	bl	8002ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(debug_pub);
 800295a:	490b      	ldr	r1, [pc, #44]	; (8002988 <_Z5setupv+0x54>)
 800295c:	4807      	ldr	r0, [pc, #28]	; (800297c <_Z5setupv+0x48>)
 800295e:	f000 f8b6 	bl	8002ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

//	nh.advertise(sec_pub);
//	nh.advertise(nsec_pub);

	nh.subscribe(lwheel_vtarget_sub);
 8002962:	490a      	ldr	r1, [pc, #40]	; (800298c <_Z5setupv+0x58>)
 8002964:	4805      	ldr	r0, [pc, #20]	; (800297c <_Z5setupv+0x48>)
 8002966:	f000 f8e2 	bl	8002b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(rwheel_vtarget_sub);
 800296a:	4909      	ldr	r1, [pc, #36]	; (8002990 <_Z5setupv+0x5c>)
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <_Z5setupv+0x48>)
 800296e:	f000 f8de 	bl	8002b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	moveStop();
 8002972:	f000 fef7 	bl	8003764 <_Z8moveStopv>
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000bc8 	.word	0x20000bc8
 8002980:	20001554 	.word	0x20001554
 8002984:	20001568 	.word	0x20001568
 8002988:	20001540 	.word	0x20001540
 800298c:	200016ec 	.word	0x200016ec
 8002990:	20001708 	.word	0x20001708

08002994 <_Z4loopv>:

void loop(void) {
 8002994:	b598      	push	{r3, r4, r7, lr}
 8002996:	af00      	add	r7, sp, #0
//	if (left_encoder_msg.data != left_encoder_count) {
//		strcpy(encoder_log, "left encoder start");
//	}


	left_encoder_msg.data = TIM4->CNT;
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <_Z4loopv+0x58>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f04f 0400 	mov.w	r4, #0
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <_Z4loopv+0x5c>)
 80029a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	left_encoder_pub.publish(&left_encoder_msg);
 80029a6:	4912      	ldr	r1, [pc, #72]	; (80029f0 <_Z4loopv+0x5c>)
 80029a8:	4812      	ldr	r0, [pc, #72]	; (80029f4 <_Z4loopv+0x60>)
 80029aa:	f7ff feb3 	bl	8002714 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	right_encoder_msg.data = TIM5->CNT;
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <_Z4loopv+0x64>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <_Z4loopv+0x68>)
 80029b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	right_encoder_pub.publish(&right_encoder_msg);
 80029bc:	490f      	ldr	r1, [pc, #60]	; (80029fc <_Z4loopv+0x68>)
 80029be:	4810      	ldr	r0, [pc, #64]	; (8002a00 <_Z4loopv+0x6c>)
 80029c0:	f7ff fea8 	bl	8002714 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//	nsec_msg.data = t.nsec;
//
//	sec_pub.publish(&sec_msg);
//	nsec_pub.publish(&nsec_msg);

	debug_msg.data = log_msg;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <_Z4loopv+0x70>)
 80029c6:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <_Z4loopv+0x74>)
 80029c8:	605a      	str	r2, [r3, #4]
	debug_pub.publish(&debug_msg);
 80029ca:	490e      	ldr	r1, [pc, #56]	; (8002a04 <_Z4loopv+0x70>)
 80029cc:	480f      	ldr	r0, [pc, #60]	; (8002a0c <_Z4loopv+0x78>)
 80029ce:	f7ff fea1 	bl	8002714 <_ZN3ros9Publisher7publishEPKNS_3MsgE>


	moveLeftWheel();
 80029d2:	f000 ff55 	bl	8003880 <_Z13moveLeftWheelv>
	moveRightWheel();
 80029d6:	f000 ff9d 	bl	8003914 <_Z14moveRightWheelv>

	nh.spinOnce();
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <_Z4loopv+0x7c>)
 80029dc:	f7ff faf6 	bl	8001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(100);
 80029e0:	2064      	movs	r0, #100	; 0x64
 80029e2:	f001 f8a5 	bl	8003b30 <HAL_Delay>

}
 80029e6:	bf00      	nop
 80029e8:	bd98      	pop	{r3, r4, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40000800 	.word	0x40000800
 80029f0:	20001510 	.word	0x20001510
 80029f4:	20001554 	.word	0x20001554
 80029f8:	40000c00 	.word	0x40000c00
 80029fc:	20001520 	.word	0x20001520
 8002a00:	20001568 	.word	0x20001568
 8002a04:	20001504 	.word	0x20001504
 8002a08:	20001624 	.word	0x20001624
 8002a0c:	20001540 	.word	0x20001540
 8002a10:	20000bc8 	.word	0x20000bc8

08002a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
  }
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	08007d04 	.word	0x08007d04

08002a4c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ffe5 	bl	8002a2c <_ZN3ros11Subscriber_C1Ev>
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fe81 	bl	8002774 <_ZN8std_msgs7Float32C1Ev>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
  };
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	08007cd4 	.word	0x08007cd4

08002a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fe4b 	bl	800273c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b18      	cmp	r3, #24
 8002ae0:	dc1e      	bgt.n	8002b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	60da      	str	r2, [r3, #12]
        return true;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e004      	b.n	8002b22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e7dd      	b.n	8002adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8002b20:	2300      	movs	r3, #0
  }
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b18      	cmp	r3, #24
 8002b40:	dc19      	bgt.n	8002b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	605a      	str	r2, [r3, #4]
        return true;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e004      	b.n	8002b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e7e2      	b.n	8002b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
    return false;
 8002b76:	2300      	movs	r3, #0
  }
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_Z41__static_initialization_and_destruction_0ii>:
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d140      	bne.n	8002c16 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d13b      	bne.n	8002c16 <_Z41__static_initialization_and_destruction_0ii+0x92>
static ros::NodeHandle nh;
 8002b9e:	4820      	ldr	r0, [pc, #128]	; (8002c20 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002ba0:	f7ff f8a0 	bl	8001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 8002ba4:	481f      	ldr	r0, [pc, #124]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002ba6:	f7fe fc0f 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8002baa:	481f      	ldr	r0, [pc, #124]	; (8002c28 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002bac:	f7fe fca8 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8002bb0:	481e      	ldr	r0, [pc, #120]	; (8002c2c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002bb2:	f7fe fca5 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int32 sec_msg;
 8002bb6:	481e      	ldr	r0, [pc, #120]	; (8002c30 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002bb8:	f7fe fe2e 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>
static std_msgs::Int32 nsec_msg;
 8002bbc:	481d      	ldr	r0, [pc, #116]	; (8002c34 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002bbe:	f7fe fe2b 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002bc6:	491c      	ldr	r1, [pc, #112]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002bc8:	481c      	ldr	r0, [pc, #112]	; (8002c3c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002bca:	f7fe facd 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002bd2:	491b      	ldr	r1, [pc, #108]	; (8002c40 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002bd4:	481b      	ldr	r0, [pc, #108]	; (8002c44 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002bd6:	f7fe fac7 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002bde:	491a      	ldr	r1, [pc, #104]	; (8002c48 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002be0:	481a      	ldr	r0, [pc, #104]	; (8002c4c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002be2:	f7fe fac1 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("time_sec", &sec_msg);
 8002be6:	2300      	movs	r3, #0
 8002be8:	4a11      	ldr	r2, [pc, #68]	; (8002c30 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002bea:	4919      	ldr	r1, [pc, #100]	; (8002c50 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002bec:	4819      	ldr	r0, [pc, #100]	; (8002c54 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002bee:	f7fe fabb 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("time_nsec", &nsec_msg);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002bf6:	4918      	ldr	r1, [pc, #96]	; (8002c58 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002bf8:	4818      	ldr	r0, [pc, #96]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002bfa:	f7fe fab5 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Subscriber<std_msgs::Float32> lwheel_vtarget_sub("/lwheel_vtarget", lwheel_vtargetCB);
 8002bfe:	2301      	movs	r3, #1
 8002c00:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002c02:	4918      	ldr	r1, [pc, #96]	; (8002c64 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002c04:	4818      	ldr	r0, [pc, #96]	; (8002c68 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002c06:	f7ff ff21 	bl	8002a4c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
static ros::Subscriber<std_msgs::Float32> rwheel_vtarget_sub("/rwheel_vtarget", rwheel_vtargetCB);
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002c0e:	4918      	ldr	r1, [pc, #96]	; (8002c70 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002c10:	4818      	ldr	r0, [pc, #96]	; (8002c74 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002c12:	f7ff ff1b 	bl	8002a4c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000bc8 	.word	0x20000bc8
 8002c24:	20001504 	.word	0x20001504
 8002c28:	20001510 	.word	0x20001510
 8002c2c:	20001520 	.word	0x20001520
 8002c30:	20001530 	.word	0x20001530
 8002c34:	20001538 	.word	0x20001538
 8002c38:	08007790 	.word	0x08007790
 8002c3c:	20001540 	.word	0x20001540
 8002c40:	08007798 	.word	0x08007798
 8002c44:	20001554 	.word	0x20001554
 8002c48:	080077a8 	.word	0x080077a8
 8002c4c:	20001568 	.word	0x20001568
 8002c50:	080077b8 	.word	0x080077b8
 8002c54:	2000157c 	.word	0x2000157c
 8002c58:	080077c4 	.word	0x080077c4
 8002c5c:	20001590 	.word	0x20001590
 8002c60:	080028f5 	.word	0x080028f5
 8002c64:	080077d0 	.word	0x080077d0
 8002c68:	200016ec 	.word	0x200016ec
 8002c6c:	08002915 	.word	0x08002915
 8002c70:	080077e0 	.word	0x080077e0
 8002c74:	20001708 	.word	0x20001708

08002c78 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	330c      	adds	r3, #12
 8002c86:	6839      	ldr	r1, [r7, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fdbb 	bl	8002804 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	320c      	adds	r2, #12
 8002c96:	4610      	mov	r0, r2
 8002c98:	4798      	blx	r3
  }
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
  }
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fdd4 	bl	8002874 <_ZN8std_msgs7Float327getTypeEv>
 8002ccc:	4603      	mov	r3, r0
  }
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fdd4 	bl	8002890 <_ZN8std_msgs7Float326getMD5Ev>
 8002ce8:	4603      	mov	r3, r0
  }
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_GLOBAL__sub_I_htim4>:
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7ff ff42 	bl	8002b84 <_Z41__static_initialization_and_destruction_0ii>
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_MspInit+0x4c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_MspInit+0x4c>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_MspInit+0x4c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_MspInit+0x4c>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <HAL_MspInit+0x4c>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_MspInit+0x4c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800

08002d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_I2C_MspInit+0x84>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d12b      	bne.n	8002dce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_I2C_MspInit+0x88>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_I2C_MspInit+0x88>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_I2C_MspInit+0x88>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d92:	23c0      	movs	r3, #192	; 0xc0
 8002d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d96:	2312      	movs	r3, #18
 8002d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002da2:	2304      	movs	r3, #4
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	480c      	ldr	r0, [pc, #48]	; (8002de0 <HAL_I2C_MspInit+0x8c>)
 8002dae:	f001 fb83 	bl	80044b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_I2C_MspInit+0x88>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_I2C_MspInit+0x88>)
 8002dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_I2C_MspInit+0x88>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dce:	bf00      	nop
 8002dd0:	3728      	adds	r7, #40	; 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40005400 	.word	0x40005400
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020400 	.word	0x40020400

08002de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <HAL_TIM_Base_MspInit+0x3c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10d      	bne.n	8002e12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_TIM_Base_MspInit+0x40>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_TIM_Base_MspInit+0x40>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_TIM_Base_MspInit+0x40>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a32      	ldr	r2, [pc, #200]	; (8002f10 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12d      	bne.n	8002ea6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a30      	ldr	r2, [pc, #192]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e94:	2302      	movs	r3, #2
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481e      	ldr	r0, [pc, #120]	; (8002f18 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002ea0:	f001 fb0a 	bl	80044b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ea4:	e030      	b.n	8002f08 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_TIM_Encoder_MspInit+0xf4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d12b      	bne.n	8002f08 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	4619      	mov	r1, r3
 8002f02:	4807      	ldr	r0, [pc, #28]	; (8002f20 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002f04:	f001 fad8 	bl	80044b8 <HAL_GPIO_Init>
}
 8002f08:	bf00      	nop
 8002f0a:	3730      	adds	r7, #48	; 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40020000 	.word	0x40020000

08002f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <HAL_TIM_MspPostInit+0x68>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11d      	bne.n	8002f82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_TIM_MspPostInit+0x6c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_TIM_MspPostInit+0x6c>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_TIM_MspPostInit+0x6c>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f62:	23c0      	movs	r3, #192	; 0xc0
 8002f64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f72:	2302      	movs	r3, #2
 8002f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f76:	f107 030c 	add.w	r3, r7, #12
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4805      	ldr	r0, [pc, #20]	; (8002f94 <HAL_TIM_MspPostInit+0x70>)
 8002f7e:	f001 fa9b 	bl	80044b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f82:	bf00      	nop
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40020000 	.word	0x40020000

08002f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4c      	ldr	r2, [pc, #304]	; (80030e8 <HAL_UART_MspInit+0x150>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f040 8091 	bne.w	80030de <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_UART_MspInit+0x154>)
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	4a49      	ldr	r2, [pc, #292]	; (80030ec <HAL_UART_MspInit+0x154>)
 8002fc6:	f043 0310 	orr.w	r3, r3, #16
 8002fca:	6453      	str	r3, [r2, #68]	; 0x44
 8002fcc:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_UART_MspInit+0x154>)
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	4b43      	ldr	r3, [pc, #268]	; (80030ec <HAL_UART_MspInit+0x154>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	4a42      	ldr	r2, [pc, #264]	; (80030ec <HAL_UART_MspInit+0x154>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe8:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_UART_MspInit+0x154>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ff4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003006:	2307      	movs	r3, #7
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	4837      	ldr	r0, [pc, #220]	; (80030f0 <HAL_UART_MspInit+0x158>)
 8003012:	f001 fa51 	bl	80044b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 8003018:	4a37      	ldr	r2, [pc, #220]	; (80030f8 <HAL_UART_MspInit+0x160>)
 800301a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800301c:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 800301e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003022:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003024:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302a:	4b32      	ldr	r3, [pc, #200]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 800302c:	2200      	movs	r2, #0
 800302e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003030:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 8003032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003036:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003038:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 800303a:	2200      	movs	r2, #0
 800303c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800304a:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 8003052:	2200      	movs	r2, #0
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003056:	4827      	ldr	r0, [pc, #156]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 8003058:	f000 fe9e 	bl	8003d98 <HAL_DMA_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003062:	f7fe fde5 	bl	8001c30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a22      	ldr	r2, [pc, #136]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 800306a:	635a      	str	r2, [r3, #52]	; 0x34
 800306c:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <HAL_UART_MspInit+0x15c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_UART_MspInit+0x164>)
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_UART_MspInit+0x168>)
 8003076:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_UART_MspInit+0x164>)
 800307a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800307e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_UART_MspInit+0x164>)
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_UART_MspInit+0x164>)
 8003088:	2200      	movs	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_UART_MspInit+0x164>)
 800308e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003092:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_UART_MspInit+0x164>)
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_UART_MspInit+0x164>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_UART_MspInit+0x164>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_UART_MspInit+0x164>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_UART_MspInit+0x164>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030b2:	4812      	ldr	r0, [pc, #72]	; (80030fc <HAL_UART_MspInit+0x164>)
 80030b4:	f000 fe70 	bl	8003d98 <HAL_DMA_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80030be:	f7fe fdb7 	bl	8001c30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_UART_MspInit+0x164>)
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <HAL_UART_MspInit+0x164>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	2025      	movs	r0, #37	; 0x25
 80030d4:	f000 fe29 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030d8:	2025      	movs	r0, #37	; 0x25
 80030da:	f000 fe42 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030de:	bf00      	nop
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40011000 	.word	0x40011000
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	20000b08 	.word	0x20000b08
 80030f8:	40026440 	.word	0x40026440
 80030fc:	20000b68 	.word	0x20000b68
 8003100:	400264b8 	.word	0x400264b8

08003104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <HardFault_Handler+0x4>

08003118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <MemManage_Handler+0x4>

0800311e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <BusFault_Handler+0x4>

08003124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <UsageFault_Handler+0x4>

0800312a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003158:	f000 fcca 	bl	8003af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003164:	2001      	movs	r0, #1
 8003166:	f001 fb73 	bl	8004850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}

0800316e <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003172:	2002      	movs	r0, #2
 8003174:	f001 fb6c 	bl	8004850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}

0800317c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003180:	2004      	movs	r0, #4
 8003182:	f001 fb65 	bl	8004850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}

0800318a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800318e:	2008      	movs	r0, #8
 8003190:	f001 fb5e 	bl	8004850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}

08003198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <USART1_IRQHandler+0x10>)
 800319e:	f003 f8b5 	bl	800630c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000ac8 	.word	0x20000ac8

080031ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <DMA2_Stream2_IRQHandler+0x10>)
 80031b2:	f000 ff19 	bl	8003fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000b08 	.word	0x20000b08

080031c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <DMA2_Stream7_IRQHandler+0x10>)
 80031c6:	f000 ff0f 	bl	8003fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000b68 	.word	0x20000b68

080031d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
	if (GPIO_Pin == MOTOR_LEFT_ENCODER1_Pin) {
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d115      	bne.n	8003210 <HAL_GPIO_EXTI_Callback+0x3c>
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_LEFT_ENCODER2_Pin);
 80031e4:	2102      	movs	r1, #2
 80031e6:	4818      	ldr	r0, [pc, #96]	; (8003248 <HAL_GPIO_EXTI_Callback+0x74>)
 80031e8:	f001 fb00 	bl	80047ec <HAL_GPIO_ReadPin>
 80031ec:	4603      	mov	r3, r0
 80031ee:	81bb      	strh	r3, [r7, #12]
		left_encoder_count = s ? -1 : 1;
 80031f0:	89bb      	ldrh	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <HAL_GPIO_EXTI_Callback+0x2c>
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
 80031fa:	f04f 34ff 	mov.w	r4, #4294967295
 80031fe:	e003      	b.n	8003208 <HAL_GPIO_EXTI_Callback+0x34>
 8003200:	f04f 0301 	mov.w	r3, #1
 8003204:	f04f 0400 	mov.w	r4, #0
 8003208:	4a10      	ldr	r2, [pc, #64]	; (800324c <HAL_GPIO_EXTI_Callback+0x78>)
 800320a:	e9c2 3400 	strd	r3, r4, [r2]
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_RIGHT_ENCODER2_Pin);
		right_encoder_count = s ? -1 : 1;

	}

}
 800320e:	e017      	b.n	8003240 <HAL_GPIO_EXTI_Callback+0x6c>
	} else if (GPIO_Pin == MOTOR_RIGHT_ENCODER1_Pin) {
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	2b04      	cmp	r3, #4
 8003214:	d114      	bne.n	8003240 <HAL_GPIO_EXTI_Callback+0x6c>
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_RIGHT_ENCODER2_Pin);
 8003216:	2108      	movs	r1, #8
 8003218:	480b      	ldr	r0, [pc, #44]	; (8003248 <HAL_GPIO_EXTI_Callback+0x74>)
 800321a:	f001 fae7 	bl	80047ec <HAL_GPIO_ReadPin>
 800321e:	4603      	mov	r3, r0
 8003220:	81fb      	strh	r3, [r7, #14]
		right_encoder_count = s ? -1 : 1;
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <HAL_GPIO_EXTI_Callback+0x5e>
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	f04f 34ff 	mov.w	r4, #4294967295
 8003230:	e003      	b.n	800323a <HAL_GPIO_EXTI_Callback+0x66>
 8003232:	f04f 0301 	mov.w	r3, #1
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <HAL_GPIO_EXTI_Callback+0x7c>)
 800323c:	e9c2 3400 	strd	r3, r4, [r2]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}
 8003248:	40020800 	.word	0x40020800
 800324c:	20002108 	.word	0x20002108
 8003250:	20002110 	.word	0x20002110

08003254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
	return 1;
 8003258:	2301      	movs	r3, #1
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <_kill>:

int _kill(int pid, int sig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800326e:	f003 ff29 	bl	80070c4 <__errno>
 8003272:	4602      	mov	r2, r0
 8003274:	2316      	movs	r3, #22
 8003276:	6013      	str	r3, [r2, #0]
	return -1;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_exit>:

void _exit (int status)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ffe7 	bl	8003264 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003296:	e7fe      	b.n	8003296 <_exit+0x12>

08003298 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <_sbrk+0x50>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <_sbrk+0x16>
		heap_end = &end;
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <_sbrk+0x50>)
 80032aa:	4a10      	ldr	r2, [pc, #64]	; (80032ec <_sbrk+0x54>)
 80032ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <_sbrk+0x50>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <_sbrk+0x50>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	466a      	mov	r2, sp
 80032be:	4293      	cmp	r3, r2
 80032c0:	d907      	bls.n	80032d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80032c2:	f003 feff 	bl	80070c4 <__errno>
 80032c6:	4602      	mov	r2, r0
 80032c8:	230c      	movs	r3, #12
 80032ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	e006      	b.n	80032e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <_sbrk+0x50>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <_sbrk+0x50>)
 80032dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80032de:	68fb      	ldr	r3, [r7, #12]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20001724 	.word	0x20001724
 80032ec:	20002b58 	.word	0x20002b58

080032f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <SystemInit+0x28>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <SystemInit+0x28>)
 80032fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SystemInit+0x28>)
 8003306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800330a:	609a      	str	r2, [r3, #8]
#endif
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <_Z11encoderInitv>:
uint16_t last_tick[WHEEL_NUM];
double last_rad[WHEEL_NUM];
//double last_vel[WHEEL_NUM];


void encoderInit() {
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	; 0x38
 8003320:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a72      	ldr	r2, [pc, #456]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 800332c:	f043 0308 	orr.w	r3, r3, #8
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a6b      	ldr	r2, [pc, #428]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a64      	ldr	r2, [pc, #400]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b62      	ldr	r3, [pc, #392]	; (80034f4 <_Z11encoderInitv+0x1d8>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	683b      	ldr	r3, [r7, #0]

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f003 fed5 	bl	800712e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003384:	f107 030c 	add.w	r3, r7, #12
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 800338e:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 8003390:	4a5a      	ldr	r2, [pc, #360]	; (80034fc <_Z11encoderInitv+0x1e0>)
 8003392:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003394:	4b58      	ldr	r3, [pc, #352]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 8003396:	2200      	movs	r2, #0
 8003398:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339a:	4b57      	ldr	r3, [pc, #348]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80033a0:	4b55      	ldr	r3, [pc, #340]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 80033a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ae:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80033b4:	2303      	movs	r3, #3
 80033b6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033bc:	2301      	movs	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033c0:	2300      	movs	r3, #0
 80033c2:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033cc:	2301      	movs	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033d0:	2300      	movs	r3, #0
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4619      	mov	r1, r3
 80033de:	4846      	ldr	r0, [pc, #280]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 80033e0:	f002 f886 	bl	80054f0 <HAL_TIM_Encoder_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <_Z11encoderInitv+0xdc>
		Error_Handler();
 80033f4:	f7fe fc1c 	bl	8001c30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	4619      	mov	r1, r3
 8003406:	483c      	ldr	r0, [pc, #240]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 8003408:	f002 fdca 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800340c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <_Z11encoderInitv+0x104>
		Error_Handler();
 800341c:	f7fe fc08 	bl	8001c30 <Error_Handler>
	}


	sConfig = { 0 };
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	2224      	movs	r2, #36	; 0x24
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fe80 	bl	800712e <memset>
	sMasterConfig = { 0 };
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]

	htim5.Instance = TIM5;
 8003438:	4b31      	ldr	r3, [pc, #196]	; (8003500 <_Z11encoderInitv+0x1e4>)
 800343a:	4a32      	ldr	r2, [pc, #200]	; (8003504 <_Z11encoderInitv+0x1e8>)
 800343c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800343e:	4b30      	ldr	r3, [pc, #192]	; (8003500 <_Z11encoderInitv+0x1e4>)
 8003440:	2200      	movs	r2, #0
 8003442:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <_Z11encoderInitv+0x1e4>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <_Z11encoderInitv+0x1e4>)
 800344c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003450:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <_Z11encoderInitv+0x1e4>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003458:	4b29      	ldr	r3, [pc, #164]	; (8003500 <_Z11encoderInitv+0x1e4>)
 800345a:	2200      	movs	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800345e:	2301      	movs	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003466:	2301      	movs	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003472:	2300      	movs	r3, #0
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003476:	2301      	movs	r3, #1
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800347a:	2300      	movs	r3, #0
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	481d      	ldr	r0, [pc, #116]	; (8003500 <_Z11encoderInitv+0x1e4>)
 800348a:	f002 f831 	bl	80054f0 <HAL_TIM_Encoder_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <_Z11encoderInitv+0x186>
		Error_Handler();
 800349e:	f7fe fbc7 	bl	8001c30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80034aa:	f107 030c 	add.w	r3, r7, #12
 80034ae:	4619      	mov	r1, r3
 80034b0:	4813      	ldr	r0, [pc, #76]	; (8003500 <_Z11encoderInitv+0x1e4>)
 80034b2:	f002 fd75 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80034b6:	4603      	mov	r3, r0
			!= HAL_OK) {
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <_Z11encoderInitv+0x1ae>
		Error_Handler();
 80034c6:	f7fe fbb3 	bl	8001c30 <Error_Handler>
	}


	// Encoder start
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80034ca:	213c      	movs	r1, #60	; 0x3c
 80034cc:	480a      	ldr	r0, [pc, #40]	; (80034f8 <_Z11encoderInitv+0x1dc>)
 80034ce:	f002 f8a1 	bl	8005614 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80034d2:	213c      	movs	r1, #60	; 0x3c
 80034d4:	480a      	ldr	r0, [pc, #40]	; (8003500 <_Z11encoderInitv+0x1e4>)
 80034d6:	f002 f89d 	bl	8005614 <HAL_TIM_Encoder_Start>

	// parameter initialize
	low_encoder_wrap = UNSIGNED16_MAX * 0.2f;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <_Z11encoderInitv+0x1ec>)
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <_Z11encoderInitv+0x1f0>)
 80034de:	601a      	str	r2, [r3, #0]
	high_encoder_wrap = UNSIGNED16_MAX * 0.8f;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <_Z11encoderInitv+0x1f4>)
 80034e2:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <_Z11encoderInitv+0x1f8>)
 80034e4:	601a      	str	r2, [r3, #0]
	init_encoder = true;
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <_Z11encoderInitv+0x1fc>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
}
 80034ec:	bf00      	nop
 80034ee:	3738      	adds	r7, #56	; 0x38
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	200015a4 	.word	0x200015a4
 80034fc:	40000800 	.word	0x40000800
 8003500:	200015e4 	.word	0x200015e4
 8003504:	40000c00 	.word	0x40000c00
 8003508:	20002118 	.word	0x20002118
 800350c:	464ccc00 	.word	0x464ccc00
 8003510:	2000211c 	.word	0x2000211c
 8003514:	474ccc00 	.word	0x474ccc00
 8003518:	20002120 	.word	0x20002120

0800351c <_Z41__static_initialization_and_destruction_0ii>:
			last_diff_tick[idx] = cur_tick[idx] - last_tick[idx];
		}

		last_rad[idx] += TICK2RAD * (double) last_diff_tick[idx];
	}
}
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d134      	bne.n	8003596 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003532:	4293      	cmp	r3, r2
 8003534:	d12f      	bne.n	8003596 <_Z41__static_initialization_and_destruction_0ii+0x7a>
static ros::NodeHandle nh;
 8003536:	481a      	ldr	r0, [pc, #104]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003538:	f7fe fbd4 	bl	8001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 800353c:	4819      	ldr	r0, [pc, #100]	; (80035a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800353e:	f7fd ff43 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8003542:	4819      	ldr	r0, [pc, #100]	; (80035a8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003544:	f7fd ffdc 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8003548:	4818      	ldr	r0, [pc, #96]	; (80035ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800354a:	f7fd ffd9 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int32 sec_msg;
 800354e:	4818      	ldr	r0, [pc, #96]	; (80035b0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003550:	f7fe f962 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>
static std_msgs::Int32 nsec_msg;
 8003554:	4817      	ldr	r0, [pc, #92]	; (80035b4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003556:	f7fe f95f 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 800355a:	2300      	movs	r3, #0
 800355c:	4a11      	ldr	r2, [pc, #68]	; (80035a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800355e:	4916      	ldr	r1, [pc, #88]	; (80035b8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003560:	4816      	ldr	r0, [pc, #88]	; (80035bc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003562:	f7fd fe01 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8003566:	2300      	movs	r3, #0
 8003568:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800356a:	4915      	ldr	r1, [pc, #84]	; (80035c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800356c:	4815      	ldr	r0, [pc, #84]	; (80035c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800356e:	f7fd fdfb 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8003572:	2300      	movs	r3, #0
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003576:	4914      	ldr	r1, [pc, #80]	; (80035c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003578:	4814      	ldr	r0, [pc, #80]	; (80035cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800357a:	f7fd fdf5 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("time_sec", &sec_msg);
 800357e:	2300      	movs	r3, #0
 8003580:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003582:	4913      	ldr	r1, [pc, #76]	; (80035d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003584:	4813      	ldr	r0, [pc, #76]	; (80035d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003586:	f7fd fdef 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("time_nsec", &nsec_msg);
 800358a:	2300      	movs	r3, #0
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800358e:	4912      	ldr	r1, [pc, #72]	; (80035d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003590:	4812      	ldr	r0, [pc, #72]	; (80035dc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003592:	f7fd fde9 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20001728 	.word	0x20001728
 80035a4:	20002064 	.word	0x20002064
 80035a8:	20002070 	.word	0x20002070
 80035ac:	20002080 	.word	0x20002080
 80035b0:	20002090 	.word	0x20002090
 80035b4:	20002098 	.word	0x20002098
 80035b8:	08007960 	.word	0x08007960
 80035bc:	200020a0 	.word	0x200020a0
 80035c0:	08007968 	.word	0x08007968
 80035c4:	200020b4 	.word	0x200020b4
 80035c8:	08007978 	.word	0x08007978
 80035cc:	200020c8 	.word	0x200020c8
 80035d0:	08007988 	.word	0x08007988
 80035d4:	200020dc 	.word	0x200020dc
 80035d8:	08007994 	.word	0x08007994
 80035dc:	200020f0 	.word	0x200020f0

080035e0 <_GLOBAL__sub_I_left_encoder_count>:
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035e8:	2001      	movs	r0, #1
 80035ea:	f7ff ff97 	bl	800351c <_Z41__static_initialization_and_destruction_0ii>
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_Z12wheelDirInitv>:

float vel_Kp[WHEEL_NUM];
float vel_Ki[WHEEL_NUM];
float vel_Kd[WHEEL_NUM];

void wheelDirInit() {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <_Z12wheelDirInitv+0x5c>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <_Z12wheelDirInitv+0x5c>)
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	6313      	str	r3, [r2, #48]	; 0x30
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <_Z12wheelDirInitv+0x5c>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8003620:	2200      	movs	r2, #0
 8003622:	213c      	movs	r1, #60	; 0x3c
 8003624:	480a      	ldr	r0, [pc, #40]	; (8003650 <_Z12wheelDirInitv+0x60>)
 8003626:	f001 f8f9 	bl	800481c <HAL_GPIO_WritePin>
			MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin | MOTOR_RIGHT_DIR1_Pin
					| MOTOR_RIGHT_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin
 800362a:	233c      	movs	r3, #60	; 0x3c
 800362c:	607b      	str	r3, [r7, #4]
			| MOTOR_RIGHT_DIR1_Pin | MOTOR_RIGHT_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362e:	2301      	movs	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4804      	ldr	r0, [pc, #16]	; (8003650 <_Z12wheelDirInitv+0x60>)
 8003640:	f000 ff3a 	bl	80044b8 <HAL_GPIO_Init>

}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	40021000 	.word	0x40021000

08003654 <_Z12wheelPWMInitv>:

void wheelPWMInit() {
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	; 0x38
 8003658:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <_Z12wheelPWMInitv+0x104>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <_Z12wheelPWMInitv+0x104>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <_Z12wheelPWMInitv+0x104>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	683b      	ldr	r3, [r7, #0]

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003684:	f107 0320 	add.w	r3, r7, #32
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
 800369c:	615a      	str	r2, [r3, #20]
 800369e:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036a2:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <_Z12wheelPWMInitv+0x10c>)
 80036a4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2 - 1;
 80036a6:	4b2d      	ldr	r3, [pc, #180]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 42000 - 1;
 80036b2:	4b2a      	ldr	r3, [pc, #168]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036b4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80036b8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c0:	4b26      	ldr	r3, [pc, #152]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80036c6:	4825      	ldr	r0, [pc, #148]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036c8:	f001 fe74 	bl	80053b4 <HAL_TIM_Base_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80036d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036da:	4619      	mov	r1, r3
 80036dc:	481f      	ldr	r0, [pc, #124]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036de:	f002 f897 	bl	8005810 <HAL_TIM_ConfigClockSource>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80036e6:	481d      	ldr	r0, [pc, #116]	; (800375c <_Z12wheelPWMInitv+0x108>)
 80036e8:	f001 fe8f 	bl	800540a <HAL_TIM_PWM_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f0:	2300      	movs	r3, #0
 80036f2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80036f8:	f107 0320 	add.w	r3, r7, #32
 80036fc:	4619      	mov	r1, r3
 80036fe:	4817      	ldr	r0, [pc, #92]	; (800375c <_Z12wheelPWMInitv+0x108>)
 8003700:	f002 fc4e 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8003704:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003706:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003708:	2360      	movs	r3, #96	; 0x60
 800370a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	2200      	movs	r2, #0
 800371c:	4619      	mov	r1, r3
 800371e:	480f      	ldr	r0, [pc, #60]	; (800375c <_Z12wheelPWMInitv+0x108>)
 8003720:	f001 ffb0 	bl	8005684 <HAL_TIM_PWM_ConfigChannel>
 8003724:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003726:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	2204      	movs	r2, #4
 800372c:	4619      	mov	r1, r3
 800372e:	480b      	ldr	r0, [pc, #44]	; (800375c <_Z12wheelPWMInitv+0x108>)
 8003730:	f001 ffa8 	bl	8005684 <HAL_TIM_PWM_ConfigChannel>
 8003734:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003736:	2b00      	cmp	r3, #0
//		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim3);
 8003738:	4808      	ldr	r0, [pc, #32]	; (800375c <_Z12wheelPWMInitv+0x108>)
 800373a:	f7ff fbf3 	bl	8002f24 <HAL_TIM_MspPostInit>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800373e:	2100      	movs	r1, #0
 8003740:	4806      	ldr	r0, [pc, #24]	; (800375c <_Z12wheelPWMInitv+0x108>)
 8003742:	f001 fe97 	bl	8005474 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003746:	2104      	movs	r1, #4
 8003748:	4804      	ldr	r0, [pc, #16]	; (800375c <_Z12wheelPWMInitv+0x108>)
 800374a:	f001 fe93 	bl	8005474 <HAL_TIM_PWM_Start>
}
 800374e:	bf00      	nop
 8003750:	3738      	adds	r7, #56	; 0x38
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	20002afc 	.word	0x20002afc
 8003760:	40000400 	.word	0x40000400

08003764 <_Z8moveStopv>:


void moveStop() {
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8003768:	2200      	movs	r2, #0
 800376a:	2104      	movs	r1, #4
 800376c:	480c      	ldr	r0, [pc, #48]	; (80037a0 <_Z8moveStopv+0x3c>)
 800376e:	f001 f855 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 8003772:	2200      	movs	r2, #0
 8003774:	2108      	movs	r1, #8
 8003776:	480a      	ldr	r0, [pc, #40]	; (80037a0 <_Z8moveStopv+0x3c>)
 8003778:	f001 f850 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 800377c:	2200      	movs	r2, #0
 800377e:	2110      	movs	r1, #16
 8003780:	4807      	ldr	r0, [pc, #28]	; (80037a0 <_Z8moveStopv+0x3c>)
 8003782:	f001 f84b 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 8003786:	2200      	movs	r2, #0
 8003788:	2120      	movs	r1, #32
 800378a:	4805      	ldr	r0, [pc, #20]	; (80037a0 <_Z8moveStopv+0x3c>)
 800378c:	f001 f846 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	TIM3->CCR1 = (uint16_t) 0;
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <_Z8moveStopv+0x40>)
 8003792:	2200      	movs	r2, #0
 8003794:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 0;
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <_Z8moveStopv+0x40>)
 8003798:	2200      	movs	r2, #0
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40000400 	.word	0x40000400

080037a8 <_Z11moveForwordv>:

void moveForword() {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 80037ac:	2200      	movs	r2, #0
 80037ae:	2104      	movs	r1, #4
 80037b0:	480d      	ldr	r0, [pc, #52]	; (80037e8 <_Z11moveForwordv+0x40>)
 80037b2:	f001 f833 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 80037b6:	2201      	movs	r2, #1
 80037b8:	2108      	movs	r1, #8
 80037ba:	480b      	ldr	r0, [pc, #44]	; (80037e8 <_Z11moveForwordv+0x40>)
 80037bc:	f001 f82e 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 80037c0:	2200      	movs	r2, #0
 80037c2:	2110      	movs	r1, #16
 80037c4:	4808      	ldr	r0, [pc, #32]	; (80037e8 <_Z11moveForwordv+0x40>)
 80037c6:	f001 f829 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 80037ca:	2201      	movs	r2, #1
 80037cc:	2120      	movs	r1, #32
 80037ce:	4806      	ldr	r0, [pc, #24]	; (80037e8 <_Z11moveForwordv+0x40>)
 80037d0:	f001 f824 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	TIM3->CCR1 = (uint16_t) 31000 - 1;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <_Z11moveForwordv+0x44>)
 80037d6:	f647 1217 	movw	r2, #30999	; 0x7917
 80037da:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 31000 - 1;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <_Z11moveForwordv+0x44>)
 80037de:	f647 1217 	movw	r2, #30999	; 0x7917
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40000400 	.word	0x40000400

080037f0 <_Z8moveLeftv>:

	TIM3->CCR1 = (uint16_t) 21000 - 1;
	TIM3->CCR2 = (uint16_t) 21000 - 1;
}

void moveLeft() {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 80037f4:	2201      	movs	r2, #1
 80037f6:	2104      	movs	r1, #4
 80037f8:	480d      	ldr	r0, [pc, #52]	; (8003830 <_Z8moveLeftv+0x40>)
 80037fa:	f001 f80f 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 80037fe:	2200      	movs	r2, #0
 8003800:	2108      	movs	r1, #8
 8003802:	480b      	ldr	r0, [pc, #44]	; (8003830 <_Z8moveLeftv+0x40>)
 8003804:	f001 f80a 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 8003808:	2200      	movs	r2, #0
 800380a:	2110      	movs	r1, #16
 800380c:	4808      	ldr	r0, [pc, #32]	; (8003830 <_Z8moveLeftv+0x40>)
 800380e:	f001 f805 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 8003812:	2201      	movs	r2, #1
 8003814:	2120      	movs	r1, #32
 8003816:	4806      	ldr	r0, [pc, #24]	; (8003830 <_Z8moveLeftv+0x40>)
 8003818:	f001 f800 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	TIM3->CCR1 = (uint16_t) 21000 - 1;
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <_Z8moveLeftv+0x44>)
 800381e:	f245 2207 	movw	r2, #20999	; 0x5207
 8003822:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 21000 - 1;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <_Z8moveLeftv+0x44>)
 8003826:	f245 2207 	movw	r2, #20999	; 0x5207
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000
 8003834:	40000400 	.word	0x40000400

08003838 <_Z9moveRightv>:

void moveRight() {
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 800383c:	2200      	movs	r2, #0
 800383e:	2104      	movs	r1, #4
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <_Z9moveRightv+0x40>)
 8003842:	f000 ffeb 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 8003846:	2201      	movs	r2, #1
 8003848:	2108      	movs	r1, #8
 800384a:	480b      	ldr	r0, [pc, #44]	; (8003878 <_Z9moveRightv+0x40>)
 800384c:	f000 ffe6 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 8003850:	2201      	movs	r2, #1
 8003852:	2110      	movs	r1, #16
 8003854:	4808      	ldr	r0, [pc, #32]	; (8003878 <_Z9moveRightv+0x40>)
 8003856:	f000 ffe1 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 800385a:	2200      	movs	r2, #0
 800385c:	2120      	movs	r1, #32
 800385e:	4806      	ldr	r0, [pc, #24]	; (8003878 <_Z9moveRightv+0x40>)
 8003860:	f000 ffdc 	bl	800481c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	TIM3->CCR1 = (uint16_t) 21000 - 1;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <_Z9moveRightv+0x44>)
 8003866:	f245 2207 	movw	r2, #20999	; 0x5207
 800386a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 21000 - 1;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <_Z9moveRightv+0x44>)
 800386e:	f245 2207 	movw	r2, #20999	; 0x5207
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40000400 	.word	0x40000400

08003880 <_Z13moveLeftWheelv>:
//		wheel_prev[idx] = wheel_latest[idx];
//	}
}


void moveLeftWheel(){
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	if (vel_target[LEFT] == 1.0f && vel_target[RIGHT] == 0.0f) {
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <_Z13moveLeftWheelv+0x90>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388e:	eef4 7a47 	vcmp.f32	s15, s14
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	d10a      	bne.n	80038ae <_Z13moveLeftWheelv+0x2e>
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <_Z13moveLeftWheelv+0x90>)
 800389a:	edd3 7a01 	vldr	s15, [r3, #4]
 800389e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d102      	bne.n	80038ae <_Z13moveLeftWheelv+0x2e>
		moveLeft();
 80038a8:	f7ff ffa2 	bl	80037f0 <_Z8moveLeftv>
 80038ac:	e02d      	b.n	800390a <_Z13moveLeftWheelv+0x8a>
	} else if (vel_target[LEFT] == 0.0f && vel_target[RIGHT] == 1.0f) {
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <_Z13moveLeftWheelv+0x90>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038bc:	d10c      	bne.n	80038d8 <_Z13moveLeftWheelv+0x58>
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <_Z13moveLeftWheelv+0x90>)
 80038c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c8:	eef4 7a47 	vcmp.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d102      	bne.n	80038d8 <_Z13moveLeftWheelv+0x58>
		moveRight();
 80038d2:	f7ff ffb1 	bl	8003838 <_Z9moveRightv>
 80038d6:	e018      	b.n	800390a <_Z13moveLeftWheelv+0x8a>
	} else if (vel_target[LEFT] == 1.0f && vel_target[RIGHT] == 1.0f) {
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <_Z13moveLeftWheelv+0x90>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e2:	eef4 7a47 	vcmp.f32	s15, s14
 80038e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ea:	d10c      	bne.n	8003906 <_Z13moveLeftWheelv+0x86>
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <_Z13moveLeftWheelv+0x90>)
 80038ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80038f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038f6:	eef4 7a47 	vcmp.f32	s15, s14
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	d102      	bne.n	8003906 <_Z13moveLeftWheelv+0x86>
		moveForword();
 8003900:	f7ff ff52 	bl	80037a8 <_Z11moveForwordv>
 8003904:	e001      	b.n	800390a <_Z13moveLeftWheelv+0x8a>
	} else {
		moveStop();
 8003906:	f7ff ff2d 	bl	8003764 <_Z8moveStopv>
	}

}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20002b3c 	.word	0x20002b3c

08003914 <_Z14moveRightWheelv>:
void moveRightWheel() {
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
//	if (vel_target[RIGHT] == 1.0f) {
//			MoveRight();
//		}

}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <_Z41__static_initialization_and_destruction_0ii>:
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d134      	bne.n	800399e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800393a:	4293      	cmp	r3, r2
 800393c:	d12f      	bne.n	800399e <_Z41__static_initialization_and_destruction_0ii+0x7a>
static ros::NodeHandle nh;
 800393e:	481a      	ldr	r0, [pc, #104]	; (80039a8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003940:	f7fe f9d0 	bl	8001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 8003944:	4819      	ldr	r0, [pc, #100]	; (80039ac <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003946:	f7fd fd3f 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 800394a:	4819      	ldr	r0, [pc, #100]	; (80039b0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800394c:	f7fd fdd8 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8003950:	4818      	ldr	r0, [pc, #96]	; (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003952:	f7fd fdd5 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int32 sec_msg;
 8003956:	4818      	ldr	r0, [pc, #96]	; (80039b8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003958:	f7fd ff5e 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>
static std_msgs::Int32 nsec_msg;
 800395c:	4817      	ldr	r0, [pc, #92]	; (80039bc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800395e:	f7fd ff5b 	bl	8001818 <_ZN8std_msgs5Int32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 8003962:	2300      	movs	r3, #0
 8003964:	4a11      	ldr	r2, [pc, #68]	; (80039ac <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003966:	4916      	ldr	r1, [pc, #88]	; (80039c0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003968:	4816      	ldr	r0, [pc, #88]	; (80039c4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800396a:	f7fd fbfd 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 800396e:	2300      	movs	r3, #0
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003972:	4915      	ldr	r1, [pc, #84]	; (80039c8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003974:	4815      	ldr	r0, [pc, #84]	; (80039cc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003976:	f7fd fbf7 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 800397a:	2300      	movs	r3, #0
 800397c:	4a0d      	ldr	r2, [pc, #52]	; (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800397e:	4914      	ldr	r1, [pc, #80]	; (80039d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003980:	4814      	ldr	r0, [pc, #80]	; (80039d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003982:	f7fd fbf1 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("time_sec", &sec_msg);
 8003986:	2300      	movs	r3, #0
 8003988:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800398a:	4913      	ldr	r1, [pc, #76]	; (80039d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800398c:	4813      	ldr	r0, [pc, #76]	; (80039dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800398e:	f7fd fbeb 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("time_nsec", &nsec_msg);
 8003992:	2300      	movs	r3, #0
 8003994:	4a09      	ldr	r2, [pc, #36]	; (80039bc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003996:	4912      	ldr	r1, [pc, #72]	; (80039e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003998:	4812      	ldr	r0, [pc, #72]	; (80039e4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800399a:	f7fd fbe5 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20002124 	.word	0x20002124
 80039ac:	20002a60 	.word	0x20002a60
 80039b0:	20002a68 	.word	0x20002a68
 80039b4:	20002a78 	.word	0x20002a78
 80039b8:	20002a88 	.word	0x20002a88
 80039bc:	20002a90 	.word	0x20002a90
 80039c0:	08007b4c 	.word	0x08007b4c
 80039c4:	20002a98 	.word	0x20002a98
 80039c8:	08007b54 	.word	0x08007b54
 80039cc:	20002aac 	.word	0x20002aac
 80039d0:	08007b64 	.word	0x08007b64
 80039d4:	20002ac0 	.word	0x20002ac0
 80039d8:	08007b74 	.word	0x08007b74
 80039dc:	20002ad4 	.word	0x20002ad4
 80039e0:	08007b80 	.word	0x08007b80
 80039e4:	20002ae8 	.word	0x20002ae8

080039e8 <_GLOBAL__sub_I_wheel_prev>:
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039f0:	2001      	movs	r0, #1
 80039f2:	f7ff ff97 	bl	8003924 <_Z41__static_initialization_and_destruction_0ii>
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039fe:	e003      	b.n	8003a08 <LoopCopyDataInit>

08003a00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a06:	3104      	adds	r1, #4

08003a08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a08:	480b      	ldr	r0, [pc, #44]	; (8003a38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a10:	d3f6      	bcc.n	8003a00 <CopyDataInit>
  ldr  r2, =_sbss
 8003a12:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a14:	e002      	b.n	8003a1c <LoopFillZerobss>

08003a16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a18:	f842 3b04 	str.w	r3, [r2], #4

08003a1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a20:	d3f9      	bcc.n	8003a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a22:	f7ff fc65 	bl	80032f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a26:	f003 fb53 	bl	80070d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2a:	f7fd ff91 	bl	8001950 <main>
  bx  lr    
 8003a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a34:	08007d54 	.word	0x08007d54
  ldr  r0, =_sdata
 8003a38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a3c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003a40:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003a44:	20002b54 	.word	0x20002b54

08003a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a48:	e7fe      	b.n	8003a48 <ADC_IRQHandler>
	...

08003a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a50:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <HAL_Init+0x40>)
 8003a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_Init+0x40>)
 8003a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_Init+0x40>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <HAL_Init+0x40>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a74:	2003      	movs	r0, #3
 8003a76:	f000 f94d 	bl	8003d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f000 f808 	bl	8003a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a80:	f7ff f940 	bl	8002d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00

08003a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_InitTick+0x54>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_InitTick+0x58>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f965 	bl	8003d7e <HAL_SYSTICK_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00e      	b.n	8003adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d80a      	bhi.n	8003ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	f000 f92d 	bl	8003d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ad0:	4a06      	ldr	r2, [pc, #24]	; (8003aec <HAL_InitTick+0x5c>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	20000004 	.word	0x20000004

08003af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_IncTick+0x20>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_IncTick+0x24>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_IncTick+0x24>)
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000008 	.word	0x20000008
 8003b14:	20002b4c 	.word	0x20002b4c

08003b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_GetTick+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20002b4c 	.word	0x20002b4c

08003b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff ffee 	bl	8003b18 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d005      	beq.n	8003b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_Delay+0x40>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b56:	bf00      	nop
 8003b58:	f7ff ffde 	bl	8003b18 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d8f7      	bhi.n	8003b58 <HAL_Delay+0x28>
  {
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000008 	.word	0x20000008

08003b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba6:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60d3      	str	r3, [r2, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4907      	ldr	r1, [pc, #28]	; (8003c10 <__NVIC_EnableIRQ+0x38>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	; (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	; (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce0:	d301      	bcc.n	8003ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00f      	b.n	8003d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <SysTick_Config+0x40>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cee:	210f      	movs	r1, #15
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f7ff ff8e 	bl	8003c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <SysTick_Config+0x40>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <SysTick_Config+0x40>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010

08003d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff29 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3c:	f7ff ff3e 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7ff ff8e 	bl	8003c68 <NVIC_EncodePriority>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff5d 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff31 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ffa2 	bl	8003cd0 <SysTick_Config>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff feb8 	bl	8003b18 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e099      	b.n	8003ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd4:	e00f      	b.n	8003df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd6:	f7ff fe9f 	bl	8003b18 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d908      	bls.n	8003df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e078      	b.n	8003ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e8      	bne.n	8003dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_DMA_Init+0x158>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d107      	bne.n	8003e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d117      	bne.n	8003eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fa91 	bl	80043c4 <DMA_CheckFifoParam>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e016      	b.n	8003ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa48 	bl	8004358 <DMA_CalcBaseAndBitshift>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	223f      	movs	r2, #63	; 0x3f
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	f010803f 	.word	0xf010803f

08003ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_DMA_Start_IT+0x26>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e040      	b.n	8003f9c <HAL_DMA_Start_IT+0xa8>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d12f      	bne.n	8003f8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f9da 	bl	80042fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	223f      	movs	r2, #63	; 0x3f
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0216 	orr.w	r2, r2, #22
 8003f62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0208 	orr.w	r2, r2, #8
 8003f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e005      	b.n	8003f9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
 8003f98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2280      	movs	r2, #128	; 0x80
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00c      	b.n	8003fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2205      	movs	r2, #5
 8003fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ff4:	4b92      	ldr	r3, [pc, #584]	; (8004240 <HAL_DMA_IRQHandler+0x258>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a92      	ldr	r2, [pc, #584]	; (8004244 <HAL_DMA_IRQHandler+0x25c>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0a9b      	lsrs	r3, r3, #10
 8004000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	2208      	movs	r2, #8
 8004014:	409a      	lsls	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01a      	beq.n	8004054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	2208      	movs	r2, #8
 8004042:	409a      	lsls	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0201 	orr.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d012      	beq.n	800408a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004076:	2201      	movs	r2, #1
 8004078:	409a      	lsls	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f043 0202 	orr.w	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	2204      	movs	r2, #4
 8004090:	409a      	lsls	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d012      	beq.n	80040c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	2204      	movs	r2, #4
 80040ae:	409a      	lsls	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	2210      	movs	r2, #16
 80040c6:	409a      	lsls	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d043      	beq.n	8004158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03c      	beq.n	8004158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	2210      	movs	r2, #16
 80040e4:	409a      	lsls	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d018      	beq.n	800412a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d108      	bne.n	8004118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d024      	beq.n	8004158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
 8004116:	e01f      	b.n	8004158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
 8004128:	e016      	b.n	8004158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0208 	bic.w	r2, r2, #8
 8004146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	2220      	movs	r2, #32
 800415e:	409a      	lsls	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 808e 	beq.w	8004286 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8086 	beq.w	8004286 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	2220      	movs	r2, #32
 8004180:	409a      	lsls	r2, r3
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b05      	cmp	r3, #5
 8004190:	d136      	bne.n	8004200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0216 	bic.w	r2, r2, #22
 80041a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <HAL_DMA_IRQHandler+0x1da>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0208 	bic.w	r2, r2, #8
 80041d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	223f      	movs	r2, #63	; 0x3f
 80041d8:	409a      	lsls	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d07d      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
        }
        return;
 80041fe:	e078      	b.n	80042f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01c      	beq.n	8004248 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d108      	bne.n	800422e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	2b00      	cmp	r3, #0
 8004222:	d030      	beq.n	8004286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
 800422c:	e02b      	b.n	8004286 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d027      	beq.n	8004286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
 800423e:	e022      	b.n	8004286 <HAL_DMA_IRQHandler+0x29e>
 8004240:	20000000 	.word	0x20000000
 8004244:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0210 	bic.w	r2, r2, #16
 8004264:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	2b00      	cmp	r3, #0
 800428c:	d032      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d022      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2205      	movs	r2, #5
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d307      	bcc.n	80042ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f2      	bne.n	80042b2 <HAL_DMA_IRQHandler+0x2ca>
 80042cc:	e000      	b.n	80042d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80042ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80042f2:	bf00      	nop
    }
  }
}
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop

080042fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004318:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d108      	bne.n	800433c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800433a:	e007      	b.n	800434c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	3b10      	subs	r3, #16
 8004368:	4a14      	ldr	r2, [pc, #80]	; (80043bc <DMA_CalcBaseAndBitshift+0x64>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d909      	bls.n	800439a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	659a      	str	r2, [r3, #88]	; 0x58
 8004398:	e007      	b.n	80043aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	aaaaaaab 	.word	0xaaaaaaab
 80043c0:	08007d2c 	.word	0x08007d2c

080043c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11f      	bne.n	800441e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d855      	bhi.n	8004490 <DMA_CheckFifoParam+0xcc>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <DMA_CheckFifoParam+0x28>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800440f 	.word	0x0800440f
 80043f4:	080043fd 	.word	0x080043fd
 80043f8:	08004491 	.word	0x08004491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d045      	beq.n	8004494 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440c:	e042      	b.n	8004494 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004416:	d13f      	bne.n	8004498 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441c:	e03c      	b.n	8004498 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004426:	d121      	bne.n	800446c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d836      	bhi.n	800449c <DMA_CheckFifoParam+0xd8>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <DMA_CheckFifoParam+0x70>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004445 	.word	0x08004445
 8004438:	0800444b 	.word	0x0800444b
 800443c:	08004445 	.word	0x08004445
 8004440:	0800445d 	.word	0x0800445d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e02f      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d024      	beq.n	80044a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445a:	e021      	b.n	80044a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004464:	d11e      	bne.n	80044a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800446a:	e01b      	b.n	80044a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d902      	bls.n	8004478 <DMA_CheckFifoParam+0xb4>
 8004472:	2b03      	cmp	r3, #3
 8004474:	d003      	beq.n	800447e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004476:	e018      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e015      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      break;
 800448e:	e00b      	b.n	80044a8 <DMA_CheckFifoParam+0xe4>
      break;
 8004490:	bf00      	nop
 8004492:	e00a      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      break;
 8004494:	bf00      	nop
 8004496:	e008      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      break;
 8004498:	bf00      	nop
 800449a:	e006      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      break;
 800449c:	bf00      	nop
 800449e:	e004      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      break;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      break;   
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <DMA_CheckFifoParam+0xe6>
      break;
 80044a8:	bf00      	nop
    }
  } 
  
  return status; 
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	e16b      	b.n	80047ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044d4:	2201      	movs	r2, #1
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	f040 815a 	bne.w	80047a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d00b      	beq.n	8004512 <HAL_GPIO_Init+0x5a>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d007      	beq.n	8004512 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004506:	2b11      	cmp	r3, #17
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b12      	cmp	r3, #18
 8004510:	d130      	bne.n	8004574 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004548:	2201      	movs	r2, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 0201 	and.w	r2, r3, #1
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2203      	movs	r2, #3
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0xfc>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b12      	cmp	r3, #18
 80045b2:	d123      	bne.n	80045fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	08da      	lsrs	r2, r3, #3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3208      	adds	r2, #8
 80045bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	220f      	movs	r2, #15
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	08da      	lsrs	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3208      	adds	r2, #8
 80045f6:	69b9      	ldr	r1, [r7, #24]
 80045f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	2203      	movs	r2, #3
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0203 	and.w	r2, r3, #3
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80b4 	beq.w	80047a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_GPIO_Init+0x308>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4a5e      	ldr	r2, [pc, #376]	; (80047c0 <HAL_GPIO_Init+0x308>)
 8004648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800464c:	6453      	str	r3, [r2, #68]	; 0x44
 800464e:	4b5c      	ldr	r3, [pc, #368]	; (80047c0 <HAL_GPIO_Init+0x308>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800465a:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_GPIO_Init+0x30c>)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	3302      	adds	r3, #2
 8004662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	220f      	movs	r2, #15
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a51      	ldr	r2, [pc, #324]	; (80047c8 <HAL_GPIO_Init+0x310>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d02b      	beq.n	80046de <HAL_GPIO_Init+0x226>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a50      	ldr	r2, [pc, #320]	; (80047cc <HAL_GPIO_Init+0x314>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d025      	beq.n	80046da <HAL_GPIO_Init+0x222>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4f      	ldr	r2, [pc, #316]	; (80047d0 <HAL_GPIO_Init+0x318>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01f      	beq.n	80046d6 <HAL_GPIO_Init+0x21e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4e      	ldr	r2, [pc, #312]	; (80047d4 <HAL_GPIO_Init+0x31c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d019      	beq.n	80046d2 <HAL_GPIO_Init+0x21a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4d      	ldr	r2, [pc, #308]	; (80047d8 <HAL_GPIO_Init+0x320>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_GPIO_Init+0x216>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4c      	ldr	r2, [pc, #304]	; (80047dc <HAL_GPIO_Init+0x324>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00d      	beq.n	80046ca <HAL_GPIO_Init+0x212>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4b      	ldr	r2, [pc, #300]	; (80047e0 <HAL_GPIO_Init+0x328>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <HAL_GPIO_Init+0x20e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_GPIO_Init+0x32c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_GPIO_Init+0x20a>
 80046be:	2307      	movs	r3, #7
 80046c0:	e00e      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046c2:	2308      	movs	r3, #8
 80046c4:	e00c      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e00a      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046ca:	2305      	movs	r3, #5
 80046cc:	e008      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046ce:	2304      	movs	r3, #4
 80046d0:	e006      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046d2:	2303      	movs	r3, #3
 80046d4:	e004      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e002      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_GPIO_Init+0x228>
 80046de:	2300      	movs	r3, #0
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	f002 0203 	and.w	r2, r2, #3
 80046e6:	0092      	lsls	r2, r2, #2
 80046e8:	4093      	lsls	r3, r2
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f0:	4934      	ldr	r1, [pc, #208]	; (80047c4 <HAL_GPIO_Init+0x30c>)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	3302      	adds	r3, #2
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046fe:	4b3a      	ldr	r3, [pc, #232]	; (80047e8 <HAL_GPIO_Init+0x330>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004722:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_GPIO_Init+0x330>)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004728:	4b2f      	ldr	r3, [pc, #188]	; (80047e8 <HAL_GPIO_Init+0x330>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800474c:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <HAL_GPIO_Init+0x330>)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <HAL_GPIO_Init+0x330>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <HAL_GPIO_Init+0x330>)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <HAL_GPIO_Init+0x330>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047a0:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <HAL_GPIO_Init+0x330>)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3301      	adds	r3, #1
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b0f      	cmp	r3, #15
 80047b0:	f67f ae90 	bls.w	80044d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047b4:	bf00      	nop
 80047b6:	3724      	adds	r7, #36	; 0x24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40013800 	.word	0x40013800
 80047c8:	40020000 	.word	0x40020000
 80047cc:	40020400 	.word	0x40020400
 80047d0:	40020800 	.word	0x40020800
 80047d4:	40020c00 	.word	0x40020c00
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40021400 	.word	0x40021400
 80047e0:	40021800 	.word	0x40021800
 80047e4:	40021c00 	.word	0x40021c00
 80047e8:	40013c00 	.word	0x40013c00

080047ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e001      	b.n	800480e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800482c:	787b      	ldrb	r3, [r7, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004838:	e003      	b.n	8004842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	619a      	str	r2, [r3, #24]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004866:	4a05      	ldr	r2, [pc, #20]	; (800487c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fcb0 	bl	80031d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40013c00 	.word	0x40013c00

08004880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e11f      	b.n	8004ad2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fe fa54 	bl	8002d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048e4:	f000 fd3e 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 80048e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4a7b      	ldr	r2, [pc, #492]	; (8004adc <HAL_I2C_Init+0x25c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d807      	bhi.n	8004904 <HAL_I2C_Init+0x84>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a7a      	ldr	r2, [pc, #488]	; (8004ae0 <HAL_I2C_Init+0x260>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	bf94      	ite	ls
 80048fc:	2301      	movls	r3, #1
 80048fe:	2300      	movhi	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e006      	b.n	8004912 <HAL_I2C_Init+0x92>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a77      	ldr	r2, [pc, #476]	; (8004ae4 <HAL_I2C_Init+0x264>)
 8004908:	4293      	cmp	r3, r2
 800490a:	bf94      	ite	ls
 800490c:	2301      	movls	r3, #1
 800490e:	2300      	movhi	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e0db      	b.n	8004ad2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a72      	ldr	r2, [pc, #456]	; (8004ae8 <HAL_I2C_Init+0x268>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0c9b      	lsrs	r3, r3, #18
 8004924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a64      	ldr	r2, [pc, #400]	; (8004adc <HAL_I2C_Init+0x25c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d802      	bhi.n	8004954 <HAL_I2C_Init+0xd4>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3301      	adds	r3, #1
 8004952:	e009      	b.n	8004968 <HAL_I2C_Init+0xe8>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	4a63      	ldr	r2, [pc, #396]	; (8004aec <HAL_I2C_Init+0x26c>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	3301      	adds	r3, #1
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	430b      	orrs	r3, r1
 800496e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800497a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4956      	ldr	r1, [pc, #344]	; (8004adc <HAL_I2C_Init+0x25c>)
 8004984:	428b      	cmp	r3, r1
 8004986:	d80d      	bhi.n	80049a4 <HAL_I2C_Init+0x124>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e59      	subs	r1, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	fbb1 f3f3 	udiv	r3, r1, r3
 8004996:	3301      	adds	r3, #1
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	2b04      	cmp	r3, #4
 800499e:	bf38      	it	cc
 80049a0:	2304      	movcc	r3, #4
 80049a2:	e04f      	b.n	8004a44 <HAL_I2C_Init+0x1c4>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d111      	bne.n	80049d0 <HAL_I2C_Init+0x150>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1e58      	subs	r0, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	440b      	add	r3, r1
 80049ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80049be:	3301      	adds	r3, #1
 80049c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e012      	b.n	80049f6 <HAL_I2C_Init+0x176>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1e58      	subs	r0, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	0099      	lsls	r1, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e6:	3301      	adds	r3, #1
 80049e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_I2C_Init+0x17e>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e022      	b.n	8004a44 <HAL_I2C_Init+0x1c4>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10e      	bne.n	8004a24 <HAL_I2C_Init+0x1a4>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1e58      	subs	r0, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	440b      	add	r3, r1
 8004a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a22:	e00f      	b.n	8004a44 <HAL_I2C_Init+0x1c4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1e58      	subs	r0, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	0099      	lsls	r1, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	6809      	ldr	r1, [r1, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6911      	ldr	r1, [r2, #16]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68d2      	ldr	r2, [r2, #12]
 8004a7e:	4311      	orrs	r1, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695a      	ldr	r2, [r3, #20]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	000186a0 	.word	0x000186a0
 8004ae0:	001e847f 	.word	0x001e847f
 8004ae4:	003d08ff 	.word	0x003d08ff
 8004ae8:	431bde83 	.word	0x431bde83
 8004aec:	10624dd3 	.word	0x10624dd3

08004af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e25b      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d075      	beq.n	8004bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0e:	4ba3      	ldr	r3, [pc, #652]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d00c      	beq.n	8004b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4ba0      	ldr	r3, [pc, #640]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d112      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b26:	4b9d      	ldr	r3, [pc, #628]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	4b99      	ldr	r3, [pc, #612]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05b      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x108>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d157      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e236      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d106      	bne.n	8004b64 <HAL_RCC_OscConfig+0x74>
 8004b56:	4b91      	ldr	r3, [pc, #580]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a90      	ldr	r2, [pc, #576]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e01d      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x98>
 8004b6e:	4b8b      	ldr	r3, [pc, #556]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a8a      	ldr	r2, [pc, #552]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a87      	ldr	r2, [pc, #540]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b88:	4b84      	ldr	r3, [pc, #528]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a83      	ldr	r2, [pc, #524]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a80      	ldr	r2, [pc, #512]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fe ffb6 	bl	8003b18 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fe ffb2 	bl	8003b18 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1fb      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b76      	ldr	r3, [pc, #472]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xc0>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe ffa2 	bl	8003b18 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fe ff9e 	bl	8003b18 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e1e7      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	4b6c      	ldr	r3, [pc, #432]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xe8>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d063      	beq.n	8004cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c06:	4b65      	ldr	r3, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d11c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d116      	bne.n	8004c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	4b5c      	ldr	r3, [pc, #368]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_RCC_OscConfig+0x152>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d001      	beq.n	8004c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e1bb      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	4b56      	ldr	r3, [pc, #344]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4952      	ldr	r1, [pc, #328]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	e03a      	b.n	8004cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c60:	4b4f      	ldr	r3, [pc, #316]	; (8004da0 <HAL_RCC_OscConfig+0x2b0>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fe ff57 	bl	8003b18 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6e:	f7fe ff53 	bl	8003b18 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e19c      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c80:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4940      	ldr	r1, [pc, #256]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]
 8004ca0:	e015      	b.n	8004cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_OscConfig+0x2b0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe ff36 	bl	8003b18 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb0:	f7fe ff32 	bl	8003b18 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e17b      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d030      	beq.n	8004d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce2:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <HAL_RCC_OscConfig+0x2b4>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce8:	f7fe ff16 	bl	8003b18 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf0:	f7fe ff12 	bl	8003b18 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e15b      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x200>
 8004d0e:	e015      	b.n	8004d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_RCC_OscConfig+0x2b4>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d16:	f7fe feff 	bl	8003b18 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1e:	f7fe fefb 	bl	8003b18 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e144      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a0 	beq.w	8004e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d121      	bne.n	8004dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fe fec1 	bl	8003b18 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e011      	b.n	8004dbe <HAL_RCC_OscConfig+0x2ce>
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	42470000 	.word	0x42470000
 8004da4:	42470e80 	.word	0x42470e80
 8004da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dac:	f7fe feb4 	bl	8003b18 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0fd      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b81      	ldr	r3, [pc, #516]	; (8004fc4 <HAL_RCC_OscConfig+0x4d4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCC_OscConfig+0x2f0>
 8004dd2:	4b7d      	ldr	r3, [pc, #500]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a7c      	ldr	r2, [pc, #496]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dde:	e01c      	b.n	8004e1a <HAL_RCC_OscConfig+0x32a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x312>
 8004de8:	4b77      	ldr	r3, [pc, #476]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a76      	ldr	r2, [pc, #472]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	4b74      	ldr	r3, [pc, #464]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	4a73      	ldr	r2, [pc, #460]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004e00:	e00b      	b.n	8004e1a <HAL_RCC_OscConfig+0x32a>
 8004e02:	4b71      	ldr	r3, [pc, #452]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a70      	ldr	r2, [pc, #448]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	4a6d      	ldr	r2, [pc, #436]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d015      	beq.n	8004e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e22:	f7fe fe79 	bl	8003b18 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fe fe75 	bl	8003b18 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0bc      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	4b61      	ldr	r3, [pc, #388]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ee      	beq.n	8004e2a <HAL_RCC_OscConfig+0x33a>
 8004e4c:	e014      	b.n	8004e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fe fe63 	bl	8003b18 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fe fe5f 	bl	8003b18 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0a6      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6c:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ee      	bne.n	8004e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7e:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a51      	ldr	r2, [pc, #324]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8092 	beq.w	8004fb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e94:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d05c      	beq.n	8004f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d141      	bne.n	8004f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea8:	4b48      	ldr	r3, [pc, #288]	; (8004fcc <HAL_RCC_OscConfig+0x4dc>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eae:	f7fe fe33 	bl	8003b18 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb6:	f7fe fe2f 	bl	8003b18 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e078      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec8:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	019b      	lsls	r3, r3, #6
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	4933      	ldr	r1, [pc, #204]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efe:	4b33      	ldr	r3, [pc, #204]	; (8004fcc <HAL_RCC_OscConfig+0x4dc>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fe fe08 	bl	8003b18 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fe fe04 	bl	8003b18 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e04d      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0x41c>
 8004f2a:	e045      	b.n	8004fb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCC_OscConfig+0x4dc>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fe fdf1 	bl	8003b18 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fe fded 	bl	8003b18 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e036      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x44a>
 8004f58:	e02e      	b.n	8004fb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e029      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f66:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d115      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f8e:	4013      	ands	r3, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10d      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470060 	.word	0x42470060

08004fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0cc      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b68      	ldr	r3, [pc, #416]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d90c      	bls.n	800500c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b65      	ldr	r3, [pc, #404]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0b8      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005024:	4b59      	ldr	r3, [pc, #356]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a58      	ldr	r2, [pc, #352]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800502e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800503c:	4b53      	ldr	r3, [pc, #332]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a52      	ldr	r2, [pc, #328]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005048:	4b50      	ldr	r3, [pc, #320]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	494d      	ldr	r1, [pc, #308]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d044      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d119      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e07f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d003      	beq.n	800508e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508a:	2b03      	cmp	r3, #3
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e06f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	4b3b      	ldr	r3, [pc, #236]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e067      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ae:	4b37      	ldr	r3, [pc, #220]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4934      	ldr	r1, [pc, #208]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c0:	f7fe fd2a 	bl	8003b18 <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	e00a      	b.n	80050de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c8:	f7fe fd26 	bl	8003b18 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e04f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 020c 	and.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1eb      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d20c      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e032      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4916      	ldr	r1, [pc, #88]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	490e      	ldr	r1, [pc, #56]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005156:	f000 f821 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800515a:	4601      	mov	r1, r0
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	5cd3      	ldrb	r3, [r2, r3]
 800516a:	fa21 f303 	lsr.w	r3, r1, r3
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fc8a 	bl	8003a90 <HAL_InitTick>

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023c00 	.word	0x40023c00
 800518c:	40023800 	.word	0x40023800
 8005190:	08007d14 	.word	0x08007d14
 8005194:	20000000 	.word	0x20000000
 8005198:	20000004 	.word	0x20000004

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	2300      	movs	r3, #0
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b2:	4b63      	ldr	r3, [pc, #396]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d007      	beq.n	80051ce <HAL_RCC_GetSysClockFreq+0x32>
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d008      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x38>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f040 80b4 	bne.w	8005330 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c8:	4b5e      	ldr	r3, [pc, #376]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051ca:	60bb      	str	r3, [r7, #8]
       break;
 80051cc:	e0b3      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ce:	4b5e      	ldr	r3, [pc, #376]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80051d0:	60bb      	str	r3, [r7, #8]
      break;
 80051d2:	e0b0      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d4:	4b5a      	ldr	r3, [pc, #360]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051de:	4b58      	ldr	r3, [pc, #352]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04a      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ea:	4b55      	ldr	r3, [pc, #340]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	099b      	lsrs	r3, r3, #6
 80051f0:	f04f 0400 	mov.w	r4, #0
 80051f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	ea03 0501 	and.w	r5, r3, r1
 8005200:	ea04 0602 	and.w	r6, r4, r2
 8005204:	4629      	mov	r1, r5
 8005206:	4632      	mov	r2, r6
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	0154      	lsls	r4, r2, #5
 8005212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005216:	014b      	lsls	r3, r1, #5
 8005218:	4619      	mov	r1, r3
 800521a:	4622      	mov	r2, r4
 800521c:	1b49      	subs	r1, r1, r5
 800521e:	eb62 0206 	sbc.w	r2, r2, r6
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	f04f 0400 	mov.w	r4, #0
 800522a:	0194      	lsls	r4, r2, #6
 800522c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005230:	018b      	lsls	r3, r1, #6
 8005232:	1a5b      	subs	r3, r3, r1
 8005234:	eb64 0402 	sbc.w	r4, r4, r2
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	00e2      	lsls	r2, r4, #3
 8005242:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005246:	00d9      	lsls	r1, r3, #3
 8005248:	460b      	mov	r3, r1
 800524a:	4614      	mov	r4, r2
 800524c:	195b      	adds	r3, r3, r5
 800524e:	eb44 0406 	adc.w	r4, r4, r6
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	0262      	lsls	r2, r4, #9
 800525c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005260:	0259      	lsls	r1, r3, #9
 8005262:	460b      	mov	r3, r1
 8005264:	4614      	mov	r4, r2
 8005266:	4618      	mov	r0, r3
 8005268:	4621      	mov	r1, r4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	461a      	mov	r2, r3
 8005272:	4623      	mov	r3, r4
 8005274:	f7fa ffb0 	bl	80001d8 <__aeabi_uldivmod>
 8005278:	4603      	mov	r3, r0
 800527a:	460c      	mov	r4, r1
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e049      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	ea03 0501 	and.w	r5, r3, r1
 8005296:	ea04 0602 	and.w	r6, r4, r2
 800529a:	4629      	mov	r1, r5
 800529c:	4632      	mov	r2, r6
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	0154      	lsls	r4, r2, #5
 80052a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052ac:	014b      	lsls	r3, r1, #5
 80052ae:	4619      	mov	r1, r3
 80052b0:	4622      	mov	r2, r4
 80052b2:	1b49      	subs	r1, r1, r5
 80052b4:	eb62 0206 	sbc.w	r2, r2, r6
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	f04f 0400 	mov.w	r4, #0
 80052c0:	0194      	lsls	r4, r2, #6
 80052c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052c6:	018b      	lsls	r3, r1, #6
 80052c8:	1a5b      	subs	r3, r3, r1
 80052ca:	eb64 0402 	sbc.w	r4, r4, r2
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	00e2      	lsls	r2, r4, #3
 80052d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052dc:	00d9      	lsls	r1, r3, #3
 80052de:	460b      	mov	r3, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	195b      	adds	r3, r3, r5
 80052e4:	eb44 0406 	adc.w	r4, r4, r6
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	02a2      	lsls	r2, r4, #10
 80052f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052f6:	0299      	lsls	r1, r3, #10
 80052f8:	460b      	mov	r3, r1
 80052fa:	4614      	mov	r4, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	4621      	mov	r1, r4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f04f 0400 	mov.w	r4, #0
 8005306:	461a      	mov	r2, r3
 8005308:	4623      	mov	r3, r4
 800530a:	f7fa ff65 	bl	80001d8 <__aeabi_uldivmod>
 800530e:	4603      	mov	r3, r0
 8005310:	460c      	mov	r4, r1
 8005312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	60bb      	str	r3, [r7, #8]
      break;
 800532e:	e002      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005332:	60bb      	str	r3, [r7, #8]
      break;
 8005334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005336:	68bb      	ldr	r3, [r7, #8]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400
 8005348:	007a1200 	.word	0x007a1200

0800534c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCC_GetHCLKFreq+0x14>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000000 	.word	0x20000000

08005364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005368:	f7ff fff0 	bl	800534c <HAL_RCC_GetHCLKFreq>
 800536c:	4601      	mov	r1, r0
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0a9b      	lsrs	r3, r3, #10
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4a03      	ldr	r2, [pc, #12]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40023800 	.word	0x40023800
 8005388:	08007d24 	.word	0x08007d24

0800538c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005390:	f7ff ffdc 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8005394:	4601      	mov	r1, r0
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0b5b      	lsrs	r3, r3, #13
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a2:	5cd3      	ldrb	r3, [r2, r3]
 80053a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	08007d24 	.word	0x08007d24

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fd fd02 	bl	8002de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 fac4 	bl	8005980 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e01d      	b.n	8005458 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f815 	bl	8005460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 fa99 	bl	8005980 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2201      	movs	r2, #1
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fd64 	bl	8005f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_TIM_PWM_Start+0x74>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <HAL_TIM_PWM_Start+0x2c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <HAL_TIM_PWM_Start+0x78>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d101      	bne.n	80054a4 <HAL_TIM_PWM_Start+0x30>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <HAL_TIM_PWM_Start+0x32>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d007      	beq.n	80054dc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40010400 	.word	0x40010400

080054f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e083      	b.n	800560c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fd fc85 	bl	8002e28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 fa1b 	bl	8005980 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	4313      	orrs	r3, r2
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005590:	f023 030c 	bic.w	r3, r3, #12
 8005594:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800559c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	4313      	orrs	r3, r2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	031b      	lsls	r3, r3, #12
 80055c0:	4313      	orrs	r3, r2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	4313      	orrs	r3, r2
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_TIM_Encoder_Start+0x16>
 8005624:	2b04      	cmp	r3, #4
 8005626:	d008      	beq.n	800563a <HAL_TIM_Encoder_Start+0x26>
 8005628:	e00f      	b.n	800564a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2201      	movs	r2, #1
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fc8e 	bl	8005f54 <TIM_CCxChannelCmd>
      break;
 8005638:	e016      	b.n	8005668 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2201      	movs	r2, #1
 8005640:	2104      	movs	r1, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fc86 	bl	8005f54 <TIM_CCxChannelCmd>
      break;
 8005648:	e00e      	b.n	8005668 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2201      	movs	r2, #1
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fc7e 	bl	8005f54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2201      	movs	r2, #1
 800565e:	2104      	movs	r1, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fc77 	bl	8005f54 <TIM_CCxChannelCmd>
      break;
 8005666:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800569a:	2302      	movs	r3, #2
 800569c:	e0b4      	b.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x184>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b0c      	cmp	r3, #12
 80056b2:	f200 809f 	bhi.w	80057f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056f1 	.word	0x080056f1
 80056c0:	080057f5 	.word	0x080057f5
 80056c4:	080057f5 	.word	0x080057f5
 80056c8:	080057f5 	.word	0x080057f5
 80056cc:	08005731 	.word	0x08005731
 80056d0:	080057f5 	.word	0x080057f5
 80056d4:	080057f5 	.word	0x080057f5
 80056d8:	080057f5 	.word	0x080057f5
 80056dc:	08005773 	.word	0x08005773
 80056e0:	080057f5 	.word	0x080057f5
 80056e4:	080057f5 	.word	0x080057f5
 80056e8:	080057f5 	.word	0x080057f5
 80056ec:	080057b3 	.word	0x080057b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f9e2 	bl	8005ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0208 	orr.w	r2, r2, #8
 800570a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0204 	bic.w	r2, r2, #4
 800571a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6999      	ldr	r1, [r3, #24]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	619a      	str	r2, [r3, #24]
      break;
 800572e:	e062      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fa32 	bl	8005ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6999      	ldr	r1, [r3, #24]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	021a      	lsls	r2, r3, #8
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	619a      	str	r2, [r3, #24]
      break;
 8005770:	e041      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fa87 	bl	8005c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0208 	orr.w	r2, r2, #8
 800578c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0204 	bic.w	r2, r2, #4
 800579c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69d9      	ldr	r1, [r3, #28]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	61da      	str	r2, [r3, #28]
      break;
 80057b0:	e021      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fadb 	bl	8005d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69d9      	ldr	r1, [r3, #28]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	021a      	lsls	r2, r3, #8
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	61da      	str	r2, [r3, #28]
      break;
 80057f2:	e000      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80057f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_TIM_ConfigClockSource+0x18>
 8005824:	2302      	movs	r3, #2
 8005826:	e0a6      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x166>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005846:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b40      	cmp	r3, #64	; 0x40
 800585e:	d067      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x120>
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d80b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x6c>
 8005864:	2b10      	cmp	r3, #16
 8005866:	d073      	beq.n	8005950 <HAL_TIM_ConfigClockSource+0x140>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d802      	bhi.n	8005872 <HAL_TIM_ConfigClockSource+0x62>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d06f      	beq.n	8005950 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005870:	e078      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005872:	2b20      	cmp	r3, #32
 8005874:	d06c      	beq.n	8005950 <HAL_TIM_ConfigClockSource+0x140>
 8005876:	2b30      	cmp	r3, #48	; 0x30
 8005878:	d06a      	beq.n	8005950 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800587a:	e073      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800587c:	2b70      	cmp	r3, #112	; 0x70
 800587e:	d00d      	beq.n	800589c <HAL_TIM_ConfigClockSource+0x8c>
 8005880:	2b70      	cmp	r3, #112	; 0x70
 8005882:	d804      	bhi.n	800588e <HAL_TIM_ConfigClockSource+0x7e>
 8005884:	2b50      	cmp	r3, #80	; 0x50
 8005886:	d033      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0xe0>
 8005888:	2b60      	cmp	r3, #96	; 0x60
 800588a:	d041      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800588c:	e06a      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800588e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005892:	d066      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x152>
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005898:	d017      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800589a:	e063      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f000 fb32 	bl	8005f14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
      break;
 80058c8:	e04c      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f000 fb1b 	bl	8005f14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ec:	609a      	str	r2, [r3, #8]
      break;
 80058ee:	e039      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	461a      	mov	r2, r3
 80058fe:	f000 fa8f 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2150      	movs	r1, #80	; 0x50
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fae8 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 800590e:	e029      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	461a      	mov	r2, r3
 800591e:	f000 faae 	bl	8005e7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2160      	movs	r1, #96	; 0x60
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fad8 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 800592e:	e019      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	461a      	mov	r2, r3
 800593e:	f000 fa6f 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2140      	movs	r1, #64	; 0x40
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fac8 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 800594e:	e009      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f000 fabf 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005960:	e000      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a40      	ldr	r2, [pc, #256]	; (8005a94 <TIM_Base_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d013      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599e:	d00f      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3d      	ldr	r2, [pc, #244]	; (8005a98 <TIM_Base_SetConfig+0x118>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3c      	ldr	r2, [pc, #240]	; (8005a9c <TIM_Base_SetConfig+0x11c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3b      	ldr	r2, [pc, #236]	; (8005aa0 <TIM_Base_SetConfig+0x120>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a3a      	ldr	r2, [pc, #232]	; (8005aa4 <TIM_Base_SetConfig+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d108      	bne.n	80059d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2f      	ldr	r2, [pc, #188]	; (8005a94 <TIM_Base_SetConfig+0x114>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d02b      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e0:	d027      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <TIM_Base_SetConfig+0x118>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d023      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2b      	ldr	r2, [pc, #172]	; (8005a9c <TIM_Base_SetConfig+0x11c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01f      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2a      	ldr	r2, [pc, #168]	; (8005aa0 <TIM_Base_SetConfig+0x120>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d01b      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a29      	ldr	r2, [pc, #164]	; (8005aa4 <TIM_Base_SetConfig+0x124>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d017      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a28      	ldr	r2, [pc, #160]	; (8005aa8 <TIM_Base_SetConfig+0x128>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a27      	ldr	r2, [pc, #156]	; (8005aac <TIM_Base_SetConfig+0x12c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00f      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <TIM_Base_SetConfig+0x130>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a25      	ldr	r2, [pc, #148]	; (8005ab4 <TIM_Base_SetConfig+0x134>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a24      	ldr	r2, [pc, #144]	; (8005ab8 <TIM_Base_SetConfig+0x138>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a23      	ldr	r2, [pc, #140]	; (8005abc <TIM_Base_SetConfig+0x13c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d108      	bne.n	8005a44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <TIM_Base_SetConfig+0x114>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_Base_SetConfig+0xf8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <TIM_Base_SetConfig+0x124>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d103      	bne.n	8005a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	615a      	str	r2, [r3, #20]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40014400 	.word	0x40014400
 8005ab0:	40014800 	.word	0x40014800
 8005ab4:	40001800 	.word	0x40001800
 8005ab8:	40001c00 	.word	0x40001c00
 8005abc:	40002000 	.word	0x40002000

08005ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 0302 	bic.w	r3, r3, #2
 8005b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a20      	ldr	r2, [pc, #128]	; (8005b98 <TIM_OC1_SetConfig+0xd8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC1_SetConfig+0x64>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <TIM_OC1_SetConfig+0xdc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10c      	bne.n	8005b3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0308 	bic.w	r3, r3, #8
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <TIM_OC1_SetConfig+0xd8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC1_SetConfig+0x8e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <TIM_OC1_SetConfig+0xdc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d111      	bne.n	8005b72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	621a      	str	r2, [r3, #32]
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40010400 	.word	0x40010400

08005ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f023 0210 	bic.w	r2, r3, #16
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0320 	bic.w	r3, r3, #32
 8005bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <TIM_OC2_SetConfig+0xe4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC2_SetConfig+0x68>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <TIM_OC2_SetConfig+0xe8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d10d      	bne.n	8005c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <TIM_OC2_SetConfig+0xe4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC2_SetConfig+0x94>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <TIM_OC2_SetConfig+0xe8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d113      	bne.n	8005c5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40010400 	.word	0x40010400

08005c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a21      	ldr	r2, [pc, #132]	; (8005d6c <TIM_OC3_SetConfig+0xe0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC3_SetConfig+0x66>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a20      	ldr	r2, [pc, #128]	; (8005d70 <TIM_OC3_SetConfig+0xe4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10d      	bne.n	8005d0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <TIM_OC3_SetConfig+0xe0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_OC3_SetConfig+0x92>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <TIM_OC3_SetConfig+0xe4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d113      	bne.n	8005d46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	621a      	str	r2, [r3, #32]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40010400 	.word	0x40010400

08005d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a12      	ldr	r2, [pc, #72]	; (8005e18 <TIM_OC4_SetConfig+0xa4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC4_SetConfig+0x68>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <TIM_OC4_SetConfig+0xa8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d109      	bne.n	8005df0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	019b      	lsls	r3, r3, #6
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40010000 	.word	0x40010000
 8005e1c:	40010400 	.word	0x40010400

08005e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 030a 	bic.w	r3, r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0210 	bic.w	r2, r3, #16
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f043 0307 	orr.w	r3, r3, #7
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	021a      	lsls	r2, r3, #8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	609a      	str	r2, [r3, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	2201      	movs	r2, #1
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1a      	ldr	r2, [r3, #32]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	43db      	mvns	r3, r3
 8005f76:	401a      	ands	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1a      	ldr	r2, [r3, #32]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e05a      	b.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a21      	ldr	r2, [pc, #132]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d022      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d01d      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d018      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1a      	ldr	r2, [pc, #104]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00e      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d009      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a17      	ldr	r2, [pc, #92]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d004      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d10c      	bne.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4313      	orrs	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40010000 	.word	0x40010000
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800
 8006088:	40000c00 	.word	0x40000c00
 800608c:	40010400 	.word	0x40010400
 8006090:	40014000 	.word	0x40014000
 8006094:	40001800 	.word	0x40001800

08006098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e03f      	b.n	800612a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fc ff6a 	bl	8002f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fc2d 	bl	800693c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b20      	cmp	r3, #32
 800614c:	d153      	bne.n	80061f6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_UART_Transmit_DMA+0x26>
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e04c      	b.n	80061f8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_UART_Transmit_DMA+0x38>
 8006168:	2302      	movs	r3, #2
 800616a:	e045      	b.n	80061f8 <HAL_UART_Transmit_DMA+0xc4>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	88fa      	ldrh	r2, [r7, #6]
 800617e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2221      	movs	r2, #33	; 0x21
 8006190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <HAL_UART_Transmit_DMA+0xcc>)
 800619a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	4a18      	ldr	r2, [pc, #96]	; (8006204 <HAL_UART_Transmit_DMA+0xd0>)
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	4a17      	ldr	r2, [pc, #92]	; (8006208 <HAL_UART_Transmit_DMA+0xd4>)
 80061aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	2200      	movs	r2, #0
 80061b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3304      	adds	r3, #4
 80061c8:	461a      	mov	r2, r3
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	f7fd fe92 	bl	8003ef4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061f0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	08006549 	.word	0x08006549
 8006204:	0800659b 	.word	0x0800659b
 8006208:	0800663b 	.word	0x0800663b

0800620c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b20      	cmp	r3, #32
 8006224:	d166      	bne.n	80062f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_Receive_DMA+0x26>
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e05f      	b.n	80062f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_UART_Receive_DMA+0x38>
 8006240:	2302      	movs	r3, #2
 8006242:	e058      	b.n	80062f6 <HAL_UART_Receive_DMA+0xea>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2222      	movs	r2, #34	; 0x22
 8006262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	4a25      	ldr	r2, [pc, #148]	; (8006300 <HAL_UART_Receive_DMA+0xf4>)
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	4a24      	ldr	r2, [pc, #144]	; (8006304 <HAL_UART_Receive_DMA+0xf8>)
 8006274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_UART_Receive_DMA+0xfc>)
 800627c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	2200      	movs	r2, #0
 8006284:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	f7fd fe29 	bl	8003ef4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80062a2:	2300      	movs	r3, #0
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	080065b7 	.word	0x080065b7
 8006304:	0800661f 	.word	0x0800661f
 8006308:	0800663b 	.word	0x0800663b

0800630c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10d      	bne.n	800635e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_UART_IRQHandler+0x52>
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa6f 	bl	800683a <UART_Receive_IT>
      return;
 800635c:	e0d1      	b.n	8006502 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80b0 	beq.w	80064c6 <HAL_UART_IRQHandler+0x1ba>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <HAL_UART_IRQHandler+0x70>
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80a5 	beq.w	80064c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_UART_IRQHandler+0x90>
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006394:	f043 0201 	orr.w	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_UART_IRQHandler+0xb0>
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	f043 0202 	orr.w	r2, r3, #2
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <HAL_UART_IRQHandler+0xd0>
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d4:	f043 0204 	orr.w	r2, r3, #4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00f      	beq.n	8006406 <HAL_UART_IRQHandler+0xfa>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <HAL_UART_IRQHandler+0xee>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	f043 0208 	orr.w	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d078      	beq.n	8006500 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <HAL_UART_IRQHandler+0x11c>
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fa09 	bl	800683a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <HAL_UART_IRQHandler+0x144>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d031      	beq.n	80064b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f952 	bl	80066fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d123      	bne.n	80064ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006472:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006480:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_UART_IRQHandler+0x1fc>)
 8006482:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	4618      	mov	r0, r3
 800648a:	f7fd fd8b 	bl	8003fa4 <HAL_DMA_Abort_IT>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d016      	beq.n	80064c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800649e:	4610      	mov	r0, r2
 80064a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	e00e      	b.n	80064c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f845 	bl	8006534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064aa:	e00a      	b.n	80064c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f841 	bl	8006534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b2:	e006      	b.n	80064c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f83d 	bl	8006534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80064c0:	e01e      	b.n	8006500 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c2:	bf00      	nop
    return;
 80064c4:	e01c      	b.n	8006500 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_UART_IRQHandler+0x1d6>
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f93f 	bl	800675e <UART_Transmit_IT>
    return;
 80064e0:	e00f      	b.n	8006502 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <HAL_UART_IRQHandler+0x1f6>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d005      	beq.n	8006502 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f987 	bl	800680a <UART_EndTransmit_IT>
    return;
 80064fc:	bf00      	nop
 80064fe:	e000      	b.n	8006502 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006500:	bf00      	nop
  }
}
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	08006737 	.word	0x08006737

0800650c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d113      	bne.n	800658c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006578:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006588:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800658a:	e002      	b.n	8006592 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7fc f98d 	bl	80028ac <HAL_UART_TxCpltCallback>
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff ffaf 	bl	800650c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d11e      	bne.n	8006610 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065e6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006606:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7fc f95d 	bl	80028d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7ff ff77 	bl	8006520 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b21      	cmp	r3, #33	; 0x21
 800666c:	d108      	bne.n	8006680 <UART_DMAError+0x46>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800667a:	68b8      	ldr	r0, [r7, #8]
 800667c:	f000 f827 	bl	80066ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b22      	cmp	r3, #34	; 0x22
 80066a0:	d108      	bne.n	80066b4 <UART_DMAError+0x7a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2200      	movs	r2, #0
 80066ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066ae:	68b8      	ldr	r0, [r7, #8]
 80066b0:	f000 f823 	bl	80066fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	f043 0210 	orr.w	r2, r3, #16
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066c0:	68b8      	ldr	r0, [r7, #8]
 80066c2:	f7ff ff37 	bl	8006534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80066e4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006710:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0201 	bic.w	r2, r2, #1
 8006720:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff feef 	bl	8006534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b21      	cmp	r3, #33	; 0x21
 8006770:	d144      	bne.n	80067fc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677a:	d11a      	bne.n	80067b2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006790:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d105      	bne.n	80067a6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	1c9a      	adds	r2, r3, #2
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	621a      	str	r2, [r3, #32]
 80067a4:	e00e      	b.n	80067c4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	621a      	str	r2, [r3, #32]
 80067b0:	e008      	b.n	80067c4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6211      	str	r1, [r2, #32]
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4619      	mov	r1, r3
 80067d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e000      	b.n	80067fe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fc f83e 	bl	80028ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b22      	cmp	r3, #34	; 0x22
 800684c:	d171      	bne.n	8006932 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d123      	bne.n	80068a0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10e      	bne.n	8006884 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	b29b      	uxth	r3, r3
 800686e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	1c9a      	adds	r2, r3, #2
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
 8006882:	e029      	b.n	80068d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	b29b      	uxth	r3, r3
 800688c:	b2db      	uxtb	r3, r3
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
 800689e:	e01b      	b.n	80068d8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6858      	ldr	r0, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	1c59      	adds	r1, r3, #1
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6291      	str	r1, [r2, #40]	; 0x28
 80068b8:	b2c2      	uxtb	r2, r0
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	e00c      	b.n	80068d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	1c58      	adds	r0, r3, #1
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	6288      	str	r0, [r1, #40]	; 0x28
 80068d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4619      	mov	r1, r3
 80068e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d120      	bne.n	800692e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0220 	bic.w	r2, r2, #32
 80068fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800690a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fb ffd3 	bl	80028d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	e002      	b.n	8006934 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800697e:	f023 030c 	bic.w	r3, r3, #12
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	430b      	orrs	r3, r1
 800698a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069aa:	f040 818b 	bne.w	8006cc4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4ac1      	ldr	r2, [pc, #772]	; (8006cb8 <UART_SetConfig+0x37c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d005      	beq.n	80069c4 <UART_SetConfig+0x88>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4abf      	ldr	r2, [pc, #764]	; (8006cbc <UART_SetConfig+0x380>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	f040 80bd 	bne.w	8006b3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069c4:	f7fe fce2 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 80069c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	461d      	mov	r5, r3
 80069ce:	f04f 0600 	mov.w	r6, #0
 80069d2:	46a8      	mov	r8, r5
 80069d4:	46b1      	mov	r9, r6
 80069d6:	eb18 0308 	adds.w	r3, r8, r8
 80069da:	eb49 0409 	adc.w	r4, r9, r9
 80069de:	4698      	mov	r8, r3
 80069e0:	46a1      	mov	r9, r4
 80069e2:	eb18 0805 	adds.w	r8, r8, r5
 80069e6:	eb49 0906 	adc.w	r9, r9, r6
 80069ea:	f04f 0100 	mov.w	r1, #0
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069fe:	4688      	mov	r8, r1
 8006a00:	4691      	mov	r9, r2
 8006a02:	eb18 0005 	adds.w	r0, r8, r5
 8006a06:	eb49 0106 	adc.w	r1, r9, r6
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	461d      	mov	r5, r3
 8006a10:	f04f 0600 	mov.w	r6, #0
 8006a14:	196b      	adds	r3, r5, r5
 8006a16:	eb46 0406 	adc.w	r4, r6, r6
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	f7f9 fbdb 	bl	80001d8 <__aeabi_uldivmod>
 8006a22:	4603      	mov	r3, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	461a      	mov	r2, r3
 8006a28:	4ba5      	ldr	r3, [pc, #660]	; (8006cc0 <UART_SetConfig+0x384>)
 8006a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	461d      	mov	r5, r3
 8006a38:	f04f 0600 	mov.w	r6, #0
 8006a3c:	46a9      	mov	r9, r5
 8006a3e:	46b2      	mov	sl, r6
 8006a40:	eb19 0309 	adds.w	r3, r9, r9
 8006a44:	eb4a 040a 	adc.w	r4, sl, sl
 8006a48:	4699      	mov	r9, r3
 8006a4a:	46a2      	mov	sl, r4
 8006a4c:	eb19 0905 	adds.w	r9, r9, r5
 8006a50:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a54:	f04f 0100 	mov.w	r1, #0
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a68:	4689      	mov	r9, r1
 8006a6a:	4692      	mov	sl, r2
 8006a6c:	eb19 0005 	adds.w	r0, r9, r5
 8006a70:	eb4a 0106 	adc.w	r1, sl, r6
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	461d      	mov	r5, r3
 8006a7a:	f04f 0600 	mov.w	r6, #0
 8006a7e:	196b      	adds	r3, r5, r5
 8006a80:	eb46 0406 	adc.w	r4, r6, r6
 8006a84:	461a      	mov	r2, r3
 8006a86:	4623      	mov	r3, r4
 8006a88:	f7f9 fba6 	bl	80001d8 <__aeabi_uldivmod>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	461a      	mov	r2, r3
 8006a92:	4b8b      	ldr	r3, [pc, #556]	; (8006cc0 <UART_SetConfig+0x384>)
 8006a94:	fba3 1302 	umull	r1, r3, r3, r2
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	2164      	movs	r1, #100	; 0x64
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	3332      	adds	r3, #50	; 0x32
 8006aa6:	4a86      	ldr	r2, [pc, #536]	; (8006cc0 <UART_SetConfig+0x384>)
 8006aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ab4:	4498      	add	r8, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	461d      	mov	r5, r3
 8006aba:	f04f 0600 	mov.w	r6, #0
 8006abe:	46a9      	mov	r9, r5
 8006ac0:	46b2      	mov	sl, r6
 8006ac2:	eb19 0309 	adds.w	r3, r9, r9
 8006ac6:	eb4a 040a 	adc.w	r4, sl, sl
 8006aca:	4699      	mov	r9, r3
 8006acc:	46a2      	mov	sl, r4
 8006ace:	eb19 0905 	adds.w	r9, r9, r5
 8006ad2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ad6:	f04f 0100 	mov.w	r1, #0
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ae2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ae6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aea:	4689      	mov	r9, r1
 8006aec:	4692      	mov	sl, r2
 8006aee:	eb19 0005 	adds.w	r0, r9, r5
 8006af2:	eb4a 0106 	adc.w	r1, sl, r6
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	461d      	mov	r5, r3
 8006afc:	f04f 0600 	mov.w	r6, #0
 8006b00:	196b      	adds	r3, r5, r5
 8006b02:	eb46 0406 	adc.w	r4, r6, r6
 8006b06:	461a      	mov	r2, r3
 8006b08:	4623      	mov	r3, r4
 8006b0a:	f7f9 fb65 	bl	80001d8 <__aeabi_uldivmod>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	461a      	mov	r2, r3
 8006b14:	4b6a      	ldr	r3, [pc, #424]	; (8006cc0 <UART_SetConfig+0x384>)
 8006b16:	fba3 1302 	umull	r1, r3, r3, r2
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	2164      	movs	r1, #100	; 0x64
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	3332      	adds	r3, #50	; 0x32
 8006b28:	4a65      	ldr	r2, [pc, #404]	; (8006cc0 <UART_SetConfig+0x384>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	f003 0207 	and.w	r2, r3, #7
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4442      	add	r2, r8
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	e26f      	b.n	800701e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b3e:	f7fe fc11 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8006b42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	461d      	mov	r5, r3
 8006b48:	f04f 0600 	mov.w	r6, #0
 8006b4c:	46a8      	mov	r8, r5
 8006b4e:	46b1      	mov	r9, r6
 8006b50:	eb18 0308 	adds.w	r3, r8, r8
 8006b54:	eb49 0409 	adc.w	r4, r9, r9
 8006b58:	4698      	mov	r8, r3
 8006b5a:	46a1      	mov	r9, r4
 8006b5c:	eb18 0805 	adds.w	r8, r8, r5
 8006b60:	eb49 0906 	adc.w	r9, r9, r6
 8006b64:	f04f 0100 	mov.w	r1, #0
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b78:	4688      	mov	r8, r1
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	eb18 0005 	adds.w	r0, r8, r5
 8006b80:	eb49 0106 	adc.w	r1, r9, r6
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	461d      	mov	r5, r3
 8006b8a:	f04f 0600 	mov.w	r6, #0
 8006b8e:	196b      	adds	r3, r5, r5
 8006b90:	eb46 0406 	adc.w	r4, r6, r6
 8006b94:	461a      	mov	r2, r3
 8006b96:	4623      	mov	r3, r4
 8006b98:	f7f9 fb1e 	bl	80001d8 <__aeabi_uldivmod>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4b47      	ldr	r3, [pc, #284]	; (8006cc0 <UART_SetConfig+0x384>)
 8006ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	461d      	mov	r5, r3
 8006bb2:	f04f 0600 	mov.w	r6, #0
 8006bb6:	46a9      	mov	r9, r5
 8006bb8:	46b2      	mov	sl, r6
 8006bba:	eb19 0309 	adds.w	r3, r9, r9
 8006bbe:	eb4a 040a 	adc.w	r4, sl, sl
 8006bc2:	4699      	mov	r9, r3
 8006bc4:	46a2      	mov	sl, r4
 8006bc6:	eb19 0905 	adds.w	r9, r9, r5
 8006bca:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bce:	f04f 0100 	mov.w	r1, #0
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006be2:	4689      	mov	r9, r1
 8006be4:	4692      	mov	sl, r2
 8006be6:	eb19 0005 	adds.w	r0, r9, r5
 8006bea:	eb4a 0106 	adc.w	r1, sl, r6
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	f04f 0600 	mov.w	r6, #0
 8006bf8:	196b      	adds	r3, r5, r5
 8006bfa:	eb46 0406 	adc.w	r4, r6, r6
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4623      	mov	r3, r4
 8006c02:	f7f9 fae9 	bl	80001d8 <__aeabi_uldivmod>
 8006c06:	4603      	mov	r3, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <UART_SetConfig+0x384>)
 8006c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	2164      	movs	r1, #100	; 0x64
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	3332      	adds	r3, #50	; 0x32
 8006c20:	4a27      	ldr	r2, [pc, #156]	; (8006cc0 <UART_SetConfig+0x384>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c2e:	4498      	add	r8, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	461d      	mov	r5, r3
 8006c34:	f04f 0600 	mov.w	r6, #0
 8006c38:	46a9      	mov	r9, r5
 8006c3a:	46b2      	mov	sl, r6
 8006c3c:	eb19 0309 	adds.w	r3, r9, r9
 8006c40:	eb4a 040a 	adc.w	r4, sl, sl
 8006c44:	4699      	mov	r9, r3
 8006c46:	46a2      	mov	sl, r4
 8006c48:	eb19 0905 	adds.w	r9, r9, r5
 8006c4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c50:	f04f 0100 	mov.w	r1, #0
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c64:	4689      	mov	r9, r1
 8006c66:	4692      	mov	sl, r2
 8006c68:	eb19 0005 	adds.w	r0, r9, r5
 8006c6c:	eb4a 0106 	adc.w	r1, sl, r6
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	461d      	mov	r5, r3
 8006c76:	f04f 0600 	mov.w	r6, #0
 8006c7a:	196b      	adds	r3, r5, r5
 8006c7c:	eb46 0406 	adc.w	r4, r6, r6
 8006c80:	461a      	mov	r2, r3
 8006c82:	4623      	mov	r3, r4
 8006c84:	f7f9 faa8 	bl	80001d8 <__aeabi_uldivmod>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <UART_SetConfig+0x384>)
 8006c90:	fba3 1302 	umull	r1, r3, r3, r2
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	2164      	movs	r1, #100	; 0x64
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	3332      	adds	r3, #50	; 0x32
 8006ca2:	4a07      	ldr	r2, [pc, #28]	; (8006cc0 <UART_SetConfig+0x384>)
 8006ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	f003 0207 	and.w	r2, r3, #7
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4442      	add	r2, r8
 8006cb4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006cb6:	e1b2      	b.n	800701e <UART_SetConfig+0x6e2>
 8006cb8:	40011000 	.word	0x40011000
 8006cbc:	40011400 	.word	0x40011400
 8006cc0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4ad7      	ldr	r2, [pc, #860]	; (8007028 <UART_SetConfig+0x6ec>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d005      	beq.n	8006cda <UART_SetConfig+0x39e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4ad6      	ldr	r2, [pc, #856]	; (800702c <UART_SetConfig+0x6f0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	f040 80d1 	bne.w	8006e7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cda:	f7fe fb57 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8006cde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	469a      	mov	sl, r3
 8006ce4:	f04f 0b00 	mov.w	fp, #0
 8006ce8:	46d0      	mov	r8, sl
 8006cea:	46d9      	mov	r9, fp
 8006cec:	eb18 0308 	adds.w	r3, r8, r8
 8006cf0:	eb49 0409 	adc.w	r4, r9, r9
 8006cf4:	4698      	mov	r8, r3
 8006cf6:	46a1      	mov	r9, r4
 8006cf8:	eb18 080a 	adds.w	r8, r8, sl
 8006cfc:	eb49 090b 	adc.w	r9, r9, fp
 8006d00:	f04f 0100 	mov.w	r1, #0
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d14:	4688      	mov	r8, r1
 8006d16:	4691      	mov	r9, r2
 8006d18:	eb1a 0508 	adds.w	r5, sl, r8
 8006d1c:	eb4b 0609 	adc.w	r6, fp, r9
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4619      	mov	r1, r3
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	f04f 0400 	mov.w	r4, #0
 8006d32:	0094      	lsls	r4, r2, #2
 8006d34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d38:	008b      	lsls	r3, r1, #2
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	4631      	mov	r1, r6
 8006d42:	f7f9 fa49 	bl	80001d8 <__aeabi_uldivmod>
 8006d46:	4603      	mov	r3, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4bb8      	ldr	r3, [pc, #736]	; (8007030 <UART_SetConfig+0x6f4>)
 8006d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	469b      	mov	fp, r3
 8006d5c:	f04f 0c00 	mov.w	ip, #0
 8006d60:	46d9      	mov	r9, fp
 8006d62:	46e2      	mov	sl, ip
 8006d64:	eb19 0309 	adds.w	r3, r9, r9
 8006d68:	eb4a 040a 	adc.w	r4, sl, sl
 8006d6c:	4699      	mov	r9, r3
 8006d6e:	46a2      	mov	sl, r4
 8006d70:	eb19 090b 	adds.w	r9, r9, fp
 8006d74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d78:	f04f 0100 	mov.w	r1, #0
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d8c:	4689      	mov	r9, r1
 8006d8e:	4692      	mov	sl, r2
 8006d90:	eb1b 0509 	adds.w	r5, fp, r9
 8006d94:	eb4c 060a 	adc.w	r6, ip, sl
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	f04f 0400 	mov.w	r4, #0
 8006daa:	0094      	lsls	r4, r2, #2
 8006dac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006db0:	008b      	lsls	r3, r1, #2
 8006db2:	461a      	mov	r2, r3
 8006db4:	4623      	mov	r3, r4
 8006db6:	4628      	mov	r0, r5
 8006db8:	4631      	mov	r1, r6
 8006dba:	f7f9 fa0d 	bl	80001d8 <__aeabi_uldivmod>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4b9a      	ldr	r3, [pc, #616]	; (8007030 <UART_SetConfig+0x6f4>)
 8006dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	2164      	movs	r1, #100	; 0x64
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	3332      	adds	r3, #50	; 0x32
 8006dd8:	4a95      	ldr	r2, [pc, #596]	; (8007030 <UART_SetConfig+0x6f4>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006de4:	4498      	add	r8, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	469b      	mov	fp, r3
 8006dea:	f04f 0c00 	mov.w	ip, #0
 8006dee:	46d9      	mov	r9, fp
 8006df0:	46e2      	mov	sl, ip
 8006df2:	eb19 0309 	adds.w	r3, r9, r9
 8006df6:	eb4a 040a 	adc.w	r4, sl, sl
 8006dfa:	4699      	mov	r9, r3
 8006dfc:	46a2      	mov	sl, r4
 8006dfe:	eb19 090b 	adds.w	r9, r9, fp
 8006e02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e06:	f04f 0100 	mov.w	r1, #0
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e1a:	4689      	mov	r9, r1
 8006e1c:	4692      	mov	sl, r2
 8006e1e:	eb1b 0509 	adds.w	r5, fp, r9
 8006e22:	eb4c 060a 	adc.w	r6, ip, sl
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	f04f 0400 	mov.w	r4, #0
 8006e38:	0094      	lsls	r4, r2, #2
 8006e3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e3e:	008b      	lsls	r3, r1, #2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4623      	mov	r3, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	4631      	mov	r1, r6
 8006e48:	f7f9 f9c6 	bl	80001d8 <__aeabi_uldivmod>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	461a      	mov	r2, r3
 8006e52:	4b77      	ldr	r3, [pc, #476]	; (8007030 <UART_SetConfig+0x6f4>)
 8006e54:	fba3 1302 	umull	r1, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	2164      	movs	r1, #100	; 0x64
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	3332      	adds	r3, #50	; 0x32
 8006e66:	4a72      	ldr	r2, [pc, #456]	; (8007030 <UART_SetConfig+0x6f4>)
 8006e68:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	f003 020f 	and.w	r2, r3, #15
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4442      	add	r2, r8
 8006e78:	609a      	str	r2, [r3, #8]
 8006e7a:	e0d0      	b.n	800701e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e7c:	f7fe fa72 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8006e80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	469a      	mov	sl, r3
 8006e86:	f04f 0b00 	mov.w	fp, #0
 8006e8a:	46d0      	mov	r8, sl
 8006e8c:	46d9      	mov	r9, fp
 8006e8e:	eb18 0308 	adds.w	r3, r8, r8
 8006e92:	eb49 0409 	adc.w	r4, r9, r9
 8006e96:	4698      	mov	r8, r3
 8006e98:	46a1      	mov	r9, r4
 8006e9a:	eb18 080a 	adds.w	r8, r8, sl
 8006e9e:	eb49 090b 	adc.w	r9, r9, fp
 8006ea2:	f04f 0100 	mov.w	r1, #0
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006eae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006eb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006eb6:	4688      	mov	r8, r1
 8006eb8:	4691      	mov	r9, r2
 8006eba:	eb1a 0508 	adds.w	r5, sl, r8
 8006ebe:	eb4b 0609 	adc.w	r6, fp, r9
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	f04f 0400 	mov.w	r4, #0
 8006ed4:	0094      	lsls	r4, r2, #2
 8006ed6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006eda:	008b      	lsls	r3, r1, #2
 8006edc:	461a      	mov	r2, r3
 8006ede:	4623      	mov	r3, r4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	f7f9 f978 	bl	80001d8 <__aeabi_uldivmod>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	461a      	mov	r2, r3
 8006eee:	4b50      	ldr	r3, [pc, #320]	; (8007030 <UART_SetConfig+0x6f4>)
 8006ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	469b      	mov	fp, r3
 8006efe:	f04f 0c00 	mov.w	ip, #0
 8006f02:	46d9      	mov	r9, fp
 8006f04:	46e2      	mov	sl, ip
 8006f06:	eb19 0309 	adds.w	r3, r9, r9
 8006f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006f0e:	4699      	mov	r9, r3
 8006f10:	46a2      	mov	sl, r4
 8006f12:	eb19 090b 	adds.w	r9, r9, fp
 8006f16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f1a:	f04f 0100 	mov.w	r1, #0
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f2e:	4689      	mov	r9, r1
 8006f30:	4692      	mov	sl, r2
 8006f32:	eb1b 0509 	adds.w	r5, fp, r9
 8006f36:	eb4c 060a 	adc.w	r6, ip, sl
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	f04f 0400 	mov.w	r4, #0
 8006f4c:	0094      	lsls	r4, r2, #2
 8006f4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f52:	008b      	lsls	r3, r1, #2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4623      	mov	r3, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	f7f9 f93c 	bl	80001d8 <__aeabi_uldivmod>
 8006f60:	4603      	mov	r3, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	461a      	mov	r2, r3
 8006f66:	4b32      	ldr	r3, [pc, #200]	; (8007030 <UART_SetConfig+0x6f4>)
 8006f68:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	2164      	movs	r1, #100	; 0x64
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	3332      	adds	r3, #50	; 0x32
 8006f7a:	4a2d      	ldr	r2, [pc, #180]	; (8007030 <UART_SetConfig+0x6f4>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f86:	4498      	add	r8, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	469b      	mov	fp, r3
 8006f8c:	f04f 0c00 	mov.w	ip, #0
 8006f90:	46d9      	mov	r9, fp
 8006f92:	46e2      	mov	sl, ip
 8006f94:	eb19 0309 	adds.w	r3, r9, r9
 8006f98:	eb4a 040a 	adc.w	r4, sl, sl
 8006f9c:	4699      	mov	r9, r3
 8006f9e:	46a2      	mov	sl, r4
 8006fa0:	eb19 090b 	adds.w	r9, r9, fp
 8006fa4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fa8:	f04f 0100 	mov.w	r1, #0
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fbc:	4689      	mov	r9, r1
 8006fbe:	4692      	mov	sl, r2
 8006fc0:	eb1b 0509 	adds.w	r5, fp, r9
 8006fc4:	eb4c 060a 	adc.w	r6, ip, sl
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	f04f 0400 	mov.w	r4, #0
 8006fda:	0094      	lsls	r4, r2, #2
 8006fdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fe0:	008b      	lsls	r3, r1, #2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4623      	mov	r3, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	4631      	mov	r1, r6
 8006fea:	f7f9 f8f5 	bl	80001d8 <__aeabi_uldivmod>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <UART_SetConfig+0x6f4>)
 8006ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	2164      	movs	r1, #100	; 0x64
 8006ffe:	fb01 f303 	mul.w	r3, r1, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	3332      	adds	r3, #50	; 0x32
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <UART_SetConfig+0x6f4>)
 800700a:	fba2 2303 	umull	r2, r3, r2, r3
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4442      	add	r2, r8
 800701a:	609a      	str	r2, [r3, #8]
}
 800701c:	e7ff      	b.n	800701e <UART_SetConfig+0x6e2>
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	40011000 	.word	0x40011000
 800702c:	40011400 	.word	0x40011400
 8007030:	51eb851f 	.word	0x51eb851f

08007034 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	0a5a      	lsrs	r2, r3, #9
 8007044:	490f      	ldr	r1, [pc, #60]	; (8007084 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007046:	fba1 1202 	umull	r1, r2, r1, r2
 800704a:	09d2      	lsrs	r2, r2, #7
 800704c:	490e      	ldr	r1, [pc, #56]	; (8007088 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800704e:	fb01 f202 	mul.w	r2, r1, r2
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	0a5b      	lsrs	r3, r3, #9
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	09db      	lsrs	r3, r3, #7
 8007064:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	441a      	add	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	00044b83 	.word	0x00044b83
 8007088:	3b9aca00 	.word	0x3b9aca00

0800708c <__cxa_pure_virtual>:
 800708c:	b508      	push	{r3, lr}
 800708e:	f000 f80d 	bl	80070ac <_ZSt9terminatev>

08007092 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007092:	b508      	push	{r3, lr}
 8007094:	4780      	blx	r0
 8007096:	f000 f80e 	bl	80070b6 <abort>
	...

0800709c <_ZSt13get_terminatev>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <_ZSt13get_terminatev+0xc>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	f3bf 8f5b 	dmb	ish
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	2000000c 	.word	0x2000000c

080070ac <_ZSt9terminatev>:
 80070ac:	b508      	push	{r3, lr}
 80070ae:	f7ff fff5 	bl	800709c <_ZSt13get_terminatev>
 80070b2:	f7ff ffee 	bl	8007092 <_ZN10__cxxabiv111__terminateEPFvvE>

080070b6 <abort>:
 80070b6:	b508      	push	{r3, lr}
 80070b8:	2006      	movs	r0, #6
 80070ba:	f000 f871 	bl	80071a0 <raise>
 80070be:	2001      	movs	r0, #1
 80070c0:	f7fc f8e0 	bl	8003284 <_exit>

080070c4 <__errno>:
 80070c4:	4b01      	ldr	r3, [pc, #4]	; (80070cc <__errno+0x8>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000010 	.word	0x20000010

080070d0 <__libc_init_array>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4e0d      	ldr	r6, [pc, #52]	; (8007108 <__libc_init_array+0x38>)
 80070d4:	4c0d      	ldr	r4, [pc, #52]	; (800710c <__libc_init_array+0x3c>)
 80070d6:	1ba4      	subs	r4, r4, r6
 80070d8:	10a4      	asrs	r4, r4, #2
 80070da:	2500      	movs	r5, #0
 80070dc:	42a5      	cmp	r5, r4
 80070de:	d109      	bne.n	80070f4 <__libc_init_array+0x24>
 80070e0:	4e0b      	ldr	r6, [pc, #44]	; (8007110 <__libc_init_array+0x40>)
 80070e2:	4c0c      	ldr	r4, [pc, #48]	; (8007114 <__libc_init_array+0x44>)
 80070e4:	f000 f960 	bl	80073a8 <_init>
 80070e8:	1ba4      	subs	r4, r4, r6
 80070ea:	10a4      	asrs	r4, r4, #2
 80070ec:	2500      	movs	r5, #0
 80070ee:	42a5      	cmp	r5, r4
 80070f0:	d105      	bne.n	80070fe <__libc_init_array+0x2e>
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070f8:	4798      	blx	r3
 80070fa:	3501      	adds	r5, #1
 80070fc:	e7ee      	b.n	80070dc <__libc_init_array+0xc>
 80070fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007102:	4798      	blx	r3
 8007104:	3501      	adds	r5, #1
 8007106:	e7f2      	b.n	80070ee <__libc_init_array+0x1e>
 8007108:	08007d3c 	.word	0x08007d3c
 800710c:	08007d3c 	.word	0x08007d3c
 8007110:	08007d3c 	.word	0x08007d3c
 8007114:	08007d50 	.word	0x08007d50

08007118 <memcpy>:
 8007118:	b510      	push	{r4, lr}
 800711a:	1e43      	subs	r3, r0, #1
 800711c:	440a      	add	r2, r1
 800711e:	4291      	cmp	r1, r2
 8007120:	d100      	bne.n	8007124 <memcpy+0xc>
 8007122:	bd10      	pop	{r4, pc}
 8007124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800712c:	e7f7      	b.n	800711e <memcpy+0x6>

0800712e <memset>:
 800712e:	4402      	add	r2, r0
 8007130:	4603      	mov	r3, r0
 8007132:	4293      	cmp	r3, r2
 8007134:	d100      	bne.n	8007138 <memset+0xa>
 8007136:	4770      	bx	lr
 8007138:	f803 1b01 	strb.w	r1, [r3], #1
 800713c:	e7f9      	b.n	8007132 <memset+0x4>
	...

08007140 <realloc>:
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <realloc+0xc>)
 8007142:	460a      	mov	r2, r1
 8007144:	4601      	mov	r1, r0
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	f000 b8a0 	b.w	800728c <_realloc_r>
 800714c:	20000010 	.word	0x20000010

08007150 <_raise_r>:
 8007150:	291f      	cmp	r1, #31
 8007152:	b538      	push	{r3, r4, r5, lr}
 8007154:	4604      	mov	r4, r0
 8007156:	460d      	mov	r5, r1
 8007158:	d904      	bls.n	8007164 <_raise_r+0x14>
 800715a:	2316      	movs	r3, #22
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007166:	b112      	cbz	r2, 800716e <_raise_r+0x1e>
 8007168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800716c:	b94b      	cbnz	r3, 8007182 <_raise_r+0x32>
 800716e:	4620      	mov	r0, r4
 8007170:	f000 f830 	bl	80071d4 <_getpid_r>
 8007174:	462a      	mov	r2, r5
 8007176:	4601      	mov	r1, r0
 8007178:	4620      	mov	r0, r4
 800717a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800717e:	f000 b817 	b.w	80071b0 <_kill_r>
 8007182:	2b01      	cmp	r3, #1
 8007184:	d00a      	beq.n	800719c <_raise_r+0x4c>
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	d103      	bne.n	8007192 <_raise_r+0x42>
 800718a:	2316      	movs	r3, #22
 800718c:	6003      	str	r3, [r0, #0]
 800718e:	2001      	movs	r0, #1
 8007190:	e7e7      	b.n	8007162 <_raise_r+0x12>
 8007192:	2400      	movs	r4, #0
 8007194:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007198:	4628      	mov	r0, r5
 800719a:	4798      	blx	r3
 800719c:	2000      	movs	r0, #0
 800719e:	e7e0      	b.n	8007162 <_raise_r+0x12>

080071a0 <raise>:
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <raise+0xc>)
 80071a2:	4601      	mov	r1, r0
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	f7ff bfd3 	b.w	8007150 <_raise_r>
 80071aa:	bf00      	nop
 80071ac:	20000010 	.word	0x20000010

080071b0 <_kill_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4c07      	ldr	r4, [pc, #28]	; (80071d0 <_kill_r+0x20>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4605      	mov	r5, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	f7fc f851 	bl	8003264 <_kill>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	d102      	bne.n	80071cc <_kill_r+0x1c>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	b103      	cbz	r3, 80071cc <_kill_r+0x1c>
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	bf00      	nop
 80071d0:	20002b50 	.word	0x20002b50

080071d4 <_getpid_r>:
 80071d4:	f7fc b83e 	b.w	8003254 <_getpid>

080071d8 <_malloc_r>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	1ccd      	adds	r5, r1, #3
 80071dc:	f025 0503 	bic.w	r5, r5, #3
 80071e0:	3508      	adds	r5, #8
 80071e2:	2d0c      	cmp	r5, #12
 80071e4:	bf38      	it	cc
 80071e6:	250c      	movcc	r5, #12
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	4606      	mov	r6, r0
 80071ec:	db01      	blt.n	80071f2 <_malloc_r+0x1a>
 80071ee:	42a9      	cmp	r1, r5
 80071f0:	d903      	bls.n	80071fa <_malloc_r+0x22>
 80071f2:	230c      	movs	r3, #12
 80071f4:	6033      	str	r3, [r6, #0]
 80071f6:	2000      	movs	r0, #0
 80071f8:	bd70      	pop	{r4, r5, r6, pc}
 80071fa:	f000 f87d 	bl	80072f8 <__malloc_lock>
 80071fe:	4a21      	ldr	r2, [pc, #132]	; (8007284 <_malloc_r+0xac>)
 8007200:	6814      	ldr	r4, [r2, #0]
 8007202:	4621      	mov	r1, r4
 8007204:	b991      	cbnz	r1, 800722c <_malloc_r+0x54>
 8007206:	4c20      	ldr	r4, [pc, #128]	; (8007288 <_malloc_r+0xb0>)
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	b91b      	cbnz	r3, 8007214 <_malloc_r+0x3c>
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f863 	bl	80072d8 <_sbrk_r>
 8007212:	6020      	str	r0, [r4, #0]
 8007214:	4629      	mov	r1, r5
 8007216:	4630      	mov	r0, r6
 8007218:	f000 f85e 	bl	80072d8 <_sbrk_r>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d124      	bne.n	800726a <_malloc_r+0x92>
 8007220:	230c      	movs	r3, #12
 8007222:	6033      	str	r3, [r6, #0]
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f868 	bl	80072fa <__malloc_unlock>
 800722a:	e7e4      	b.n	80071f6 <_malloc_r+0x1e>
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	1b5b      	subs	r3, r3, r5
 8007230:	d418      	bmi.n	8007264 <_malloc_r+0x8c>
 8007232:	2b0b      	cmp	r3, #11
 8007234:	d90f      	bls.n	8007256 <_malloc_r+0x7e>
 8007236:	600b      	str	r3, [r1, #0]
 8007238:	50cd      	str	r5, [r1, r3]
 800723a:	18cc      	adds	r4, r1, r3
 800723c:	4630      	mov	r0, r6
 800723e:	f000 f85c 	bl	80072fa <__malloc_unlock>
 8007242:	f104 000b 	add.w	r0, r4, #11
 8007246:	1d23      	adds	r3, r4, #4
 8007248:	f020 0007 	bic.w	r0, r0, #7
 800724c:	1ac3      	subs	r3, r0, r3
 800724e:	d0d3      	beq.n	80071f8 <_malloc_r+0x20>
 8007250:	425a      	negs	r2, r3
 8007252:	50e2      	str	r2, [r4, r3]
 8007254:	e7d0      	b.n	80071f8 <_malloc_r+0x20>
 8007256:	428c      	cmp	r4, r1
 8007258:	684b      	ldr	r3, [r1, #4]
 800725a:	bf16      	itet	ne
 800725c:	6063      	strne	r3, [r4, #4]
 800725e:	6013      	streq	r3, [r2, #0]
 8007260:	460c      	movne	r4, r1
 8007262:	e7eb      	b.n	800723c <_malloc_r+0x64>
 8007264:	460c      	mov	r4, r1
 8007266:	6849      	ldr	r1, [r1, #4]
 8007268:	e7cc      	b.n	8007204 <_malloc_r+0x2c>
 800726a:	1cc4      	adds	r4, r0, #3
 800726c:	f024 0403 	bic.w	r4, r4, #3
 8007270:	42a0      	cmp	r0, r4
 8007272:	d005      	beq.n	8007280 <_malloc_r+0xa8>
 8007274:	1a21      	subs	r1, r4, r0
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f82e 	bl	80072d8 <_sbrk_r>
 800727c:	3001      	adds	r0, #1
 800727e:	d0cf      	beq.n	8007220 <_malloc_r+0x48>
 8007280:	6025      	str	r5, [r4, #0]
 8007282:	e7db      	b.n	800723c <_malloc_r+0x64>
 8007284:	20002b44 	.word	0x20002b44
 8007288:	20002b48 	.word	0x20002b48

0800728c <_realloc_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	4607      	mov	r7, r0
 8007290:	4614      	mov	r4, r2
 8007292:	460e      	mov	r6, r1
 8007294:	b921      	cbnz	r1, 80072a0 <_realloc_r+0x14>
 8007296:	4611      	mov	r1, r2
 8007298:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800729c:	f7ff bf9c 	b.w	80071d8 <_malloc_r>
 80072a0:	b922      	cbnz	r2, 80072ac <_realloc_r+0x20>
 80072a2:	f000 f82b 	bl	80072fc <_free_r>
 80072a6:	4625      	mov	r5, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ac:	f000 f874 	bl	8007398 <_malloc_usable_size_r>
 80072b0:	42a0      	cmp	r0, r4
 80072b2:	d20f      	bcs.n	80072d4 <_realloc_r+0x48>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4638      	mov	r0, r7
 80072b8:	f7ff ff8e 	bl	80071d8 <_malloc_r>
 80072bc:	4605      	mov	r5, r0
 80072be:	2800      	cmp	r0, #0
 80072c0:	d0f2      	beq.n	80072a8 <_realloc_r+0x1c>
 80072c2:	4631      	mov	r1, r6
 80072c4:	4622      	mov	r2, r4
 80072c6:	f7ff ff27 	bl	8007118 <memcpy>
 80072ca:	4631      	mov	r1, r6
 80072cc:	4638      	mov	r0, r7
 80072ce:	f000 f815 	bl	80072fc <_free_r>
 80072d2:	e7e9      	b.n	80072a8 <_realloc_r+0x1c>
 80072d4:	4635      	mov	r5, r6
 80072d6:	e7e7      	b.n	80072a8 <_realloc_r+0x1c>

080072d8 <_sbrk_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4c06      	ldr	r4, [pc, #24]	; (80072f4 <_sbrk_r+0x1c>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4605      	mov	r5, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	f7fb ffd8 	bl	8003298 <_sbrk>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_sbrk_r+0x1a>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_sbrk_r+0x1a>
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	20002b50 	.word	0x20002b50

080072f8 <__malloc_lock>:
 80072f8:	4770      	bx	lr

080072fa <__malloc_unlock>:
 80072fa:	4770      	bx	lr

080072fc <_free_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4605      	mov	r5, r0
 8007300:	2900      	cmp	r1, #0
 8007302:	d045      	beq.n	8007390 <_free_r+0x94>
 8007304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007308:	1f0c      	subs	r4, r1, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfb8      	it	lt
 800730e:	18e4      	addlt	r4, r4, r3
 8007310:	f7ff fff2 	bl	80072f8 <__malloc_lock>
 8007314:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <_free_r+0x98>)
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	4610      	mov	r0, r2
 800731a:	b933      	cbnz	r3, 800732a <_free_r+0x2e>
 800731c:	6063      	str	r3, [r4, #4]
 800731e:	6014      	str	r4, [r2, #0]
 8007320:	4628      	mov	r0, r5
 8007322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007326:	f7ff bfe8 	b.w	80072fa <__malloc_unlock>
 800732a:	42a3      	cmp	r3, r4
 800732c:	d90c      	bls.n	8007348 <_free_r+0x4c>
 800732e:	6821      	ldr	r1, [r4, #0]
 8007330:	1862      	adds	r2, r4, r1
 8007332:	4293      	cmp	r3, r2
 8007334:	bf04      	itt	eq
 8007336:	681a      	ldreq	r2, [r3, #0]
 8007338:	685b      	ldreq	r3, [r3, #4]
 800733a:	6063      	str	r3, [r4, #4]
 800733c:	bf04      	itt	eq
 800733e:	1852      	addeq	r2, r2, r1
 8007340:	6022      	streq	r2, [r4, #0]
 8007342:	6004      	str	r4, [r0, #0]
 8007344:	e7ec      	b.n	8007320 <_free_r+0x24>
 8007346:	4613      	mov	r3, r2
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	b10a      	cbz	r2, 8007350 <_free_r+0x54>
 800734c:	42a2      	cmp	r2, r4
 800734e:	d9fa      	bls.n	8007346 <_free_r+0x4a>
 8007350:	6819      	ldr	r1, [r3, #0]
 8007352:	1858      	adds	r0, r3, r1
 8007354:	42a0      	cmp	r0, r4
 8007356:	d10b      	bne.n	8007370 <_free_r+0x74>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	4401      	add	r1, r0
 800735c:	1858      	adds	r0, r3, r1
 800735e:	4282      	cmp	r2, r0
 8007360:	6019      	str	r1, [r3, #0]
 8007362:	d1dd      	bne.n	8007320 <_free_r+0x24>
 8007364:	6810      	ldr	r0, [r2, #0]
 8007366:	6852      	ldr	r2, [r2, #4]
 8007368:	605a      	str	r2, [r3, #4]
 800736a:	4401      	add	r1, r0
 800736c:	6019      	str	r1, [r3, #0]
 800736e:	e7d7      	b.n	8007320 <_free_r+0x24>
 8007370:	d902      	bls.n	8007378 <_free_r+0x7c>
 8007372:	230c      	movs	r3, #12
 8007374:	602b      	str	r3, [r5, #0]
 8007376:	e7d3      	b.n	8007320 <_free_r+0x24>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	1821      	adds	r1, r4, r0
 800737c:	428a      	cmp	r2, r1
 800737e:	bf04      	itt	eq
 8007380:	6811      	ldreq	r1, [r2, #0]
 8007382:	6852      	ldreq	r2, [r2, #4]
 8007384:	6062      	str	r2, [r4, #4]
 8007386:	bf04      	itt	eq
 8007388:	1809      	addeq	r1, r1, r0
 800738a:	6021      	streq	r1, [r4, #0]
 800738c:	605c      	str	r4, [r3, #4]
 800738e:	e7c7      	b.n	8007320 <_free_r+0x24>
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	bf00      	nop
 8007394:	20002b44 	.word	0x20002b44

08007398 <_malloc_usable_size_r>:
 8007398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739c:	1f18      	subs	r0, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfbc      	itt	lt
 80073a2:	580b      	ldrlt	r3, [r1, r0]
 80073a4:	18c0      	addlt	r0, r0, r3
 80073a6:	4770      	bx	lr

080073a8 <_init>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr

080073b4 <_fini>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr
