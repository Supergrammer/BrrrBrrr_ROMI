
brbr_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d784  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  0800d90c  0800d90c  0001d90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a8  0800e8a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b0  0800e8b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800e8b0  0800e8b0  0001e8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8d0  0800e8d0  0001e8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800e8d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002560  20000080  0800e950  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200025e0  0800e950  000225e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031dce  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000513f  00000000  00000000  00051e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ad8  00000000  00000000  00056fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019b8  00000000  00000000  00058a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025837  00000000  00000000  0005a450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bf1  00000000  00000000  0007fc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d484d  00000000  00000000  00094878  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001690c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c1c  00000000  00000000  00169140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d8f4 	.word	0x0800d8f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800d8f4 	.word	0x0800d8f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b972 	b.w	8000d10 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4688      	mov	r8, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14b      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4615      	mov	r5, r2
 8000a56:	d967      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0720 	rsb	r7, r2, #32
 8000a62:	fa01 f302 	lsl.w	r3, r1, r2
 8000a66:	fa20 f707 	lsr.w	r7, r0, r7
 8000a6a:	4095      	lsls	r5, r2
 8000a6c:	ea47 0803 	orr.w	r8, r7, r3
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a7c:	fa1f fc85 	uxth.w	ip, r5
 8000a80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a88:	fb07 f10c 	mul.w	r1, r7, ip
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18eb      	adds	r3, r5, r3
 8000a92:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a96:	f080 811b 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8118 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000aa0:	3f02      	subs	r7, #2
 8000aa2:	442b      	add	r3, r5
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab8:	45a4      	cmp	ip, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	192c      	adds	r4, r5, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8107 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	f240 8104 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000acc:	3802      	subs	r0, #2
 8000ace:	442c      	add	r4, r5
 8000ad0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ad4:	eba4 040c 	sub.w	r4, r4, ip
 8000ad8:	2700      	movs	r7, #0
 8000ada:	b11e      	cbz	r6, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0xbe>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80eb 	beq.w	8000cca <__udivmoddi4+0x286>
 8000af4:	2700      	movs	r7, #0
 8000af6:	e9c6 0100 	strd	r0, r1, [r6]
 8000afa:	4638      	mov	r0, r7
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f783 	clz	r7, r3
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d147      	bne.n	8000b9a <__udivmoddi4+0x156>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0xd0>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80fa 	bhi.w	8000d08 <__udivmoddi4+0x2c4>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d0e0      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b22:	e9c6 4800 	strd	r4, r8, [r6]
 8000b26:	e7dd      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b28:	b902      	cbnz	r2, 8000b2c <__udivmoddi4+0xe8>
 8000b2a:	deff      	udf	#255	; 0xff
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	f040 808f 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b36:	1b49      	subs	r1, r1, r5
 8000b38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3c:	fa1f f885 	uxth.w	r8, r5
 8000b40:	2701      	movs	r7, #1
 8000b42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b46:	0c23      	lsrs	r3, r4, #16
 8000b48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb08 f10c 	mul.w	r1, r8, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b66:	4684      	mov	ip, r0
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	b2a3      	uxth	r3, r4
 8000b6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b78:	fb08 f800 	mul.w	r8, r8, r0
 8000b7c:	45a0      	cmp	r8, r4
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x14c>
 8000b80:	192c      	adds	r4, r5, r4
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x14a>
 8000b88:	45a0      	cmp	r8, r4
 8000b8a:	f200 80b6 	bhi.w	8000cfa <__udivmoddi4+0x2b6>
 8000b8e:	4618      	mov	r0, r3
 8000b90:	eba4 0408 	sub.w	r4, r4, r8
 8000b94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b98:	e79f      	b.n	8000ada <__udivmoddi4+0x96>
 8000b9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9e:	40bb      	lsls	r3, r7
 8000ba0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ba4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb8:	4325      	orrs	r5, r4
 8000bba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bbe:	0c2c      	lsrs	r4, r5, #16
 8000bc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bc4:	fa1f fa8e 	uxth.w	sl, lr
 8000bc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bcc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000be0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be4:	f080 8087 	bcs.w	8000cf6 <__udivmoddi4+0x2b2>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f240 8084 	bls.w	8000cf6 <__udivmoddi4+0x2b2>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4473      	add	r3, lr
 8000bf4:	1b1b      	subs	r3, r3, r4
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c08:	45a2      	cmp	sl, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c14:	d26b      	bcs.n	8000cee <__udivmoddi4+0x2aa>
 8000c16:	45a2      	cmp	sl, r4
 8000c18:	d969      	bls.n	8000cee <__udivmoddi4+0x2aa>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4474      	add	r4, lr
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	fba0 8902 	umull	r8, r9, r0, r2
 8000c26:	eba4 040a 	sub.w	r4, r4, sl
 8000c2a:	454c      	cmp	r4, r9
 8000c2c:	46c2      	mov	sl, r8
 8000c2e:	464b      	mov	r3, r9
 8000c30:	d354      	bcc.n	8000cdc <__udivmoddi4+0x298>
 8000c32:	d051      	beq.n	8000cd8 <__udivmoddi4+0x294>
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d069      	beq.n	8000d0c <__udivmoddi4+0x2c8>
 8000c38:	ebb1 050a 	subs.w	r5, r1, sl
 8000c3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c44:	40fd      	lsrs	r5, r7
 8000c46:	40fc      	lsrs	r4, r7
 8000c48:	ea4c 0505 	orr.w	r5, ip, r5
 8000c4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c50:	2700      	movs	r7, #0
 8000c52:	e747      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000c54:	f1c2 0320 	rsb	r3, r2, #32
 8000c58:	fa20 f703 	lsr.w	r7, r0, r3
 8000c5c:	4095      	lsls	r5, r2
 8000c5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c62:	fa21 f303 	lsr.w	r3, r1, r3
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	4338      	orrs	r0, r7
 8000c6c:	0c01      	lsrs	r1, r0, #16
 8000c6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c72:	fa1f f885 	uxth.w	r8, r5
 8000c76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb07 f308 	mul.w	r3, r7, r8
 8000c82:	428b      	cmp	r3, r1
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x256>
 8000c8a:	1869      	adds	r1, r5, r1
 8000c8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c90:	d22f      	bcs.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d92d      	bls.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c96:	3f02      	subs	r7, #2
 8000c98:	4429      	add	r1, r5
 8000c9a:	1acb      	subs	r3, r1, r3
 8000c9c:	b281      	uxth	r1, r0
 8000c9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000caa:	fb00 f308 	mul.w	r3, r0, r8
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x27e>
 8000cb2:	1869      	adds	r1, r5, r1
 8000cb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb8:	d217      	bcs.n	8000cea <__udivmoddi4+0x2a6>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d915      	bls.n	8000cea <__udivmoddi4+0x2a6>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4429      	add	r1, r5
 8000cc2:	1ac9      	subs	r1, r1, r3
 8000cc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc8:	e73b      	b.n	8000b42 <__udivmoddi4+0xfe>
 8000cca:	4637      	mov	r7, r6
 8000ccc:	4630      	mov	r0, r6
 8000cce:	e709      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000cd0:	4607      	mov	r7, r0
 8000cd2:	e6e7      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	e6fb      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd8:	4541      	cmp	r1, r8
 8000cda:	d2ab      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000cdc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce0:	eb69 020e 	sbc.w	r2, r9, lr
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	e7a4      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cea:	4660      	mov	r0, ip
 8000cec:	e7e9      	b.n	8000cc2 <__udivmoddi4+0x27e>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	e795      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf2:	4667      	mov	r7, ip
 8000cf4:	e7d1      	b.n	8000c9a <__udivmoddi4+0x256>
 8000cf6:	4681      	mov	r9, r0
 8000cf8:	e77c      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	442c      	add	r4, r5
 8000cfe:	e747      	b.n	8000b90 <__udivmoddi4+0x14c>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	442b      	add	r3, r5
 8000d06:	e72f      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d08:	4638      	mov	r0, r7
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xda>
 8000d0c:	4637      	mov	r7, r6
 8000d0e:	e6e9      	b.n	8000ae4 <__udivmoddi4+0xa0>

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <_ZN3ros3MsgC1Ev+0x1c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	0800e6b4 	.word	0x0800e6b4

08000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_ZN13STM32Hardware4timeEv>:
      }

      flush();
    }

    unsigned long time(){ return HAL_GetTick();; }
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	f009 f82f 	bl	8009df0 <HAL_GetTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
      data("")
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffc6 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8000dac:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_ZN8std_msgs6StringC1Ev+0x28>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8000db6:	605a      	str	r2, [r3, #4]
    {
    }
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	0800e69c 	.word	0x0800e69c
 8000dc8:	0800d90c 	.word	0x0800d90c

08000dcc <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9f2 	bl	80001c8 <strlen>
 8000de4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 feca 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3304      	adds	r3, #4
 8000df8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	18d0      	adds	r0, r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	4619      	mov	r1, r3
 8000e08:	f00c fc2c 	bl	800d664 <memcpy>
      offset += length_data;
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	4413      	add	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e14:	68fb      	ldr	r3, [r7, #12]
    }
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	441a      	add	r2, r3
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fec3 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	3304      	adds	r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d20c      	bcs.n	8000e6e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	441a      	add	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	440b      	add	r3, r1
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e7ec      	b.n	8000e48 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	3b01      	subs	r3, #1
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	4413      	add	r3, r2
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	441a      	add	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
     return offset;
 8000e92:	693b      	ldr	r3, [r7, #16]
    }
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0800d910 	.word	0x0800d910

08000eb8 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	0800d920 	.word	0x0800d920

08000ed4 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
      data(0)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff2a 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	f04f 0400 	mov.w	r4, #0
 8000ef4:	e9c2 3402 	strd	r3, r4, [r2, #8]
    {
    }
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	0800e684 	.word	0x0800e684

08000f08 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f08:	b490      	push	{r4, r7}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000f1c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8000f20:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	440a      	add	r2, r1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8000f2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	f04f 0400 	mov.w	r4, #0
 8000f3a:	0a0b      	lsrs	r3, r1, #8
 8000f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f40:	0a14      	lsrs	r4, r2, #8
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	3201      	adds	r2, #1
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	440a      	add	r2, r1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8000f4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	f04f 0400 	mov.w	r4, #0
 8000f5a:	0c0b      	lsrs	r3, r1, #16
 8000f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f60:	0c14      	lsrs	r4, r2, #16
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	3202      	adds	r2, #2
 8000f66:	6839      	ldr	r1, [r7, #0]
 8000f68:	440a      	add	r2, r1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8000f6e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	f04f 0400 	mov.w	r4, #0
 8000f7a:	0e0b      	lsrs	r3, r1, #24
 8000f7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f80:	0e14      	lsrs	r4, r2, #24
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	3203      	adds	r2, #3
 8000f86:	6839      	ldr	r1, [r7, #0]
 8000f88:	440a      	add	r2, r1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8000f8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	f04f 0400 	mov.w	r4, #0
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	3204      	adds	r2, #4
 8000fa2:	6839      	ldr	r1, [r7, #0]
 8000fa4:	440a      	add	r2, r1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8000faa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	f04f 0400 	mov.w	r4, #0
 8000fb6:	0a13      	lsrs	r3, r2, #8
 8000fb8:	2400      	movs	r4, #0
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	3205      	adds	r2, #5
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	440a      	add	r2, r1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8000fc6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	f04f 0400 	mov.w	r4, #0
 8000fd2:	0c13      	lsrs	r3, r2, #16
 8000fd4:	2400      	movs	r4, #0
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	3206      	adds	r2, #6
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	440a      	add	r2, r1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8000fe2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	f04f 0400 	mov.w	r4, #0
 8000fee:	0e13      	lsrs	r3, r2, #24
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	3207      	adds	r2, #7
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	440a      	add	r2, r1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->data);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3308      	adds	r3, #8
 8001002:	617b      	str	r3, [r7, #20]
      return offset;
 8001004:	697b      	ldr	r3, [r7, #20]
    }
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bc90      	pop	{r4, r7}
 800100e:	4770      	bx	lr

08001010 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001010:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8001014:	b087      	sub	sp, #28
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	f04f 0400 	mov.w	r4, #0
 8001028:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800102c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	4403      	add	r3, r0
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	fa5f f883 	uxtb.w	r8, r3
 800103c:	f04f 0900 	mov.w	r9, #0
 8001040:	ea48 0301 	orr.w	r3, r8, r1
 8001044:	ea49 0402 	orr.w	r4, r9, r2
 8001048:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800104c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0b00 	mov.w	fp, #0
 8001064:	f04f 0c00 	mov.w	ip, #0
 8001068:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800106c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001070:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001074:	ea4b 0308 	orr.w	r3, fp, r8
 8001078:	ea4c 0409 	orr.w	r4, ip, r9
 800107c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001080:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3302      	adds	r3, #2
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2d9      	uxtb	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f04f 0b00 	mov.w	fp, #0
 8001098:	f04f 0c00 	mov.w	ip, #0
 800109c:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80010a0:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80010a4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80010a8:	ea4b 0308 	orr.w	r3, fp, r8
 80010ac:	ea4c 0409 	orr.w	r4, ip, r9
 80010b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3303      	adds	r3, #3
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	4403      	add	r3, r0
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f04f 0400 	mov.w	r4, #0
 80010c8:	0a1e      	lsrs	r6, r3, #8
 80010ca:	061d      	lsls	r5, r3, #24
 80010cc:	ea41 0305 	orr.w	r3, r1, r5
 80010d0:	ea42 0406 	orr.w	r4, r2, r6
 80010d4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80010d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3304      	adds	r3, #4
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	4403      	add	r3, r0
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2dd      	uxtb	r5, r3
 80010e8:	f04f 0600 	mov.w	r6, #0
 80010ec:	f04f 0800 	mov.w	r8, #0
 80010f0:	f04f 0900 	mov.w	r9, #0
 80010f4:	46a9      	mov	r9, r5
 80010f6:	f04f 0800 	mov.w	r8, #0
 80010fa:	ea48 0301 	orr.w	r3, r8, r1
 80010fe:	ea49 0402 	orr.w	r4, r9, r2
 8001102:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001106:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3305      	adds	r3, #5
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	4403      	add	r3, r0
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2dd      	uxtb	r5, r3
 8001116:	f04f 0600 	mov.w	r6, #0
 800111a:	f04f 0800 	mov.w	r8, #0
 800111e:	f04f 0900 	mov.w	r9, #0
 8001122:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8001126:	f04f 0800 	mov.w	r8, #0
 800112a:	ea48 0301 	orr.w	r3, r8, r1
 800112e:	ea49 0402 	orr.w	r4, r9, r2
 8001132:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001136:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3306      	adds	r3, #6
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	4403      	add	r3, r0
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2dd      	uxtb	r5, r3
 8001146:	f04f 0600 	mov.w	r6, #0
 800114a:	f04f 0800 	mov.w	r8, #0
 800114e:	f04f 0900 	mov.w	r9, #0
 8001152:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8001156:	f04f 0800 	mov.w	r8, #0
 800115a:	ea48 0301 	orr.w	r3, r8, r1
 800115e:	ea49 0402 	orr.w	r4, r9, r2
 8001162:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001166:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3307      	adds	r3, #7
 800116e:	6838      	ldr	r0, [r7, #0]
 8001170:	4403      	add	r3, r0
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2dd      	uxtb	r5, r3
 8001176:	f04f 0600 	mov.w	r6, #0
 800117a:	f04f 0800 	mov.w	r8, #0
 800117e:	f04f 0900 	mov.w	r9, #0
 8001182:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8001186:	f04f 0800 	mov.w	r8, #0
 800118a:	ea48 0301 	orr.w	r3, r8, r1
 800118e:	ea49 0402 	orr.w	r4, r9, r2
 8001192:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->data = u_data.real;
 8001196:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->data);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3308      	adds	r3, #8
 80011a4:	617b      	str	r3, [r7, #20]
     return offset;
 80011a6:	697b      	ldr	r3, [r7, #20]
    }
 80011a8:	4618      	mov	r0, r3
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80011b2:	4770      	bx	lr

080011b4 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	0800d944 	.word	0x0800d944

080011d0 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	0800d954 	.word	0x0800d954

080011ec <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
      data(0)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fd9e 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
    {
    }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800e66c 	.word	0x0800e66c

08001218 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	4413      	add	r3, r2
 8001234:	b2ca      	uxtb	r2, r1
 8001236:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	0a19      	lsrs	r1, r3, #8
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	b2ca      	uxtb	r2, r1
 8001246:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	0c19      	lsrs	r1, r3, #16
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3302      	adds	r3, #2
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	b2ca      	uxtb	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	0e19      	lsrs	r1, r3, #24
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3303      	adds	r3, #3
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3304      	adds	r3, #4
 800126c:	60fb      	str	r3, [r7, #12]
      return offset;
 800126e:	68fb      	ldr	r3, [r7, #12]
    }
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	440a      	add	r2, r1
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4313      	orrs	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	440b      	add	r3, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3302      	adds	r3, #2
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	440b      	add	r3, r1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	4313      	orrs	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3303      	adds	r3, #3
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	440b      	add	r3, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	061b      	lsls	r3, r3, #24
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3304      	adds	r3, #4
 80012dc:	60fb      	str	r3, [r7, #12]
     return offset;
 80012de:	68fb      	ldr	r3, [r7, #12]
    }
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	0800d978 	.word	0x0800d978

08001308 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	0800d98c 	.word	0x0800d98c

08001324 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fd02 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3308      	adds	r3, #8
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fce5 	bl	8000d14 <_ZN3ros4TimeC1Ev>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800134e:	611a      	str	r2, [r3, #16]
    {
    }
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800e654 	.word	0x0800e654
 8001360:	0800d90c 	.word	0x0800d90c

08001364 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6859      	ldr	r1, [r3, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	4413      	add	r3, r2
 800137c:	b2ca      	uxtb	r2, r1
 800137e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	0a19      	lsrs	r1, r3, #8
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	0c19      	lsrs	r1, r3, #16
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3302      	adds	r3, #2
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	b2ca      	uxtb	r2, r1
 80013a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	0e19      	lsrs	r1, r3, #24
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3303      	adds	r3, #3
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3304      	adds	r3, #4
 80013ba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6899      	ldr	r1, [r3, #8]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	0a19      	lsrs	r1, r3, #8
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3301      	adds	r3, #1
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	b2ca      	uxtb	r2, r1
 80013da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	0c19      	lsrs	r1, r3, #16
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3302      	adds	r3, #2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	0e19      	lsrs	r1, r3, #24
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3303      	adds	r3, #3
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	b2ca      	uxtb	r2, r1
 80013fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3304      	adds	r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68d9      	ldr	r1, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	b2ca      	uxtb	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a19      	lsrs	r1, r3, #8
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	0c19      	lsrs	r1, r3, #16
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3302      	adds	r3, #2
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	b2ca      	uxtb	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0e19      	lsrs	r1, r3, #24
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3303      	adds	r3, #3
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	b2ca      	uxtb	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3304      	adds	r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe feb7 	bl	80001c8 <strlen>
 800145a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fb8f 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	18d0      	adds	r0, r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4619      	mov	r1, r3
 800147e:	f00c f8f1 	bl	800d664 <memcpy>
      offset += length_frame_id;
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
      return offset;
 800148a:	68fb      	ldr	r3, [r7, #12]
    }
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3301      	adds	r3, #1
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	440b      	add	r3, r1
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3302      	adds	r3, #2
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	440b      	add	r3, r1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	041b      	lsls	r3, r3, #16
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	3303      	adds	r3, #3
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	440b      	add	r3, r1
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	3304      	adds	r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	3301      	adds	r3, #1
 800150e:	6839      	ldr	r1, [r7, #0]
 8001510:	440b      	add	r3, r1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	3302      	adds	r3, #2
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	440b      	add	r3, r1
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	3303      	adds	r3, #3
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	440b      	add	r3, r1
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	3304      	adds	r3, #4
 800154c:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	3301      	adds	r3, #1
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3302      	adds	r3, #2
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	3303      	adds	r3, #3
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	440b      	add	r3, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3304      	adds	r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	441a      	add	r2, r3
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fb07 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	3304      	adds	r3, #4
 80015ba:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d20c      	bcs.n	80015e6 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	441a      	add	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	6839      	ldr	r1, [r7, #0]
 80015d8:	440b      	add	r3, r1
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e7ec      	b.n	80015c0 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	3b01      	subs	r3, #1
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	441a      	add	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
     return offset;
 800160a:	693b      	ldr	r3, [r7, #16]
    }
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	0800d9b0 	.word	0x0800d9b0

08001630 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	0800d9c0 	.word	0x0800d9c0

0800164c <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb6e 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	f04f 0400 	mov.w	r4, #0
 800166c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	f04f 0400 	mov.w	r4, #0
 800167a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	f04f 0400 	mov.w	r4, #0
 8001696:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	0800e63c 	.word	0x0800e63c

080016a8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016a8:	b490      	push	{r4, r7}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80016bc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80016c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	440a      	add	r2, r1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80016ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	f04f 0400 	mov.w	r4, #0
 80016da:	0a0b      	lsrs	r3, r1, #8
 80016dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016e0:	0a14      	lsrs	r4, r2, #8
 80016e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e4:	3201      	adds	r2, #1
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	440a      	add	r2, r1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80016ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	f04f 0400 	mov.w	r4, #0
 80016fa:	0c0b      	lsrs	r3, r1, #16
 80016fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001700:	0c14      	lsrs	r4, r2, #16
 8001702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001704:	3202      	adds	r2, #2
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	440a      	add	r2, r1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800170e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f04f 0400 	mov.w	r4, #0
 800171a:	0e0b      	lsrs	r3, r1, #24
 800171c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001720:	0e14      	lsrs	r4, r2, #24
 8001722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001724:	3203      	adds	r2, #3
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	440a      	add	r2, r1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800172e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	f04f 0400 	mov.w	r4, #0
 800173a:	0013      	movs	r3, r2
 800173c:	2400      	movs	r4, #0
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	3204      	adds	r2, #4
 8001742:	6839      	ldr	r1, [r7, #0]
 8001744:	440a      	add	r2, r1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800174a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f04f 0400 	mov.w	r4, #0
 8001756:	0a13      	lsrs	r3, r2, #8
 8001758:	2400      	movs	r4, #0
 800175a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175c:	3205      	adds	r2, #5
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	440a      	add	r2, r1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001766:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0c13      	lsrs	r3, r2, #16
 8001774:	2400      	movs	r4, #0
 8001776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001778:	3206      	adds	r2, #6
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	440a      	add	r2, r1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001782:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	0e13      	lsrs	r3, r2, #24
 8001790:	2400      	movs	r4, #0
 8001792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001794:	3207      	adds	r2, #7
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	440a      	add	r2, r1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	3308      	adds	r3, #8
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80017aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80017ae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	440a      	add	r2, r1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80017bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	f04f 0400 	mov.w	r4, #0
 80017c8:	0a0b      	lsrs	r3, r1, #8
 80017ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017ce:	0a14      	lsrs	r4, r2, #8
 80017d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d2:	3201      	adds	r2, #1
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	440a      	add	r2, r1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80017dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	f04f 0400 	mov.w	r4, #0
 80017e8:	0c0b      	lsrs	r3, r1, #16
 80017ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017ee:	0c14      	lsrs	r4, r2, #16
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	3202      	adds	r2, #2
 80017f4:	6839      	ldr	r1, [r7, #0]
 80017f6:	440a      	add	r2, r1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80017fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	f04f 0400 	mov.w	r4, #0
 8001808:	0e0b      	lsrs	r3, r1, #24
 800180a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800180e:	0e14      	lsrs	r4, r2, #24
 8001810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001812:	3203      	adds	r2, #3
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	440a      	add	r2, r1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800181c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	f04f 0400 	mov.w	r4, #0
 8001828:	0013      	movs	r3, r2
 800182a:	2400      	movs	r4, #0
 800182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182e:	3204      	adds	r2, #4
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	440a      	add	r2, r1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001838:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	0a13      	lsrs	r3, r2, #8
 8001846:	2400      	movs	r4, #0
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	3205      	adds	r2, #5
 800184c:	6839      	ldr	r1, [r7, #0]
 800184e:	440a      	add	r2, r1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001854:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	0c13      	lsrs	r3, r2, #16
 8001862:	2400      	movs	r4, #0
 8001864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001866:	3206      	adds	r2, #6
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	440a      	add	r2, r1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001870:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	0e13      	lsrs	r3, r2, #24
 800187e:	2400      	movs	r4, #0
 8001880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001882:	3207      	adds	r2, #7
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	440a      	add	r2, r1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	3308      	adds	r3, #8
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001898:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800189c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	440a      	add	r2, r1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80018aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	f04f 0400 	mov.w	r4, #0
 80018b6:	0a0b      	lsrs	r3, r1, #8
 80018b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018bc:	0a14      	lsrs	r4, r2, #8
 80018be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c0:	3201      	adds	r2, #1
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	440a      	add	r2, r1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80018ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	f04f 0400 	mov.w	r4, #0
 80018d6:	0c0b      	lsrs	r3, r1, #16
 80018d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018dc:	0c14      	lsrs	r4, r2, #16
 80018de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e0:	3202      	adds	r2, #2
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440a      	add	r2, r1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80018ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	f04f 0400 	mov.w	r4, #0
 80018f6:	0e0b      	lsrs	r3, r1, #24
 80018f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018fc:	0e14      	lsrs	r4, r2, #24
 80018fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001900:	3203      	adds	r2, #3
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	440a      	add	r2, r1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800190a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f04f 0400 	mov.w	r4, #0
 8001916:	0013      	movs	r3, r2
 8001918:	2400      	movs	r4, #0
 800191a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191c:	3204      	adds	r2, #4
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	440a      	add	r2, r1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001926:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	0a13      	lsrs	r3, r2, #8
 8001934:	2400      	movs	r4, #0
 8001936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001938:	3205      	adds	r2, #5
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	440a      	add	r2, r1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001942:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f04f 0400 	mov.w	r4, #0
 800194e:	0c13      	lsrs	r3, r2, #16
 8001950:	2400      	movs	r4, #0
 8001952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001954:	3206      	adds	r2, #6
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	440a      	add	r2, r1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800195e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	0e13      	lsrs	r3, r2, #24
 800196c:	2400      	movs	r4, #0
 800196e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001970:	3207      	adds	r2, #7
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	440a      	add	r2, r1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	3308      	adds	r3, #8
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001986:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800198a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800198e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	440a      	add	r2, r1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8001998:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	0a0b      	lsrs	r3, r1, #8
 80019a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80019aa:	0a14      	lsrs	r4, r2, #8
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	3201      	adds	r2, #1
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	440a      	add	r2, r1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80019b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f04f 0400 	mov.w	r4, #0
 80019c4:	0c0b      	lsrs	r3, r1, #16
 80019c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019ca:	0c14      	lsrs	r4, r2, #16
 80019cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ce:	3202      	adds	r2, #2
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	440a      	add	r2, r1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80019d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	0e0b      	lsrs	r3, r1, #24
 80019e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019ea:	0e14      	lsrs	r4, r2, #24
 80019ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ee:	3203      	adds	r2, #3
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	440a      	add	r2, r1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 80019f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	0013      	movs	r3, r2
 8001a06:	2400      	movs	r4, #0
 8001a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a0a:	3204      	adds	r2, #4
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	440a      	add	r2, r1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8001a14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	0a13      	lsrs	r3, r2, #8
 8001a22:	2400      	movs	r4, #0
 8001a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a26:	3205      	adds	r2, #5
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	440a      	add	r2, r1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8001a30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	0c13      	lsrs	r3, r2, #16
 8001a3e:	2400      	movs	r4, #0
 8001a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a42:	3206      	adds	r2, #6
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	440a      	add	r2, r1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8001a4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f04f 0400 	mov.w	r4, #0
 8001a58:	0e13      	lsrs	r3, r2, #24
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5e:	3207      	adds	r2, #7
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	440a      	add	r2, r1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001a70:	4618      	mov	r0, r3
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc90      	pop	{r4, r7}
 8001a78:	4770      	bx	lr

08001a7a <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a7a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a7e:	b092      	sub	sp, #72	; 0x48
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	61f8      	str	r0, [r7, #28]
 8001a84:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9c:	69b8      	ldr	r0, [r7, #24]
 8001a9e:	4403      	add	r3, r0
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b2dd      	uxtb	r5, r3
 8001aa4:	f04f 0600 	mov.w	r6, #0
 8001aa8:	ea45 0301 	orr.w	r3, r5, r1
 8001aac:	ea46 0402 	orr.w	r4, r6, r2
 8001ab0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ab4:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aba:	3301      	adds	r3, #1
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2d9      	uxtb	r1, r3
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	f04f 0400 	mov.w	r4, #0
 8001ad0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001ad4:	0213      	lsls	r3, r2, #8
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	020b      	lsls	r3, r1, #8
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ae8:	ea43 0305 	orr.w	r3, r3, r5
 8001aec:	ea44 0406 	orr.w	r4, r4, r6
 8001af0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001af4:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b2d9      	uxtb	r1, r3
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	f04f 0400 	mov.w	r4, #0
 8001b10:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001b14:	0413      	lsls	r3, r2, #16
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	040b      	lsls	r3, r1, #16
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b28:	ea43 0305 	orr.w	r3, r3, r5
 8001b2c:	ea44 0406 	orr.w	r4, r4, r6
 8001b30:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	69b8      	ldr	r0, [r7, #24]
 8001b3e:	4403      	add	r3, r0
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f04f 0400 	mov.w	r4, #0
 8001b48:	0a18      	lsrs	r0, r3, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b54:	ea43 0301 	orr.w	r3, r3, r1
 8001b58:	ea44 0402 	orr.w	r4, r4, r2
 8001b5c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001b60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b66:	3304      	adds	r3, #4
 8001b68:	69b8      	ldr	r0, [r7, #24]
 8001b6a:	4403      	add	r3, r0
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2dd      	uxtb	r5, r3
 8001b70:	f04f 0600 	mov.w	r6, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	f04f 0400 	mov.w	r4, #0
 8001b7c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001b80:	002b      	movs	r3, r5
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b8c:	ea43 0301 	orr.w	r3, r3, r1
 8001b90:	ea44 0402 	orr.w	r4, r4, r2
 8001b94:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001b98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9e:	3305      	adds	r3, #5
 8001ba0:	69b8      	ldr	r0, [r7, #24]
 8001ba2:	4403      	add	r3, r0
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b2dd      	uxtb	r5, r3
 8001ba8:	f04f 0600 	mov.w	r6, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	f04f 0400 	mov.w	r4, #0
 8001bb4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001bb8:	022b      	lsls	r3, r5, #8
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001bc4:	ea43 0301 	orr.w	r3, r3, r1
 8001bc8:	ea44 0402 	orr.w	r4, r4, r2
 8001bcc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001bd0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd6:	3306      	adds	r3, #6
 8001bd8:	69b8      	ldr	r0, [r7, #24]
 8001bda:	4403      	add	r3, r0
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2dd      	uxtb	r5, r3
 8001be0:	f04f 0600 	mov.w	r6, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f04f 0400 	mov.w	r4, #0
 8001bec:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001bf0:	042b      	lsls	r3, r5, #16
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001bfc:	ea43 0301 	orr.w	r3, r3, r1
 8001c00:	ea44 0402 	orr.w	r4, r4, r2
 8001c04:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001c08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	3307      	adds	r3, #7
 8001c10:	69b8      	ldr	r0, [r7, #24]
 8001c12:	4403      	add	r3, r0
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2dd      	uxtb	r5, r3
 8001c18:	f04f 0600 	mov.w	r6, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	f04f 0400 	mov.w	r4, #0
 8001c24:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001c28:	062b      	lsls	r3, r5, #24
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001c34:	ea43 0301 	orr.w	r3, r3, r1
 8001c38:	ea44 0402 	orr.w	r4, r4, r2
 8001c3c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 8001c40:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8001c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f04f 0400 	mov.w	r4, #0
 8001c58:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c5c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c62:	69b8      	ldr	r0, [r7, #24]
 8001c64:	4403      	add	r3, r0
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2dd      	uxtb	r5, r3
 8001c6a:	f04f 0600 	mov.w	r6, #0
 8001c6e:	ea45 0301 	orr.w	r3, r5, r1
 8001c72:	ea46 0402 	orr.w	r4, r6, r2
 8001c76:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c7a:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8001c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c80:	3301      	adds	r3, #1
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2d9      	uxtb	r1, r3
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	f04f 0400 	mov.w	r4, #0
 8001c96:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001c9a:	0213      	lsls	r3, r2, #8
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	020b      	lsls	r3, r1, #8
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001cae:	ea43 0305 	orr.w	r3, r3, r5
 8001cb2:	ea44 0406 	orr.w	r4, r4, r6
 8001cb6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cba:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8001cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2d9      	uxtb	r1, r3
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f04f 0400 	mov.w	r4, #0
 8001cd6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001cda:	0413      	lsls	r3, r2, #16
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	040b      	lsls	r3, r1, #16
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001cee:	ea43 0305 	orr.w	r3, r3, r5
 8001cf2:	ea44 0406 	orr.w	r4, r4, r6
 8001cf6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d00:	3303      	adds	r3, #3
 8001d02:	69b8      	ldr	r0, [r7, #24]
 8001d04:	4403      	add	r3, r0
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f04f 0400 	mov.w	r4, #0
 8001d0e:	0a18      	lsrs	r0, r3, #8
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	061b      	lsls	r3, r3, #24
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d1a:	ea43 0301 	orr.w	r3, r3, r1
 8001d1e:	ea44 0402 	orr.w	r4, r4, r2
 8001d22:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001d26:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	69b8      	ldr	r0, [r7, #24]
 8001d30:	4403      	add	r3, r0
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b2dd      	uxtb	r5, r3
 8001d36:	f04f 0600 	mov.w	r6, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	f04f 0400 	mov.w	r4, #0
 8001d42:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001d46:	002b      	movs	r3, r5
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d52:	ea43 0301 	orr.w	r3, r3, r1
 8001d56:	ea44 0402 	orr.w	r4, r4, r2
 8001d5a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001d5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d64:	3305      	adds	r3, #5
 8001d66:	69b8      	ldr	r0, [r7, #24]
 8001d68:	4403      	add	r3, r0
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2dd      	uxtb	r5, r3
 8001d6e:	f04f 0600 	mov.w	r6, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	f04f 0400 	mov.w	r4, #0
 8001d7a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001d7e:	022b      	lsls	r3, r5, #8
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d8a:	ea43 0301 	orr.w	r3, r3, r1
 8001d8e:	ea44 0402 	orr.w	r4, r4, r2
 8001d92:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001d96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d9c:	3306      	adds	r3, #6
 8001d9e:	69b8      	ldr	r0, [r7, #24]
 8001da0:	4403      	add	r3, r0
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2dd      	uxtb	r5, r3
 8001da6:	f04f 0600 	mov.w	r6, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	f04f 0400 	mov.w	r4, #0
 8001db2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001db6:	042b      	lsls	r3, r5, #16
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001dc2:	ea43 0301 	orr.w	r3, r3, r1
 8001dc6:	ea44 0402 	orr.w	r4, r4, r2
 8001dca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001dce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd4:	3307      	adds	r3, #7
 8001dd6:	69b8      	ldr	r0, [r7, #24]
 8001dd8:	4403      	add	r3, r0
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2dd      	uxtb	r5, r3
 8001dde:	f04f 0600 	mov.w	r6, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f04f 0400 	mov.w	r4, #0
 8001dea:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001dee:	062b      	lsls	r3, r5, #24
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001dfa:	ea43 0301 	orr.w	r3, r3, r1
 8001dfe:	ea44 0402 	orr.w	r4, r4, r2
 8001e02:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 8001e06:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8001e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e12:	3308      	adds	r3, #8
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f04f 0400 	mov.w	r4, #0
 8001e1e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e28:	69b8      	ldr	r0, [r7, #24]
 8001e2a:	4403      	add	r3, r0
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b2dd      	uxtb	r5, r3
 8001e30:	f04f 0600 	mov.w	r6, #0
 8001e34:	ea45 0301 	orr.w	r3, r5, r1
 8001e38:	ea46 0402 	orr.w	r4, r6, r2
 8001e3c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e40:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8001e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e46:	3301      	adds	r3, #1
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b2d9      	uxtb	r1, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001e60:	0213      	lsls	r3, r2, #8
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	020b      	lsls	r3, r1, #8
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e74:	ea43 0305 	orr.w	r3, r3, r5
 8001e78:	ea44 0406 	orr.w	r4, r4, r6
 8001e7c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e80:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8001e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e86:	3302      	adds	r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2d9      	uxtb	r1, r3
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	f04f 0400 	mov.w	r4, #0
 8001e9c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001ea0:	0413      	lsls	r3, r2, #16
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	040b      	lsls	r3, r1, #16
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001eb4:	ea43 0305 	orr.w	r3, r3, r5
 8001eb8:	ea44 0406 	orr.w	r4, r4, r6
 8001ebc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ec0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	69b8      	ldr	r0, [r7, #24]
 8001eca:	4403      	add	r3, r0
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f04f 0400 	mov.w	r4, #0
 8001ed4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001ed8:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8001edc:	ea41 030a 	orr.w	r3, r1, sl
 8001ee0:	ea42 040b 	orr.w	r4, r2, fp
 8001ee4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001ee8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eee:	3304      	adds	r3, #4
 8001ef0:	69b8      	ldr	r0, [r7, #24]
 8001ef2:	4403      	add	r3, r0
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2dd      	uxtb	r5, r3
 8001ef8:	f04f 0600 	mov.w	r6, #0
 8001efc:	f04f 0a00 	mov.w	sl, #0
 8001f00:	f04f 0b00 	mov.w	fp, #0
 8001f04:	46ab      	mov	fp, r5
 8001f06:	f04f 0a00 	mov.w	sl, #0
 8001f0a:	ea4a 0301 	orr.w	r3, sl, r1
 8001f0e:	ea4b 0402 	orr.w	r4, fp, r2
 8001f12:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001f16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1c:	3305      	adds	r3, #5
 8001f1e:	69b8      	ldr	r0, [r7, #24]
 8001f20:	4403      	add	r3, r0
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2dd      	uxtb	r5, r3
 8001f26:	f04f 0600 	mov.w	r6, #0
 8001f2a:	f04f 0a00 	mov.w	sl, #0
 8001f2e:	f04f 0b00 	mov.w	fp, #0
 8001f32:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 8001f36:	f04f 0a00 	mov.w	sl, #0
 8001f3a:	ea4a 0301 	orr.w	r3, sl, r1
 8001f3e:	ea4b 0402 	orr.w	r4, fp, r2
 8001f42:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001f46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4c:	3306      	adds	r3, #6
 8001f4e:	69b8      	ldr	r0, [r7, #24]
 8001f50:	4403      	add	r3, r0
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2dd      	uxtb	r5, r3
 8001f56:	f04f 0600 	mov.w	r6, #0
 8001f5a:	f04f 0a00 	mov.w	sl, #0
 8001f5e:	f04f 0b00 	mov.w	fp, #0
 8001f62:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8001f66:	f04f 0a00 	mov.w	sl, #0
 8001f6a:	ea4a 0301 	orr.w	r3, sl, r1
 8001f6e:	ea4b 0402 	orr.w	r4, fp, r2
 8001f72:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001f76:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7c:	3307      	adds	r3, #7
 8001f7e:	69b8      	ldr	r0, [r7, #24]
 8001f80:	4403      	add	r3, r0
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b2dd      	uxtb	r5, r3
 8001f86:	f04f 0600 	mov.w	r6, #0
 8001f8a:	f04f 0a00 	mov.w	sl, #0
 8001f8e:	f04f 0b00 	mov.w	fp, #0
 8001f92:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 8001f96:	f04f 0a00 	mov.w	sl, #0
 8001f9a:	ea4a 0301 	orr.w	r3, sl, r1
 8001f9e:	ea4b 0402 	orr.w	r4, fp, r2
 8001fa2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 8001fa6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8001fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f04f 0400 	mov.w	r4, #0
 8001fbe:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc8:	69b8      	ldr	r0, [r7, #24]
 8001fca:	4403      	add	r3, r0
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2dd      	uxtb	r5, r3
 8001fd0:	f04f 0600 	mov.w	r6, #0
 8001fd4:	ea45 0301 	orr.w	r3, r5, r1
 8001fd8:	ea46 0402 	orr.w	r4, r6, r2
 8001fdc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fe0:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8001fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2d9      	uxtb	r1, r3
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0a00 	mov.w	sl, #0
 8001ff8:	f04f 0b00 	mov.w	fp, #0
 8001ffc:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8002000:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8002004:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8002008:	ea4a 0305 	orr.w	r3, sl, r5
 800200c:	ea4b 0406 	orr.w	r4, fp, r6
 8002010:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002014:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	3302      	adds	r3, #2
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b2d9      	uxtb	r1, r3
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0a00 	mov.w	sl, #0
 800202c:	f04f 0b00 	mov.w	fp, #0
 8002030:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8002034:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8002038:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 800203c:	ea4a 0305 	orr.w	r3, sl, r5
 8002040:	ea4b 0406 	orr.w	r4, fp, r6
 8002044:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002048:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800204c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204e:	3303      	adds	r3, #3
 8002050:	69b8      	ldr	r0, [r7, #24]
 8002052:	4403      	add	r3, r0
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8002060:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8002064:	ea41 0308 	orr.w	r3, r1, r8
 8002068:	ea42 0409 	orr.w	r4, r2, r9
 800206c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002070:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002076:	3304      	adds	r3, #4
 8002078:	69b8      	ldr	r0, [r7, #24]
 800207a:	4403      	add	r3, r0
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2dd      	uxtb	r5, r3
 8002080:	f04f 0600 	mov.w	r6, #0
 8002084:	f04f 0800 	mov.w	r8, #0
 8002088:	f04f 0900 	mov.w	r9, #0
 800208c:	46a9      	mov	r9, r5
 800208e:	f04f 0800 	mov.w	r8, #0
 8002092:	ea48 0301 	orr.w	r3, r8, r1
 8002096:	ea49 0402 	orr.w	r4, r9, r2
 800209a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800209e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80020a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a4:	3305      	adds	r3, #5
 80020a6:	69b8      	ldr	r0, [r7, #24]
 80020a8:	4403      	add	r3, r0
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2dd      	uxtb	r5, r3
 80020ae:	f04f 0600 	mov.w	r6, #0
 80020b2:	f04f 0800 	mov.w	r8, #0
 80020b6:	f04f 0900 	mov.w	r9, #0
 80020ba:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80020be:	f04f 0800 	mov.w	r8, #0
 80020c2:	ea48 0301 	orr.w	r3, r8, r1
 80020c6:	ea49 0402 	orr.w	r4, r9, r2
 80020ca:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80020ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	3306      	adds	r3, #6
 80020d6:	69b8      	ldr	r0, [r7, #24]
 80020d8:	4403      	add	r3, r0
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2dd      	uxtb	r5, r3
 80020de:	f04f 0600 	mov.w	r6, #0
 80020e2:	f04f 0800 	mov.w	r8, #0
 80020e6:	f04f 0900 	mov.w	r9, #0
 80020ea:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80020ee:	f04f 0800 	mov.w	r8, #0
 80020f2:	ea48 0301 	orr.w	r3, r8, r1
 80020f6:	ea49 0402 	orr.w	r4, r9, r2
 80020fa:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80020fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002104:	3307      	adds	r3, #7
 8002106:	69b8      	ldr	r0, [r7, #24]
 8002108:	4403      	add	r3, r0
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b2dd      	uxtb	r5, r3
 800210e:	f04f 0600 	mov.w	r6, #0
 8002112:	f04f 0800 	mov.w	r8, #0
 8002116:	f04f 0900 	mov.w	r9, #0
 800211a:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800211e:	f04f 0800 	mov.w	r8, #0
 8002122:	ea48 0301 	orr.w	r3, r8, r1
 8002126:	ea49 0402 	orr.w	r4, r9, r2
 800212a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 800212e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->w);
 8002138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213a:	3308      	adds	r3, #8
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 800213e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8002140:	4618      	mov	r0, r3
 8002142:	3748      	adds	r7, #72	; 0x48
 8002144:	46bd      	mov	sp, r7
 8002146:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800214a:	4770      	bx	lr

0800214c <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	0800d9e4 	.word	0x0800d9e4

08002168 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	0800da00 	.word	0x0800da00

08002184 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fdd2 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	f04f 0400 	mov.w	r4, #0
 80021a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	0800e624 	.word	0x0800e624

080021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021d4:	b490      	push	{r4, r7}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80021e8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80021ec:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	440a      	add	r2, r1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80021fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	f04f 0400 	mov.w	r4, #0
 8002206:	0a0b      	lsrs	r3, r1, #8
 8002208:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800220c:	0a14      	lsrs	r4, r2, #8
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	3201      	adds	r2, #1
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	440a      	add	r2, r1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800221a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	f04f 0400 	mov.w	r4, #0
 8002226:	0c0b      	lsrs	r3, r1, #16
 8002228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800222c:	0c14      	lsrs	r4, r2, #16
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	3202      	adds	r2, #2
 8002232:	6839      	ldr	r1, [r7, #0]
 8002234:	440a      	add	r2, r1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800223a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	f04f 0400 	mov.w	r4, #0
 8002246:	0e0b      	lsrs	r3, r1, #24
 8002248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800224c:	0e14      	lsrs	r4, r2, #24
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	3203      	adds	r2, #3
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	440a      	add	r2, r1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800225a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	0013      	movs	r3, r2
 8002268:	2400      	movs	r4, #0
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	3204      	adds	r2, #4
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	440a      	add	r2, r1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002276:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	f04f 0400 	mov.w	r4, #0
 8002282:	0a13      	lsrs	r3, r2, #8
 8002284:	2400      	movs	r4, #0
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	3205      	adds	r2, #5
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	440a      	add	r2, r1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002292:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	f04f 0400 	mov.w	r4, #0
 800229e:	0c13      	lsrs	r3, r2, #16
 80022a0:	2400      	movs	r4, #0
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	3206      	adds	r2, #6
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	440a      	add	r2, r1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80022ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	f04f 0400 	mov.w	r4, #0
 80022ba:	0e13      	lsrs	r3, r2, #24
 80022bc:	2400      	movs	r4, #0
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	3207      	adds	r2, #7
 80022c2:	6839      	ldr	r1, [r7, #0]
 80022c4:	440a      	add	r2, r1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	3308      	adds	r3, #8
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80022d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80022da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	440a      	add	r2, r1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80022e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	f04f 0400 	mov.w	r4, #0
 80022f4:	0a0b      	lsrs	r3, r1, #8
 80022f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022fa:	0a14      	lsrs	r4, r2, #8
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	3201      	adds	r2, #1
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	440a      	add	r2, r1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002308:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	f04f 0400 	mov.w	r4, #0
 8002314:	0c0b      	lsrs	r3, r1, #16
 8002316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800231a:	0c14      	lsrs	r4, r2, #16
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	3202      	adds	r2, #2
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	440a      	add	r2, r1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002328:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	f04f 0400 	mov.w	r4, #0
 8002334:	0e0b      	lsrs	r3, r1, #24
 8002336:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800233a:	0e14      	lsrs	r4, r2, #24
 800233c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233e:	3203      	adds	r2, #3
 8002340:	6839      	ldr	r1, [r7, #0]
 8002342:	440a      	add	r2, r1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002348:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	f04f 0400 	mov.w	r4, #0
 8002354:	0013      	movs	r3, r2
 8002356:	2400      	movs	r4, #0
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	3204      	adds	r2, #4
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	440a      	add	r2, r1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002364:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	f04f 0400 	mov.w	r4, #0
 8002370:	0a13      	lsrs	r3, r2, #8
 8002372:	2400      	movs	r4, #0
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	3205      	adds	r2, #5
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	440a      	add	r2, r1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002380:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f04f 0400 	mov.w	r4, #0
 800238c:	0c13      	lsrs	r3, r2, #16
 800238e:	2400      	movs	r4, #0
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	3206      	adds	r2, #6
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	440a      	add	r2, r1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800239c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	f04f 0400 	mov.w	r4, #0
 80023a8:	0e13      	lsrs	r3, r2, #24
 80023aa:	2400      	movs	r4, #0
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	3207      	adds	r2, #7
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	440a      	add	r2, r1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3308      	adds	r3, #8
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80023c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80023c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	6839      	ldr	r1, [r7, #0]
 80023d0:	440a      	add	r2, r1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80023d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	f04f 0400 	mov.w	r4, #0
 80023e2:	0a0b      	lsrs	r3, r1, #8
 80023e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023e8:	0a14      	lsrs	r4, r2, #8
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	3201      	adds	r2, #1
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	440a      	add	r2, r1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80023f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	f04f 0400 	mov.w	r4, #0
 8002402:	0c0b      	lsrs	r3, r1, #16
 8002404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002408:	0c14      	lsrs	r4, r2, #16
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	3202      	adds	r2, #2
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	440a      	add	r2, r1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002416:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	0e0b      	lsrs	r3, r1, #24
 8002424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002428:	0e14      	lsrs	r4, r2, #24
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	3203      	adds	r2, #3
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	440a      	add	r2, r1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002436:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	f04f 0400 	mov.w	r4, #0
 8002442:	0013      	movs	r3, r2
 8002444:	2400      	movs	r4, #0
 8002446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002448:	3204      	adds	r2, #4
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	440a      	add	r2, r1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002452:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f04f 0400 	mov.w	r4, #0
 800245e:	0a13      	lsrs	r3, r2, #8
 8002460:	2400      	movs	r4, #0
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	3205      	adds	r2, #5
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	440a      	add	r2, r1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800246e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	f04f 0400 	mov.w	r4, #0
 800247a:	0c13      	lsrs	r3, r2, #16
 800247c:	2400      	movs	r4, #0
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	3206      	adds	r2, #6
 8002482:	6839      	ldr	r1, [r7, #0]
 8002484:	440a      	add	r2, r1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800248a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	f04f 0400 	mov.w	r4, #0
 8002496:	0e13      	lsrs	r3, r2, #24
 8002498:	2400      	movs	r4, #0
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	3207      	adds	r2, #7
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	440a      	add	r2, r1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3308      	adds	r3, #8
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024ae:	4618      	mov	r0, r3
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc90      	pop	{r4, r7}
 80024b6:	4770      	bx	lr

080024b8 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024b8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024bc:	b08c      	sub	sp, #48	; 0x30
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	68b8      	ldr	r0, [r7, #8]
 80024dc:	4403      	add	r3, r0
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461c      	mov	r4, r3
 80024e2:	b2e4      	uxtb	r4, r4
 80024e4:	f04f 0500 	mov.w	r5, #0
 80024e8:	4623      	mov	r3, r4
 80024ea:	462c      	mov	r4, r5
 80024ec:	ea43 0301 	orr.w	r3, r3, r1
 80024f0:	ea44 0402 	orr.w	r4, r4, r2
 80024f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80024fc:	461d      	mov	r5, r3
 80024fe:	4626      	mov	r6, r4
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	3301      	adds	r3, #1
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b2d9      	uxtb	r1, r3
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	f04f 0400 	mov.w	r4, #0
 8002518:	0214      	lsls	r4, r2, #8
 800251a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800251e:	020b      	lsls	r3, r1, #8
 8002520:	4629      	mov	r1, r5
 8002522:	4632      	mov	r2, r6
 8002524:	ea41 0103 	orr.w	r1, r1, r3
 8002528:	ea42 0204 	orr.w	r2, r2, r4
 800252c:	460b      	mov	r3, r1
 800252e:	4614      	mov	r4, r2
 8002530:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002534:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002538:	461d      	mov	r5, r3
 800253a:	4626      	mov	r6, r4
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	3302      	adds	r3, #2
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2d9      	uxtb	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	f04f 0400 	mov.w	r4, #0
 8002554:	0414      	lsls	r4, r2, #16
 8002556:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800255a:	040b      	lsls	r3, r1, #16
 800255c:	4629      	mov	r1, r5
 800255e:	4632      	mov	r2, r6
 8002560:	ea41 0103 	orr.w	r1, r1, r3
 8002564:	ea42 0204 	orr.w	r2, r2, r4
 8002568:	460b      	mov	r3, r1
 800256a:	4614      	mov	r4, r2
 800256c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002570:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	3303      	adds	r3, #3
 8002578:	68b8      	ldr	r0, [r7, #8]
 800257a:	4403      	add	r3, r0
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f04f 0400 	mov.w	r4, #0
 8002584:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002588:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 800258c:	ea41 030a 	orr.w	r3, r1, sl
 8002590:	ea42 040b 	orr.w	r4, r2, fp
 8002594:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002598:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	3304      	adds	r3, #4
 80025a0:	68b8      	ldr	r0, [r7, #8]
 80025a2:	4403      	add	r3, r0
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	fa5f fa83 	uxtb.w	sl, r3
 80025aa:	f04f 0b00 	mov.w	fp, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	f04f 0400 	mov.w	r4, #0
 80025b6:	4625      	mov	r5, r4
 80025b8:	461c      	mov	r4, r3
 80025ba:	4653      	mov	r3, sl
 80025bc:	461d      	mov	r5, r3
 80025be:	2300      	movs	r3, #0
 80025c0:	461c      	mov	r4, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	462c      	mov	r4, r5
 80025c6:	ea43 0301 	orr.w	r3, r3, r1
 80025ca:	ea44 0402 	orr.w	r4, r4, r2
 80025ce:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80025d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	3305      	adds	r3, #5
 80025da:	68b8      	ldr	r0, [r7, #8]
 80025dc:	4403      	add	r3, r0
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	fa5f fa83 	uxtb.w	sl, r3
 80025e4:	f04f 0b00 	mov.w	fp, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	4625      	mov	r5, r4
 80025f2:	461c      	mov	r4, r3
 80025f4:	ea4f 230a 	mov.w	r3, sl, lsl #8
 80025f8:	461d      	mov	r5, r3
 80025fa:	2300      	movs	r3, #0
 80025fc:	461c      	mov	r4, r3
 80025fe:	4623      	mov	r3, r4
 8002600:	462c      	mov	r4, r5
 8002602:	ea43 0301 	orr.w	r3, r3, r1
 8002606:	ea44 0402 	orr.w	r4, r4, r2
 800260a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800260e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	3306      	adds	r3, #6
 8002616:	68b8      	ldr	r0, [r7, #8]
 8002618:	4403      	add	r3, r0
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	fa5f fa83 	uxtb.w	sl, r3
 8002620:	f04f 0b00 	mov.w	fp, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	f04f 0400 	mov.w	r4, #0
 800262c:	4625      	mov	r5, r4
 800262e:	461c      	mov	r4, r3
 8002630:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002634:	461d      	mov	r5, r3
 8002636:	2300      	movs	r3, #0
 8002638:	461c      	mov	r4, r3
 800263a:	4623      	mov	r3, r4
 800263c:	462c      	mov	r4, r5
 800263e:	ea43 0301 	orr.w	r3, r3, r1
 8002642:	ea44 0402 	orr.w	r4, r4, r2
 8002646:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800264a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	3307      	adds	r3, #7
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	4403      	add	r3, r0
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	fa5f fa83 	uxtb.w	sl, r3
 800265c:	f04f 0b00 	mov.w	fp, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	f04f 0400 	mov.w	r4, #0
 8002668:	4625      	mov	r5, r4
 800266a:	461c      	mov	r4, r3
 800266c:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8002670:	461d      	mov	r5, r3
 8002672:	2300      	movs	r3, #0
 8002674:	461c      	mov	r4, r3
 8002676:	4623      	mov	r3, r4
 8002678:	462c      	mov	r4, r5
 800267a:	ea43 0301 	orr.w	r3, r3, r1
 800267e:	ea44 0402 	orr.w	r4, r4, r2
 8002682:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8002686:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	3308      	adds	r3, #8
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	f04f 0400 	mov.w	r4, #0
 800269e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	4403      	add	r3, r0
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	fa5f fa83 	uxtb.w	sl, r3
 80026b2:	f04f 0b00 	mov.w	fp, #0
 80026b6:	ea4a 0301 	orr.w	r3, sl, r1
 80026ba:	ea4b 0402 	orr.w	r4, fp, r2
 80026be:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	3301      	adds	r3, #1
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b2d9      	uxtb	r1, r3
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	4625      	mov	r5, r4
 80026e0:	461c      	mov	r4, r3
 80026e2:	0213      	lsls	r3, r2, #8
 80026e4:	461d      	mov	r5, r3
 80026e6:	462b      	mov	r3, r5
 80026e8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80026ec:	461d      	mov	r5, r3
 80026ee:	020b      	lsls	r3, r1, #8
 80026f0:	461c      	mov	r4, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	462c      	mov	r4, r5
 80026f6:	ea43 030a 	orr.w	r3, r3, sl
 80026fa:	ea44 040b 	orr.w	r4, r4, fp
 80026fe:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002702:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	3302      	adds	r3, #2
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b2d9      	uxtb	r1, r3
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	f04f 0400 	mov.w	r4, #0
 800271e:	4625      	mov	r5, r4
 8002720:	461c      	mov	r4, r3
 8002722:	0413      	lsls	r3, r2, #16
 8002724:	461d      	mov	r5, r3
 8002726:	462b      	mov	r3, r5
 8002728:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800272c:	461d      	mov	r5, r3
 800272e:	040b      	lsls	r3, r1, #16
 8002730:	461c      	mov	r4, r3
 8002732:	4623      	mov	r3, r4
 8002734:	462c      	mov	r4, r5
 8002736:	ea43 030a 	orr.w	r3, r3, sl
 800273a:	ea44 040b 	orr.w	r4, r4, fp
 800273e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002742:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	3303      	adds	r3, #3
 800274a:	68b8      	ldr	r0, [r7, #8]
 800274c:	4403      	add	r3, r0
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f04f 0400 	mov.w	r4, #0
 8002756:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800275a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800275e:	ea41 0308 	orr.w	r3, r1, r8
 8002762:	ea42 0409 	orr.w	r4, r2, r9
 8002766:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800276a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	3304      	adds	r3, #4
 8002772:	68b8      	ldr	r0, [r7, #8]
 8002774:	4403      	add	r3, r0
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	fa5f f883 	uxtb.w	r8, r3
 800277c:	f04f 0900 	mov.w	r9, #0
 8002780:	f04f 0a00 	mov.w	sl, #0
 8002784:	f04f 0b00 	mov.w	fp, #0
 8002788:	46c3      	mov	fp, r8
 800278a:	f04f 0a00 	mov.w	sl, #0
 800278e:	ea4a 0301 	orr.w	r3, sl, r1
 8002792:	ea4b 0402 	orr.w	r4, fp, r2
 8002796:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800279a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	3305      	adds	r3, #5
 80027a2:	68b8      	ldr	r0, [r7, #8]
 80027a4:	4403      	add	r3, r0
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	fa5f f883 	uxtb.w	r8, r3
 80027ac:	f04f 0900 	mov.w	r9, #0
 80027b0:	f04f 0a00 	mov.w	sl, #0
 80027b4:	f04f 0b00 	mov.w	fp, #0
 80027b8:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 80027bc:	f04f 0a00 	mov.w	sl, #0
 80027c0:	ea4a 0301 	orr.w	r3, sl, r1
 80027c4:	ea4b 0402 	orr.w	r4, fp, r2
 80027c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80027cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	3306      	adds	r3, #6
 80027d4:	68b8      	ldr	r0, [r7, #8]
 80027d6:	4403      	add	r3, r0
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	fa5f f883 	uxtb.w	r8, r3
 80027de:	f04f 0900 	mov.w	r9, #0
 80027e2:	f04f 0a00 	mov.w	sl, #0
 80027e6:	f04f 0b00 	mov.w	fp, #0
 80027ea:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80027ee:	f04f 0a00 	mov.w	sl, #0
 80027f2:	ea4a 0301 	orr.w	r3, sl, r1
 80027f6:	ea4b 0402 	orr.w	r4, fp, r2
 80027fa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80027fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	3307      	adds	r3, #7
 8002806:	68b8      	ldr	r0, [r7, #8]
 8002808:	4403      	add	r3, r0
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	fa5f f883 	uxtb.w	r8, r3
 8002810:	f04f 0900 	mov.w	r9, #0
 8002814:	f04f 0a00 	mov.w	sl, #0
 8002818:	f04f 0b00 	mov.w	fp, #0
 800281c:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8002820:	f04f 0a00 	mov.w	sl, #0
 8002824:	ea4a 0301 	orr.w	r3, sl, r1
 8002828:	ea4b 0402 	orr.w	r4, fp, r2
 800282c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8002830:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	3308      	adds	r3, #8
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	f04f 0400 	mov.w	r4, #0
 8002848:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800284c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	68b8      	ldr	r0, [r7, #8]
 8002854:	4403      	add	r3, r0
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	fa5f f883 	uxtb.w	r8, r3
 800285c:	f04f 0900 	mov.w	r9, #0
 8002860:	ea48 0301 	orr.w	r3, r8, r1
 8002864:	ea49 0402 	orr.w	r4, r9, r2
 8002868:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800286c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	3301      	adds	r3, #1
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	4413      	add	r3, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b2d9      	uxtb	r1, r3
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0a00 	mov.w	sl, #0
 8002884:	f04f 0b00 	mov.w	fp, #0
 8002888:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 800288c:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8002890:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8002894:	ea4a 0308 	orr.w	r3, sl, r8
 8002898:	ea4b 0409 	orr.w	r4, fp, r9
 800289c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	3302      	adds	r3, #2
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b2d9      	uxtb	r1, r3
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0a00 	mov.w	sl, #0
 80028b8:	f04f 0b00 	mov.w	fp, #0
 80028bc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80028c0:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 80028c4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80028c8:	ea4a 0308 	orr.w	r3, sl, r8
 80028cc:	ea4b 0409 	orr.w	r4, fp, r9
 80028d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	3303      	adds	r3, #3
 80028dc:	68b8      	ldr	r0, [r7, #8]
 80028de:	4403      	add	r3, r0
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f04f 0400 	mov.w	r4, #0
 80028e8:	0a18      	lsrs	r0, r3, #8
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80028f4:	ea43 0301 	orr.w	r3, r3, r1
 80028f8:	ea44 0402 	orr.w	r4, r4, r2
 80028fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002900:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	3304      	adds	r3, #4
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	4403      	add	r3, r0
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2dd      	uxtb	r5, r3
 8002910:	f04f 0600 	mov.w	r6, #0
 8002914:	f04f 0800 	mov.w	r8, #0
 8002918:	f04f 0900 	mov.w	r9, #0
 800291c:	46a9      	mov	r9, r5
 800291e:	f04f 0800 	mov.w	r8, #0
 8002922:	ea48 0301 	orr.w	r3, r8, r1
 8002926:	ea49 0402 	orr.w	r4, r9, r2
 800292a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800292e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	3305      	adds	r3, #5
 8002936:	68b8      	ldr	r0, [r7, #8]
 8002938:	4403      	add	r3, r0
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b2dd      	uxtb	r5, r3
 800293e:	f04f 0600 	mov.w	r6, #0
 8002942:	f04f 0800 	mov.w	r8, #0
 8002946:	f04f 0900 	mov.w	r9, #0
 800294a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800294e:	f04f 0800 	mov.w	r8, #0
 8002952:	ea48 0301 	orr.w	r3, r8, r1
 8002956:	ea49 0402 	orr.w	r4, r9, r2
 800295a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800295e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	3306      	adds	r3, #6
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	4403      	add	r3, r0
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2dd      	uxtb	r5, r3
 800296e:	f04f 0600 	mov.w	r6, #0
 8002972:	f04f 0800 	mov.w	r8, #0
 8002976:	f04f 0900 	mov.w	r9, #0
 800297a:	ea4f 4905 	mov.w	r9, r5, lsl #16
 800297e:	f04f 0800 	mov.w	r8, #0
 8002982:	ea48 0301 	orr.w	r3, r8, r1
 8002986:	ea49 0402 	orr.w	r4, r9, r2
 800298a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800298e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	3307      	adds	r3, #7
 8002996:	68b8      	ldr	r0, [r7, #8]
 8002998:	4403      	add	r3, r0
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2dd      	uxtb	r5, r3
 800299e:	f04f 0600 	mov.w	r6, #0
 80029a2:	f04f 0800 	mov.w	r8, #0
 80029a6:	f04f 0900 	mov.w	r9, #0
 80029aa:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80029ae:	f04f 0800 	mov.w	r8, #0
 80029b2:	ea48 0301 	orr.w	r3, r8, r1
 80029b6:	ea49 0402 	orr.w	r4, r9, r2
 80029ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 80029be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	3308      	adds	r3, #8
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80029d0:	4618      	mov	r0, r3
 80029d2:	3730      	adds	r7, #48	; 0x30
 80029d4:	46bd      	mov	sp, r7
 80029d6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029da:	4770      	bx	lr

080029dc <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	0800da24 	.word	0x0800da24

080029f8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	0800da3c 	.word	0x0800da3c

08002a14 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f98a 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8002a24:	4a24      	ldr	r2, [pc, #144]	; (8002ab8 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fc78 	bl	8001324 <_ZN8std_msgs6HeaderC1Ev>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3318      	adds	r3, #24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fe07 	bl	800164c <_ZN13geometry_msgs10QuaternionC1Ev>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002a44:	2308      	movs	r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	db08      	blt.n	8002a5c <_ZN11sensor_msgs3ImuC1Ev+0x48>
 8002a4a:	f04f 0000 	mov.w	r0, #0
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	e9c2 0100 	strd	r0, r1, [r2]
 8002a56:	3208      	adds	r2, #8
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	e7f4      	b.n	8002a46 <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3388      	adds	r3, #136	; 0x88
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fb8f 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	db08      	blt.n	8002a84 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8002a72:	f04f 0000 	mov.w	r0, #0
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	e9c2 0100 	strd	r0, r1, [r2]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	3b01      	subs	r3, #1
 8002a82:	e7f4      	b.n	8002a6e <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	33f0      	adds	r3, #240	; 0xf0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fb7b 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8002a94:	2308      	movs	r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db08      	blt.n	8002aac <_ZN11sensor_msgs3ImuC1Ev+0x98>
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	e9c2 0100 	strd	r0, r1, [r2]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	e7f4      	b.n	8002a96 <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	0800e60c 	.word	0x0800e60c

08002abc <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b08d      	sub	sp, #52	; 0x34
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	1d18      	adds	r0, r3, #4
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe fc45 	bl	8001364 <_ZNK8std_msgs6Header9serializeEPh>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	4413      	add	r3, r2
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f103 0018 	add.w	r0, r3, #24
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	4413      	add	r3, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe fdda 	bl	80016a8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	4413      	add	r3, r2
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8002afc:	2300      	movs	r3, #0
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d87e      	bhi.n	8002c04 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b14:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8002b18:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	440a      	add	r2, r1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8002b26:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	f04f 0400 	mov.w	r4, #0
 8002b32:	0a0b      	lsrs	r3, r1, #8
 8002b34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b38:	0a14      	lsrs	r4, r2, #8
 8002b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3c:	3201      	adds	r2, #1
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	440a      	add	r2, r1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8002b46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	f04f 0400 	mov.w	r4, #0
 8002b52:	0c0b      	lsrs	r3, r1, #16
 8002b54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b58:	0c14      	lsrs	r4, r2, #16
 8002b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5c:	3202      	adds	r2, #2
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	440a      	add	r2, r1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8002b66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	f04f 0400 	mov.w	r4, #0
 8002b72:	0e0b      	lsrs	r3, r1, #24
 8002b74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b78:	0e14      	lsrs	r4, r2, #24
 8002b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7c:	3203      	adds	r2, #3
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	440a      	add	r2, r1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8002b86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	f04f 0400 	mov.w	r4, #0
 8002b92:	0013      	movs	r3, r2
 8002b94:	2400      	movs	r4, #0
 8002b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b98:	3204      	adds	r2, #4
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	440a      	add	r2, r1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8002ba2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	0a13      	lsrs	r3, r2, #8
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb4:	3205      	adds	r2, #5
 8002bb6:	6839      	ldr	r1, [r7, #0]
 8002bb8:	440a      	add	r2, r1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8002bbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f04f 0400 	mov.w	r4, #0
 8002bca:	0c13      	lsrs	r3, r2, #16
 8002bcc:	2400      	movs	r4, #0
 8002bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd0:	3206      	adds	r2, #6
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8002bda:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	f04f 0400 	mov.w	r4, #0
 8002be6:	0e13      	lsrs	r3, r2, #24
 8002be8:	2400      	movs	r4, #0
 8002bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bec:	3207      	adds	r2, #7
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	440a      	add	r2, r1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	3301      	adds	r3, #1
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c02:	e77d      	b.n	8002b00 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7ff fadf 	bl	80021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	4413      	add	r3, r2
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d87e      	bhi.n	8002d26 <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3315      	adds	r3, #21
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c36:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8002c3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	440a      	add	r2, r1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8002c48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	f04f 0400 	mov.w	r4, #0
 8002c54:	0a0b      	lsrs	r3, r1, #8
 8002c56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c5a:	0a14      	lsrs	r4, r2, #8
 8002c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5e:	3201      	adds	r2, #1
 8002c60:	6839      	ldr	r1, [r7, #0]
 8002c62:	440a      	add	r2, r1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8002c68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	f04f 0400 	mov.w	r4, #0
 8002c74:	0c0b      	lsrs	r3, r1, #16
 8002c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c7a:	0c14      	lsrs	r4, r2, #16
 8002c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7e:	3202      	adds	r2, #2
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	440a      	add	r2, r1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8002c88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f04f 0400 	mov.w	r4, #0
 8002c94:	0e0b      	lsrs	r3, r1, #24
 8002c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c9a:	0e14      	lsrs	r4, r2, #24
 8002c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9e:	3203      	adds	r2, #3
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8002ca8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f04f 0400 	mov.w	r4, #0
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	2400      	movs	r4, #0
 8002cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cba:	3204      	adds	r2, #4
 8002cbc:	6839      	ldr	r1, [r7, #0]
 8002cbe:	440a      	add	r2, r1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8002cc4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	f04f 0400 	mov.w	r4, #0
 8002cd0:	0a13      	lsrs	r3, r2, #8
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd6:	3205      	adds	r2, #5
 8002cd8:	6839      	ldr	r1, [r7, #0]
 8002cda:	440a      	add	r2, r1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8002ce0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	f04f 0400 	mov.w	r4, #0
 8002cec:	0c13      	lsrs	r3, r2, #16
 8002cee:	2400      	movs	r4, #0
 8002cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf2:	3206      	adds	r2, #6
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	440a      	add	r2, r1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8002cfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	f04f 0400 	mov.w	r4, #0
 8002d08:	0e13      	lsrs	r3, r2, #24
 8002d0a:	2400      	movs	r4, #0
 8002d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0e:	3207      	adds	r2, #7
 8002d10:	6839      	ldr	r1, [r7, #0]
 8002d12:	440a      	add	r2, r1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	3301      	adds	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
 8002d24:	e77d      	b.n	8002c22 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7ff fa4e 	bl	80021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d87e      	bhi.n	8002e48 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	3322      	adds	r3, #34	; 0x22
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d58:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8002d5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	440a      	add	r2, r1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8002d6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f04f 0400 	mov.w	r4, #0
 8002d76:	0a0b      	lsrs	r3, r1, #8
 8002d78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d7c:	0a14      	lsrs	r4, r2, #8
 8002d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d80:	3201      	adds	r2, #1
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	440a      	add	r2, r1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8002d8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f04f 0400 	mov.w	r4, #0
 8002d96:	0c0b      	lsrs	r3, r1, #16
 8002d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d9c:	0c14      	lsrs	r4, r2, #16
 8002d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da0:	3202      	adds	r2, #2
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	440a      	add	r2, r1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8002daa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f04f 0400 	mov.w	r4, #0
 8002db6:	0e0b      	lsrs	r3, r1, #24
 8002db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002dbc:	0e14      	lsrs	r4, r2, #24
 8002dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc0:	3203      	adds	r2, #3
 8002dc2:	6839      	ldr	r1, [r7, #0]
 8002dc4:	440a      	add	r2, r1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8002dca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f04f 0400 	mov.w	r4, #0
 8002dd6:	0013      	movs	r3, r2
 8002dd8:	2400      	movs	r4, #0
 8002dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ddc:	3204      	adds	r2, #4
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	440a      	add	r2, r1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8002de6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	0a13      	lsrs	r3, r2, #8
 8002df4:	2400      	movs	r4, #0
 8002df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df8:	3205      	adds	r2, #5
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	440a      	add	r2, r1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8002e02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	f04f 0400 	mov.w	r4, #0
 8002e0e:	0c13      	lsrs	r3, r2, #16
 8002e10:	2400      	movs	r4, #0
 8002e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e14:	3206      	adds	r2, #6
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	440a      	add	r2, r1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8002e1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	f04f 0400 	mov.w	r4, #0
 8002e2a:	0e13      	lsrs	r3, r2, #24
 8002e2c:	2400      	movs	r4, #0
 8002e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e30:	3207      	adds	r2, #7
 8002e32:	6839      	ldr	r1, [r7, #0]
 8002e34:	440a      	add	r2, r1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	3301      	adds	r3, #1
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	e77d      	b.n	8002d44 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3734      	adds	r7, #52	; 0x34
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}

08002e52 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e56:	b091      	sub	sp, #68	; 0x44
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6178      	str	r0, [r7, #20]
 8002e5c:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->header.deserialize(inbuffer + offset);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	1d18      	adds	r0, r3, #4
 8002e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fe fb11 	bl	8001494 <_ZN8std_msgs6Header11deserializeEPh>
 8002e72:	4602      	mov	r2, r0
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	4413      	add	r3, r2
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->orientation.deserialize(inbuffer + offset);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f103 0018 	add.w	r0, r3, #24
 8002e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7fe fdf7 	bl	8001a7a <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e90:	4413      	add	r3, r2
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8002e94:	2300      	movs	r3, #0
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	f200 80dd 	bhi.w	800305a <_ZN11sensor_msgs3Imu11deserializeEPh+0x208>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	f04f 0400 	mov.w	r4, #0
 8002ea8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	6938      	ldr	r0, [r7, #16]
 8002eb4:	4403      	add	r3, r0
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b2dd      	uxtb	r5, r3
 8002eba:	f04f 0600 	mov.w	r6, #0
 8002ebe:	ea45 0301 	orr.w	r3, r5, r1
 8002ec2:	ea46 0402 	orr.w	r4, r6, r2
 8002ec6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eca:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2d9      	uxtb	r1, r3
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	f04f 0400 	mov.w	r4, #0
 8002ee6:	0214      	lsls	r4, r2, #8
 8002ee8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002eec:	020b      	lsls	r3, r1, #8
 8002eee:	ea45 0503 	orr.w	r5, r5, r3
 8002ef2:	ea46 0604 	orr.w	r6, r6, r4
 8002ef6:	462b      	mov	r3, r5
 8002ef8:	4634      	mov	r4, r6
 8002efa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002efe:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f04:	3302      	adds	r3, #2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b2d9      	uxtb	r1, r3
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f04f 0400 	mov.w	r4, #0
 8002f1a:	0414      	lsls	r4, r2, #16
 8002f1c:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8002f20:	040b      	lsls	r3, r1, #16
 8002f22:	ea45 0503 	orr.w	r5, r5, r3
 8002f26:	ea46 0604 	orr.w	r6, r6, r4
 8002f2a:	462b      	mov	r3, r5
 8002f2c:	4634      	mov	r4, r6
 8002f2e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f38:	3303      	adds	r3, #3
 8002f3a:	6938      	ldr	r0, [r7, #16]
 8002f3c:	4403      	add	r3, r0
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002f4a:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8002f4e:	ea41 030a 	orr.w	r3, r1, sl
 8002f52:	ea42 040b 	orr.w	r4, r2, fp
 8002f56:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f5a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	3304      	adds	r3, #4
 8002f62:	6938      	ldr	r0, [r7, #16]
 8002f64:	4403      	add	r3, r0
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461c      	mov	r4, r3
 8002f6a:	b2e4      	uxtb	r4, r4
 8002f6c:	f04f 0500 	mov.w	r5, #0
 8002f70:	f04f 0800 	mov.w	r8, #0
 8002f74:	f04f 0900 	mov.w	r9, #0
 8002f78:	4623      	mov	r3, r4
 8002f7a:	001b      	movs	r3, r3
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4698      	mov	r8, r3
 8002f82:	4643      	mov	r3, r8
 8002f84:	464c      	mov	r4, r9
 8002f86:	ea43 0301 	orr.w	r3, r3, r1
 8002f8a:	ea44 0402 	orr.w	r4, r4, r2
 8002f8e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002f92:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f98:	3305      	adds	r3, #5
 8002f9a:	6938      	ldr	r0, [r7, #16]
 8002f9c:	4403      	add	r3, r0
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	b2e4      	uxtb	r4, r4
 8002fa4:	f04f 0500 	mov.w	r5, #0
 8002fa8:	f04f 0800 	mov.w	r8, #0
 8002fac:	f04f 0900 	mov.w	r9, #0
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	4698      	mov	r8, r3
 8002fba:	4643      	mov	r3, r8
 8002fbc:	464c      	mov	r4, r9
 8002fbe:	ea43 0301 	orr.w	r3, r3, r1
 8002fc2:	ea44 0402 	orr.w	r4, r4, r2
 8002fc6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002fca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd0:	3306      	adds	r3, #6
 8002fd2:	6938      	ldr	r0, [r7, #16]
 8002fd4:	4403      	add	r3, r0
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	461c      	mov	r4, r3
 8002fda:	b2e4      	uxtb	r4, r4
 8002fdc:	f04f 0500 	mov.w	r5, #0
 8002fe0:	f04f 0800 	mov.w	r8, #0
 8002fe4:	f04f 0900 	mov.w	r9, #0
 8002fe8:	4623      	mov	r3, r4
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	4699      	mov	r9, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	4698      	mov	r8, r3
 8002ff2:	4643      	mov	r3, r8
 8002ff4:	464c      	mov	r4, r9
 8002ff6:	ea43 0301 	orr.w	r3, r3, r1
 8002ffa:	ea44 0402 	orr.w	r4, r4, r2
 8002ffe:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003002:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	3307      	adds	r3, #7
 800300a:	6938      	ldr	r0, [r7, #16]
 800300c:	4403      	add	r3, r0
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461c      	mov	r4, r3
 8003012:	b2e4      	uxtb	r4, r4
 8003014:	f04f 0500 	mov.w	r5, #0
 8003018:	f04f 0800 	mov.w	r8, #0
 800301c:	f04f 0900 	mov.w	r9, #0
 8003020:	4623      	mov	r3, r4
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	4699      	mov	r9, r3
 8003026:	2300      	movs	r3, #0
 8003028:	4698      	mov	r8, r3
 800302a:	4643      	mov	r3, r8
 800302c:	464c      	mov	r4, r9
 800302e:	ea43 0301 	orr.w	r3, r3, r1
 8003032:	ea44 0402 	orr.w	r4, r4, r2
 8003036:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 800303a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003042:	3208      	adds	r2, #8
 8003044:	00d2      	lsls	r2, r2, #3
 8003046:	440a      	add	r2, r1
 8003048:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->orientation_covariance[i]);
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	3308      	adds	r3, #8
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	3301      	adds	r3, #1
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
 8003058:	e71e      	b.n	8002e98 <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7ff fa26 	bl	80024b8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800306c:	4602      	mov	r2, r0
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	4413      	add	r3, r2
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
 8003078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307a:	2b08      	cmp	r3, #8
 800307c:	f200 80ca 	bhi.w	8003214 <_ZN11sensor_msgs3Imu11deserializeEPh+0x3c2>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	f04f 0400 	mov.w	r4, #0
 8003088:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800308c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	6938      	ldr	r0, [r7, #16]
 8003094:	4403      	add	r3, r0
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b2dd      	uxtb	r5, r3
 800309a:	f04f 0600 	mov.w	r6, #0
 800309e:	ea45 0301 	orr.w	r3, r5, r1
 80030a2:	ea46 0402 	orr.w	r4, r6, r2
 80030a6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030aa:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	3301      	adds	r3, #1
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0500 	mov.w	r5, #0
 80030c2:	f04f 0600 	mov.w	r6, #0
 80030c6:	0216      	lsls	r6, r2, #8
 80030c8:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 80030cc:	020d      	lsls	r5, r1, #8
 80030ce:	ea45 030a 	orr.w	r3, r5, sl
 80030d2:	ea46 040b 	orr.w	r4, r6, fp
 80030d6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030da:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80030de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e0:	3302      	adds	r3, #2
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b2d9      	uxtb	r1, r3
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0500 	mov.w	r5, #0
 80030f2:	f04f 0600 	mov.w	r6, #0
 80030f6:	0416      	lsls	r6, r2, #16
 80030f8:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80030fc:	040d      	lsls	r5, r1, #16
 80030fe:	ea45 030a 	orr.w	r3, r5, sl
 8003102:	ea46 040b 	orr.w	r4, r6, fp
 8003106:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800310a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800310e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003110:	3303      	adds	r3, #3
 8003112:	6938      	ldr	r0, [r7, #16]
 8003114:	4403      	add	r3, r0
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f04f 0400 	mov.w	r4, #0
 800311e:	0a18      	lsrs	r0, r3, #8
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800312a:	ea43 0301 	orr.w	r3, r3, r1
 800312e:	ea44 0402 	orr.w	r4, r4, r2
 8003132:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003136:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313c:	3304      	adds	r3, #4
 800313e:	6938      	ldr	r0, [r7, #16]
 8003140:	4403      	add	r3, r0
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	fa5f fa83 	uxtb.w	sl, r3
 8003148:	f04f 0b00 	mov.w	fp, #0
 800314c:	f04f 0500 	mov.w	r5, #0
 8003150:	f04f 0600 	mov.w	r6, #0
 8003154:	4656      	mov	r6, sl
 8003156:	2500      	movs	r5, #0
 8003158:	ea45 0301 	orr.w	r3, r5, r1
 800315c:	ea46 0402 	orr.w	r4, r6, r2
 8003160:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003164:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	3305      	adds	r3, #5
 800316c:	6938      	ldr	r0, [r7, #16]
 800316e:	4403      	add	r3, r0
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	fa5f fa83 	uxtb.w	sl, r3
 8003176:	f04f 0b00 	mov.w	fp, #0
 800317a:	f04f 0500 	mov.w	r5, #0
 800317e:	f04f 0600 	mov.w	r6, #0
 8003182:	ea4f 260a 	mov.w	r6, sl, lsl #8
 8003186:	2500      	movs	r5, #0
 8003188:	ea45 0301 	orr.w	r3, r5, r1
 800318c:	ea46 0402 	orr.w	r4, r6, r2
 8003190:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003194:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	3306      	adds	r3, #6
 800319c:	6938      	ldr	r0, [r7, #16]
 800319e:	4403      	add	r3, r0
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	fa5f fa83 	uxtb.w	sl, r3
 80031a6:	f04f 0b00 	mov.w	fp, #0
 80031aa:	f04f 0500 	mov.w	r5, #0
 80031ae:	f04f 0600 	mov.w	r6, #0
 80031b2:	ea4f 460a 	mov.w	r6, sl, lsl #16
 80031b6:	2500      	movs	r5, #0
 80031b8:	ea45 0301 	orr.w	r3, r5, r1
 80031bc:	ea46 0402 	orr.w	r4, r6, r2
 80031c0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80031c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	3307      	adds	r3, #7
 80031cc:	6938      	ldr	r0, [r7, #16]
 80031ce:	4403      	add	r3, r0
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	fa5f fa83 	uxtb.w	sl, r3
 80031d6:	f04f 0b00 	mov.w	fp, #0
 80031da:	f04f 0500 	mov.w	r5, #0
 80031de:	f04f 0600 	mov.w	r6, #0
 80031e2:	ea4f 660a 	mov.w	r6, sl, lsl #24
 80031e6:	2500      	movs	r5, #0
 80031e8:	ea45 0301 	orr.w	r3, r5, r1
 80031ec:	ea46 0402 	orr.w	r4, r6, r2
 80031f0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 80031f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031fc:	3215      	adds	r2, #21
 80031fe:	00d2      	lsls	r2, r2, #3
 8003200:	440a      	add	r2, r1
 8003202:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	3308      	adds	r3, #8
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	3301      	adds	r3, #1
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
 8003212:	e731      	b.n	8003078 <_ZN11sensor_msgs3Imu11deserializeEPh+0x226>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f7ff f949 	bl	80024b8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003226:	4602      	mov	r2, r0
 8003228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322a:	4413      	add	r3, r2
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 800322e:	2300      	movs	r3, #0
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	2b08      	cmp	r3, #8
 8003236:	f200 80ca 	bhi.w	80033ce <_ZN11sensor_msgs3Imu11deserializeEPh+0x57c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	f04f 0400 	mov.w	r4, #0
 8003242:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003246:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800324a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324c:	6938      	ldr	r0, [r7, #16]
 800324e:	4403      	add	r3, r0
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b2dd      	uxtb	r5, r3
 8003254:	f04f 0600 	mov.w	r6, #0
 8003258:	ea45 0301 	orr.w	r3, r5, r1
 800325c:	ea46 0402 	orr.w	r4, r6, r2
 8003260:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003264:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	3301      	adds	r3, #1
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2d9      	uxtb	r1, r3
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0500 	mov.w	r5, #0
 800327c:	f04f 0600 	mov.w	r6, #0
 8003280:	0216      	lsls	r6, r2, #8
 8003282:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8003286:	020d      	lsls	r5, r1, #8
 8003288:	ea45 0308 	orr.w	r3, r5, r8
 800328c:	ea46 0409 	orr.w	r4, r6, r9
 8003290:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003294:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329a:	3302      	adds	r3, #2
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b2d9      	uxtb	r1, r3
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0500 	mov.w	r5, #0
 80032ac:	f04f 0600 	mov.w	r6, #0
 80032b0:	0416      	lsls	r6, r2, #16
 80032b2:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80032b6:	040d      	lsls	r5, r1, #16
 80032b8:	ea45 0308 	orr.w	r3, r5, r8
 80032bc:	ea46 0409 	orr.w	r4, r6, r9
 80032c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80032c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ca:	3303      	adds	r3, #3
 80032cc:	6938      	ldr	r0, [r7, #16]
 80032ce:	4403      	add	r3, r0
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f04f 0400 	mov.w	r4, #0
 80032d8:	0a18      	lsrs	r0, r3, #8
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032e4:	ea43 0301 	orr.w	r3, r3, r1
 80032e8:	ea44 0402 	orr.w	r4, r4, r2
 80032ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80032f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f6:	3304      	adds	r3, #4
 80032f8:	6938      	ldr	r0, [r7, #16]
 80032fa:	4403      	add	r3, r0
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	fa5f f883 	uxtb.w	r8, r3
 8003302:	f04f 0900 	mov.w	r9, #0
 8003306:	f04f 0500 	mov.w	r5, #0
 800330a:	f04f 0600 	mov.w	r6, #0
 800330e:	4646      	mov	r6, r8
 8003310:	2500      	movs	r5, #0
 8003312:	ea45 0301 	orr.w	r3, r5, r1
 8003316:	ea46 0402 	orr.w	r4, r6, r2
 800331a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800331e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003324:	3305      	adds	r3, #5
 8003326:	6938      	ldr	r0, [r7, #16]
 8003328:	4403      	add	r3, r0
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	fa5f f883 	uxtb.w	r8, r3
 8003330:	f04f 0900 	mov.w	r9, #0
 8003334:	f04f 0500 	mov.w	r5, #0
 8003338:	f04f 0600 	mov.w	r6, #0
 800333c:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8003340:	2500      	movs	r5, #0
 8003342:	ea45 0301 	orr.w	r3, r5, r1
 8003346:	ea46 0402 	orr.w	r4, r6, r2
 800334a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800334e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003354:	3306      	adds	r3, #6
 8003356:	6938      	ldr	r0, [r7, #16]
 8003358:	4403      	add	r3, r0
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	fa5f f883 	uxtb.w	r8, r3
 8003360:	f04f 0900 	mov.w	r9, #0
 8003364:	f04f 0500 	mov.w	r5, #0
 8003368:	f04f 0600 	mov.w	r6, #0
 800336c:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8003370:	2500      	movs	r5, #0
 8003372:	ea45 0301 	orr.w	r3, r5, r1
 8003376:	ea46 0402 	orr.w	r4, r6, r2
 800337a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800337e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	3307      	adds	r3, #7
 8003386:	6938      	ldr	r0, [r7, #16]
 8003388:	4403      	add	r3, r0
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	fa5f f883 	uxtb.w	r8, r3
 8003390:	f04f 0900 	mov.w	r9, #0
 8003394:	f04f 0500 	mov.w	r5, #0
 8003398:	f04f 0600 	mov.w	r6, #0
 800339c:	ea4f 6608 	mov.w	r6, r8, lsl #24
 80033a0:	2500      	movs	r5, #0
 80033a2:	ea45 0301 	orr.w	r3, r5, r1
 80033a6:	ea46 0402 	orr.w	r4, r6, r2
 80033aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 80033ae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b6:	3222      	adds	r2, #34	; 0x22
 80033b8:	00d2      	lsls	r2, r2, #3
 80033ba:	440a      	add	r2, r1
 80033bc:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80033c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c2:	3308      	adds	r3, #8
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	3301      	adds	r3, #1
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
 80033cc:	e731      	b.n	8003232 <_ZN11sensor_msgs3Imu11deserializeEPh+0x3e0>
      }
     return offset;
 80033ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80033d0:	4618      	mov	r0, r3
 80033d2:	3744      	adds	r7, #68	; 0x44
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080033dc <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	0800da60 	.word	0x0800da60

080033f8 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	0800da70 	.word	0x0800da70

08003414 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fc8a 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a07      	ldr	r2, [pc, #28]	; (800344c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
    {
    }
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	0800e5f4 	.word	0x0800e5f4
 800344c:	0800d90c 	.word	0x0800d90c

08003450 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fc feb0 	bl	80001c8 <strlen>
 8003468:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	4413      	add	r3, r2
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb88 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3304      	adds	r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	18d0      	adds	r0, r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	4619      	mov	r1, r3
 800348c:	f00a f8ea 	bl	800d664 <memcpy>
      offset += length_label;
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4413      	add	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	b2ca      	uxtb	r2, r1
 80034a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0a19      	lsrs	r1, r3, #8
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3301      	adds	r3, #1
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	b2ca      	uxtb	r2, r1
 80034b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	0c19      	lsrs	r1, r3, #16
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3302      	adds	r3, #2
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	b2ca      	uxtb	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0e19      	lsrs	r1, r3, #24
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3303      	adds	r3, #3
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	b2ca      	uxtb	r2, r1
 80034da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3304      	adds	r3, #4
 80034e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	b2ca      	uxtb	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a19      	lsrs	r1, r3, #8
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3301      	adds	r3, #1
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4413      	add	r3, r2
 80034fe:	b2ca      	uxtb	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	0c19      	lsrs	r1, r3, #16
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3302      	adds	r3, #2
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4413      	add	r3, r2
 8003510:	b2ca      	uxtb	r2, r1
 8003512:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	0e19      	lsrs	r1, r3, #24
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3303      	adds	r3, #3
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	4413      	add	r3, r2
 8003522:	b2ca      	uxtb	r2, r1
 8003524:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
      return offset;
 800352c:	68fb      	ldr	r3, [r7, #12]
    }
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	441a      	add	r2, r3
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fb37 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3304      	adds	r3, #4
 800355a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	d20c      	bcs.n	8003586 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	441a      	add	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	3b01      	subs	r3, #1
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	440b      	add	r3, r1
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3301      	adds	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e7ec      	b.n	8003560 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	3b01      	subs	r3, #1
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4413      	add	r3, r2
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	3b01      	subs	r3, #1
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	4413      	add	r3, r2
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	3301      	adds	r3, #1
 80035c0:	6839      	ldr	r1, [r7, #0]
 80035c2:	440b      	add	r3, r1
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	3302      	adds	r3, #2
 80035d6:	6839      	ldr	r1, [r7, #0]
 80035d8:	440b      	add	r3, r1
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3303      	adds	r3, #3
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	440b      	add	r3, r1
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	3304      	adds	r3, #4
 80035fe:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	4413      	add	r3, r2
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	3301      	adds	r3, #1
 8003616:	6839      	ldr	r1, [r7, #0]
 8003618:	440b      	add	r3, r1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	3302      	adds	r3, #2
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	440b      	add	r3, r1
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	3303      	adds	r3, #3
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	440b      	add	r3, r1
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3304      	adds	r3, #4
 8003654:	613b      	str	r3, [r7, #16]
     return offset;
 8003656:	693b      	ldr	r3, [r7, #16]
    }
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	0800da94 	.word	0x0800da94

0800367c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	0800dab4 	.word	0x0800dab4

08003698 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd fb48 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3308      	adds	r3, #8
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff feab 	bl	8003414 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]
    {
    }
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	0800e5dc 	.word	0x0800e5dc

080036d8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	b2ca      	uxtb	r2, r1
 80036f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	0a19      	lsrs	r1, r3, #8
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4413      	add	r3, r2
 8003702:	b2ca      	uxtb	r2, r1
 8003704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0c19      	lsrs	r1, r3, #16
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3302      	adds	r3, #2
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	4413      	add	r3, r2
 8003714:	b2ca      	uxtb	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0e19      	lsrs	r1, r3, #24
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3303      	adds	r3, #3
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4413      	add	r3, r2
 8003726:	b2ca      	uxtb	r2, r1
 8003728:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d218      	bcs.n	8003770 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	18d0      	adds	r0, r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	4413      	add	r3, r2
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	440a      	add	r2, r1
 800375c:	4611      	mov	r1, r2
 800375e:	4798      	blx	r3
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4413      	add	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3301      	adds	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	e7e1      	b.n	8003734 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	4413      	add	r3, r2
 800377a:	b2ca      	uxtb	r2, r1
 800377c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	0a19      	lsrs	r1, r3, #8
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3301      	adds	r3, #1
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	4413      	add	r3, r2
 800378c:	b2ca      	uxtb	r2, r1
 800378e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	0c19      	lsrs	r1, r3, #16
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3302      	adds	r3, #2
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	4413      	add	r3, r2
 800379e:	b2ca      	uxtb	r2, r1
 80037a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	0e19      	lsrs	r1, r3, #24
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3303      	adds	r3, #3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	4413      	add	r3, r2
 80037b0:	b2ca      	uxtb	r2, r1
 80037b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80037ba:	68fb      	ldr	r3, [r7, #12]
    }
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3301      	adds	r3, #1
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3302      	adds	r3, #2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3303      	adds	r3, #3
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4413      	add	r3, r2
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	3304      	adds	r3, #4
 8003816:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	429a      	cmp	r2, r3
 8003820:	d90a      	bls.n	8003838 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f009 ffd5 	bl	800d7dc <realloc>
 8003832:	4602      	mov	r2, r0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d21b      	bcs.n	8003884 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f103 0008 	add.w	r0, r3, #8
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4619      	mov	r1, r3
 800385a:	f7ff fe6c 	bl	8003536 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800385e:	4602      	mov	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	18d0      	adds	r0, r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3308      	adds	r3, #8
 8003874:	2210      	movs	r2, #16
 8003876:	4619      	mov	r1, r3
 8003878:	f009 fef4 	bl	800d664 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3301      	adds	r3, #1
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e7de      	b.n	8003842 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	4413      	add	r3, r2
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	6839      	ldr	r1, [r7, #0]
 800389c:	440b      	add	r3, r1
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3302      	adds	r3, #2
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	440b      	add	r3, r1
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	041b      	lsls	r3, r3, #16
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3303      	adds	r3, #3
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	440b      	add	r3, r1
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	3304      	adds	r3, #4
 80038d8:	617b      	str	r3, [r7, #20]
     return offset;
 80038da:	697b      	ldr	r3, [r7, #20]
    }
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	0800dad8 	.word	0x0800dad8

08003900 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	0800daf4 	.word	0x0800daf4

0800391c <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fa06 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 800392c:	4a09      	ldr	r2, [pc, #36]	; (8003954 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x38>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff feae 	bl	8003698 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	0800e5c4 	.word	0x0800e5c4

08003958 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	1d18      	adds	r0, r3, #4
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	4413      	add	r3, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f7ff feb1 	bl	80036d8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003976:	4602      	mov	r2, r0
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	4413      	add	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	4413      	add	r3, r2
 8003988:	b2ca      	uxtb	r2, r1
 800398a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	0a19      	lsrs	r1, r3, #8
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3301      	adds	r3, #1
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4413      	add	r3, r2
 800399a:	b2ca      	uxtb	r2, r1
 800399c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	0c19      	lsrs	r1, r3, #16
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3302      	adds	r3, #2
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	b2ca      	uxtb	r2, r1
 80039ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	0e19      	lsrs	r1, r3, #24
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	3303      	adds	r3, #3
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	b2ca      	uxtb	r2, r1
 80039c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3304      	adds	r3, #4
 80039c6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d22b      	bcs.n	8003a2e <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xd6>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	4413      	add	r3, r2
 80039ec:	b2ca      	uxtb	r2, r1
 80039ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	0a19      	lsrs	r1, r3, #8
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	3301      	adds	r3, #1
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	b2ca      	uxtb	r2, r1
 80039fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	0c19      	lsrs	r1, r3, #16
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	3302      	adds	r3, #2
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	b2ca      	uxtb	r2, r1
 8003a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	0e19      	lsrs	r1, r3, #24
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3303      	adds	r3, #3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b2ca      	uxtb	r2, r1
 8003a1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3304      	adds	r3, #4
 8003a24:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e7ce      	b.n	80039cc <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x74>
      }
      return offset;
 8003a2e:	697b      	ldr	r3, [r7, #20]
    }
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	1d18      	adds	r0, r3, #4
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	4413      	add	r3, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	f7ff feb7 	bl	80037c4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003a56:	4602      	mov	r2, r0
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	4413      	add	r3, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3303      	adds	r3, #3
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	061b      	lsls	r3, r3, #24
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d90a      	bls.n	8003ac4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f009 fe8f 	bl	800d7dc <realloc>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d236      	bcs.n	8003b46 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x10e>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3301      	adds	r3, #1
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	440b      	add	r3, r1
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	3302      	adds	r3, #2
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	440b      	add	r3, r1
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	041b      	lsls	r3, r3, #16
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3303      	adds	r3, #3
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	440b      	add	r3, r1
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	3228      	adds	r2, #40	; 0x28
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e7c3      	b.n	8003ace <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x96>
      }
     return offset;
 8003b46:	697b      	ldr	r3, [r7, #20]
    }
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	0800db18 	.word	0x0800db18

08003b6c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	0800db34 	.word	0x0800db34

08003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d80d      	bhi.n	8003bb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	fa22 f103 	lsr.w	r1, r2, r3
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	b2ca      	uxtb	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e7ee      	b.n	8003b96 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d811      	bhi.n	8003c02 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	440a      	add	r2, r1
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	4611      	mov	r1, r2
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	00d2      	lsls	r2, r2, #3
 8003bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e7ea      	b.n	8003bd8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
  }

  Time now()
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  {
    uint32_t ms = hardware_.time();
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd f8b1 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8003c24:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd f874 	bl	8000d14 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x78>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	099a      	lsrs	r2, r3, #6
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x78>)
 8003c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x7c>)
 8003c5c:	fb02 f203 	mul.w	r2, r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c66:	331c      	adds	r3, #28
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	441a      	add	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f009 fc82 	bl	800d580 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8003c7c:	bf00      	nop
  }
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	10624dd3 	.word	0x10624dd3
 8003c8c:	000f4240 	.word	0x000f4240

08003c90 <_Z41__static_initialization_and_destruction_0ii>:
	imu_msg.orientation_covariance[4] = 0.0025;
	imu_msg.orientation_covariance[5] = 0;
	imu_msg.orientation_covariance[6] = 0;
	imu_msg.orientation_covariance[7] = 0;
	imu_msg.orientation_covariance[8] = 0.0025;
}
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d15b      	bne.n	8003d58 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d156      	bne.n	8003d58 <_Z41__static_initialization_and_destruction_0ii+0xc8>

// ROS node handler
extern ros::NodeHandle nh;

// ROS message struct
static std_msgs::String debug_msg;
 8003caa:	482d      	ldr	r0, [pc, #180]	; (8003d60 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8003cac:	f7fd f876 	bl	8000d9c <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8003cb0:	482c      	ldr	r0, [pc, #176]	; (8003d64 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8003cb2:	f7fd f90f 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8003cb6:	482c      	ldr	r0, [pc, #176]	; (8003d68 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8003cb8:	f7fd f90c 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 tick_msg;
 8003cbc:	482b      	ldr	r0, [pc, #172]	; (8003d6c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8003cbe:	f7fd f909 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>

extern volatile int64_t tenk_tick;

static std_msgs::Int64 test1_msg;
 8003cc2:	482b      	ldr	r0, [pc, #172]	; (8003d70 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8003cc4:	f7fd f906 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test2_msg;
 8003cc8:	482a      	ldr	r0, [pc, #168]	; (8003d74 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8003cca:	f7fd f903 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>


static std_msgs::Float32 lwheel_vel_msg;
 8003cce:	482a      	ldr	r0, [pc, #168]	; (8003d78 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8003cd0:	f7fd fa8c 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static std_msgs::Float32 rwheel_vel_msg;
 8003cd4:	4829      	ldr	r0, [pc, #164]	; (8003d7c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8003cd6:	f7fd fa89 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>

// ROS message publisher handler
static ros::Publisher debug_pub("debug", &debug_msg);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8003cde:	4928      	ldr	r1, [pc, #160]	; (8003d80 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8003ce0:	4828      	ldr	r0, [pc, #160]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8003ce2:	f7fd f839 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8003cea:	4927      	ldr	r1, [pc, #156]	; (8003d88 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8003cec:	4827      	ldr	r0, [pc, #156]	; (8003d8c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003cee:	f7fd f833 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8003cf6:	4926      	ldr	r1, [pc, #152]	; (8003d90 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8003cf8:	4826      	ldr	r0, [pc, #152]	; (8003d94 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8003cfa:	f7fd f82d 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher tick_pub("tick", &tick_msg);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8003d02:	4925      	ldr	r1, [pc, #148]	; (8003d98 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8003d04:	4825      	ldr	r0, [pc, #148]	; (8003d9c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8003d06:	f7fd f827 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher lwheel_vel_pub("lwheel_vel", &lwheel_vel_msg);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8003d0e:	4924      	ldr	r1, [pc, #144]	; (8003da0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8003d10:	4824      	ldr	r0, [pc, #144]	; (8003da4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8003d12:	f7fd f821 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher rwheel_vel_pub("rwheel_vel", &rwheel_vel_msg);
 8003d16:	2300      	movs	r3, #0
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8003d1a:	4923      	ldr	r1, [pc, #140]	; (8003da8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8003d1c:	4823      	ldr	r0, [pc, #140]	; (8003dac <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8003d1e:	f7fd f81b 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::Imu imu_msg;
 8003d22:	4823      	ldr	r0, [pc, #140]	; (8003db0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8003d24:	f7fe fe76 	bl	8002a14 <_ZN11sensor_msgs3ImuC1Ev>
std_msgs::Float32MultiArray rpy_msg;
 8003d28:	4822      	ldr	r0, [pc, #136]	; (8003db4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003d2a:	f7ff fdf7 	bl	800391c <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray quat_msg;
 8003d2e:	4822      	ldr	r0, [pc, #136]	; (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8003d30:	f7ff fdf4 	bl	800391c <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher imu_pub("imu", &imu_msg);
 8003d34:	2300      	movs	r3, #0
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8003d38:	4920      	ldr	r1, [pc, #128]	; (8003dbc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003d3a:	4821      	ldr	r0, [pc, #132]	; (8003dc0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003d3c:	f7fd f80c 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpy_pub("rpy", &rpy_msg);
 8003d40:	2300      	movs	r3, #0
 8003d42:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003d44:	491f      	ldr	r1, [pc, #124]	; (8003dc4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003d46:	4820      	ldr	r0, [pc, #128]	; (8003dc8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003d48:	f7fd f806 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher quat_pub("quat", &quat_msg);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	; (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8003d50:	491e      	ldr	r1, [pc, #120]	; (8003dcc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003d52:	481f      	ldr	r0, [pc, #124]	; (8003dd0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003d54:	f7fd f800 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2000009c 	.word	0x2000009c
 8003d64:	200000a8 	.word	0x200000a8
 8003d68:	200000b8 	.word	0x200000b8
 8003d6c:	200000c8 	.word	0x200000c8
 8003d70:	200000d8 	.word	0x200000d8
 8003d74:	200000e8 	.word	0x200000e8
 8003d78:	200000f8 	.word	0x200000f8
 8003d7c:	20000100 	.word	0x20000100
 8003d80:	0800db64 	.word	0x0800db64
 8003d84:	20000108 	.word	0x20000108
 8003d88:	0800db6c 	.word	0x0800db6c
 8003d8c:	2000011c 	.word	0x2000011c
 8003d90:	0800db7c 	.word	0x0800db7c
 8003d94:	20000130 	.word	0x20000130
 8003d98:	0800db8c 	.word	0x0800db8c
 8003d9c:	20000144 	.word	0x20000144
 8003da0:	0800db94 	.word	0x0800db94
 8003da4:	20000158 	.word	0x20000158
 8003da8:	0800dba0 	.word	0x0800dba0
 8003dac:	2000016c 	.word	0x2000016c
 8003db0:	20000180 	.word	0x20000180
 8003db4:	200002d8 	.word	0x200002d8
 8003db8:	20000308 	.word	0x20000308
 8003dbc:	0800dbac 	.word	0x0800dbac
 8003dc0:	20000338 	.word	0x20000338
 8003dc4:	0800dbb0 	.word	0x0800dbb0
 8003dc8:	2000034c 	.word	0x2000034c
 8003dcc:	0800dbb4 	.word	0x0800dbb4
 8003dd0:	20000360 	.word	0x20000360

08003dd4 <_GLOBAL__sub_I_MPU6050_addr>:
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f7ff ff57 	bl	8003c90 <_Z41__static_initialization_and_destruction_0ii>
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003de8:	f005 ff9c 	bl	8009d24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003dec:	f000 f80e 	bl	8003e0c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003df0:	f000 f90a 	bl	8004008 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8003df4:	f000 f8e0 	bl	8003fb8 <_ZL11MX_DMA_Initv>
	MX_I2C1_Init();
 8003df8:	f000 f87c 	bl	8003ef4 <_ZL12MX_I2C1_Initv>

	MX_USART1_UART_Init();
 8003dfc:	f000 f8ae 	bl	8003f5c <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	setup();
 8003e00:	f001 f9ea 	bl	80051d8 <_Z5setupv>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		loop();
 8003e04:	f001 fa36 	bl	8005274 <_Z4loopv>
 8003e08:	e7fc      	b.n	8003e04 <main+0x20>
	...

08003e0c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b094      	sub	sp, #80	; 0x50
 8003e10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003e12:	f107 0320 	add.w	r3, r7, #32
 8003e16:	2230      	movs	r2, #48	; 0x30
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f009 fc2d 	bl	800d67a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003e20:	f107 030c 	add.w	r3, r7, #12
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <_Z18SystemClock_Configv+0xe0>)
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <_Z18SystemClock_Configv+0xe0>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <_Z18SystemClock_Configv+0xe0>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	607b      	str	r3, [r7, #4]
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <_Z18SystemClock_Configv+0xe4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <_Z18SystemClock_Configv+0xe4>)
 8003e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <_Z18SystemClock_Configv+0xe4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e70:	2310      	movs	r3, #16
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e74:	2302      	movs	r3, #2
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003e80:	23a8      	movs	r3, #168	; 0xa8
 8003e82:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e84:	2302      	movs	r3, #2
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e88:	2304      	movs	r3, #4
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003e8c:	f107 0320 	add.w	r3, r7, #32
 8003e90:	4618      	mov	r0, r3
 8003e92:	f006 ff6b 	bl	800ad6c <HAL_RCC_OscConfig>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 8003ea6:	f000 f90d 	bl	80040c4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003eaa:	230f      	movs	r3, #15
 8003eac:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003eba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	2105      	movs	r1, #5
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f007 f9bf 	bl	800b24c <HAL_RCC_ClockConfig>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf14      	ite	ne
 8003ed4:	2301      	movne	r3, #1
 8003ed6:	2300      	moveq	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <_Z18SystemClock_Configv+0xd6>
		Error_Handler();
 8003ede:	f000 f8f1 	bl	80040c4 <Error_Handler>
	}
}
 8003ee2:	bf00      	nop
 8003ee4:	3750      	adds	r7, #80	; 0x50
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000

08003ef4 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <_ZL12MX_I2C1_Initv+0x60>)
 8003efc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <_ZL12MX_I2C1_Initv+0x64>)
 8003f02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f16:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f18:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003f30:	4807      	ldr	r0, [pc, #28]	; (8003f50 <_ZL12MX_I2C1_Initv+0x5c>)
 8003f32:	f006 fde3 	bl	800aafc <HAL_I2C_Init>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 8003f46:	f000 f8bd 	bl	80040c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000458 	.word	0x20000458
 8003f54:	40005400 	.word	0x40005400
 8003f58:	000186a0 	.word	0x000186a0

08003f5c <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f62:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8003f64:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f6c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f82:	220c      	movs	r2, #12
 8003f84:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f8c:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003f92:	4807      	ldr	r0, [pc, #28]	; (8003fb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003f94:	f008 fb26 	bl	800c5e4 <HAL_UART_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8003fa8:	f000 f88c 	bl	80040c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200004ac 	.word	0x200004ac
 8003fb4:	40011000 	.word	0x40011000

08003fb8 <_ZL11MX_DMA_Initv>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <_ZL11MX_DMA_Initv+0x4c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <_ZL11MX_DMA_Initv+0x4c>)
 8003fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <_ZL11MX_DMA_Initv+0x4c>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2100      	movs	r1, #0
 8003fde:	203a      	movs	r0, #58	; 0x3a
 8003fe0:	f005 ffed 	bl	8009fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003fe4:	203a      	movs	r0, #58	; 0x3a
 8003fe6:	f006 f806 	bl	8009ff6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003fea:	2200      	movs	r2, #0
 8003fec:	2100      	movs	r1, #0
 8003fee:	2046      	movs	r0, #70	; 0x46
 8003ff0:	f005 ffe5 	bl	8009fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003ff4:	2046      	movs	r0, #70	; 0x46
 8003ff6:	f005 fffe 	bl	8009ff6 <HAL_NVIC_EnableIRQ>

}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800

08004008 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	4b26      	ldr	r3, [pc, #152]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a25      	ldr	r2, [pc, #148]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 800407c:	f043 0302 	orr.w	r3, r3, #2
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <_ZL12MX_GPIO_Initv+0xb4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800408e:	2200      	movs	r2, #0
 8004090:	213c      	movs	r1, #60	; 0x3c
 8004092:	480b      	ldr	r0, [pc, #44]	; (80040c0 <_ZL12MX_GPIO_Initv+0xb8>)
 8004094:	f006 fcf4 	bl	800aa80 <HAL_GPIO_WritePin>
			MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
					| MOTOR_B_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
 8004098:	233c      	movs	r3, #60	; 0x3c
 800409a:	617b      	str	r3, [r7, #20]
			| MOTOR_B_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800409c:	2301      	movs	r3, #1
 800409e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a4:	2300      	movs	r3, #0
 80040a6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	4619      	mov	r1, r3
 80040ae:	4804      	ldr	r0, [pc, #16]	; (80040c0 <_ZL12MX_GPIO_Initv+0xb8>)
 80040b0:	f006 fb4c 	bl	800a74c <HAL_GPIO_Init>

}
 80040b4:	bf00      	nop
 80040b6:	3728      	adds	r7, #40	; 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40021000 	.word	0x40021000

080040c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <_Z41__static_initialization_and_destruction_0ii>:
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d140      	bne.n	8004166 <_Z41__static_initialization_and_destruction_0ii+0x92>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d13b      	bne.n	8004166 <_Z41__static_initialization_and_destruction_0ii+0x92>
static std_msgs::String debug_msg;
 80040ee:	4820      	ldr	r0, [pc, #128]	; (8004170 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80040f0:	f7fc fe54 	bl	8000d9c <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 80040f4:	481f      	ldr	r0, [pc, #124]	; (8004174 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80040f6:	f7fc feed 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 80040fa:	481f      	ldr	r0, [pc, #124]	; (8004178 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80040fc:	f7fc feea 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 tick_msg;
 8004100:	481e      	ldr	r0, [pc, #120]	; (800417c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004102:	f7fc fee7 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test1_msg;
 8004106:	481e      	ldr	r0, [pc, #120]	; (8004180 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004108:	f7fc fee4 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test2_msg;
 800410c:	481d      	ldr	r0, [pc, #116]	; (8004184 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800410e:	f7fc fee1 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Float32 lwheel_vel_msg;
 8004112:	481d      	ldr	r0, [pc, #116]	; (8004188 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004114:	f7fd f86a 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static std_msgs::Float32 rwheel_vel_msg;
 8004118:	481c      	ldr	r0, [pc, #112]	; (800418c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800411a:	f7fd f867 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 800411e:	2300      	movs	r3, #0
 8004120:	4a13      	ldr	r2, [pc, #76]	; (8004170 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004122:	491b      	ldr	r1, [pc, #108]	; (8004190 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004124:	481b      	ldr	r0, [pc, #108]	; (8004194 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004126:	f7fc fe17 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 800412a:	2300      	movs	r3, #0
 800412c:	4a11      	ldr	r2, [pc, #68]	; (8004174 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800412e:	491a      	ldr	r1, [pc, #104]	; (8004198 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004130:	481a      	ldr	r0, [pc, #104]	; (800419c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004132:	f7fc fe11 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8004136:	2300      	movs	r3, #0
 8004138:	4a0f      	ldr	r2, [pc, #60]	; (8004178 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800413a:	4919      	ldr	r1, [pc, #100]	; (80041a0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800413c:	4819      	ldr	r0, [pc, #100]	; (80041a4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800413e:	f7fc fe0b 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher tick_pub("tick", &tick_msg);
 8004142:	2300      	movs	r3, #0
 8004144:	4a0d      	ldr	r2, [pc, #52]	; (800417c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004146:	4918      	ldr	r1, [pc, #96]	; (80041a8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004148:	4818      	ldr	r0, [pc, #96]	; (80041ac <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800414a:	f7fc fe05 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher lwheel_vel_pub("lwheel_vel", &lwheel_vel_msg);
 800414e:	2300      	movs	r3, #0
 8004150:	4a0d      	ldr	r2, [pc, #52]	; (8004188 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004152:	4917      	ldr	r1, [pc, #92]	; (80041b0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004154:	4817      	ldr	r0, [pc, #92]	; (80041b4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004156:	f7fc fdff 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher rwheel_vel_pub("rwheel_vel", &rwheel_vel_msg);
 800415a:	2300      	movs	r3, #0
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800415e:	4916      	ldr	r1, [pc, #88]	; (80041b8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8004160:	4816      	ldr	r0, [pc, #88]	; (80041bc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8004162:	f7fc fdf9 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000374 	.word	0x20000374
 8004174:	20000380 	.word	0x20000380
 8004178:	20000390 	.word	0x20000390
 800417c:	200003a0 	.word	0x200003a0
 8004180:	200003b0 	.word	0x200003b0
 8004184:	200003c0 	.word	0x200003c0
 8004188:	200003d0 	.word	0x200003d0
 800418c:	200003d8 	.word	0x200003d8
 8004190:	0800dc60 	.word	0x0800dc60
 8004194:	200003e0 	.word	0x200003e0
 8004198:	0800dc68 	.word	0x0800dc68
 800419c:	200003f4 	.word	0x200003f4
 80041a0:	0800dc78 	.word	0x0800dc78
 80041a4:	20000408 	.word	0x20000408
 80041a8:	0800dc88 	.word	0x0800dc88
 80041ac:	2000041c 	.word	0x2000041c
 80041b0:	0800dc90 	.word	0x0800dc90
 80041b4:	20000430 	.word	0x20000430
 80041b8:	0800dc9c 	.word	0x0800dc9c
 80041bc:	20000444 	.word	0x20000444

080041c0 <_GLOBAL__sub_I_hi2c1>:
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041c8:	2001      	movs	r0, #1
 80041ca:	f7ff ff83 	bl	80040d4 <_Z41__static_initialization_and_destruction_0ii>
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
      data()
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc fdac 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc fd92 	bl	8000d14 <_ZN3ros4TimeC1Ev>
    {
    }
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	0800e788 	.word	0x0800e788

08004200 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	4413      	add	r3, r2
 8004218:	b2ca      	uxtb	r2, r1
 800421a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0a19      	lsrs	r1, r3, #8
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	4413      	add	r3, r2
 800422a:	b2ca      	uxtb	r2, r1
 800422c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	0c19      	lsrs	r1, r3, #16
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3302      	adds	r3, #2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4413      	add	r3, r2
 800423c:	b2ca      	uxtb	r2, r1
 800423e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0e19      	lsrs	r1, r3, #24
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3303      	adds	r3, #3
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	4413      	add	r3, r2
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6899      	ldr	r1, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	4413      	add	r3, r2
 8004262:	b2ca      	uxtb	r2, r1
 8004264:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0a19      	lsrs	r1, r3, #8
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	4413      	add	r3, r2
 8004274:	b2ca      	uxtb	r2, r1
 8004276:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	0c19      	lsrs	r1, r3, #16
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3302      	adds	r3, #2
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	4413      	add	r3, r2
 8004286:	b2ca      	uxtb	r2, r1
 8004288:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0e19      	lsrs	r1, r3, #24
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3303      	adds	r3, #3
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	4413      	add	r3, r2
 8004298:	b2ca      	uxtb	r2, r1
 800429a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3304      	adds	r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80042a2:	68fb      	ldr	r3, [r7, #12]
    }
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	4413      	add	r3, r2
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3301      	adds	r3, #1
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	440b      	add	r3, r1
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3302      	adds	r3, #2
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	440b      	add	r3, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3303      	adds	r3, #3
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	440b      	add	r3, r1
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3304      	adds	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	4413      	add	r3, r2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3301      	adds	r3, #1
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	440b      	add	r3, r1
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3302      	adds	r3, #2
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	440b      	add	r3, r1
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	041b      	lsls	r3, r3, #16
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3303      	adds	r3, #3
 8004356:	6839      	ldr	r1, [r7, #0]
 8004358:	440b      	add	r3, r1
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
     return offset;
 800436a:	68fb      	ldr	r3, [r7, #12]
    }
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	0800dca8 	.word	0x0800dca8

08004394 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	0800dcb8 	.word	0x0800dcb8

080043b0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc fcbc 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 80043c0:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	809a      	strh	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a06      	ldr	r2, [pc, #24]	; (80043f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80043dc:	611a      	str	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	615a      	str	r2, [r3, #20]
    {
    }
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	0800e770 	.word	0x0800e770
 80043f4:	0800dcdc 	.word	0x0800dcdc

080043f8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8899      	ldrh	r1, [r3, #4]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	4413      	add	r3, r2
 8004410:	b2ca      	uxtb	r2, r1
 8004412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	889b      	ldrh	r3, [r3, #4]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	b299      	uxth	r1, r3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	4413      	add	r3, r2
 8004424:	b2ca      	uxtb	r2, r1
 8004426:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	3302      	adds	r3, #2
 800442c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fb fec8 	bl	80001c8 <strlen>
 8004438:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	4413      	add	r3, r2
 8004440:	69b9      	ldr	r1, [r7, #24]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fba0 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3304      	adds	r3, #4
 800444c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	18d0      	adds	r0, r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4619      	mov	r1, r3
 800445c:	f009 f902 	bl	800d664 <memcpy>
      offset += length_topic_name;
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	4413      	add	r3, r2
 8004466:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fb feab 	bl	80001c8 <strlen>
 8004472:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4413      	add	r3, r2
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fb83 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	18d0      	adds	r0, r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4619      	mov	r1, r3
 8004496:	f009 f8e5 	bl	800d664 <memcpy>
      offset += length_message_type;
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4413      	add	r3, r2
 80044a0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fb fe8e 	bl	80001c8 <strlen>
 80044ac:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	4413      	add	r3, r2
 80044b4:	6939      	ldr	r1, [r7, #16]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fb66 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3304      	adds	r3, #4
 80044c0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	18d0      	adds	r0, r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4619      	mov	r1, r3
 80044d0:	f009 f8c8 	bl	800d664 <memcpy>
      offset += length_md5sum;
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	b2ca      	uxtb	r2, r1
 80044ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	0a19      	lsrs	r1, r3, #8
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3301      	adds	r3, #1
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	b2ca      	uxtb	r2, r1
 80044fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	0c19      	lsrs	r1, r3, #16
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3302      	adds	r3, #2
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4413      	add	r3, r2
 800450a:	b2ca      	uxtb	r2, r1
 800450c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0e19      	lsrs	r1, r3, #24
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3303      	adds	r3, #3
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	b2ca      	uxtb	r2, r1
 800451c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3304      	adds	r3, #4
 8004522:	61fb      	str	r3, [r7, #28]
      return offset;
 8004524:	69fb      	ldr	r3, [r7, #28]
    }
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	4413      	add	r3, r2
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	889b      	ldrh	r3, [r3, #4]
 800454e:	b21a      	sxth	r2, r3
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	3301      	adds	r3, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	440b      	add	r3, r1
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	b21b      	sxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b21b      	sxth	r3, r3
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	3302      	adds	r3, #2
 800456c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	441a      	add	r2, r3
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	4611      	mov	r1, r2
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fb22 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	3304      	adds	r3, #4
 8004584:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4413      	add	r3, r2
 8004590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004592:	429a      	cmp	r2, r3
 8004594:	d20c      	bcs.n	80045b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	441a      	add	r2, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3b01      	subs	r3, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	440b      	add	r3, r1
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	3301      	adds	r3, #1
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
 80045ae:	e7ec      	b.n	800458a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	4413      	add	r3, r2
 80045b6:	3b01      	subs	r3, #1
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	4413      	add	r3, r2
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	441a      	add	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4413      	add	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	441a      	add	r2, r3
 80045da:	f107 0310 	add.w	r3, r7, #16
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff faef 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	3304      	adds	r3, #4
 80045ea:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	6a3a      	ldr	r2, [r7, #32]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d20c      	bcs.n	8004616 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	441a      	add	r2, r3
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	3b01      	subs	r3, #1
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	440b      	add	r3, r1
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	3301      	adds	r3, #1
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	e7ec      	b.n	80045f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	3b01      	subs	r3, #1
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	4413      	add	r3, r2
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	3b01      	subs	r3, #1
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	441a      	add	r2, r3
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fabc 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	3304      	adds	r3, #4
 8004650:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	429a      	cmp	r2, r3
 8004660:	d20c      	bcs.n	800467c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	441a      	add	r2, r3
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	3b01      	subs	r3, #1
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	440b      	add	r3, r1
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e7ec      	b.n	8004656 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	3b01      	subs	r3, #1
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	4413      	add	r3, r2
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	3b01      	subs	r3, #1
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	441a      	add	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	440a      	add	r2, r1
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	3301      	adds	r3, #1
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	440b      	add	r3, r1
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	3302      	adds	r3, #2
 80046ca:	6839      	ldr	r1, [r7, #0]
 80046cc:	440b      	add	r3, r1
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	3303      	adds	r3, #3
 80046dc:	6839      	ldr	r1, [r7, #0]
 80046de:	440b      	add	r3, r1
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	3304      	adds	r3, #4
 80046f2:	61bb      	str	r3, [r7, #24]
     return offset;
 80046f4:	69bb      	ldr	r3, [r7, #24]
    }
 80046f6:	4618      	mov	r0, r3
 80046f8:	3728      	adds	r7, #40	; 0x28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	0800dce0 	.word	0x0800dce0

0800471c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	0800dcfc 	.word	0x0800dcfc

08004738 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fc faf8 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8004748:	4a06      	ldr	r2, [pc, #24]	; (8004764 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	711a      	strb	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a04      	ldr	r2, [pc, #16]	; (8004768 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8004758:	609a      	str	r2, [r3, #8]
    {
    }
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	0800e758 	.word	0x0800e758
 8004768:	0800dcdc 	.word	0x0800dcdc

0800476c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	4413      	add	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	7912      	ldrb	r2, [r2, #4]
 8004784:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f7fb fd19 	bl	80001c8 <strlen>
 8004796:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4413      	add	r3, r2
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f9f1 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3304      	adds	r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	18d0      	adds	r0, r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4619      	mov	r1, r3
 80047ba:	f008 ff53 	bl	800d664 <memcpy>
      offset += length_msg;
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4413      	add	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80047c6:	68fb      	ldr	r3, [r7, #12]
    }
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	441a      	add	r2, r3
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff f9e1 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3304      	adds	r3, #4
 8004806:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	429a      	cmp	r2, r3
 8004816:	d20c      	bcs.n	8004832 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	441a      	add	r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3b01      	subs	r3, #1
 8004822:	6839      	ldr	r1, [r7, #0]
 8004824:	440b      	add	r3, r1
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e7ec      	b.n	800480c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	3b01      	subs	r3, #1
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4413      	add	r3, r2
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	3b01      	subs	r3, #1
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
     return offset;
 8004856:	693b      	ldr	r3, [r7, #16]
    }
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	0800dd20 	.word	0x0800dd20

0800487c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	0800dd34 	.word	0x0800dd34

08004898 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fc fa48 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 80048a8:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	619a      	str	r2, [r3, #24]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	61da      	str	r2, [r3, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	0800e740 	.word	0x0800e740

080048e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	b2ca      	uxtb	r2, r1
 80048fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0a19      	lsrs	r1, r3, #8
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	3301      	adds	r3, #1
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	4413      	add	r3, r2
 800490a:	b2ca      	uxtb	r2, r1
 800490c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	0c19      	lsrs	r1, r3, #16
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	3302      	adds	r3, #2
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	4413      	add	r3, r2
 800491c:	b2ca      	uxtb	r2, r1
 800491e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	0e19      	lsrs	r1, r3, #24
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	3303      	adds	r3, #3
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	4413      	add	r3, r2
 800492e:	b2ca      	uxtb	r2, r1
 8004930:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	3304      	adds	r3, #4
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004938:	2300      	movs	r3, #0
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	429a      	cmp	r2, r3
 8004944:	d22b      	bcs.n	800499e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	4413      	add	r3, r2
 800495c:	b2ca      	uxtb	r2, r1
 800495e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	0a19      	lsrs	r1, r3, #8
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	3301      	adds	r3, #1
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	4413      	add	r3, r2
 800496c:	b2ca      	uxtb	r2, r1
 800496e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	0c19      	lsrs	r1, r3, #16
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	3302      	adds	r3, #2
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	4413      	add	r3, r2
 800497c:	b2ca      	uxtb	r2, r1
 800497e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	0e19      	lsrs	r1, r3, #24
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3303      	adds	r3, #3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	4413      	add	r3, r2
 800498c:	b2ca      	uxtb	r2, r1
 800498e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	3304      	adds	r3, #4
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	3301      	adds	r3, #1
 800499a:	623b      	str	r3, [r7, #32]
 800499c:	e7ce      	b.n	800493c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6919      	ldr	r1, [r3, #16]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	4413      	add	r3, r2
 80049a8:	b2ca      	uxtb	r2, r1
 80049aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	0a19      	lsrs	r1, r3, #8
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	3301      	adds	r3, #1
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	b2ca      	uxtb	r2, r1
 80049bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	0c19      	lsrs	r1, r3, #16
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	3302      	adds	r3, #2
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	4413      	add	r3, r2
 80049cc:	b2ca      	uxtb	r2, r1
 80049ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	0e19      	lsrs	r1, r3, #24
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	3303      	adds	r3, #3
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	b2ca      	uxtb	r2, r1
 80049e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	3304      	adds	r3, #4
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d22b      	bcs.n	8004a4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	b2ca      	uxtb	r2, r1
 8004a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	0a19      	lsrs	r1, r3, #8
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	3301      	adds	r3, #1
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	b2ca      	uxtb	r2, r1
 8004a1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	0c19      	lsrs	r1, r3, #16
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	3302      	adds	r3, #2
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	b2ca      	uxtb	r2, r1
 8004a2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	0e19      	lsrs	r1, r3, #24
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	3303      	adds	r3, #3
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	b2ca      	uxtb	r2, r1
 8004a3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	3304      	adds	r3, #4
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e7ce      	b.n	80049ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69d9      	ldr	r1, [r3, #28]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	4413      	add	r3, r2
 8004a58:	b2ca      	uxtb	r2, r1
 8004a5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	0a19      	lsrs	r1, r3, #8
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	3301      	adds	r3, #1
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	4413      	add	r3, r2
 8004a6a:	b2ca      	uxtb	r2, r1
 8004a6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	0c19      	lsrs	r1, r3, #16
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	3302      	adds	r3, #2
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	b2ca      	uxtb	r2, r1
 8004a7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	0e19      	lsrs	r1, r3, #24
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3303      	adds	r3, #3
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b2ca      	uxtb	r2, r1
 8004a90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	3304      	adds	r3, #4
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d228      	bcs.n	8004af8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fb fb88 	bl	80001c8 <strlen>
 8004ab8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f860 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	3304      	adds	r3, #4
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	18d0      	adds	r0, r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f008 fdbe 	bl	800d664 <memcpy>
      offset += length_stringsi;
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	3301      	adds	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	e7d1      	b.n	8004a9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004afa:	4618      	mov	r0, r3
 8004afc:	3728      	adds	r7, #40	; 0x28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b08e      	sub	sp, #56	; 0x38
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	4413      	add	r3, r2
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	6a3a      	ldr	r2, [r7, #32]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	3302      	adds	r3, #2
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	4413      	add	r3, r2
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	3303      	adds	r3, #3
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	6a3a      	ldr	r2, [r7, #32]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	3304      	adds	r3, #4
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	6a3a      	ldr	r2, [r7, #32]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d90a      	bls.n	8004b76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f008 fe36 	bl	800d7dc <realloc>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a3a      	ldr	r2, [r7, #32]
 8004b7a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d236      	bcs.n	8004bf8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	440a      	add	r2, r1
 8004b96:	7812      	ldrb	r2, [r2, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	440b      	add	r3, r1
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	440b      	add	r3, r1
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	3303      	adds	r3, #3
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	440b      	add	r3, r1
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	061b      	lsls	r3, r3, #24
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	3304      	adds	r3, #4
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	3208      	adds	r2, #8
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf6:	e7c3      	b.n	8004b80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	3301      	adds	r3, #1
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	3302      	adds	r3, #2
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	3303      	adds	r3, #3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	061b      	lsls	r3, r3, #24
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d90a      	bls.n	8004c5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f008 fdc2 	bl	800d7dc <realloc>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8004c64:	2300      	movs	r3, #0
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d236      	bcs.n	8004ce0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c7a:	6839      	ldr	r1, [r7, #0]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	3301      	adds	r3, #1
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	440b      	add	r3, r1
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	440b      	add	r3, r1
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	3303      	adds	r3, #3
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	440b      	add	r3, r1
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	3214      	adds	r2, #20
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	3301      	adds	r3, #1
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cde:	e7c3      	b.n	8004c68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	3301      	adds	r3, #1
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	3302      	adds	r3, #2
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	041b      	lsls	r3, r3, #16
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d10:	3303      	adds	r3, #3
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	4413      	add	r3, r2
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	3304      	adds	r3, #4
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d90a      	bls.n	8004d46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f008 fd4e 	bl	800d7dc <realloc>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d23f      	bcs.n	8004dda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	441a      	add	r2, r3
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe ff2c 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	3304      	adds	r3, #4
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
 8004d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d20c      	bcs.n	8004d9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	441a      	add	r2, r3
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	440b      	add	r3, r1
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	3301      	adds	r3, #1
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	e7ec      	b.n	8004d76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4413      	add	r3, r2
 8004da2:	3b01      	subs	r3, #1
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	3b01      	subs	r3, #1
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	441a      	add	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8004db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	3220      	adds	r2, #32
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd8:	e7ba      	b.n	8004d50 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3738      	adds	r7, #56	; 0x38
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	0800e6c4 	.word	0x0800e6c4

08004e00 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	0800dd58 	.word	0x0800dd58

08004e1c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68d8      	ldr	r0, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6891      	ldr	r1, [r2, #8]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	4798      	blx	r3
 8004e3a:	4603      	mov	r3, r0
  };
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
  }
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <_ZN13STM32Hardware10getRdmaIndEv>:
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	425b      	negs	r3, r3
 8004e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <_ZN13STM32HardwareC1Ev>:
    STM32Hardware():
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <_ZN13STM32HardwareC1Ev+0x3c>)
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
    }
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	200004ac 	.word	0x200004ac

08004ec0 <_ZN13STM32Hardware4initEv>:
    void init(){
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f804 	bl	8004ed6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <_ZN13STM32Hardware10reset_rbufEv>:
    void reset_rbuf(void){
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eea:	4619      	mov	r1, r3
 8004eec:	f007 fc34 	bl	800c758 <HAL_UART_Receive_DMA>
    }
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_ZN13STM32Hardware4readEv>:
    int read(){
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
      int c = -1;
 8004f00:	f04f 33ff 	mov.w	r3, #4294967295
 8004f04:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffa5 	bl	8004e5c <_ZN13STM32Hardware10getRdmaIndEv>
 8004f12:	4603      	mov	r3, r0
 8004f14:	429c      	cmp	r4, r3
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d012      	beq.n	8004f48 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8004f28:	1c59      	adds	r1, r3, #1
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	791b      	ldrb	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8004f3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      return c;
 8004f48:	68fb      	ldr	r3, [r7, #12]
    }
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}
	...

08004f54 <_ZN13STM32Hardware5flushEv>:
    void flush(void){
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d108      	bne.n	8004f7c <_ZN13STM32Hardware5flushEv+0x28>
 8004f6a:	4b32      	ldr	r3, [pc, #200]	; (8005034 <_ZN13STM32Hardware5flushEv+0xe0>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	f083 0301 	eor.w	r3, r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <_ZN13STM32Hardware5flushEv+0x28>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <_ZN13STM32Hardware5flushEv+0x2a>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d053      	beq.n	800502a <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 8004f82:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <_ZN13STM32Hardware5flushEv+0xe0>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
        if(twind != tfind){
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8e:	3308      	adds	r3, #8
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f98:	330c      	adds	r3, #12
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d041      	beq.n	8005024 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d20e      	bcs.n	8004fd6 <_ZN13STM32Hardware5flushEv+0x82>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fca:	330c      	adds	r3, #12
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	e008      	b.n	8004fe8 <_ZN13STM32Hardware5flushEv+0x94>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fdc:	330c      	adds	r3, #12
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	89fa      	ldrh	r2, [r7, #14]
 8005002:	4619      	mov	r1, r3
 8005004:	f007 fb3c 	bl	800c680 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500e:	330c      	adds	r3, #12
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	89fb      	ldrh	r3, [r7, #14]
 8005014:	4413      	add	r3, r2
 8005016:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005020:	330c      	adds	r3, #12
 8005022:	601a      	str	r2, [r3, #0]
        mutex = false;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <_ZN13STM32Hardware5flushEv+0xe0>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
    }
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200005ac 	.word	0x200005ac

08005038 <_ZN13STM32Hardware5writeEPhi>:
    void write(uint8_t* data, int length){
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
      int n = length;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504e:	bfa8      	it	ge
 8005050:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8005054:	617b      	str	r3, [r7, #20]
      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505c:	3308      	adds	r3, #8
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4293      	cmp	r3, r2
 8005068:	bf28      	it	cs
 800506a:	4613      	movcs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005074:	3308      	adds	r3, #8
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f008 faed 	bl	800d664 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005090:	3308      	adds	r3, #8
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a2:	3308      	adds	r3, #8
 80050a4:	601a      	str	r2, [r3, #0]
      if(n != n_tail){
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d00b      	beq.n	80050c6 <_ZN13STM32Hardware5writeEPhi+0x8e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	18d1      	adds	r1, r2, r3
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	f008 facf 	bl	800d664 <memcpy>
      flush();
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff ff44 	bl	8004f54 <_ZN13STM32Hardware5flushEv>
    }
 80050cc:	bf00      	nop
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_TxCpltCallback>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;
volatile int64_t tenk_tick;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 80050dc:	4805      	ldr	r0, [pc, #20]	; (80050f4 <HAL_UART_TxCpltCallback+0x20>)
 80050de:	f000 fa79 	bl	80055d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff ff35 	bl	8004f54 <_ZN13STM32Hardware5flushEv>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000690 	.word	0x20000690

080050f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8005100:	4805      	ldr	r0, [pc, #20]	; (8005118 <HAL_UART_RxCpltCallback+0x20>)
 8005102:	f000 fa67 	bl	80055d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005106:	4603      	mov	r3, r0
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fee4 	bl	8004ed6 <_ZN13STM32Hardware10reset_rbufEv>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000690 	.word	0x20000690

0800511c <_Z16lwheel_vtargetCBRKN8std_msgs7Float32E>:

void lwheel_vtargetCB(const std_msgs::Float32 &msg) {
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	vel_target[LEFT] = msg.data;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a03      	ldr	r2, [pc, #12]	; (8005138 <_Z16lwheel_vtargetCBRKN8std_msgs7Float32E+0x1c>)
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	200025a8 	.word	0x200025a8

0800513c <_Z16rwheel_vtargetCBRKN8std_msgs7Float32E>:

void rwheel_vtargetCB(const std_msgs::Float32 &msg) {
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	vel_target[RIGHT] = msg.data;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <_Z16rwheel_vtargetCBRKN8std_msgs7Float32E+0x1c>)
 800514a:	6053      	str	r3, [r2, #4]
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	200025a8 	.word	0x200025a8

0800515c <_Z20tenk_tick_generationv>:
		lwheel_vtargetCB);
static ros::Subscriber<std_msgs::Float32> rwheel_vtarget_sub("/rwheel_vtarget",
		rwheel_vtargetCB);

// 1MHz 단위로 인터럽트  발생!
void tenk_tick_generation(void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005162:	463b      	mov	r3, r7
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 800516a:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <_Z20tenk_tick_generationv+0x74>)
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <_Z20tenk_tick_generationv+0x78>)
 800516e:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 42 - 1;
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <_Z20tenk_tick_generationv+0x74>)
 8005172:	2229      	movs	r2, #41	; 0x29
 8005174:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <_Z20tenk_tick_generationv+0x74>)
 8005178:	2200      	movs	r2, #0
 800517a:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 2 - 1;
 800517c:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <_Z20tenk_tick_generationv+0x74>)
 800517e:	2201      	movs	r2, #1
 8005180:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005182:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <_Z20tenk_tick_generationv+0x74>)
 8005184:	2200      	movs	r2, #0
 8005186:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8005188:	4811      	ldr	r0, [pc, #68]	; (80051d0 <_Z20tenk_tick_generationv+0x74>)
 800518a:	f006 fa51 	bl	800b630 <HAL_TIM_Base_Init>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <_Z20tenk_tick_generationv+0x46>
		Error_Handler();
 800519e:	f7fe ff91 	bl	80040c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051a2:	2300      	movs	r3, #0
 80051a4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 80051aa:	463b      	mov	r3, r7
 80051ac:	4619      	mov	r1, r3
 80051ae:	4808      	ldr	r0, [pc, #32]	; (80051d0 <_Z20tenk_tick_generationv+0x74>)
 80051b0:	f007 f988 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80051b4:	4603      	mov	r3, r0
			!= HAL_OK) {
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bf14      	ite	ne
 80051ba:	2301      	movne	r3, #1
 80051bc:	2300      	moveq	r3, #0
 80051be:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <_Z20tenk_tick_generationv+0x6c>
		Error_Handler();
 80051c4:	f7fe ff7e 	bl	80040c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20001c4c 	.word	0x20001c4c
 80051d4:	40001400 	.word	0x40001400

080051d8 <_Z5setupv>:



void setup(void) {
 80051d8:	b598      	push	{r3, r4, r7, lr}
 80051da:	af00      	add	r7, sp, #0

	nh.initNode();
 80051dc:	481b      	ldr	r0, [pc, #108]	; (800524c <_Z5setupv+0x74>)
 80051de:	f000 fa39 	bl	8005654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_encoder_pub);
 80051e2:	491b      	ldr	r1, [pc, #108]	; (8005250 <_Z5setupv+0x78>)
 80051e4:	4819      	ldr	r0, [pc, #100]	; (800524c <_Z5setupv+0x74>)
 80051e6:	f000 f925 	bl	8005434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_encoder_pub);
 80051ea:	491a      	ldr	r1, [pc, #104]	; (8005254 <_Z5setupv+0x7c>)
 80051ec:	4817      	ldr	r0, [pc, #92]	; (800524c <_Z5setupv+0x74>)
 80051ee:	f000 f921 	bl	8005434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.advertise(lwheel_vel_pub);
 80051f2:	4919      	ldr	r1, [pc, #100]	; (8005258 <_Z5setupv+0x80>)
 80051f4:	4815      	ldr	r0, [pc, #84]	; (800524c <_Z5setupv+0x74>)
 80051f6:	f000 f91d 	bl	8005434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rwheel_vel_pub);
 80051fa:	4918      	ldr	r1, [pc, #96]	; (800525c <_Z5setupv+0x84>)
 80051fc:	4813      	ldr	r0, [pc, #76]	; (800524c <_Z5setupv+0x74>)
 80051fe:	f000 f919 	bl	8005434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
//	nh.advertise(joint_states_pub);
//	tf_broadcaster.init(nh);

//	nh.advertise(tick_pub);

	nh.advertise(debug_pub);
 8005202:	4917      	ldr	r1, [pc, #92]	; (8005260 <_Z5setupv+0x88>)
 8005204:	4811      	ldr	r0, [pc, #68]	; (800524c <_Z5setupv+0x74>)
 8005206:	f000 f915 	bl	8005434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.subscribe(lwheel_vtarget_sub);
 800520a:	4916      	ldr	r1, [pc, #88]	; (8005264 <_Z5setupv+0x8c>)
 800520c:	480f      	ldr	r0, [pc, #60]	; (800524c <_Z5setupv+0x74>)
 800520e:	f000 fa46 	bl	800569e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(rwheel_vtarget_sub);
 8005212:	4915      	ldr	r1, [pc, #84]	; (8005268 <_Z5setupv+0x90>)
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <_Z5setupv+0x74>)
 8005216:	f000 fa42 	bl	800569e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>

	// 1MHz tick 생성
	tenk_tick_generation();
 800521a:	f7ff ff9f 	bl	800515c <_Z20tenk_tick_generationv>
	HAL_TIM_Base_Start_IT(&htim7);
 800521e:	4813      	ldr	r0, [pc, #76]	; (800526c <_Z5setupv+0x94>)
 8005220:	f006 fa31 	bl	800b686 <HAL_TIM_Base_Start_IT>
	tenk_tick = 0;
 8005224:	4a12      	ldr	r2, [pc, #72]	; (8005270 <_Z5setupv+0x98>)
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	e9c2 3400 	strd	r3, r4, [r2]

	// 모터 pwm, direction 초기화
	wheelDirInit();
 8005232:	f004 fa3f 	bl	80096b4 <_Z12wheelDirInitv>
	wheelPWMInit();
 8005236:	f004 fa6f 	bl	8009718 <_Z12wheelPWMInitv>

	// 엔코더 초기화
	encoderInit();
 800523a:	f003 ffc9 	bl	80091d0 <_Z11encoderInitv>

	// 오도메트리
	initOdom();
 800523e:	f003 faff 	bl	8008840 <_Z8initOdomv>
	initJointStates();
 8005242:	f003 fb65 	bl	8008910 <_Z15initJointStatesv>

//	initIMU();
}
 8005246:	bf00      	nop
 8005248:	bd98      	pop	{r3, r4, r7, pc}
 800524a:	bf00      	nop
 800524c:	20000690 	.word	0x20000690
 8005250:	2000062c 	.word	0x2000062c
 8005254:	20000640 	.word	0x20000640
 8005258:	20000668 	.word	0x20000668
 800525c:	2000067c 	.word	0x2000067c
 8005260:	20000618 	.word	0x20000618
 8005264:	20001c98 	.word	0x20001c98
 8005268:	20001cb4 	.word	0x20001cb4
 800526c:	20001c4c 	.word	0x20001c4c
 8005270:	20001c90 	.word	0x20001c90

08005274 <_Z4loopv>:

void loop(void) {
 8005274:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005278:	af00      	add	r7, sp, #0

	static int64_t t_imu = 0;
	static int64_t t_encoder = 0;
	static int64_t t_drive = 0;

	if ((tenk_tick - t_imu) >= 5000 /*5ms*/) {
 800527a:	4b50      	ldr	r3, [pc, #320]	; (80053bc <_Z4loopv+0x148>)
 800527c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005280:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <_Z4loopv+0x14c>)
 8005282:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8005286:	460b      	mov	r3, r1
 8005288:	4614      	mov	r4, r2
 800528a:	ebb3 030b 	subs.w	r3, r3, fp
 800528e:	eb64 040c 	sbc.w	r4, r4, ip
 8005292:	f241 3187 	movw	r1, #4999	; 0x1387
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	4299      	cmp	r1, r3
 800529c:	eb72 0304 	sbcs.w	r3, r2, r4
 80052a0:	bfb4      	ite	lt
 80052a2:	2301      	movlt	r3, #1
 80052a4:	2300      	movge	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <_Z4loopv+0x44>
		t_imu = tenk_tick;
 80052ac:	4b43      	ldr	r3, [pc, #268]	; (80053bc <_Z4loopv+0x148>)
 80052ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052b2:	4a43      	ldr	r2, [pc, #268]	; (80053c0 <_Z4loopv+0x14c>)
 80052b4:	e9c2 3400 	strd	r3, r4, [r2]
		//updateIMU();
	}

	if ((tenk_tick - t_drive) >= 30000 /*30ms*/) {
 80052b8:	4b40      	ldr	r3, [pc, #256]	; (80053bc <_Z4loopv+0x148>)
 80052ba:	e9d3 1200 	ldrd	r1, r2, [r3]
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <_Z4loopv+0x150>)
 80052c0:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80052c4:	460b      	mov	r3, r1
 80052c6:	4614      	mov	r4, r2
 80052c8:	ebb3 030b 	subs.w	r3, r3, fp
 80052cc:	eb64 040c 	sbc.w	r4, r4, ip
 80052d0:	f247 512f 	movw	r1, #29999	; 0x752f
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	4299      	cmp	r1, r3
 80052da:	eb72 0304 	sbcs.w	r3, r2, r4
 80052de:	bfb4      	ite	lt
 80052e0:	2301      	movlt	r3, #1
 80052e2:	2300      	movge	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01f      	beq.n	800532a <_Z4loopv+0xb6>
		t_drive = tenk_tick;
 80052ea:	4b34      	ldr	r3, [pc, #208]	; (80053bc <_Z4loopv+0x148>)
 80052ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052f0:	4a34      	ldr	r2, [pc, #208]	; (80053c4 <_Z4loopv+0x150>)
 80052f2:	e9c2 3400 	strd	r3, r4, [r2]
		updateEncoderInfo(TIM4->CNT, TIM5->CNT);
 80052f6:	4b34      	ldr	r3, [pc, #208]	; (80053c8 <_Z4loopv+0x154>)
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	4b33      	ldr	r3, [pc, #204]	; (80053cc <_Z4loopv+0x158>)
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	b29b      	uxth	r3, r3
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f004 f863 	bl	80093d0 <_Z17updateEncoderInfott>
		//publishDriveInformation();

		lwheel_vel_msg.data = cur_vel_ouput[LEFT];
 800530a:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <_Z4loopv+0x15c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a31      	ldr	r2, [pc, #196]	; (80053d4 <_Z4loopv+0x160>)
 8005310:	6053      	str	r3, [r2, #4]
		rwheel_vel_msg.data = cur_vel_ouput[RIGHT];
 8005312:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <_Z4loopv+0x15c>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4a30      	ldr	r2, [pc, #192]	; (80053d8 <_Z4loopv+0x164>)
 8005318:	6053      	str	r3, [r2, #4]

		lwheel_vel_pub.publish(&lwheel_vel_msg);
 800531a:	492e      	ldr	r1, [pc, #184]	; (80053d4 <_Z4loopv+0x160>)
 800531c:	482f      	ldr	r0, [pc, #188]	; (80053dc <_Z4loopv+0x168>)
 800531e:	f7ff fd7d 	bl	8004e1c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		rwheel_vel_pub.publish(&rwheel_vel_msg);
 8005322:	492d      	ldr	r1, [pc, #180]	; (80053d8 <_Z4loopv+0x164>)
 8005324:	482e      	ldr	r0, [pc, #184]	; (80053e0 <_Z4loopv+0x16c>)
 8005326:	f7ff fd79 	bl	8004e1c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	}

	if ((tenk_tick - t_encoder) >= 3000 /*3ms*/) {
 800532a:	4b24      	ldr	r3, [pc, #144]	; (80053bc <_Z4loopv+0x148>)
 800532c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <_Z4loopv+0x170>)
 8005332:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8005336:	460b      	mov	r3, r1
 8005338:	4614      	mov	r4, r2
 800533a:	ebb3 030b 	subs.w	r3, r3, fp
 800533e:	eb64 040c 	sbc.w	r4, r4, ip
 8005342:	f640 31b7 	movw	r1, #2999	; 0xbb7
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	4299      	cmp	r1, r3
 800534c:	eb72 0304 	sbcs.w	r3, r2, r4
 8005350:	bfb4      	ite	lt
 8005352:	2301      	movlt	r3, #1
 8005354:	2300      	movge	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01b      	beq.n	8005394 <_Z4loopv+0x120>
		t_encoder = tenk_tick;
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <_Z4loopv+0x148>)
 800535e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005362:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <_Z4loopv+0x170>)
 8005364:	e9c2 3400 	strd	r3, r4, [r2]

		left_encoder_msg.data = TIM4->CNT;
 8005368:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <_Z4loopv+0x154>)
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <_Z4loopv+0x174>)
 8005372:	e9c2 3402 	strd	r3, r4, [r2, #8]
		left_encoder_pub.publish(&left_encoder_msg);
 8005376:	491c      	ldr	r1, [pc, #112]	; (80053e8 <_Z4loopv+0x174>)
 8005378:	481c      	ldr	r0, [pc, #112]	; (80053ec <_Z4loopv+0x178>)
 800537a:	f7ff fd4f 	bl	8004e1c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		right_encoder_msg.data = TIM5->CNT;
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <_Z4loopv+0x158>)
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f04f 0400 	mov.w	r4, #0
 8005386:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <_Z4loopv+0x17c>)
 8005388:	e9c2 3402 	strd	r3, r4, [r2, #8]
		right_encoder_pub.publish(&right_encoder_msg);
 800538c:	4918      	ldr	r1, [pc, #96]	; (80053f0 <_Z4loopv+0x17c>)
 800538e:	4819      	ldr	r0, [pc, #100]	; (80053f4 <_Z4loopv+0x180>)
 8005390:	f7ff fd44 	bl	8004e1c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	}

	calcVelocity(TIM4->CNT, TIM5->CNT);
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <_Z4loopv+0x154>)
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	b29a      	uxth	r2, r3
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <_Z4loopv+0x158>)
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	b29b      	uxth	r3, r3
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f004 fa40 	bl	8009828 <_Z12calcVelocitytt>

	moveLeftWheel();
 80053a8:	f004 fb6c 	bl	8009a84 <_Z13moveLeftWheelv>
	moveRightWheel();
 80053ac:	f004 fbbe 	bl	8009b2c <_Z14moveRightWheelv>

	nh.spinOnce();
 80053b0:	4811      	ldr	r0, [pc, #68]	; (80053f8 <_Z4loopv+0x184>)
 80053b2:	f000 f99f 	bl	80056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80053b6:	bf00      	nop
 80053b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80053bc:	20001c90 	.word	0x20001c90
 80053c0:	20001cd0 	.word	0x20001cd0
 80053c4:	20001ce0 	.word	0x20001ce0
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	200025b0 	.word	0x200025b0
 80053d4:	20000608 	.word	0x20000608
 80053d8:	20000610 	.word	0x20000610
 80053dc:	20000668 	.word	0x20000668
 80053e0:	2000067c 	.word	0x2000067c
 80053e4:	20001cd8 	.word	0x20001cd8
 80053e8:	200005b8 	.word	0x200005b8
 80053ec:	2000062c 	.word	0x2000062c
 80053f0:	200005c8 	.word	0x200005c8
 80053f4:	20000640 	.word	0x20000640
 80053f8:	20000690 	.word	0x20000690

080053fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80053fc:	b490      	push	{r4, r7}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	if (htim->Instance == TIM7) {
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a08      	ldr	r2, [pc, #32]	; (800542c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <HAL_TIM_PeriodElapsedCallback+0x24>
		tenk_tick++;
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005410:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005414:	1c4b      	adds	r3, r1, #1
 8005416:	f142 0400 	adc.w	r4, r2, #0
 800541a:	4a05      	ldr	r2, [pc, #20]	; (8005430 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800541c:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bc90      	pop	{r4, r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40001400 	.word	0x40001400
 8005430:	20001c90 	.word	0x20001c90

08005434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b18      	cmp	r3, #24
 8005446:	dc1e      	bgt.n	8005486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d111      	bne.n	800547e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	60da      	str	r2, [r3, #12]
        return true;
 800547a:	2301      	movs	r3, #1
 800547c:	e004      	b.n	8005488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e7dd      	b.n	8005442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8005486:	2300      	movs	r3, #0
  }
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	0800e72c 	.word	0x0800e72c

080054b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
  NodeHandle_() : configured_(false)
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ffe8 	bl	8005494 <_ZN3ros15NodeHandleBase_C1Ev>
 80054c4:	4a42      	ldr	r2, [pc, #264]	; (80055d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x11c>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fcd6 	bl	8004e80 <_ZN13STM32HardwareC1Ev>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80054e4:	3314      	adds	r3, #20
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff f9d6 	bl	8004898 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b18      	cmp	r3, #24
 80054f4:	d80b      	bhi.n	800550e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>
      publishers[i] = 0;
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	2200      	movs	r2, #0
 8005504:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	3301      	adds	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e7f0      	b.n	80054f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3c>
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b18      	cmp	r3, #24
 8005516:	d80a      	bhi.n	800552e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>
      subscribers[i] = 0;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005520:	2100      	movs	r1, #0
 8005522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3301      	adds	r3, #1
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e7f1      	b.n	8005512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5e>
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005538:	d20b      	bcs.n	8005552 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9e>
      message_in[i] = 0;
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005544:	3304      	adds	r3, #4
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e7ef      	b.n	8005532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7e>
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555c:	d20b      	bcs.n	8005576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc2>
      message_out[i] = 0;
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4413      	add	r3, r2
 8005564:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005568:	3304      	adds	r3, #4
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	3301      	adds	r3, #1
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	e7ef      	b.n	8005556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa2>
    req_param_resp.ints_length = 0;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800557c:	3318      	adds	r3, #24
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8005592:	3304      	adds	r3, #4
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800559e:	330c      	adds	r3, #12
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80055aa:	3318      	adds	r3, #24
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
    spin_timeout_ = 0;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
  }
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	0800e700 	.word	0x0800e700

080055d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
  }
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	4a04      	ldr	r2, [pc, #16]	; (8005608 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	0800e714 	.word	0x0800e714

0800560c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ffe5 	bl	80055ec <_ZN3ros11Subscriber_C1Ev>
 8005622:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	330c      	adds	r3, #12
 800562c:	4618      	mov	r0, r3
 800562e:	f7fb fddd 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	615a      	str	r2, [r3, #20]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]
  };
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	0800e6e8 	.word	0x0800e6e8

08005654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fc2d 	bl	8004ec0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800566c:	330c      	adds	r3, #12
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005678:	3310      	adds	r3, #16
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
    index_ = 0;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005684:	3318      	adds	r3, #24
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005690:	3314      	adds	r3, #20
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
  };
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b18      	cmp	r3, #24
 80056b0:	dc19      	bgt.n	80056e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80056ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10d      	bne.n	80056de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80056cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	605a      	str	r2, [r3, #4]
        return true;
 80056da:	2301      	movs	r3, #1
 80056dc:	e004      	b.n	80056e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e7e2      	b.n	80056ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 80056e6:	2300      	movs	r3, #0
  }
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4618      	mov	r0, r3
 8005702:	f7fb fb40 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8005706:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800570e:	3308      	adds	r3, #8
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800571a:	4293      	cmp	r3, r2
 800571c:	d904      	bls.n	8005728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x34>
      configured_ = false;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005724:	2200      	movs	r2, #0
 8005726:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800572e:	330c      	adds	r3, #12
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800573c:	330c      	adds	r3, #12
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d905      	bls.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800574c:	330c      	adds	r3, #12
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d015      	beq.n	800578a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f7fb fb0f 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8005768:	4602      	mov	r2, r0
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad2      	subs	r2, r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	bf8c      	ite	hi
 800577a:	2301      	movhi	r3, #1
 800577c:	2300      	movls	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8005784:	f06f 0301 	mvn.w	r3, #1
 8005788:	e218      	b.n	8005bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c8>
      int data = hardware_.read();
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff fbb2 	bl	8004ef8 <_ZN13STM32Hardware4readEv>
 8005794:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f2c0 81f3 	blt.w	8005b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x490>
      checksum_ += data;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80057a4:	331c      	adds	r3, #28
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80057b2:	331c      	adds	r3, #28
 80057b4:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80057bc:	330c      	adds	r3, #12
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b07      	cmp	r3, #7
 80057c2:	d12c      	bne.n	800581e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12a>
        message_in[index_++] = data;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80057ca:	3318      	adds	r3, #24
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	1c51      	adds	r1, r2, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80057d6:	3318      	adds	r3, #24
 80057d8:	6019      	str	r1, [r3, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	b2d9      	uxtb	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80057e6:	3304      	adds	r3, #4
 80057e8:	460a      	mov	r2, r1
 80057ea:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80057f2:	3310      	adds	r3, #16
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	1e5a      	subs	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80057fe:	3310      	adds	r3, #16
 8005800:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005808:	3310      	adds	r3, #16
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1a0      	bne.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005816:	330c      	adds	r3, #12
 8005818:	2208      	movs	r2, #8
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e799      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005824:	330c      	adds	r3, #12
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d130      	bne.n	800588e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x19a>
        if (data == 0xff)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2bff      	cmp	r3, #255	; 0xff
 8005830:	d113      	bne.n	800585a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x166>
          mode_++;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005838:	330c      	adds	r3, #12
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005844:	330c      	adds	r3, #12
 8005846:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f103 0214 	add.w	r2, r3, #20
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005854:	330c      	adds	r3, #12
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e77b      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f7fb fa91 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	bf8c      	ite	hi
 8005872:	2301      	movhi	r3, #1
 8005874:	2300      	movls	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	f43f af6a 	beq.w	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          configured_ = false;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 8005888:	f06f 0301 	mvn.w	r3, #1
 800588c:	e196      	b.n	8005bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005894:	330c      	adds	r3, #12
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d122      	bne.n	80058e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ee>
        if (data == PROTOCOL_VER)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2bfe      	cmp	r3, #254	; 0xfe
 80058a0:	d10b      	bne.n	80058ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1c6>
          mode_++;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80058a8:	330c      	adds	r3, #12
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80058b4:	330c      	adds	r3, #12
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e74b      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80058c0:	330c      	adds	r3, #12
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f083 0301 	eor.w	r3, r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f43f af3c 	beq.w	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f972 	bl	8005bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80058e0:	e737      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80058e8:	330c      	adds	r3, #12
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d11d      	bne.n	800592c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x238>
        bytes_ = data;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80058f6:	3310      	adds	r3, #16
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	601a      	str	r2, [r3, #0]
        index_ = 0;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005902:	3318      	adds	r3, #24
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
        mode_++;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800590e:	330c      	adds	r3, #12
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800591a:	330c      	adds	r3, #12
 800591c:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005924:	331c      	adds	r3, #28
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e712      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005932:	330c      	adds	r3, #12
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b03      	cmp	r3, #3
 8005938:	d118      	bne.n	800596c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        bytes_ += data << 8;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005940:	3310      	adds	r3, #16
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	441a      	add	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005950:	3310      	adds	r3, #16
 8005952:	601a      	str	r2, [r3, #0]
        mode_++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800595a:	330c      	adds	r3, #12
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005966:	330c      	adds	r3, #12
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e6f2      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005972:	330c      	adds	r3, #12
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d11e      	bne.n	80059b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c4>
        if ((checksum_ % 256) == 255)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005980:	331c      	adds	r3, #28
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	425a      	negs	r2, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	bf58      	it	pl
 800598c:	4253      	negpl	r3, r2
 800598e:	2bff      	cmp	r3, #255	; 0xff
 8005990:	d10b      	bne.n	80059aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b6>
          mode_++;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005998:	330c      	adds	r3, #12
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059a4:	330c      	adds	r3, #12
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e6d3      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059b0:	330c      	adds	r3, #12
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e6cc      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059be:	330c      	adds	r3, #12
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d117      	bne.n	80059f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x302>
        topic_ = data;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059cc:	3314      	adds	r3, #20
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	601a      	str	r2, [r3, #0]
        mode_++;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059d8:	330c      	adds	r3, #12
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059e4:	330c      	adds	r3, #12
 80059e6:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059ee:	331c      	adds	r3, #28
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e6ad      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80059fc:	330c      	adds	r3, #12
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d121      	bne.n	8005a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x354>
        topic_ += data << 8;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a0a:	3314      	adds	r3, #20
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	441a      	add	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a24:	330c      	adds	r3, #12
 8005a26:	2207      	movs	r2, #7
 8005a28:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a30:	3310      	adds	r3, #16
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f ae8c 	bne.w	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a40:	330c      	adds	r3, #12
 8005a42:	2208      	movs	r2, #8
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e684      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a4e:	330c      	adds	r3, #12
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	f47f ae7d 	bne.w	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a5e:	330c      	adds	r3, #12
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a6a:	331c      	adds	r3, #28
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	425a      	negs	r2, r3
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	bf58      	it	pl
 8005a76:	4253      	negpl	r3, r2
 8005a78:	2bff      	cmp	r3, #255	; 0xff
 8005a7a:	f47f ae6a 	bne.w	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005a84:	3314      	adds	r3, #20
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d114      	bne.n	8005ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c2>
            requestSyncTime();
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f899 	bl	8005bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8b6 	bl	8005c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005aaa:	3308      	adds	r3, #8
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab4:	e082      	b.n	8005bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c8>
          else if (topic_ == TopicInfo::ID_TIME)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005abc:	3314      	adds	r3, #20
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b0a      	cmp	r3, #10
 8005ac2:	d108      	bne.n	8005ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3e2>
            syncTime(message_in);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f978 	bl	8005dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005ad4:	e63d      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005adc:	3314      	adds	r3, #20
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b06      	cmp	r3, #6
 8005ae2:	d112      	bne.n	8005b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x416>
            req_param_resp.deserialize(message_in);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005aea:	3314      	adds	r3, #20
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 8005af2:	3204      	adds	r2, #4
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff f803 	bl	8004b02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005b02:	3310      	adds	r3, #16
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e623      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005b10:	3314      	adds	r3, #20
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b0b      	cmp	r3, #11
 8005b16:	d105      	bne.n	8005b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            configured_ = false;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e616      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005b2a:	3314      	adds	r3, #20
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f43f ae08 	beq.w	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005b48:	3314      	adds	r3, #20
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005b56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8005b60:	3314      	adds	r3, #20
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4790      	blx	r2
    while (true)
 8005b82:	e5e6      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
        break;
 8005b84:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d013      	beq.n	8005bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c6>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005b98:	3304      	adds	r3, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d908      	bls.n	8005bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c6>
      requestSyncTime();
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f80b 	bl	8005bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 8005bba:	2300      	movs	r3, #0
  }
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005bcc:	f107 030c 	add.w	r3, r7, #12
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fafd 	bl	80041d0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f107 020c 	add.w	r2, r7, #12
 8005be0:	210a      	movs	r1, #10
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
    rt_time = hardware_.time();
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fb f8cb 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf8:	3314      	adds	r3, #20
 8005bfa:	601a      	str	r2, [r3, #0]
  }
 8005bfc:	bf00      	nop
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8005c04:	b590      	push	{r4, r7, lr}
 8005c06:	b08b      	sub	sp, #44	; 0x2c
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005c0c:	f107 030c 	add.w	r3, r7, #12
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe fbcd 	bl	80043b0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	2b18      	cmp	r3, #24
 8005c1e:	dc63      	bgt.n	8005ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d056      	beq.n	8005ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4608      	mov	r0, r1
 8005c80:	4798      	blx	r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	6859      	ldr	r1, [r3, #4]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4608      	mov	r0, r1
 8005cae:	4798      	blx	r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681c      	ldr	r4, [r3, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff f8b8 	bl	8004e44 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	f107 030c 	add.w	r3, r7, #12
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	e798      	b.n	8005c1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	2b18      	cmp	r3, #24
 8005cf0:	dc5f      	bgt.n	8005db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d053      	beq.n	8005daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d06:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d18:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d34:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4608      	mov	r0, r1
 8005d44:	4798      	blx	r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4798      	blx	r3
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d74:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681c      	ldr	r4, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d80:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8005d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3304      	adds	r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4798      	blx	r3
 8005d9e:	4601      	mov	r1, r0
 8005da0:	f107 030c 	add.w	r3, r7, #12
 8005da4:	461a      	mov	r2, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	3301      	adds	r3, #1
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
 8005db0:	e79c      	b.n	8005cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
  }
 8005dbc:	bf00      	nop
 8005dbe:	372c      	adds	r7, #44	; 0x2c
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd90      	pop	{r4, r7, pc}

08005dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005dce:	f107 0308 	add.w	r3, r7, #8
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe f9fc 	bl	80041d0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fa ffd2 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8005de2:	4602      	mov	r2, r0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dea:	3314      	adds	r3, #20
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005df2:	f107 0308 	add.w	r3, r7, #8
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fa59 	bl	80042b0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	4916      	ldr	r1, [pc, #88]	; (8005e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8005e04:	fba1 1303 	umull	r1, r3, r1, r3
 8005e08:	099b      	lsrs	r3, r3, #6
 8005e0a:	4413      	add	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005e0e:	6939      	ldr	r1, [r7, #16]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8005e14:	fba3 0302 	umull	r0, r3, r3, r2
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e1e:	fb00 f303 	mul.w	r3, r0, r3
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	4a0e      	ldr	r2, [pc, #56]	; (8005e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x9c>)
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	440b      	add	r3, r1
 8005e2c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f8be 	bl	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fa ffa0 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8005e46:	4602      	mov	r2, r0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005e4e:	3308      	adds	r3, #8
 8005e50:	601a      	str	r2, [r3, #0]
  }
 8005e52:	bf00      	nop
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	10624dd3 	.word	0x10624dd3
 8005e60:	000f4240 	.word	0x000f4240

08005e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b63      	cmp	r3, #99	; 0x63
 8005e74:	dd0a      	ble.n	8005e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x28>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f083 0301 	eor.w	r3, r3, #1
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x28>
      return 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e08e      	b.n	8005faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x146>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005e98:	3304      	adds	r3, #4
 8005e9a:	3307      	adds	r3, #7
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4790      	blx	r2
 8005ea2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005eaa:	3304      	adds	r3, #4
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	701a      	strb	r2, [r3, #0]
    message_out[1] = PROTOCOL_VER;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005eb6:	3305      	adds	r3, #5
 8005eb8:	22fe      	movs	r2, #254	; 0xfe
 8005eba:	701a      	strb	r2, [r3, #0]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005ec6:	3306      	adds	r3, #6
 8005ec8:	701a      	strb	r2, [r3, #0]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	121b      	asrs	r3, r3, #8
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005ed8:	3307      	adds	r3, #7
 8005eda:	701a      	strb	r2, [r3, #0]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005ee2:	3306      	adds	r3, #6
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005eec:	3307      	adds	r3, #7
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005efe:	3308      	adds	r3, #8
 8005f00:	701a      	strb	r2, [r3, #0]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005f0c:	3309      	adds	r3, #9
 8005f0e:	701a      	strb	r2, [r3, #0]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	121b      	asrs	r3, r3, #8
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005f1e:	330a      	adds	r3, #10
 8005f20:	701a      	strb	r2, [r3, #0]

    /* calculate checksum */
    int chk = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f26:	2305      	movs	r3, #5
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	3307      	adds	r3, #7
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	da0e      	bge.n	8005f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xee>
      chk += message_out[i];
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005f3e:	3304      	adds	r3, #4
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	e7eb      	b.n	8005f2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc6>
    l += 7;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	3307      	adds	r3, #7
 8005f56:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	425a      	negs	r2, r3
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	bf58      	it	pl
 8005f62:	4253      	negpl	r3, r2
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	1c59      	adds	r1, r3, #1
 8005f6a:	6179      	str	r1, [r7, #20]
 8005f6c:	43d2      	mvns	r2, r2
 8005f6e:	b2d1      	uxtb	r1, r2
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005f78:	3304      	adds	r3, #4
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f84:	dc0b      	bgt.n	8005f9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
    {
      hardware_.write(message_out, l);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1d18      	adds	r0, r3, #4
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005f90:	3304      	adds	r3, #4
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4619      	mov	r1, r3
 8005f96:	f7ff f84f 	bl	8005038 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	e005      	b.n	8005faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x146>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005f9e:	4905      	ldr	r1, [pc, #20]	; (8005fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x150>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f84f 	bl	8006044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	0800de1c 	.word	0x0800de1c

08005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fa fedd 	bl	8000d86 <_ZN13STM32Hardware4timeEv>
 8005fcc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4918      	ldr	r1, [pc, #96]	; (8006038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8005fd6:	fba1 1303 	umull	r1, r3, r1, r3
 8005fda:	099b      	lsrs	r3, r3, #6
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	1e5a      	subs	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	3318      	adds	r3, #24
 8005fe8:	601a      	str	r2, [r3, #0]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6859      	ldr	r1, [r3, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8005ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ffc:	fb00 f303 	mul.w	r3, r0, r3
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	4a0e      	ldr	r2, [pc, #56]	; (800603c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	1acb      	subs	r3, r1, r3
 800600a:	4a0d      	ldr	r2, [pc, #52]	; (8006040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x88>)
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	331c      	adds	r3, #28
 8006016:	601a      	str	r2, [r3, #0]
    normalizeSecNSec(sec_offset, nsec_offset);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601e:	3318      	adds	r3, #24
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006026:	321c      	adds	r2, #28
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f007 faa8 	bl	800d580 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	10624dd3 	.word	0x10624dd3
 800603c:	000f4240 	.word	0x000f4240
 8006040:	3b9aca00 	.word	0x3b9aca00

08006044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	2103      	movs	r1, #3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f804 	bl	8006060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	460b      	mov	r3, r1
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800606e:	f107 0314 	add.w	r3, r7, #20
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fb60 	bl	8004738 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f107 0214 	add.w	r2, r7, #20
 800608a:	2107      	movs	r1, #7
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	4798      	blx	r3
  }
 8006090:	bf00      	nop
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <_Z41__static_initialization_and_destruction_0ii>:
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d14f      	bne.n	8006148 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d14a      	bne.n	8006148 <_Z41__static_initialization_and_destruction_0ii+0xb0>
static std_msgs::String debug_msg;
 80060b2:	4827      	ldr	r0, [pc, #156]	; (8006150 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80060b4:	f7fa fe72 	bl	8000d9c <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 80060b8:	4826      	ldr	r0, [pc, #152]	; (8006154 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80060ba:	f7fa ff0b 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 80060be:	4826      	ldr	r0, [pc, #152]	; (8006158 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80060c0:	f7fa ff08 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 tick_msg;
 80060c4:	4825      	ldr	r0, [pc, #148]	; (800615c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80060c6:	f7fa ff05 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test1_msg;
 80060ca:	4825      	ldr	r0, [pc, #148]	; (8006160 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80060cc:	f7fa ff02 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test2_msg;
 80060d0:	4824      	ldr	r0, [pc, #144]	; (8006164 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80060d2:	f7fa feff 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Float32 lwheel_vel_msg;
 80060d6:	4824      	ldr	r0, [pc, #144]	; (8006168 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80060d8:	f7fb f888 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static std_msgs::Float32 rwheel_vel_msg;
 80060dc:	4823      	ldr	r0, [pc, #140]	; (800616c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80060de:	f7fb f885 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 80060e2:	2300      	movs	r3, #0
 80060e4:	4a1a      	ldr	r2, [pc, #104]	; (8006150 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80060e6:	4922      	ldr	r1, [pc, #136]	; (8006170 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80060e8:	4822      	ldr	r0, [pc, #136]	; (8006174 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80060ea:	f7fa fe35 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 80060ee:	2300      	movs	r3, #0
 80060f0:	4a18      	ldr	r2, [pc, #96]	; (8006154 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80060f2:	4921      	ldr	r1, [pc, #132]	; (8006178 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80060f4:	4821      	ldr	r0, [pc, #132]	; (800617c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80060f6:	f7fa fe2f 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 80060fa:	2300      	movs	r3, #0
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80060fe:	4920      	ldr	r1, [pc, #128]	; (8006180 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8006100:	4820      	ldr	r0, [pc, #128]	; (8006184 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8006102:	f7fa fe29 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher tick_pub("tick", &tick_msg);
 8006106:	2300      	movs	r3, #0
 8006108:	4a14      	ldr	r2, [pc, #80]	; (800615c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800610a:	491f      	ldr	r1, [pc, #124]	; (8006188 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800610c:	481f      	ldr	r0, [pc, #124]	; (800618c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800610e:	f7fa fe23 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher lwheel_vel_pub("lwheel_vel", &lwheel_vel_msg);
 8006112:	2300      	movs	r3, #0
 8006114:	4a14      	ldr	r2, [pc, #80]	; (8006168 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8006116:	491e      	ldr	r1, [pc, #120]	; (8006190 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8006118:	481e      	ldr	r0, [pc, #120]	; (8006194 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800611a:	f7fa fe1d 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher rwheel_vel_pub("rwheel_vel", &rwheel_vel_msg);
 800611e:	2300      	movs	r3, #0
 8006120:	4a12      	ldr	r2, [pc, #72]	; (800616c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8006122:	491d      	ldr	r1, [pc, #116]	; (8006198 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8006124:	481d      	ldr	r0, [pc, #116]	; (800619c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8006126:	f7fa fe17 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::NodeHandle nh;
 800612a:	481d      	ldr	r0, [pc, #116]	; (80061a0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800612c:	f7ff f9c2 	bl	80054b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
		lwheel_vtargetCB);
 8006130:	2301      	movs	r3, #1
 8006132:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8006134:	491c      	ldr	r1, [pc, #112]	; (80061a8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8006136:	481d      	ldr	r0, [pc, #116]	; (80061ac <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8006138:	f7ff fa68 	bl	800560c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
		rwheel_vtargetCB);
 800613c:	2301      	movs	r3, #1
 800613e:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8006140:	491c      	ldr	r1, [pc, #112]	; (80061b4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8006142:	481d      	ldr	r0, [pc, #116]	; (80061b8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8006144:	f7ff fa62 	bl	800560c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	200005b0 	.word	0x200005b0
 8006154:	200005b8 	.word	0x200005b8
 8006158:	200005c8 	.word	0x200005c8
 800615c:	200005d8 	.word	0x200005d8
 8006160:	200005e8 	.word	0x200005e8
 8006164:	200005f8 	.word	0x200005f8
 8006168:	20000608 	.word	0x20000608
 800616c:	20000610 	.word	0x20000610
 8006170:	0800de58 	.word	0x0800de58
 8006174:	20000618 	.word	0x20000618
 8006178:	0800de60 	.word	0x0800de60
 800617c:	2000062c 	.word	0x2000062c
 8006180:	0800de70 	.word	0x0800de70
 8006184:	20000640 	.word	0x20000640
 8006188:	0800de80 	.word	0x0800de80
 800618c:	20000654 	.word	0x20000654
 8006190:	0800de88 	.word	0x0800de88
 8006194:	20000668 	.word	0x20000668
 8006198:	0800de94 	.word	0x0800de94
 800619c:	2000067c 	.word	0x2000067c
 80061a0:	20000690 	.word	0x20000690
 80061a4:	0800511d 	.word	0x0800511d
 80061a8:	0800dea0 	.word	0x0800dea0
 80061ac:	20001c98 	.word	0x20001c98
 80061b0:	0800513d 	.word	0x0800513d
 80061b4:	0800deb0 	.word	0x0800deb0
 80061b8:	20001cb4 	.word	0x20001cb4

080061bc <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	330c      	adds	r3, #12
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fb f855 	bl	800127c <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	320c      	adds	r2, #12
 80061da:	4610      	mov	r0, r2
 80061dc:	4798      	blx	r3
  }
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
  }
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	330c      	adds	r3, #12
 800620a:	4618      	mov	r0, r3
 800620c:	f7fb f86e 	bl	80012ec <_ZN8std_msgs7Float327getTypeEv>
 8006210:	4603      	mov	r3, r0
  }
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	330c      	adds	r3, #12
 8006226:	4618      	mov	r0, r3
 8006228:	f7fb f86e 	bl	8001308 <_ZN8std_msgs7Float326getMD5Ev>
 800622c:	4603      	mov	r3, r0
  }
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
    return configured_;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8006244:	781b      	ldrb	r3, [r3, #0]
  };
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <_GLOBAL__sub_I_nh>:
 8006252:	b580      	push	{r7, lr}
 8006254:	af00      	add	r7, sp, #0
 8006256:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800625a:	2001      	movs	r0, #1
 800625c:	f7ff ff1c 	bl	8006098 <_Z41__static_initialization_and_destruction_0ii>
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	f7fa fd62 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8006274:	4a0e      	ldr	r2, [pc, #56]	; (80062b0 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	f04f 0400 	mov.w	r4, #0
 8006284:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	f04f 0400 	mov.w	r4, #0
 8006292:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	f04f 0400 	mov.w	r4, #0
 80062a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd90      	pop	{r4, r7, pc}
 80062ae:	bf00      	nop
 80062b0:	0800e878 	.word	0x0800e878

080062b4 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80062b4:	b490      	push	{r4, r7}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80062c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80062cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	440a      	add	r2, r1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80062da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	f04f 0400 	mov.w	r4, #0
 80062e6:	0a0b      	lsrs	r3, r1, #8
 80062e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062ec:	0a14      	lsrs	r4, r2, #8
 80062ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f0:	3201      	adds	r2, #1
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	440a      	add	r2, r1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80062fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	f04f 0400 	mov.w	r4, #0
 8006306:	0c0b      	lsrs	r3, r1, #16
 8006308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800630c:	0c14      	lsrs	r4, r2, #16
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	3202      	adds	r2, #2
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	440a      	add	r2, r1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800631a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 0400 	mov.w	r4, #0
 8006326:	0e0b      	lsrs	r3, r1, #24
 8006328:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800632c:	0e14      	lsrs	r4, r2, #24
 800632e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006330:	3203      	adds	r2, #3
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	440a      	add	r2, r1
 8006336:	b2db      	uxtb	r3, r3
 8006338:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800633a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	f04f 0400 	mov.w	r4, #0
 8006346:	0013      	movs	r3, r2
 8006348:	2400      	movs	r4, #0
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	3204      	adds	r2, #4
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	440a      	add	r2, r1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8006356:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	f04f 0400 	mov.w	r4, #0
 8006362:	0a13      	lsrs	r3, r2, #8
 8006364:	2400      	movs	r4, #0
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	3205      	adds	r2, #5
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	440a      	add	r2, r1
 800636e:	b2db      	uxtb	r3, r3
 8006370:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8006372:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	f04f 0400 	mov.w	r4, #0
 800637e:	0c13      	lsrs	r3, r2, #16
 8006380:	2400      	movs	r4, #0
 8006382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006384:	3206      	adds	r2, #6
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	440a      	add	r2, r1
 800638a:	b2db      	uxtb	r3, r3
 800638c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800638e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	f04f 0400 	mov.w	r4, #0
 800639a:	0e13      	lsrs	r3, r2, #24
 800639c:	2400      	movs	r4, #0
 800639e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a0:	3207      	adds	r2, #7
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	440a      	add	r2, r1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	3308      	adds	r3, #8
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80063b6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80063ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80063be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	440a      	add	r2, r1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80063c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	f04f 0400 	mov.w	r4, #0
 80063d4:	0a0b      	lsrs	r3, r1, #8
 80063d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80063da:	0a14      	lsrs	r4, r2, #8
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	3201      	adds	r2, #1
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	440a      	add	r2, r1
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80063e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	f04f 0400 	mov.w	r4, #0
 80063f4:	0c0b      	lsrs	r3, r1, #16
 80063f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fa:	0c14      	lsrs	r4, r2, #16
 80063fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fe:	3202      	adds	r2, #2
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	440a      	add	r2, r1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8006408:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	f04f 0400 	mov.w	r4, #0
 8006414:	0e0b      	lsrs	r3, r1, #24
 8006416:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800641a:	0e14      	lsrs	r4, r2, #24
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	3203      	adds	r2, #3
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	440a      	add	r2, r1
 8006424:	b2db      	uxtb	r3, r3
 8006426:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8006428:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	0013      	movs	r3, r2
 8006436:	2400      	movs	r4, #0
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	3204      	adds	r2, #4
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	440a      	add	r2, r1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8006444:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	f04f 0400 	mov.w	r4, #0
 8006450:	0a13      	lsrs	r3, r2, #8
 8006452:	2400      	movs	r4, #0
 8006454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006456:	3205      	adds	r2, #5
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	440a      	add	r2, r1
 800645c:	b2db      	uxtb	r3, r3
 800645e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8006460:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	f04f 0400 	mov.w	r4, #0
 800646c:	0c13      	lsrs	r3, r2, #16
 800646e:	2400      	movs	r4, #0
 8006470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006472:	3206      	adds	r2, #6
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	440a      	add	r2, r1
 8006478:	b2db      	uxtb	r3, r3
 800647a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800647c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	f04f 0400 	mov.w	r4, #0
 8006488:	0e13      	lsrs	r3, r2, #24
 800648a:	2400      	movs	r4, #0
 800648c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648e:	3207      	adds	r2, #7
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	440a      	add	r2, r1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	3308      	adds	r3, #8
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80064a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80064a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	440a      	add	r2, r1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80064b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	f04f 0400 	mov.w	r4, #0
 80064c2:	0a0b      	lsrs	r3, r1, #8
 80064c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80064c8:	0a14      	lsrs	r4, r2, #8
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	3201      	adds	r2, #1
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	440a      	add	r2, r1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80064d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	f04f 0400 	mov.w	r4, #0
 80064e2:	0c0b      	lsrs	r3, r1, #16
 80064e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064e8:	0c14      	lsrs	r4, r2, #16
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	3202      	adds	r2, #2
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	440a      	add	r2, r1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80064f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	f04f 0400 	mov.w	r4, #0
 8006502:	0e0b      	lsrs	r3, r1, #24
 8006504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006508:	0e14      	lsrs	r4, r2, #24
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	3203      	adds	r2, #3
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	440a      	add	r2, r1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8006516:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	f04f 0400 	mov.w	r4, #0
 8006522:	0013      	movs	r3, r2
 8006524:	2400      	movs	r4, #0
 8006526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006528:	3204      	adds	r2, #4
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	440a      	add	r2, r1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8006532:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	f04f 0400 	mov.w	r4, #0
 800653e:	0a13      	lsrs	r3, r2, #8
 8006540:	2400      	movs	r4, #0
 8006542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006544:	3205      	adds	r2, #5
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	440a      	add	r2, r1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800654e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	f04f 0400 	mov.w	r4, #0
 800655a:	0c13      	lsrs	r3, r2, #16
 800655c:	2400      	movs	r4, #0
 800655e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006560:	3206      	adds	r2, #6
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	440a      	add	r2, r1
 8006566:	b2db      	uxtb	r3, r3
 8006568:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800656a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	f04f 0400 	mov.w	r4, #0
 8006576:	0e13      	lsrs	r3, r2, #24
 8006578:	2400      	movs	r4, #0
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	3207      	adds	r2, #7
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	440a      	add	r2, r1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	3308      	adds	r3, #8
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800658e:	4618      	mov	r0, r3
 8006590:	3728      	adds	r7, #40	; 0x28
 8006592:	46bd      	mov	sp, r7
 8006594:	bc90      	pop	{r4, r7}
 8006596:	4770      	bx	lr

08006598 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006598:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800659c:	b08c      	sub	sp, #48	; 0x30
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	f04f 0400 	mov.w	r4, #0
 80065b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80065b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	68b8      	ldr	r0, [r7, #8]
 80065bc:	4403      	add	r3, r0
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	461c      	mov	r4, r3
 80065c2:	b2e4      	uxtb	r4, r4
 80065c4:	f04f 0500 	mov.w	r5, #0
 80065c8:	4623      	mov	r3, r4
 80065ca:	462c      	mov	r4, r5
 80065cc:	ea43 0301 	orr.w	r3, r3, r1
 80065d0:	ea44 0402 	orr.w	r4, r4, r2
 80065d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80065d8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80065dc:	461d      	mov	r5, r3
 80065de:	4626      	mov	r6, r4
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	3301      	adds	r3, #1
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	4413      	add	r3, r2
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	b2d9      	uxtb	r1, r3
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	f04f 0400 	mov.w	r4, #0
 80065f8:	0214      	lsls	r4, r2, #8
 80065fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80065fe:	020b      	lsls	r3, r1, #8
 8006600:	4629      	mov	r1, r5
 8006602:	4632      	mov	r2, r6
 8006604:	ea41 0103 	orr.w	r1, r1, r3
 8006608:	ea42 0204 	orr.w	r2, r2, r4
 800660c:	460b      	mov	r3, r1
 800660e:	4614      	mov	r4, r2
 8006610:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006614:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006618:	461d      	mov	r5, r3
 800661a:	4626      	mov	r6, r4
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	3302      	adds	r3, #2
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	4413      	add	r3, r2
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b2d9      	uxtb	r1, r3
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	f04f 0400 	mov.w	r4, #0
 8006634:	0414      	lsls	r4, r2, #16
 8006636:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800663a:	040b      	lsls	r3, r1, #16
 800663c:	4629      	mov	r1, r5
 800663e:	4632      	mov	r2, r6
 8006640:	ea41 0103 	orr.w	r1, r1, r3
 8006644:	ea42 0204 	orr.w	r2, r2, r4
 8006648:	460b      	mov	r3, r1
 800664a:	4614      	mov	r4, r2
 800664c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006650:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	3303      	adds	r3, #3
 8006658:	68b8      	ldr	r0, [r7, #8]
 800665a:	4403      	add	r3, r0
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8006668:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 800666c:	ea41 030a 	orr.w	r3, r1, sl
 8006670:	ea42 040b 	orr.w	r4, r2, fp
 8006674:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006678:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	3304      	adds	r3, #4
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	4403      	add	r3, r0
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	fa5f fa83 	uxtb.w	sl, r3
 800668a:	f04f 0b00 	mov.w	fp, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	f04f 0400 	mov.w	r4, #0
 8006696:	4625      	mov	r5, r4
 8006698:	461c      	mov	r4, r3
 800669a:	4653      	mov	r3, sl
 800669c:	461d      	mov	r5, r3
 800669e:	2300      	movs	r3, #0
 80066a0:	461c      	mov	r4, r3
 80066a2:	4623      	mov	r3, r4
 80066a4:	462c      	mov	r4, r5
 80066a6:	ea43 0301 	orr.w	r3, r3, r1
 80066aa:	ea44 0402 	orr.w	r4, r4, r2
 80066ae:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80066b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	3305      	adds	r3, #5
 80066ba:	68b8      	ldr	r0, [r7, #8]
 80066bc:	4403      	add	r3, r0
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	fa5f fa83 	uxtb.w	sl, r3
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	f04f 0400 	mov.w	r4, #0
 80066d0:	4625      	mov	r5, r4
 80066d2:	461c      	mov	r4, r3
 80066d4:	ea4f 230a 	mov.w	r3, sl, lsl #8
 80066d8:	461d      	mov	r5, r3
 80066da:	2300      	movs	r3, #0
 80066dc:	461c      	mov	r4, r3
 80066de:	4623      	mov	r3, r4
 80066e0:	462c      	mov	r4, r5
 80066e2:	ea43 0301 	orr.w	r3, r3, r1
 80066e6:	ea44 0402 	orr.w	r4, r4, r2
 80066ea:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80066ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	3306      	adds	r3, #6
 80066f6:	68b8      	ldr	r0, [r7, #8]
 80066f8:	4403      	add	r3, r0
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	fa5f fa83 	uxtb.w	sl, r3
 8006700:	f04f 0b00 	mov.w	fp, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	f04f 0400 	mov.w	r4, #0
 800670c:	4625      	mov	r5, r4
 800670e:	461c      	mov	r4, r3
 8006710:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8006714:	461d      	mov	r5, r3
 8006716:	2300      	movs	r3, #0
 8006718:	461c      	mov	r4, r3
 800671a:	4623      	mov	r3, r4
 800671c:	462c      	mov	r4, r5
 800671e:	ea43 0301 	orr.w	r3, r3, r1
 8006722:	ea44 0402 	orr.w	r4, r4, r2
 8006726:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800672a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	3307      	adds	r3, #7
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	4403      	add	r3, r0
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	fa5f fa83 	uxtb.w	sl, r3
 800673c:	f04f 0b00 	mov.w	fp, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	f04f 0400 	mov.w	r4, #0
 8006748:	4625      	mov	r5, r4
 800674a:	461c      	mov	r4, r3
 800674c:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8006750:	461d      	mov	r5, r3
 8006752:	2300      	movs	r3, #0
 8006754:	461c      	mov	r4, r3
 8006756:	4623      	mov	r3, r4
 8006758:	462c      	mov	r4, r5
 800675a:	ea43 0301 	orr.w	r3, r3, r1
 800675e:	ea44 0402 	orr.w	r4, r4, r2
 8006762:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8006766:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	3308      	adds	r3, #8
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	f04f 0400 	mov.w	r4, #0
 800677e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006782:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	68b8      	ldr	r0, [r7, #8]
 800678a:	4403      	add	r3, r0
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	fa5f fa83 	uxtb.w	sl, r3
 8006792:	f04f 0b00 	mov.w	fp, #0
 8006796:	ea4a 0301 	orr.w	r3, sl, r1
 800679a:	ea4b 0402 	orr.w	r4, fp, r2
 800679e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80067a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	3301      	adds	r3, #1
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b2d9      	uxtb	r1, r3
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	f04f 0400 	mov.w	r4, #0
 80067be:	4625      	mov	r5, r4
 80067c0:	461c      	mov	r4, r3
 80067c2:	0213      	lsls	r3, r2, #8
 80067c4:	461d      	mov	r5, r3
 80067c6:	462b      	mov	r3, r5
 80067c8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80067cc:	461d      	mov	r5, r3
 80067ce:	020b      	lsls	r3, r1, #8
 80067d0:	461c      	mov	r4, r3
 80067d2:	4623      	mov	r3, r4
 80067d4:	462c      	mov	r4, r5
 80067d6:	ea43 030a 	orr.w	r3, r3, sl
 80067da:	ea44 040b 	orr.w	r4, r4, fp
 80067de:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80067e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	3302      	adds	r3, #2
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	4413      	add	r3, r2
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	b2d9      	uxtb	r1, r3
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	f04f 0400 	mov.w	r4, #0
 80067fe:	4625      	mov	r5, r4
 8006800:	461c      	mov	r4, r3
 8006802:	0413      	lsls	r3, r2, #16
 8006804:	461d      	mov	r5, r3
 8006806:	462b      	mov	r3, r5
 8006808:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800680c:	461d      	mov	r5, r3
 800680e:	040b      	lsls	r3, r1, #16
 8006810:	461c      	mov	r4, r3
 8006812:	4623      	mov	r3, r4
 8006814:	462c      	mov	r4, r5
 8006816:	ea43 030a 	orr.w	r3, r3, sl
 800681a:	ea44 040b 	orr.w	r4, r4, fp
 800681e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006822:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	3303      	adds	r3, #3
 800682a:	68b8      	ldr	r0, [r7, #8]
 800682c:	4403      	add	r3, r0
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f04f 0400 	mov.w	r4, #0
 8006836:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800683a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800683e:	ea41 0308 	orr.w	r3, r1, r8
 8006842:	ea42 0409 	orr.w	r4, r2, r9
 8006846:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800684a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	3304      	adds	r3, #4
 8006852:	68b8      	ldr	r0, [r7, #8]
 8006854:	4403      	add	r3, r0
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	fa5f f883 	uxtb.w	r8, r3
 800685c:	f04f 0900 	mov.w	r9, #0
 8006860:	f04f 0a00 	mov.w	sl, #0
 8006864:	f04f 0b00 	mov.w	fp, #0
 8006868:	46c3      	mov	fp, r8
 800686a:	f04f 0a00 	mov.w	sl, #0
 800686e:	ea4a 0301 	orr.w	r3, sl, r1
 8006872:	ea4b 0402 	orr.w	r4, fp, r2
 8006876:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800687a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	3305      	adds	r3, #5
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	4403      	add	r3, r0
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	fa5f f883 	uxtb.w	r8, r3
 800688c:	f04f 0900 	mov.w	r9, #0
 8006890:	f04f 0a00 	mov.w	sl, #0
 8006894:	f04f 0b00 	mov.w	fp, #0
 8006898:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 800689c:	f04f 0a00 	mov.w	sl, #0
 80068a0:	ea4a 0301 	orr.w	r3, sl, r1
 80068a4:	ea4b 0402 	orr.w	r4, fp, r2
 80068a8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80068ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	3306      	adds	r3, #6
 80068b4:	68b8      	ldr	r0, [r7, #8]
 80068b6:	4403      	add	r3, r0
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	fa5f f883 	uxtb.w	r8, r3
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	f04f 0a00 	mov.w	sl, #0
 80068c6:	f04f 0b00 	mov.w	fp, #0
 80068ca:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80068ce:	f04f 0a00 	mov.w	sl, #0
 80068d2:	ea4a 0301 	orr.w	r3, sl, r1
 80068d6:	ea4b 0402 	orr.w	r4, fp, r2
 80068da:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80068de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	3307      	adds	r3, #7
 80068e6:	68b8      	ldr	r0, [r7, #8]
 80068e8:	4403      	add	r3, r0
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	fa5f f883 	uxtb.w	r8, r3
 80068f0:	f04f 0900 	mov.w	r9, #0
 80068f4:	f04f 0a00 	mov.w	sl, #0
 80068f8:	f04f 0b00 	mov.w	fp, #0
 80068fc:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8006900:	f04f 0a00 	mov.w	sl, #0
 8006904:	ea4a 0301 	orr.w	r3, sl, r1
 8006908:	ea4b 0402 	orr.w	r4, fp, r2
 800690c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8006910:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	3308      	adds	r3, #8
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	f04f 0400 	mov.w	r4, #0
 8006928:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800692c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	68b8      	ldr	r0, [r7, #8]
 8006934:	4403      	add	r3, r0
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	fa5f f883 	uxtb.w	r8, r3
 800693c:	f04f 0900 	mov.w	r9, #0
 8006940:	ea48 0301 	orr.w	r3, r8, r1
 8006944:	ea49 0402 	orr.w	r4, r9, r2
 8006948:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800694c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	3301      	adds	r3, #1
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4413      	add	r3, r2
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b2d9      	uxtb	r1, r3
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0a00 	mov.w	sl, #0
 8006964:	f04f 0b00 	mov.w	fp, #0
 8006968:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 800696c:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8006970:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8006974:	ea4a 0308 	orr.w	r3, sl, r8
 8006978:	ea4b 0409 	orr.w	r4, fp, r9
 800697c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006980:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	3302      	adds	r3, #2
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	4413      	add	r3, r2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b2d9      	uxtb	r1, r3
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0a00 	mov.w	sl, #0
 8006998:	f04f 0b00 	mov.w	fp, #0
 800699c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80069a0:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 80069a4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80069a8:	ea4a 0308 	orr.w	r3, sl, r8
 80069ac:	ea4b 0409 	orr.w	r4, fp, r9
 80069b0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80069b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	3303      	adds	r3, #3
 80069bc:	68b8      	ldr	r0, [r7, #8]
 80069be:	4403      	add	r3, r0
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f04f 0400 	mov.w	r4, #0
 80069c8:	0a18      	lsrs	r0, r3, #8
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	061b      	lsls	r3, r3, #24
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80069d4:	ea43 0301 	orr.w	r3, r3, r1
 80069d8:	ea44 0402 	orr.w	r4, r4, r2
 80069dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80069e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	3304      	adds	r3, #4
 80069e8:	68b8      	ldr	r0, [r7, #8]
 80069ea:	4403      	add	r3, r0
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	b2dd      	uxtb	r5, r3
 80069f0:	f04f 0600 	mov.w	r6, #0
 80069f4:	f04f 0800 	mov.w	r8, #0
 80069f8:	f04f 0900 	mov.w	r9, #0
 80069fc:	46a9      	mov	r9, r5
 80069fe:	f04f 0800 	mov.w	r8, #0
 8006a02:	ea48 0301 	orr.w	r3, r8, r1
 8006a06:	ea49 0402 	orr.w	r4, r9, r2
 8006a0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006a0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	3305      	adds	r3, #5
 8006a16:	68b8      	ldr	r0, [r7, #8]
 8006a18:	4403      	add	r3, r0
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b2dd      	uxtb	r5, r3
 8006a1e:	f04f 0600 	mov.w	r6, #0
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f04f 0900 	mov.w	r9, #0
 8006a2a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8006a2e:	f04f 0800 	mov.w	r8, #0
 8006a32:	ea48 0301 	orr.w	r3, r8, r1
 8006a36:	ea49 0402 	orr.w	r4, r9, r2
 8006a3a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006a3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	3306      	adds	r3, #6
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	4403      	add	r3, r0
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b2dd      	uxtb	r5, r3
 8006a4e:	f04f 0600 	mov.w	r6, #0
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f04f 0900 	mov.w	r9, #0
 8006a5a:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8006a5e:	f04f 0800 	mov.w	r8, #0
 8006a62:	ea48 0301 	orr.w	r3, r8, r1
 8006a66:	ea49 0402 	orr.w	r4, r9, r2
 8006a6a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006a6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	3307      	adds	r3, #7
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	4403      	add	r3, r0
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b2dd      	uxtb	r5, r3
 8006a7e:	f04f 0600 	mov.w	r6, #0
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8006a8e:	f04f 0800 	mov.w	r8, #0
 8006a92:	ea48 0301 	orr.w	r3, r8, r1
 8006a96:	ea49 0402 	orr.w	r4, r9, r2
 8006a9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8006a9e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	3308      	adds	r3, #8
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3730      	adds	r7, #48	; 0x30
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006aba:	4770      	bx	lr

08006abc <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	0800def8 	.word	0x0800def8

08006ad8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	0800df0c 	.word	0x0800df0c

08006af4 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fa f91a 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8006b04:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fba8 	bl	8006264 <_ZN13geometry_msgs5PointC1Ev>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3328      	adds	r3, #40	; 0x28
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fa fd97 	bl	800164c <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	0800e860 	.word	0x0800e860

08006b2c <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f103 0008 	add.w	r0, r3, #8
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	f7ff fbb4 	bl	80062b4 <_ZNK13geometry_msgs5Point9serializeEPh>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	4413      	add	r3, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7fa fda1 	bl	80016a8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8006b66:	4602      	mov	r2, r0
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
    }
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 0008 	add.w	r0, r3, #8
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	4413      	add	r3, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	f7ff fd00 	bl	8006598 <_ZN13geometry_msgs5Point11deserializeEPh>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	4413      	add	r3, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	f7fa ff64 	bl	8001a7a <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
     return offset;
 8006bba:	68fb      	ldr	r3, [r7, #12]
    }
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	0800df70 	.word	0x0800df70

08006be0 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	0800df84 	.word	0x0800df84

08006bfc <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fa f896 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8006c0c:	4a0d      	ldr	r2, [pc, #52]	; (8006c44 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3308      	adds	r3, #8
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff ff6c 	bl	8006af4 <_ZN13geometry_msgs4PoseC1Ev>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8006c22:	2323      	movs	r3, #35	; 0x23
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	db08      	blt.n	8006c3a <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3e>
 8006c28:	f04f 0000 	mov.w	r0, #0
 8006c2c:	f04f 0100 	mov.w	r1, #0
 8006c30:	e9c2 0100 	strd	r0, r1, [r2]
 8006c34:	3208      	adds	r2, #8
 8006c36:	3b01      	subs	r3, #1
 8006c38:	e7f4      	b.n	8006c24 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	0800e848 	.word	0x0800e848

08006c48 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f103 0008 	add.w	r0, r3, #8
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	f7ff ff62 	bl	8006b2c <_ZNK13geometry_msgs4Pose9serializeEPh>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b23      	cmp	r3, #35	; 0x23
 8006c78:	d87e      	bhi.n	8006d78 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	330b      	adds	r3, #11
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	4413      	add	r3, r2
 8006c84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c88:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8006c8c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	440a      	add	r2, r1
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8006c9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	f04f 0400 	mov.w	r4, #0
 8006ca6:	0a0b      	lsrs	r3, r1, #8
 8006ca8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006cac:	0a14      	lsrs	r4, r2, #8
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	3201      	adds	r2, #1
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8006cba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	f04f 0400 	mov.w	r4, #0
 8006cc6:	0c0b      	lsrs	r3, r1, #16
 8006cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ccc:	0c14      	lsrs	r4, r2, #16
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	3202      	adds	r2, #2
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8006cda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	f04f 0400 	mov.w	r4, #0
 8006ce6:	0e0b      	lsrs	r3, r1, #24
 8006ce8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006cec:	0e14      	lsrs	r4, r2, #24
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	3203      	adds	r2, #3
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8006cfa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	f04f 0400 	mov.w	r4, #0
 8006d06:	0013      	movs	r3, r2
 8006d08:	2400      	movs	r4, #0
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	3204      	adds	r2, #4
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	440a      	add	r2, r1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8006d16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	f04f 0400 	mov.w	r4, #0
 8006d22:	0a13      	lsrs	r3, r2, #8
 8006d24:	2400      	movs	r4, #0
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	3205      	adds	r2, #5
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8006d32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	f04f 0400 	mov.w	r4, #0
 8006d3e:	0c13      	lsrs	r3, r2, #16
 8006d40:	2400      	movs	r4, #0
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	3206      	adds	r2, #6
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	440a      	add	r2, r1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8006d4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	f04f 0400 	mov.w	r4, #0
 8006d5a:	0e13      	lsrs	r3, r2, #24
 8006d5c:	2400      	movs	r4, #0
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	3207      	adds	r2, #7
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	440a      	add	r2, r1
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3301      	adds	r3, #1
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	e77d      	b.n	8006c74 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 8006d78:	697b      	ldr	r3, [r7, #20]
    }
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd90      	pop	{r4, r7, pc}

08006d82 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006d82:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
      offset += this->pose.deserialize(inbuffer + offset);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f103 0008 	add.w	r0, r3, #8
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	4619      	mov	r1, r3
 8006da0:	f7ff feea 	bl	8006b78 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8006da4:	4602      	mov	r2, r0
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006dac:	2300      	movs	r3, #0
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2b23      	cmp	r3, #35	; 0x23
 8006db4:	f200 80cf 	bhi.w	8006f56 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	f04f 0400 	mov.w	r4, #0
 8006dc0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006dc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	6838      	ldr	r0, [r7, #0]
 8006dcc:	4403      	add	r3, r0
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	fa5f f883 	uxtb.w	r8, r3
 8006dd4:	f04f 0900 	mov.w	r9, #0
 8006dd8:	ea48 0301 	orr.w	r3, r8, r1
 8006ddc:	ea49 0402 	orr.w	r4, r9, r2
 8006de0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006de4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3301      	adds	r3, #1
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	4413      	add	r3, r2
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b2d9      	uxtb	r1, r3
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0b00 	mov.w	fp, #0
 8006dfc:	f04f 0c00 	mov.w	ip, #0
 8006e00:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006e04:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006e08:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006e0c:	ea4b 0308 	orr.w	r3, fp, r8
 8006e10:	ea4c 0409 	orr.w	r4, ip, r9
 8006e14:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006e18:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3302      	adds	r3, #2
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b2d9      	uxtb	r1, r3
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0b00 	mov.w	fp, #0
 8006e30:	f04f 0c00 	mov.w	ip, #0
 8006e34:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8006e38:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8006e3c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8006e40:	ea4b 0308 	orr.w	r3, fp, r8
 8006e44:	ea4c 0409 	orr.w	r4, ip, r9
 8006e48:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006e4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3303      	adds	r3, #3
 8006e54:	6838      	ldr	r0, [r7, #0]
 8006e56:	4403      	add	r3, r0
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f04f 0400 	mov.w	r4, #0
 8006e60:	0a1e      	lsrs	r6, r3, #8
 8006e62:	061d      	lsls	r5, r3, #24
 8006e64:	ea41 0305 	orr.w	r3, r1, r5
 8006e68:	ea42 0406 	orr.w	r4, r2, r6
 8006e6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006e70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	3304      	adds	r3, #4
 8006e78:	6838      	ldr	r0, [r7, #0]
 8006e7a:	4403      	add	r3, r0
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	fa5f f883 	uxtb.w	r8, r3
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	f04f 0b00 	mov.w	fp, #0
 8006e8a:	f04f 0c00 	mov.w	ip, #0
 8006e8e:	46c4      	mov	ip, r8
 8006e90:	f04f 0b00 	mov.w	fp, #0
 8006e94:	ea4b 0301 	orr.w	r3, fp, r1
 8006e98:	ea4c 0402 	orr.w	r4, ip, r2
 8006e9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006ea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3305      	adds	r3, #5
 8006ea8:	6838      	ldr	r0, [r7, #0]
 8006eaa:	4403      	add	r3, r0
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	fa5f f883 	uxtb.w	r8, r3
 8006eb2:	f04f 0900 	mov.w	r9, #0
 8006eb6:	f04f 0b00 	mov.w	fp, #0
 8006eba:	f04f 0c00 	mov.w	ip, #0
 8006ebe:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 8006ec2:	f04f 0b00 	mov.w	fp, #0
 8006ec6:	ea4b 0301 	orr.w	r3, fp, r1
 8006eca:	ea4c 0402 	orr.w	r4, ip, r2
 8006ece:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006ed2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	3306      	adds	r3, #6
 8006eda:	6838      	ldr	r0, [r7, #0]
 8006edc:	4403      	add	r3, r0
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	fa5f f883 	uxtb.w	r8, r3
 8006ee4:	f04f 0900 	mov.w	r9, #0
 8006ee8:	f04f 0b00 	mov.w	fp, #0
 8006eec:	f04f 0c00 	mov.w	ip, #0
 8006ef0:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 8006ef4:	f04f 0b00 	mov.w	fp, #0
 8006ef8:	ea4b 0301 	orr.w	r3, fp, r1
 8006efc:	ea4c 0402 	orr.w	r4, ip, r2
 8006f00:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006f04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	3307      	adds	r3, #7
 8006f0c:	6838      	ldr	r0, [r7, #0]
 8006f0e:	4403      	add	r3, r0
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	fa5f f883 	uxtb.w	r8, r3
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	f04f 0b00 	mov.w	fp, #0
 8006f1e:	f04f 0c00 	mov.w	ip, #0
 8006f22:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 8006f26:	f04f 0b00 	mov.w	fp, #0
 8006f2a:	ea4b 0301 	orr.w	r3, fp, r1
 8006f2e:	ea4c 0402 	orr.w	r4, ip, r2
 8006f32:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 8006f36:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	320b      	adds	r2, #11
 8006f40:	00d2      	lsls	r2, r2, #3
 8006f42:	440a      	add	r2, r1
 8006f44:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	e72c      	b.n	8006db0 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 8006f56:	697b      	ldr	r3, [r7, #20]
    }
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08006f64 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	4b03      	ldr	r3, [pc, #12]	; (8006f7c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	0800dfa8 	.word	0x0800dfa8

08006f80 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	0800dfcc 	.word	0x0800dfcc

08006f9c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7f9 fec6 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8006fac:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fb f8e4 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3328      	adds	r3, #40	; 0x28
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fb f8df 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	0800e830 	.word	0x0800e830

08006fd4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f103 0008 	add.w	r0, r3, #8
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4413      	add	r3, r2
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f7fb f8f0 	bl	80021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	4413      	add	r3, r2
 8007008:	4619      	mov	r1, r3
 800700a:	f7fb f8e3 	bl	80021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800700e:	4602      	mov	r2, r0
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
      return offset;
 8007016:	68fb      	ldr	r3, [r7, #12]
    }
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f103 0008 	add.w	r0, r3, #8
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4413      	add	r3, r2
 800703a:	4619      	mov	r1, r3
 800703c:	f7fb fa3c 	bl	80024b8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	4413      	add	r3, r2
 8007054:	4619      	mov	r1, r3
 8007056:	f7fb fa2f 	bl	80024b8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800705a:	4602      	mov	r2, r0
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
     return offset;
 8007062:	68fb      	ldr	r3, [r7, #12]
    }
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	4b03      	ldr	r3, [pc, #12]	; (8007084 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	0800e008 	.word	0x0800e008

08007088 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	0800e01c 	.word	0x0800e01c

080070a4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 fe42 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 80070b4:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3308      	adds	r3, #8
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff ff6c 	bl	8006f9c <_ZN13geometry_msgs5TwistC1Ev>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80070ca:	2323      	movs	r3, #35	; 0x23
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	db08      	blt.n	80070e2 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3e>
 80070d0:	f04f 0000 	mov.w	r0, #0
 80070d4:	f04f 0100 	mov.w	r1, #0
 80070d8:	e9c2 0100 	strd	r0, r1, [r2]
 80070dc:	3208      	adds	r2, #8
 80070de:	3b01      	subs	r3, #1
 80070e0:	e7f4      	b.n	80070cc <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	0800e818 	.word	0x0800e818

080070f0 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f103 0008 	add.w	r0, r3, #8
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4413      	add	r3, r2
 800710a:	4619      	mov	r1, r3
 800710c:	f7ff ff62 	bl	8006fd4 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8007110:	4602      	mov	r2, r0
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	4413      	add	r3, r2
 8007116:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b23      	cmp	r3, #35	; 0x23
 8007120:	d87e      	bhi.n	8007220 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	330a      	adds	r3, #10
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007130:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8007134:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	440a      	add	r2, r1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8007142:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	f04f 0400 	mov.w	r4, #0
 800714e:	0a0b      	lsrs	r3, r1, #8
 8007150:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007154:	0a14      	lsrs	r4, r2, #8
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	3201      	adds	r2, #1
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	440a      	add	r2, r1
 800715e:	b2db      	uxtb	r3, r3
 8007160:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8007162:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007166:	f04f 0300 	mov.w	r3, #0
 800716a:	f04f 0400 	mov.w	r4, #0
 800716e:	0c0b      	lsrs	r3, r1, #16
 8007170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007174:	0c14      	lsrs	r4, r2, #16
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	3202      	adds	r2, #2
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	440a      	add	r2, r1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8007182:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	f04f 0400 	mov.w	r4, #0
 800718e:	0e0b      	lsrs	r3, r1, #24
 8007190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007194:	0e14      	lsrs	r4, r2, #24
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	3203      	adds	r2, #3
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	440a      	add	r2, r1
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 80071a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	f04f 0400 	mov.w	r4, #0
 80071ae:	0013      	movs	r3, r2
 80071b0:	2400      	movs	r4, #0
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	3204      	adds	r2, #4
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	440a      	add	r2, r1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80071be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	f04f 0400 	mov.w	r4, #0
 80071ca:	0a13      	lsrs	r3, r2, #8
 80071cc:	2400      	movs	r4, #0
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	3205      	adds	r2, #5
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	440a      	add	r2, r1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80071da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071de:	f04f 0300 	mov.w	r3, #0
 80071e2:	f04f 0400 	mov.w	r4, #0
 80071e6:	0c13      	lsrs	r3, r2, #16
 80071e8:	2400      	movs	r4, #0
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	3206      	adds	r2, #6
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	440a      	add	r2, r1
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80071f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	f04f 0400 	mov.w	r4, #0
 8007202:	0e13      	lsrs	r3, r2, #24
 8007204:	2400      	movs	r4, #0
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	3207      	adds	r2, #7
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	440a      	add	r2, r1
 800720e:	b2db      	uxtb	r3, r3
 8007210:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	3308      	adds	r3, #8
 8007216:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	3301      	adds	r3, #1
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e77d      	b.n	800711c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 8007220:	697b      	ldr	r3, [r7, #20]
    }
 8007222:	4618      	mov	r0, r3
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	bd90      	pop	{r4, r7, pc}

0800722a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800722a:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
      offset += this->twist.deserialize(inbuffer + offset);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f103 0008 	add.w	r0, r3, #8
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	4413      	add	r3, r2
 8007246:	4619      	mov	r1, r3
 8007248:	f7ff feea 	bl	8007020 <_ZN13geometry_msgs5Twist11deserializeEPh>
 800724c:	4602      	mov	r2, r0
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	4413      	add	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007254:	2300      	movs	r3, #0
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2b23      	cmp	r3, #35	; 0x23
 800725c:	f200 80cf 	bhi.w	80073fe <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	f04f 0400 	mov.w	r4, #0
 8007268:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800726c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	6838      	ldr	r0, [r7, #0]
 8007274:	4403      	add	r3, r0
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	fa5f f883 	uxtb.w	r8, r3
 800727c:	f04f 0900 	mov.w	r9, #0
 8007280:	ea48 0301 	orr.w	r3, r8, r1
 8007284:	ea49 0402 	orr.w	r4, r9, r2
 8007288:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800728c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	3301      	adds	r3, #1
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	4413      	add	r3, r2
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	b2d9      	uxtb	r1, r3
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0b00 	mov.w	fp, #0
 80072a4:	f04f 0c00 	mov.w	ip, #0
 80072a8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80072ac:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80072b0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80072b4:	ea4b 0308 	orr.w	r3, fp, r8
 80072b8:	ea4c 0409 	orr.w	r4, ip, r9
 80072bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80072c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	3302      	adds	r3, #2
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	4413      	add	r3, r2
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b2d9      	uxtb	r1, r3
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0b00 	mov.w	fp, #0
 80072d8:	f04f 0c00 	mov.w	ip, #0
 80072dc:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80072e0:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80072e4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80072e8:	ea4b 0308 	orr.w	r3, fp, r8
 80072ec:	ea4c 0409 	orr.w	r4, ip, r9
 80072f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80072f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3303      	adds	r3, #3
 80072fc:	6838      	ldr	r0, [r7, #0]
 80072fe:	4403      	add	r3, r0
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f04f 0400 	mov.w	r4, #0
 8007308:	0a1e      	lsrs	r6, r3, #8
 800730a:	061d      	lsls	r5, r3, #24
 800730c:	ea41 0305 	orr.w	r3, r1, r5
 8007310:	ea42 0406 	orr.w	r4, r2, r6
 8007314:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007318:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	3304      	adds	r3, #4
 8007320:	6838      	ldr	r0, [r7, #0]
 8007322:	4403      	add	r3, r0
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	fa5f f883 	uxtb.w	r8, r3
 800732a:	f04f 0900 	mov.w	r9, #0
 800732e:	f04f 0b00 	mov.w	fp, #0
 8007332:	f04f 0c00 	mov.w	ip, #0
 8007336:	46c4      	mov	ip, r8
 8007338:	f04f 0b00 	mov.w	fp, #0
 800733c:	ea4b 0301 	orr.w	r3, fp, r1
 8007340:	ea4c 0402 	orr.w	r4, ip, r2
 8007344:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007348:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3305      	adds	r3, #5
 8007350:	6838      	ldr	r0, [r7, #0]
 8007352:	4403      	add	r3, r0
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	fa5f f883 	uxtb.w	r8, r3
 800735a:	f04f 0900 	mov.w	r9, #0
 800735e:	f04f 0b00 	mov.w	fp, #0
 8007362:	f04f 0c00 	mov.w	ip, #0
 8007366:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 800736a:	f04f 0b00 	mov.w	fp, #0
 800736e:	ea4b 0301 	orr.w	r3, fp, r1
 8007372:	ea4c 0402 	orr.w	r4, ip, r2
 8007376:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800737a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	3306      	adds	r3, #6
 8007382:	6838      	ldr	r0, [r7, #0]
 8007384:	4403      	add	r3, r0
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	fa5f f883 	uxtb.w	r8, r3
 800738c:	f04f 0900 	mov.w	r9, #0
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	f04f 0c00 	mov.w	ip, #0
 8007398:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 800739c:	f04f 0b00 	mov.w	fp, #0
 80073a0:	ea4b 0301 	orr.w	r3, fp, r1
 80073a4:	ea4c 0402 	orr.w	r4, ip, r2
 80073a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80073ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3307      	adds	r3, #7
 80073b4:	6838      	ldr	r0, [r7, #0]
 80073b6:	4403      	add	r3, r0
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	fa5f f883 	uxtb.w	r8, r3
 80073be:	f04f 0900 	mov.w	r9, #0
 80073c2:	f04f 0b00 	mov.w	fp, #0
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	ea4b 0301 	orr.w	r3, fp, r1
 80073d6:	ea4c 0402 	orr.w	r4, ip, r2
 80073da:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 80073de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	320a      	adds	r2, #10
 80073e8:	00d2      	lsls	r2, r2, #3
 80073ea:	440a      	add	r2, r1
 80073ec:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	3308      	adds	r3, #8
 80073f4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	e72c      	b.n	8007258 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 80073fe:	697b      	ldr	r3, [r7, #20]
    }
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

0800740c <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	4b03      	ldr	r3, [pc, #12]	; (8007424 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	0800e040 	.word	0x0800e040

08007428 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	4b03      	ldr	r3, [pc, #12]	; (8007440 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	0800e064 	.word	0x0800e064

08007444 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4618      	mov	r0, r3
 8007450:	f7f9 fc72 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7f9 ff60 	bl	8001324 <_ZN8std_msgs6HeaderC1Ev>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a0a      	ldr	r2, [pc, #40]	; (8007490 <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8007468:	619a      	str	r2, [r3, #24]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3320      	adds	r3, #32
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fbc4 	bl	8006bfc <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fe12 	bl	80070a4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	0800e800 	.word	0x0800e800
 8007490:	0800dec0 	.word	0x0800dec0

08007494 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	1d18      	adds	r0, r3, #4
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	4413      	add	r3, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	f7f9 ff59 	bl	8001364 <_ZNK8std_msgs6Header9serializeEPh>
 80074b2:	4602      	mov	r2, r0
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7f8 fe82 	bl	80001c8 <strlen>
 80074c4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	4413      	add	r3, r2
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fc fb5a 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3304      	adds	r3, #4
 80074d8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	18d0      	adds	r0, r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	4619      	mov	r1, r3
 80074e8:	f006 f8bc 	bl	800d664 <memcpy>
      offset += length_child_frame_id;
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f103 0020 	add.w	r0, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	4413      	add	r3, r2
 8007500:	4619      	mov	r1, r3
 8007502:	f7ff fba1 	bl	8006c48 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8007506:	4602      	mov	r2, r0
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	4413      	add	r3, r2
 800751a:	4619      	mov	r1, r3
 800751c:	f7ff fde8 	bl	80070f0 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8007520:	4602      	mov	r2, r0
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
      return offset;
 8007528:	68fb      	ldr	r3, [r7, #12]
    }
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	1d18      	adds	r0, r3, #4
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	4413      	add	r3, r2
 800754a:	4619      	mov	r1, r3
 800754c:	f7f9 ffa2 	bl	8001494 <_ZN8std_msgs6Header11deserializeEPh>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4413      	add	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	441a      	add	r2, r3
 800755e:	f107 030c 	add.w	r3, r7, #12
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f7fc fb2d 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3304      	adds	r3, #4
 800756e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	429a      	cmp	r2, r3
 800757e:	d20c      	bcs.n	800759a <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	441a      	add	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	3b01      	subs	r3, #1
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	440b      	add	r3, r1
 800758e:	7812      	ldrb	r2, [r2, #0]
 8007590:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	3301      	adds	r3, #1
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	e7ec      	b.n	8007574 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	3b01      	subs	r3, #1
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	441a      	add	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f103 0020 	add.w	r0, r3, #32
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	4413      	add	r3, r2
 80075ca:	4619      	mov	r1, r3
 80075cc:	f7ff fbd9 	bl	8006d82 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4413      	add	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	4413      	add	r3, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	f7ff fe20 	bl	800722a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	4413      	add	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]
     return offset;
 80075f2:	693b      	ldr	r3, [r7, #16]
    }
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	0800e088 	.word	0x0800e088

08007618 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	4b03      	ldr	r3, [pc, #12]	; (8007630 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	0800e09c 	.word	0x0800e09c

08007634 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), name(NULL),
      position_length(0), position(NULL),
      velocity_length(0), velocity(NULL),
      effort_length(0), effort(NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	f7f9 fb7a 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8007644:	4a12      	ldr	r2, [pc, #72]	; (8007690 <_ZN11sensor_msgs10JointStateC1Ev+0x5c>)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3304      	adds	r3, #4
 800764e:	4618      	mov	r0, r3
 8007650:	f7f9 fe68 	bl	8001324 <_ZN8std_msgs6HeaderC1Ev>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	619a      	str	r2, [r3, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	621a      	str	r2, [r3, #32]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	625a      	str	r2, [r3, #36]	; 0x24
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	631a      	str	r2, [r3, #48]	; 0x30
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	635a      	str	r2, [r3, #52]	; 0x34
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	641a      	str	r2, [r3, #64]	; 0x40
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	0800e7e8 	.word	0x0800e7e8

08007694 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007694:	b590      	push	{r4, r7, lr}
 8007696:	b08f      	sub	sp, #60	; 0x3c
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.serialize(outbuffer + offset);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	1d18      	adds	r0, r3, #4
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	4413      	add	r3, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7f9 fe59 	bl	8001364 <_ZNK8std_msgs6Header9serializeEPh>
 80076b2:	4602      	mov	r2, r0
 80076b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b6:	4413      	add	r3, r2
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6999      	ldr	r1, [r3, #24]
 80076be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	4413      	add	r3, r2
 80076c4:	b2ca      	uxtb	r2, r1
 80076c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	0a19      	lsrs	r1, r3, #8
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	3301      	adds	r3, #1
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	b2ca      	uxtb	r2, r1
 80076d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	0c19      	lsrs	r1, r3, #16
 80076e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e2:	3302      	adds	r3, #2
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	4413      	add	r3, r2
 80076e8:	b2ca      	uxtb	r2, r1
 80076ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	0e19      	lsrs	r1, r3, #24
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	3303      	adds	r3, #3
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	b2ca      	uxtb	r2, r1
 80076fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 80076fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007700:	3304      	adds	r3, #4
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8007704:	2300      	movs	r3, #0
 8007706:	633b      	str	r3, [r7, #48]	; 0x30
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800770e:	429a      	cmp	r2, r3
 8007710:	d228      	bcs.n	8007764 <_ZNK11sensor_msgs10JointState9serializeEPh+0xd0>
      uint32_t length_namei = strlen(this->name[i]);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7f8 fd52 	bl	80001c8 <strlen>
 8007724:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	4413      	add	r3, r2
 800772c:	6a39      	ldr	r1, [r7, #32]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fc fa2a 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007736:	3304      	adds	r3, #4
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	18d0      	adds	r0, r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1a      	ldr	r2, [r3, #32]
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a3a      	ldr	r2, [r7, #32]
 800774e:	4619      	mov	r1, r3
 8007750:	f005 ff88 	bl	800d664 <memcpy>
      offset += length_namei;
 8007754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	4413      	add	r3, r2
 800775a:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	3301      	adds	r3, #1
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
 8007762:	e7d1      	b.n	8007708 <_ZNK11sensor_msgs10JointState9serializeEPh+0x74>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	4413      	add	r3, r2
 800776e:	b2ca      	uxtb	r2, r1
 8007770:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	0a19      	lsrs	r1, r3, #8
 8007778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777a:	3301      	adds	r3, #1
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	4413      	add	r3, r2
 8007780:	b2ca      	uxtb	r2, r1
 8007782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	0c19      	lsrs	r1, r3, #16
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	3302      	adds	r3, #2
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	4413      	add	r3, r2
 8007792:	b2ca      	uxtb	r2, r1
 8007794:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	0e19      	lsrs	r1, r3, #24
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	3303      	adds	r3, #3
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	4413      	add	r3, r2
 80077a4:	b2ca      	uxtb	r2, r1
 80077a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	3304      	adds	r3, #4
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 80077ae:	2300      	movs	r3, #0
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d27e      	bcs.n	80078ba <_ZNK11sensor_msgs10JointState9serializeEPh+0x226>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 80077ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80077d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	440a      	add	r2, r1
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 80077dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	f04f 0400 	mov.w	r4, #0
 80077e8:	0a0b      	lsrs	r3, r1, #8
 80077ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80077ee:	0a14      	lsrs	r4, r2, #8
 80077f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077f2:	3201      	adds	r2, #1
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	440a      	add	r2, r1
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 80077fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	0c0b      	lsrs	r3, r1, #16
 800780a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800780e:	0c14      	lsrs	r4, r2, #16
 8007810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007812:	3202      	adds	r2, #2
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	440a      	add	r2, r1
 8007818:	b2db      	uxtb	r3, r3
 800781a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 800781c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	f04f 0400 	mov.w	r4, #0
 8007828:	0e0b      	lsrs	r3, r1, #24
 800782a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800782e:	0e14      	lsrs	r4, r2, #24
 8007830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007832:	3203      	adds	r2, #3
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	440a      	add	r2, r1
 8007838:	b2db      	uxtb	r3, r3
 800783a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 800783c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	f04f 0400 	mov.w	r4, #0
 8007848:	0013      	movs	r3, r2
 800784a:	2400      	movs	r4, #0
 800784c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800784e:	3204      	adds	r2, #4
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	440a      	add	r2, r1
 8007854:	b2db      	uxtb	r3, r3
 8007856:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 8007858:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800785c:	f04f 0300 	mov.w	r3, #0
 8007860:	f04f 0400 	mov.w	r4, #0
 8007864:	0a13      	lsrs	r3, r2, #8
 8007866:	2400      	movs	r4, #0
 8007868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800786a:	3205      	adds	r2, #5
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	440a      	add	r2, r1
 8007870:	b2db      	uxtb	r3, r3
 8007872:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 8007874:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	f04f 0400 	mov.w	r4, #0
 8007880:	0c13      	lsrs	r3, r2, #16
 8007882:	2400      	movs	r4, #0
 8007884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007886:	3206      	adds	r2, #6
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	440a      	add	r2, r1
 800788c:	b2db      	uxtb	r3, r3
 800788e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 8007890:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007894:	f04f 0300 	mov.w	r3, #0
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	0e13      	lsrs	r3, r2, #24
 800789e:	2400      	movs	r4, #0
 80078a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a2:	3207      	adds	r2, #7
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	440a      	add	r2, r1
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->position[i]);
 80078ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ae:	3308      	adds	r3, #8
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	3301      	adds	r3, #1
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b8:	e77b      	b.n	80077b2 <_ZNK11sensor_msgs10JointState9serializeEPh+0x11e>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	4413      	add	r3, r2
 80078c4:	b2ca      	uxtb	r2, r1
 80078c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	0a19      	lsrs	r1, r3, #8
 80078ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d0:	3301      	adds	r3, #1
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4413      	add	r3, r2
 80078d6:	b2ca      	uxtb	r2, r1
 80078d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078de:	0c19      	lsrs	r1, r3, #16
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	3302      	adds	r3, #2
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	4413      	add	r3, r2
 80078e8:	b2ca      	uxtb	r2, r1
 80078ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f0:	0e19      	lsrs	r1, r3, #24
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	3303      	adds	r3, #3
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4413      	add	r3, r2
 80078fa:	b2ca      	uxtb	r2, r1
 80078fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	3304      	adds	r3, #4
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8007904:	2300      	movs	r3, #0
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800790e:	429a      	cmp	r2, r3
 8007910:	d27e      	bcs.n	8007a10 <_ZNK11sensor_msgs10JointState9serializeEPh+0x37c>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	00db      	lsls	r3, r3, #3
 800791a:	4413      	add	r3, r2
 800791c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007920:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8007924:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	440a      	add	r2, r1
 800792e:	b2db      	uxtb	r3, r3
 8007930:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8007932:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	f04f 0400 	mov.w	r4, #0
 800793e:	0a0b      	lsrs	r3, r1, #8
 8007940:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007944:	0a14      	lsrs	r4, r2, #8
 8007946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007948:	3201      	adds	r2, #1
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	440a      	add	r2, r1
 800794e:	b2db      	uxtb	r3, r3
 8007950:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8007952:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	0c0b      	lsrs	r3, r1, #16
 8007960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007964:	0c14      	lsrs	r4, r2, #16
 8007966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007968:	3202      	adds	r2, #2
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	440a      	add	r2, r1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8007972:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	f04f 0400 	mov.w	r4, #0
 800797e:	0e0b      	lsrs	r3, r1, #24
 8007980:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007984:	0e14      	lsrs	r4, r2, #24
 8007986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007988:	3203      	adds	r2, #3
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	440a      	add	r2, r1
 800798e:	b2db      	uxtb	r3, r3
 8007990:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 8007992:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007996:	f04f 0300 	mov.w	r3, #0
 800799a:	f04f 0400 	mov.w	r4, #0
 800799e:	0013      	movs	r3, r2
 80079a0:	2400      	movs	r4, #0
 80079a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a4:	3204      	adds	r2, #4
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	440a      	add	r2, r1
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 80079ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	f04f 0400 	mov.w	r4, #0
 80079ba:	0a13      	lsrs	r3, r2, #8
 80079bc:	2400      	movs	r4, #0
 80079be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c0:	3205      	adds	r2, #5
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	440a      	add	r2, r1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 80079ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80079ce:	f04f 0300 	mov.w	r3, #0
 80079d2:	f04f 0400 	mov.w	r4, #0
 80079d6:	0c13      	lsrs	r3, r2, #16
 80079d8:	2400      	movs	r4, #0
 80079da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079dc:	3206      	adds	r2, #6
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	440a      	add	r2, r1
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 80079e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	f04f 0400 	mov.w	r4, #0
 80079f2:	0e13      	lsrs	r3, r2, #24
 80079f4:	2400      	movs	r4, #0
 80079f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079f8:	3207      	adds	r2, #7
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	440a      	add	r2, r1
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->velocity[i]);
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	3308      	adds	r3, #8
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0e:	e77b      	b.n	8007908 <_ZNK11sensor_msgs10JointState9serializeEPh+0x274>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4413      	add	r3, r2
 8007a1a:	b2ca      	uxtb	r2, r1
 8007a1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	0a19      	lsrs	r1, r3, #8
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	3301      	adds	r3, #1
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	b2ca      	uxtb	r2, r1
 8007a2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	0c19      	lsrs	r1, r3, #16
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	3302      	adds	r3, #2
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	b2ca      	uxtb	r2, r1
 8007a40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a46:	0e19      	lsrs	r1, r3, #24
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4a:	3303      	adds	r3, #3
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	4413      	add	r3, r2
 8007a50:	b2ca      	uxtb	r2, r1
 8007a52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 8007a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a56:	3304      	adds	r3, #4
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d27e      	bcs.n	8007b66 <_ZNK11sensor_msgs10JointState9serializeEPh+0x4d2>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	4413      	add	r3, r2
 8007a72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a76:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 8007a7a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	440a      	add	r2, r1
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 8007a88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	f04f 0400 	mov.w	r4, #0
 8007a94:	0a0b      	lsrs	r3, r1, #8
 8007a96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007a9a:	0a14      	lsrs	r4, r2, #8
 8007a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a9e:	3201      	adds	r2, #1
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 8007aa8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	f04f 0400 	mov.w	r4, #0
 8007ab4:	0c0b      	lsrs	r3, r1, #16
 8007ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aba:	0c14      	lsrs	r4, r2, #16
 8007abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007abe:	3202      	adds	r2, #2
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 8007ac8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	f04f 0400 	mov.w	r4, #0
 8007ad4:	0e0b      	lsrs	r3, r1, #24
 8007ad6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ada:	0e14      	lsrs	r4, r2, #24
 8007adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ade:	3203      	adds	r2, #3
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	440a      	add	r2, r1
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 8007ae8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	f04f 0400 	mov.w	r4, #0
 8007af4:	0013      	movs	r3, r2
 8007af6:	2400      	movs	r4, #0
 8007af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007afa:	3204      	adds	r2, #4
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	440a      	add	r2, r1
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8007b04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	f04f 0400 	mov.w	r4, #0
 8007b10:	0a13      	lsrs	r3, r2, #8
 8007b12:	2400      	movs	r4, #0
 8007b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b16:	3205      	adds	r2, #5
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 8007b20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	f04f 0400 	mov.w	r4, #0
 8007b2c:	0c13      	lsrs	r3, r2, #16
 8007b2e:	2400      	movs	r4, #0
 8007b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b32:	3206      	adds	r2, #6
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	440a      	add	r2, r1
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 8007b3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b40:	f04f 0300 	mov.w	r3, #0
 8007b44:	f04f 0400 	mov.w	r4, #0
 8007b48:	0e13      	lsrs	r3, r2, #24
 8007b4a:	2400      	movs	r4, #0
 8007b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b4e:	3207      	adds	r2, #7
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	440a      	add	r2, r1
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->effort[i]);
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	3301      	adds	r3, #1
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
 8007b64:	e77b      	b.n	8007a5e <_ZNK11sensor_msgs10JointState9serializeEPh+0x3ca>
      }
      return offset;
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8007b68:	4618      	mov	r0, r3
 8007b6a:	373c      	adds	r7, #60	; 0x3c
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd90      	pop	{r4, r7, pc}

08007b70 <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	b099      	sub	sp, #100	; 0x64
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6178      	str	r0, [r7, #20]
 8007b7a:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
      offset += this->header.deserialize(inbuffer + offset);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	1d18      	adds	r0, r3, #4
 8007b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4413      	add	r3, r2
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f7f9 fc82 	bl	8001494 <_ZN8std_msgs6Header11deserializeEPh>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b94:	4413      	add	r3, r2
 8007b96:	65fb      	str	r3, [r7, #92]	; 0x5c
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4413      	add	r3, r2
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4413      	add	r3, r2
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	041b      	lsls	r3, r3, #16
 8007bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc8:	3303      	adds	r3, #3
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4413      	add	r3, r2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	061b      	lsls	r3, r3, #24
 8007bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	647b      	str	r3, [r7, #68]	; 0x44
      offset += sizeof(this->name_length);
 8007bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bda:	3304      	adds	r3, #4
 8007bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(name_lengthT > name_length)
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d90a      	bls.n	8007bfe <_ZN11sensor_msgs10JointState11deserializeEPh+0x8e>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	6a1a      	ldr	r2, [r3, #32]
 8007bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	f005 fdf2 	bl	800d7dc <realloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c02:	619a      	str	r2, [r3, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8007c04:	2300      	movs	r3, #0
 8007c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d23f      	bcs.n	8007c92 <_ZN11sensor_msgs10JointState11deserializeEPh+0x122>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 8007c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	441a      	add	r2, r3
 8007c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fb ffd0 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c26:	3304      	adds	r3, #4
 8007c28:	65fb      	str	r3, [r7, #92]	; 0x5c
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8007c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c32:	4413      	add	r3, r2
 8007c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d20c      	bcs.n	8007c54 <_ZN11sensor_msgs10JointState11deserializeEPh+0xe4>
          inbuffer[k-1]=inbuffer[k];
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3e:	441a      	add	r2, r3
 8007c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c42:	3b01      	subs	r3, #1
 8007c44:	6939      	ldr	r1, [r7, #16]
 8007c46:	440b      	add	r3, r1
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8007c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c4e:	3301      	adds	r3, #1
 8007c50:	657b      	str	r3, [r7, #84]	; 0x54
 8007c52:	e7ec      	b.n	8007c2e <_ZN11sensor_msgs10JointState11deserializeEPh+0xbe>
      }
      inbuffer[offset+length_st_name-1]=0;
 8007c54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	4413      	add	r3, r2
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4413      	add	r3, r2
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8007c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c66:	3b01      	subs	r3, #1
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	441a      	add	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8007c70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c74:	4413      	add	r3, r2
 8007c76:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	6a1a      	ldr	r2, [r3, #32]
 8007c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	321c      	adds	r2, #28
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < name_length; i++){
 8007c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c90:	e7ba      	b.n	8007c08 <_ZN11sensor_msgs10JointState11deserializeEPh+0x98>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4413      	add	r3, r2
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007caa:	4313      	orrs	r3, r2
 8007cac:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	041b      	lsls	r3, r3, #16
 8007cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc2:	3303      	adds	r3, #3
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	061b      	lsls	r3, r3, #24
 8007ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	643b      	str	r3, [r7, #64]	; 0x40
      offset += sizeof(this->position_length);
 8007cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(position_lengthT > position_length)
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d90a      	bls.n	8007cf8 <_ZN11sensor_msgs10JointState11deserializeEPh+0x188>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce8:	00db      	lsls	r3, r3, #3
 8007cea:	4619      	mov	r1, r3
 8007cec:	4610      	mov	r0, r2
 8007cee:	f005 fd75 	bl	800d7dc <realloc>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30
      position_length = position_lengthT;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8007cfe:	2300      	movs	r3, #0
 8007d00:	653b      	str	r3, [r7, #80]	; 0x50
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	f080 80e4 	bcs.w	8007ed6 <_ZN11sensor_msgs10JointState11deserializeEPh+0x366>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	f04f 0400 	mov.w	r4, #0
 8007d16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007d1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d20:	6938      	ldr	r0, [r7, #16]
 8007d22:	4403      	add	r3, r0
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b2dd      	uxtb	r5, r3
 8007d28:	f04f 0600 	mov.w	r6, #0
 8007d2c:	ea45 0301 	orr.w	r3, r5, r1
 8007d30:	ea46 0402 	orr.w	r4, r6, r2
 8007d34:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007d38:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8007d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3e:	3301      	adds	r3, #1
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b2d9      	uxtb	r1, r3
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	f04f 0400 	mov.w	r4, #0
 8007d54:	0214      	lsls	r4, r2, #8
 8007d56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007d5a:	020b      	lsls	r3, r1, #8
 8007d5c:	ea45 0503 	orr.w	r5, r5, r3
 8007d60:	ea46 0604 	orr.w	r6, r6, r4
 8007d64:	462b      	mov	r3, r5
 8007d66:	4634      	mov	r4, r6
 8007d68:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007d6c:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8007d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d72:	3302      	adds	r3, #2
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b2d9      	uxtb	r1, r3
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	f04f 0400 	mov.w	r4, #0
 8007d88:	0414      	lsls	r4, r2, #16
 8007d8a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8007d8e:	040b      	lsls	r3, r1, #16
 8007d90:	ea45 0503 	orr.w	r5, r5, r3
 8007d94:	ea46 0604 	orr.w	r6, r6, r4
 8007d98:	462b      	mov	r3, r5
 8007d9a:	4634      	mov	r4, r6
 8007d9c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007da0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007da6:	3303      	adds	r3, #3
 8007da8:	6938      	ldr	r0, [r7, #16]
 8007daa:	4403      	add	r3, r0
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f04f 0400 	mov.w	r4, #0
 8007db4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8007db8:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8007dbc:	ea41 030a 	orr.w	r3, r1, sl
 8007dc0:	ea42 040b 	orr.w	r4, r2, fp
 8007dc4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007dc8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dce:	3304      	adds	r3, #4
 8007dd0:	6938      	ldr	r0, [r7, #16]
 8007dd2:	4403      	add	r3, r0
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	461c      	mov	r4, r3
 8007dd8:	b2e4      	uxtb	r4, r4
 8007dda:	f04f 0500 	mov.w	r5, #0
 8007dde:	f04f 0800 	mov.w	r8, #0
 8007de2:	f04f 0900 	mov.w	r9, #0
 8007de6:	4623      	mov	r3, r4
 8007de8:	001b      	movs	r3, r3
 8007dea:	4699      	mov	r9, r3
 8007dec:	2300      	movs	r3, #0
 8007dee:	4698      	mov	r8, r3
 8007df0:	4643      	mov	r3, r8
 8007df2:	464c      	mov	r4, r9
 8007df4:	ea43 0301 	orr.w	r3, r3, r1
 8007df8:	ea44 0402 	orr.w	r4, r4, r2
 8007dfc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007e00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e06:	3305      	adds	r3, #5
 8007e08:	6938      	ldr	r0, [r7, #16]
 8007e0a:	4403      	add	r3, r0
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	461c      	mov	r4, r3
 8007e10:	b2e4      	uxtb	r4, r4
 8007e12:	f04f 0500 	mov.w	r5, #0
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	f04f 0900 	mov.w	r9, #0
 8007e1e:	4623      	mov	r3, r4
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	4699      	mov	r9, r3
 8007e24:	2300      	movs	r3, #0
 8007e26:	4698      	mov	r8, r3
 8007e28:	4643      	mov	r3, r8
 8007e2a:	464c      	mov	r4, r9
 8007e2c:	ea43 0301 	orr.w	r3, r3, r1
 8007e30:	ea44 0402 	orr.w	r4, r4, r2
 8007e34:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007e38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3e:	3306      	adds	r3, #6
 8007e40:	6938      	ldr	r0, [r7, #16]
 8007e42:	4403      	add	r3, r0
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	461c      	mov	r4, r3
 8007e48:	b2e4      	uxtb	r4, r4
 8007e4a:	f04f 0500 	mov.w	r5, #0
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	f04f 0900 	mov.w	r9, #0
 8007e56:	4623      	mov	r3, r4
 8007e58:	041b      	lsls	r3, r3, #16
 8007e5a:	4699      	mov	r9, r3
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4698      	mov	r8, r3
 8007e60:	4643      	mov	r3, r8
 8007e62:	464c      	mov	r4, r9
 8007e64:	ea43 0301 	orr.w	r3, r3, r1
 8007e68:	ea44 0402 	orr.w	r4, r4, r2
 8007e6c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007e70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e76:	3307      	adds	r3, #7
 8007e78:	6938      	ldr	r0, [r7, #16]
 8007e7a:	4403      	add	r3, r0
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	461c      	mov	r4, r3
 8007e80:	b2e4      	uxtb	r4, r4
 8007e82:	f04f 0500 	mov.w	r5, #0
 8007e86:	f04f 0800 	mov.w	r8, #0
 8007e8a:	f04f 0900 	mov.w	r9, #0
 8007e8e:	4623      	mov	r3, r4
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	4699      	mov	r9, r3
 8007e94:	2300      	movs	r3, #0
 8007e96:	4698      	mov	r8, r3
 8007e98:	4643      	mov	r3, r8
 8007e9a:	464c      	mov	r4, r9
 8007e9c:	ea43 0301 	orr.w	r3, r3, r1
 8007ea0:	ea44 0402 	orr.w	r4, r4, r2
 8007ea4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->st_position = u_st_position.real;
 8007ea8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
      offset += sizeof(this->st_position);
 8007eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	18d0      	adds	r0, r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	3328      	adds	r3, #40	; 0x28
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f005 fbcb 	bl	800d664 <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 8007ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ed4:	e715      	b.n	8007d02 <_ZN11sensor_msgs10JointState11deserializeEPh+0x192>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4413      	add	r3, r2
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	021b      	lsls	r3, r3, #8
 8007eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4413      	add	r3, r2
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f00:	4313      	orrs	r3, r2
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f06:	3303      	adds	r3, #3
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	061b      	lsls	r3, r3, #24
 8007f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f12:	4313      	orrs	r3, r2
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += sizeof(this->velocity_length);
 8007f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f18:	3304      	adds	r3, #4
 8007f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(velocity_lengthT > velocity_length)
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d90a      	bls.n	8007f3c <_ZN11sensor_msgs10JointState11deserializeEPh+0x3cc>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4610      	mov	r0, r2
 8007f32:	f005 fc53 	bl	800d7dc <realloc>
 8007f36:	4602      	mov	r2, r0
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40
      velocity_length = velocity_lengthT;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f40:	635a      	str	r2, [r3, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8007f42:	2300      	movs	r3, #0
 8007f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	f080 80d1 	bcs.w	80080f4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x584>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	f04f 0400 	mov.w	r4, #0
 8007f5a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007f5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f64:	6938      	ldr	r0, [r7, #16]
 8007f66:	4403      	add	r3, r0
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	b2dd      	uxtb	r5, r3
 8007f6c:	f04f 0600 	mov.w	r6, #0
 8007f70:	ea45 0301 	orr.w	r3, r5, r1
 8007f74:	ea46 0402 	orr.w	r4, r6, r2
 8007f78:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f7c:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8007f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f82:	3301      	adds	r3, #1
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b2d9      	uxtb	r1, r3
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0500 	mov.w	r5, #0
 8007f94:	f04f 0600 	mov.w	r6, #0
 8007f98:	0216      	lsls	r6, r2, #8
 8007f9a:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8007f9e:	020d      	lsls	r5, r1, #8
 8007fa0:	ea45 030a 	orr.w	r3, r5, sl
 8007fa4:	ea46 040b 	orr.w	r4, r6, fp
 8007fa8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007fac:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8007fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fb2:	3302      	adds	r3, #2
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b2d9      	uxtb	r1, r3
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0500 	mov.w	r5, #0
 8007fc4:	f04f 0600 	mov.w	r6, #0
 8007fc8:	0416      	lsls	r6, r2, #16
 8007fca:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 8007fce:	040d      	lsls	r5, r1, #16
 8007fd0:	ea45 030a 	orr.w	r3, r5, sl
 8007fd4:	ea46 040b 	orr.w	r4, r6, fp
 8007fd8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007fdc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe2:	3303      	adds	r3, #3
 8007fe4:	6938      	ldr	r0, [r7, #16]
 8007fe6:	4403      	add	r3, r0
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f04f 0400 	mov.w	r4, #0
 8007ff0:	0a18      	lsrs	r0, r3, #8
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	061b      	lsls	r3, r3, #24
 8007ff6:	60bb      	str	r3, [r7, #8]
 8007ff8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007ffc:	ea43 0301 	orr.w	r3, r3, r1
 8008000:	ea44 0402 	orr.w	r4, r4, r2
 8008004:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8008008:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800800c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800800e:	3304      	adds	r3, #4
 8008010:	6938      	ldr	r0, [r7, #16]
 8008012:	4403      	add	r3, r0
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	fa5f fa83 	uxtb.w	sl, r3
 800801a:	f04f 0b00 	mov.w	fp, #0
 800801e:	f04f 0500 	mov.w	r5, #0
 8008022:	f04f 0600 	mov.w	r6, #0
 8008026:	4656      	mov	r6, sl
 8008028:	2500      	movs	r5, #0
 800802a:	ea45 0301 	orr.w	r3, r5, r1
 800802e:	ea46 0402 	orr.w	r4, r6, r2
 8008032:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8008036:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800803a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800803c:	3305      	adds	r3, #5
 800803e:	6938      	ldr	r0, [r7, #16]
 8008040:	4403      	add	r3, r0
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	fa5f fa83 	uxtb.w	sl, r3
 8008048:	f04f 0b00 	mov.w	fp, #0
 800804c:	f04f 0500 	mov.w	r5, #0
 8008050:	f04f 0600 	mov.w	r6, #0
 8008054:	ea4f 260a 	mov.w	r6, sl, lsl #8
 8008058:	2500      	movs	r5, #0
 800805a:	ea45 0301 	orr.w	r3, r5, r1
 800805e:	ea46 0402 	orr.w	r4, r6, r2
 8008062:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8008066:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800806a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800806c:	3306      	adds	r3, #6
 800806e:	6938      	ldr	r0, [r7, #16]
 8008070:	4403      	add	r3, r0
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	fa5f fa83 	uxtb.w	sl, r3
 8008078:	f04f 0b00 	mov.w	fp, #0
 800807c:	f04f 0500 	mov.w	r5, #0
 8008080:	f04f 0600 	mov.w	r6, #0
 8008084:	ea4f 460a 	mov.w	r6, sl, lsl #16
 8008088:	2500      	movs	r5, #0
 800808a:	ea45 0301 	orr.w	r3, r5, r1
 800808e:	ea46 0402 	orr.w	r4, r6, r2
 8008092:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8008096:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800809a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800809c:	3307      	adds	r3, #7
 800809e:	6938      	ldr	r0, [r7, #16]
 80080a0:	4403      	add	r3, r0
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	fa5f fa83 	uxtb.w	sl, r3
 80080a8:	f04f 0b00 	mov.w	fp, #0
 80080ac:	f04f 0500 	mov.w	r5, #0
 80080b0:	f04f 0600 	mov.w	r6, #0
 80080b4:	ea4f 660a 	mov.w	r6, sl, lsl #24
 80080b8:	2500      	movs	r5, #0
 80080ba:	ea45 0301 	orr.w	r3, r5, r1
 80080be:	ea46 0402 	orr.w	r4, r6, r2
 80080c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->st_velocity = u_st_velocity.real;
 80080c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      offset += sizeof(this->st_velocity);
 80080d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d2:	3308      	adds	r3, #8
 80080d4:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	18d0      	adds	r0, r2, r3
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	3338      	adds	r3, #56	; 0x38
 80080e4:	2208      	movs	r2, #8
 80080e6:	4619      	mov	r1, r3
 80080e8:	f005 fabc 	bl	800d664 <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 80080ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ee:	3301      	adds	r3, #1
 80080f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f2:	e728      	b.n	8007f46 <_ZN11sensor_msgs10JointState11deserializeEPh+0x3d6>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80080f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4413      	add	r3, r2
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80080fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008100:	3301      	adds	r3, #1
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4413      	add	r3, r2
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800810c:	4313      	orrs	r3, r2
 800810e:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008112:	3302      	adds	r3, #2
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4413      	add	r3, r2
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	041b      	lsls	r3, r3, #16
 800811c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800811e:	4313      	orrs	r3, r2
 8008120:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008124:	3303      	adds	r3, #3
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4413      	add	r3, r2
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008130:	4313      	orrs	r3, r2
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
      offset += sizeof(this->effort_length);
 8008134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008136:	3304      	adds	r3, #4
 8008138:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(effort_lengthT > effort_length)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008140:	429a      	cmp	r2, r3
 8008142:	d90a      	bls.n	800815a <_ZN11sensor_msgs10JointState11deserializeEPh+0x5ea>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f005 fb44 	bl	800d7dc <realloc>
 8008154:	4602      	mov	r2, r0
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	651a      	str	r2, [r3, #80]	; 0x50
      effort_length = effort_lengthT;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800815e:	645a      	str	r2, [r3, #68]	; 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 8008160:	2300      	movs	r3, #0
 8008162:	64bb      	str	r3, [r7, #72]	; 0x48
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800816a:	429a      	cmp	r2, r3
 800816c:	f080 80d1 	bcs.w	8008312 <_ZN11sensor_msgs10JointState11deserializeEPh+0x7a2>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	f04f 0400 	mov.w	r4, #0
 8008178:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800817c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008182:	6938      	ldr	r0, [r7, #16]
 8008184:	4403      	add	r3, r0
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b2dd      	uxtb	r5, r3
 800818a:	f04f 0600 	mov.w	r6, #0
 800818e:	ea45 0301 	orr.w	r3, r5, r1
 8008192:	ea46 0402 	orr.w	r4, r6, r2
 8008196:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800819a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800819e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a0:	3301      	adds	r3, #1
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4413      	add	r3, r2
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b2d9      	uxtb	r1, r3
 80081aa:	f04f 0200 	mov.w	r2, #0
 80081ae:	f04f 0500 	mov.w	r5, #0
 80081b2:	f04f 0600 	mov.w	r6, #0
 80081b6:	0216      	lsls	r6, r2, #8
 80081b8:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 80081bc:	020d      	lsls	r5, r1, #8
 80081be:	ea45 0308 	orr.w	r3, r5, r8
 80081c2:	ea46 0409 	orr.w	r4, r6, r9
 80081c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80081ca:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80081ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081d0:	3302      	adds	r3, #2
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4413      	add	r3, r2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	b2d9      	uxtb	r1, r3
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0500 	mov.w	r5, #0
 80081e2:	f04f 0600 	mov.w	r6, #0
 80081e6:	0416      	lsls	r6, r2, #16
 80081e8:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80081ec:	040d      	lsls	r5, r1, #16
 80081ee:	ea45 0308 	orr.w	r3, r5, r8
 80081f2:	ea46 0409 	orr.w	r4, r6, r9
 80081f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80081fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008200:	3303      	adds	r3, #3
 8008202:	6938      	ldr	r0, [r7, #16]
 8008204:	4403      	add	r3, r0
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f04f 0400 	mov.w	r4, #0
 800820e:	0a18      	lsrs	r0, r3, #8
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	061b      	lsls	r3, r3, #24
 8008214:	603b      	str	r3, [r7, #0]
 8008216:	e9d7 3400 	ldrd	r3, r4, [r7]
 800821a:	ea43 0301 	orr.w	r3, r3, r1
 800821e:	ea44 0402 	orr.w	r4, r4, r2
 8008222:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8008226:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800822a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800822c:	3304      	adds	r3, #4
 800822e:	6938      	ldr	r0, [r7, #16]
 8008230:	4403      	add	r3, r0
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	fa5f f883 	uxtb.w	r8, r3
 8008238:	f04f 0900 	mov.w	r9, #0
 800823c:	f04f 0500 	mov.w	r5, #0
 8008240:	f04f 0600 	mov.w	r6, #0
 8008244:	4646      	mov	r6, r8
 8008246:	2500      	movs	r5, #0
 8008248:	ea45 0301 	orr.w	r3, r5, r1
 800824c:	ea46 0402 	orr.w	r4, r6, r2
 8008250:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8008254:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800825a:	3305      	adds	r3, #5
 800825c:	6938      	ldr	r0, [r7, #16]
 800825e:	4403      	add	r3, r0
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	fa5f f883 	uxtb.w	r8, r3
 8008266:	f04f 0900 	mov.w	r9, #0
 800826a:	f04f 0500 	mov.w	r5, #0
 800826e:	f04f 0600 	mov.w	r6, #0
 8008272:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8008276:	2500      	movs	r5, #0
 8008278:	ea45 0301 	orr.w	r3, r5, r1
 800827c:	ea46 0402 	orr.w	r4, r6, r2
 8008280:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8008284:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800828a:	3306      	adds	r3, #6
 800828c:	6938      	ldr	r0, [r7, #16]
 800828e:	4403      	add	r3, r0
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	fa5f f883 	uxtb.w	r8, r3
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	f04f 0500 	mov.w	r5, #0
 800829e:	f04f 0600 	mov.w	r6, #0
 80082a2:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80082a6:	2500      	movs	r5, #0
 80082a8:	ea45 0301 	orr.w	r3, r5, r1
 80082ac:	ea46 0402 	orr.w	r4, r6, r2
 80082b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80082b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ba:	3307      	adds	r3, #7
 80082bc:	6938      	ldr	r0, [r7, #16]
 80082be:	4403      	add	r3, r0
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	fa5f f883 	uxtb.w	r8, r3
 80082c6:	f04f 0900 	mov.w	r9, #0
 80082ca:	f04f 0500 	mov.w	r5, #0
 80082ce:	f04f 0600 	mov.w	r6, #0
 80082d2:	ea4f 6608 	mov.w	r6, r8, lsl #24
 80082d6:	2500      	movs	r5, #0
 80082d8:	ea45 0301 	orr.w	r3, r5, r1
 80082dc:	ea46 0402 	orr.w	r4, r6, r2
 80082e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->st_effort = u_st_effort.real;
 80082e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
      offset += sizeof(this->st_effort);
 80082ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082f0:	3308      	adds	r3, #8
 80082f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	18d0      	adds	r0, r2, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	3348      	adds	r3, #72	; 0x48
 8008302:	2208      	movs	r2, #8
 8008304:	4619      	mov	r1, r3
 8008306:	f005 f9ad 	bl	800d664 <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 800830a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830c:	3301      	adds	r3, #1
 800830e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008310:	e728      	b.n	8008164 <_ZN11sensor_msgs10JointState11deserializeEPh+0x5f4>
      }
     return offset;
 8008312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    }
 8008314:	4618      	mov	r0, r3
 8008316:	3764      	adds	r7, #100	; 0x64
 8008318:	46bd      	mov	sp, r7
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008320 <_ZN11sensor_msgs10JointState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/JointState"; };
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	4b03      	ldr	r3, [pc, #12]	; (8008338 <_ZN11sensor_msgs10JointState7getTypeEv+0x18>)
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	0800e0c0 	.word	0x0800e0c0

0800833c <_ZN11sensor_msgs10JointState6getMD5Ev>:
    const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	4b03      	ldr	r3, [pc, #12]	; (8008354 <_ZN11sensor_msgs10JointState6getMD5Ev+0x18>)
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	0800e0d8 	.word	0x0800e0d8

08008358 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4618      	mov	r0, r3
 8008364:	f7f8 fce8 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8008368:	4a08      	ldr	r2, [pc, #32]	; (800838c <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3308      	adds	r3, #8
 8008372:	4618      	mov	r0, r3
 8008374:	f7f9 ff06 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3328      	adds	r3, #40	; 0x28
 800837c:	4618      	mov	r0, r3
 800837e:	f7f9 f965 	bl	800164c <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	0800e7d0 	.word	0x0800e7d0

08008390 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f103 0008 	add.w	r0, r3, #8
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	4413      	add	r3, r2
 80083aa:	4619      	mov	r1, r3
 80083ac:	f7f9 ff12 	bl	80021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80083b0:	4602      	mov	r2, r0
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	4413      	add	r3, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	f7f9 f96f 	bl	80016a8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80083ca:	4602      	mov	r2, r0
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80083d2:	68fb      	ldr	r3, [r7, #12]
    }
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f103 0008 	add.w	r0, r3, #8
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	4413      	add	r3, r2
 80083f6:	4619      	mov	r1, r3
 80083f8:	f7fa f85e 	bl	80024b8 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80083fc:	4602      	mov	r2, r0
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	4413      	add	r3, r2
 8008410:	4619      	mov	r1, r3
 8008412:	f7f9 fb32 	bl	8001a7a <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8008416:	4602      	mov	r2, r0
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
     return offset;
 800841e:	68fb      	ldr	r3, [r7, #12]
    }
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	4b03      	ldr	r3, [pc, #12]	; (8008440 <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	0800e0fc 	.word	0x0800e0fc

08008444 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	4b03      	ldr	r3, [pc, #12]	; (800845c <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	0800e114 	.word	0x0800e114

08008460 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4618      	mov	r0, r3
 800846c:	f7f8 fc64 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8008470:	4a0a      	ldr	r2, [pc, #40]	; (800849c <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3304      	adds	r3, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f7f8 ff52 	bl	8001324 <_ZN8std_msgs6HeaderC1Ev>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a07      	ldr	r2, [pc, #28]	; (80084a0 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8008484:	619a      	str	r2, [r3, #24]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3320      	adds	r3, #32
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff ff64 	bl	8008358 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	0800e7b8 	.word	0x0800e7b8
 80084a0:	0800dec0 	.word	0x0800dec0

080084a4 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	1d18      	adds	r0, r3, #4
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	4413      	add	r3, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	f7f8 ff51 	bl	8001364 <_ZNK8std_msgs6Header9serializeEPh>
 80084c2:	4602      	mov	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7f7 fe7a 	bl	80001c8 <strlen>
 80084d4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	4413      	add	r3, r2
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fb fb52 	bl	8003b88 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3304      	adds	r3, #4
 80084e8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	18d0      	adds	r0, r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	4619      	mov	r1, r3
 80084f8:	f005 f8b4 	bl	800d664 <memcpy>
      offset += length_child_frame_id;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4413      	add	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f103 0020 	add.w	r0, r3, #32
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	4413      	add	r3, r2
 8008510:	4619      	mov	r1, r3
 8008512:	f7ff ff3d 	bl	8008390 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8008516:	4602      	mov	r2, r0
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
      return offset;
 800851e:	68fb      	ldr	r3, [r7, #12]
    }
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	1d18      	adds	r0, r3, #4
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	4413      	add	r3, r2
 8008540:	4619      	mov	r1, r3
 8008542:	f7f8 ffa7 	bl	8001494 <_ZN8std_msgs6Header11deserializeEPh>
 8008546:	4602      	mov	r2, r0
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	441a      	add	r2, r3
 8008554:	f107 030c 	add.w	r3, r7, #12
 8008558:	4611      	mov	r1, r2
 800855a:	4618      	mov	r0, r3
 800855c:	f7fb fb32 	bl	8003bc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	3304      	adds	r3, #4
 8008564:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	429a      	cmp	r2, r3
 8008574:	d20c      	bcs.n	8008590 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	441a      	add	r2, r3
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	3b01      	subs	r3, #1
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	440b      	add	r3, r1
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	3301      	adds	r3, #1
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	e7ec      	b.n	800856a <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	3b01      	subs	r3, #1
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	4413      	add	r3, r2
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	441a      	add	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f103 0020 	add.w	r0, r3, #32
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	4413      	add	r3, r2
 80085c0:	4619      	mov	r1, r3
 80085c2:	f7ff ff0b 	bl	80083dc <_ZN13geometry_msgs9Transform11deserializeEPh>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	4413      	add	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
     return offset;
 80085ce:	693b      	ldr	r3, [r7, #16]
    }
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	4b03      	ldr	r3, [pc, #12]	; (80085f0 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 80085e2:	4618      	mov	r0, r3
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	0800e138 	.word	0x0800e138

080085f4 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	4b03      	ldr	r3, [pc, #12]	; (800860c <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	0800e158 	.word	0x0800e158

08008610 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4618      	mov	r0, r3
 800861c:	f7f8 fb8c 	bl	8000d38 <_ZN3ros3MsgC1Ev>
 8008620:	4a09      	ldr	r2, [pc, #36]	; (8008648 <_ZN2tf9tfMessageC1Ev+0x38>)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	605a      	str	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3308      	adds	r3, #8
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff ff15 	bl	8008460 <_ZN13geometry_msgs16TransformStampedC1Ev>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	679a      	str	r2, [r3, #120]	; 0x78
    {
    }
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	0800e7a0 	.word	0x0800e7a0

0800864c <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6859      	ldr	r1, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	4413      	add	r3, r2
 8008664:	b2ca      	uxtb	r2, r1
 8008666:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	0a19      	lsrs	r1, r3, #8
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4413      	add	r3, r2
 8008676:	b2ca      	uxtb	r2, r1
 8008678:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	0c19      	lsrs	r1, r3, #16
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3302      	adds	r3, #2
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	4413      	add	r3, r2
 8008688:	b2ca      	uxtb	r2, r1
 800868a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	0e19      	lsrs	r1, r3, #24
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3303      	adds	r3, #3
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4413      	add	r3, r2
 800869a:	b2ca      	uxtb	r2, r1
 800869c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80086a4:	2300      	movs	r3, #0
 80086a6:	60bb      	str	r3, [r7, #8]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d223      	bcs.n	80086fa <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	18c8      	adds	r0, r1, r3
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	011b      	lsls	r3, r3, #4
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	00db      	lsls	r3, r3, #3
 80086d6:	1a9b      	subs	r3, r3, r2
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	440b      	add	r3, r1
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	440a      	add	r2, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	4798      	blx	r3
 80086ea:	4602      	mov	r2, r0
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	3301      	adds	r3, #1
 80086f6:	60bb      	str	r3, [r7, #8]
 80086f8:	e7d6      	b.n	80086a8 <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 80086fa:	68fb      	ldr	r3, [r7, #12]
    }
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	4413      	add	r3, r2
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	3301      	adds	r3, #1
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	4413      	add	r3, r2
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	3302      	adds	r3, #2
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4413      	add	r3, r2
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	041b      	lsls	r3, r3, #16
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	3303      	adds	r3, #3
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	4413      	add	r3, r2
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	061b      	lsls	r3, r3, #24
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	3304      	adds	r3, #4
 8008756:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	429a      	cmp	r2, r3
 8008760:	d90c      	bls.n	800877c <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4613      	mov	r3, r2
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	1a9b      	subs	r3, r3, r2
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	4619      	mov	r1, r3
 8008772:	f005 f833 	bl	800d7dc <realloc>
 8008776:	4602      	mov	r2, r0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	679a      	str	r2, [r3, #120]	; 0x78
      transforms_length = transforms_lengthT;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	429a      	cmp	r2, r3
 800878e:	d21e      	bcs.n	80087ce <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f103 0008 	add.w	r0, r3, #8
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	4413      	add	r3, r2
 800879c:	4619      	mov	r1, r3
 800879e:	f7ff fec3 	bl	8008528 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 80087a2:	4602      	mov	r2, r0
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	4413      	add	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	18c8      	adds	r0, r1, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3308      	adds	r3, #8
 80087be:	2270      	movs	r2, #112	; 0x70
 80087c0:	4619      	mov	r1, r3
 80087c2:	f004 ff4f 	bl	800d664 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	3301      	adds	r3, #1
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	e7db      	b.n	8008786 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 80087ce:	697b      	ldr	r3, [r7, #20]
    }
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <_ZN2tf9tfMessage7getTypeEv+0x18>)
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	0800e17c 	.word	0x0800e17c

080087f4 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	4b03      	ldr	r3, [pc, #12]	; (800880c <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 80087fe:	4618      	mov	r0, r3
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	0800e18c 	.word	0x0800e18c

08008810 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fef8 	bl	8008610 <_ZN2tf9tfMessageC1Ev>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	2300      	movs	r3, #0
 800882a:	4904      	ldr	r1, [pc, #16]	; (800883c <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 800882c:	f7f8 fa94 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	0800e1b0 	.word	0x0800e1b0

08008840 <_Z8initOdomv>:
sensor_msgs::JointState joint_states;

ros::Publisher odom_pub("odom", &odom);
ros::Publisher joint_states_pub("joint_states", &joint_states);

void initOdom() {
 8008840:	b490      	push	{r4, r7}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
//	init_encoder = true;

	for (int index = 0; index < 3; index++) {
 8008846:	2300      	movs	r3, #0
 8008848:	607b      	str	r3, [r7, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b02      	cmp	r3, #2
 800884e:	dc14      	bgt.n	800887a <_Z8initOdomv+0x3a>
		odom_pose[index] = 0.0;
 8008850:	4a2c      	ldr	r2, [pc, #176]	; (8008904 <_Z8initOdomv+0xc4>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
		odom_vel[index] = 0.0;
 800885e:	4a2a      	ldr	r2, [pc, #168]	; (8008908 <_Z8initOdomv+0xc8>)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	441a      	add	r2, r3
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	f04f 0400 	mov.w	r4, #0
 800886e:	e9c2 3400 	strd	r3, r4, [r2]
	for (int index = 0; index < 3; index++) {
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3301      	adds	r3, #1
 8008876:	607b      	str	r3, [r7, #4]
 8008878:	e7e7      	b.n	800884a <_Z8initOdomv+0xa>
	}

	odom.pose.pose.position.x = 0.0;
 800887a:	4a24      	ldr	r2, [pc, #144]	; (800890c <_Z8initOdomv+0xcc>)
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	f04f 0400 	mov.w	r4, #0
 8008884:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	odom.pose.pose.position.x = 0.0;
 8008888:	4a20      	ldr	r2, [pc, #128]	; (800890c <_Z8initOdomv+0xcc>)
 800888a:	f04f 0300 	mov.w	r3, #0
 800888e:	f04f 0400 	mov.w	r4, #0
 8008892:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	odom.pose.pose.position.x = 0.0;
 8008896:	4a1d      	ldr	r2, [pc, #116]	; (800890c <_Z8initOdomv+0xcc>)
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	f04f 0400 	mov.w	r4, #0
 80088a0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	odom.pose.pose.orientation.x = 0.0;
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <_Z8initOdomv+0xcc>)
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	f04f 0400 	mov.w	r4, #0
 80088ae:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	odom.pose.pose.orientation.x = 0.0;
 80088b2:	4a16      	ldr	r2, [pc, #88]	; (800890c <_Z8initOdomv+0xcc>)
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	f04f 0400 	mov.w	r4, #0
 80088bc:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	odom.pose.pose.orientation.x = 0.0;
 80088c0:	4a12      	ldr	r2, [pc, #72]	; (800890c <_Z8initOdomv+0xcc>)
 80088c2:	f04f 0300 	mov.w	r3, #0
 80088c6:	f04f 0400 	mov.w	r4, #0
 80088ca:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	odom.pose.pose.orientation.x = 0.0;
 80088ce:	4a0f      	ldr	r2, [pc, #60]	; (800890c <_Z8initOdomv+0xcc>)
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	f04f 0400 	mov.w	r4, #0
 80088d8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

	odom.twist.twist.linear.x = 0.0;
 80088dc:	4a0b      	ldr	r2, [pc, #44]	; (800890c <_Z8initOdomv+0xcc>)
 80088de:	f04f 0300 	mov.w	r3, #0
 80088e2:	f04f 0400 	mov.w	r4, #0
 80088e6:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
	odom.twist.twist.angular.z = 0.0;
 80088ea:	4a08      	ldr	r2, [pc, #32]	; (800890c <_Z8initOdomv+0xcc>)
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	f04f 0400 	mov.w	r4, #0
 80088f4:	e9c2 3478 	strd	r3, r4, [r2, #480]	; 0x1e0
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc90      	pop	{r4, r7}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20001dc8 	.word	0x20001dc8
 8008908:	20001dd8 	.word	0x20001dd8
 800890c:	20001df0 	.word	0x20001df0

08008910 <_Z15initJointStatesv>:

void initJointStates() {
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
	static char *joint_states_name[2] = { (char*) "wheel_left_joint",
			(char*) "wheel_right_joint" };

	joint_states.header.frame_id = "base_link";
 8008914:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <_Z15initJointStatesv+0x34>)
 8008916:	4a0c      	ldr	r2, [pc, #48]	; (8008948 <_Z15initJointStatesv+0x38>)
 8008918:	615a      	str	r2, [r3, #20]
	joint_states.name = joint_states_name;
 800891a:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <_Z15initJointStatesv+0x34>)
 800891c:	4a0b      	ldr	r2, [pc, #44]	; (800894c <_Z15initJointStatesv+0x3c>)
 800891e:	621a      	str	r2, [r3, #32]

	joint_states.name_length = WHEEL_NUM;
 8008920:	4b08      	ldr	r3, [pc, #32]	; (8008944 <_Z15initJointStatesv+0x34>)
 8008922:	2202      	movs	r2, #2
 8008924:	619a      	str	r2, [r3, #24]
	joint_states.position_length = WHEEL_NUM;
 8008926:	4b07      	ldr	r3, [pc, #28]	; (8008944 <_Z15initJointStatesv+0x34>)
 8008928:	2202      	movs	r2, #2
 800892a:	625a      	str	r2, [r3, #36]	; 0x24
	joint_states.velocity_length = WHEEL_NUM;
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <_Z15initJointStatesv+0x34>)
 800892e:	2202      	movs	r2, #2
 8008930:	635a      	str	r2, [r3, #52]	; 0x34
	joint_states.effort_length = WHEEL_NUM;
 8008932:	4b04      	ldr	r3, [pc, #16]	; (8008944 <_Z15initJointStatesv+0x34>)
 8008934:	2202      	movs	r2, #2
 8008936:	645a      	str	r2, [r3, #68]	; 0x44
}
 8008938:	bf00      	nop
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20002200 	.word	0x20002200
 8008948:	0800e27c 	.word	0x0800e27c
 800894c:	20000000 	.word	0x20000000

08008950 <_Z41__static_initialization_and_destruction_0ii>:
	odom_vel[2] = w;

	last_theta = theta;

	return true;
}
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d158      	bne.n	8008a12 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008966:	4293      	cmp	r3, r2
 8008968:	d153      	bne.n	8008a12 <_Z41__static_initialization_and_destruction_0ii+0xc2>
static std_msgs::String debug_msg;
 800896a:	482c      	ldr	r0, [pc, #176]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800896c:	f7f8 fa16 	bl	8000d9c <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8008970:	482b      	ldr	r0, [pc, #172]	; (8008a20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8008972:	f7f8 faaf 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8008976:	482b      	ldr	r0, [pc, #172]	; (8008a24 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8008978:	f7f8 faac 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 tick_msg;
 800897c:	482a      	ldr	r0, [pc, #168]	; (8008a28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800897e:	f7f8 faa9 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test1_msg;
 8008982:	482a      	ldr	r0, [pc, #168]	; (8008a2c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8008984:	f7f8 faa6 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test2_msg;
 8008988:	4829      	ldr	r0, [pc, #164]	; (8008a30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800898a:	f7f8 faa3 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Float32 lwheel_vel_msg;
 800898e:	4829      	ldr	r0, [pc, #164]	; (8008a34 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8008990:	f7f8 fc2c 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static std_msgs::Float32 rwheel_vel_msg;
 8008994:	4828      	ldr	r0, [pc, #160]	; (8008a38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8008996:	f7f8 fc29 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 800899a:	2300      	movs	r3, #0
 800899c:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800899e:	4927      	ldr	r1, [pc, #156]	; (8008a3c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80089a0:	4827      	ldr	r0, [pc, #156]	; (8008a40 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80089a2:	f7f8 f9d9 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 80089a6:	2300      	movs	r3, #0
 80089a8:	4a1d      	ldr	r2, [pc, #116]	; (8008a20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80089aa:	4926      	ldr	r1, [pc, #152]	; (8008a44 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80089ac:	4826      	ldr	r0, [pc, #152]	; (8008a48 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80089ae:	f7f8 f9d3 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 80089b2:	2300      	movs	r3, #0
 80089b4:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80089b6:	4925      	ldr	r1, [pc, #148]	; (8008a4c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80089b8:	4825      	ldr	r0, [pc, #148]	; (8008a50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80089ba:	f7f8 f9cd 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher tick_pub("tick", &tick_msg);
 80089be:	2300      	movs	r3, #0
 80089c0:	4a19      	ldr	r2, [pc, #100]	; (8008a28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80089c2:	4924      	ldr	r1, [pc, #144]	; (8008a54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80089c4:	4824      	ldr	r0, [pc, #144]	; (8008a58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80089c6:	f7f8 f9c7 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher lwheel_vel_pub("lwheel_vel", &lwheel_vel_msg);
 80089ca:	2300      	movs	r3, #0
 80089cc:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80089ce:	4923      	ldr	r1, [pc, #140]	; (8008a5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80089d0:	4823      	ldr	r0, [pc, #140]	; (8008a60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80089d2:	f7f8 f9c1 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher rwheel_vel_pub("rwheel_vel", &rwheel_vel_msg);
 80089d6:	2300      	movs	r3, #0
 80089d8:	4a17      	ldr	r2, [pc, #92]	; (8008a38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80089da:	4922      	ldr	r1, [pc, #136]	; (8008a64 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80089dc:	4822      	ldr	r0, [pc, #136]	; (8008a68 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80089de:	f7f8 f9bb 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
nav_msgs::Odometry odom;
 80089e2:	4822      	ldr	r0, [pc, #136]	; (8008a6c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80089e4:	f7fe fd2e 	bl	8007444 <_ZN8nav_msgs8OdometryC1Ev>
geometry_msgs::TransformStamped odom_tf;
 80089e8:	4821      	ldr	r0, [pc, #132]	; (8008a70 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80089ea:	f7ff fd39 	bl	8008460 <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 80089ee:	4821      	ldr	r0, [pc, #132]	; (8008a74 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80089f0:	f7ff ff0e 	bl	8008810 <_ZN2tf20TransformBroadcasterC1Ev>
sensor_msgs::JointState joint_states;
 80089f4:	4820      	ldr	r0, [pc, #128]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80089f6:	f7fe fe1d 	bl	8007634 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher odom_pub("odom", &odom);
 80089fa:	2300      	movs	r3, #0
 80089fc:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80089fe:	491f      	ldr	r1, [pc, #124]	; (8008a7c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8008a00:	481f      	ldr	r0, [pc, #124]	; (8008a80 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8008a02:	f7f8 f9a9 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher joint_states_pub("joint_states", &joint_states);
 8008a06:	2300      	movs	r3, #0
 8008a08:	4a1b      	ldr	r2, [pc, #108]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8008a0a:	491e      	ldr	r1, [pc, #120]	; (8008a84 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8008a0c:	481e      	ldr	r0, [pc, #120]	; (8008a88 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8008a0e:	f7f8 f9a3 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20001ce8 	.word	0x20001ce8
 8008a20:	20001cf0 	.word	0x20001cf0
 8008a24:	20001d00 	.word	0x20001d00
 8008a28:	20001d10 	.word	0x20001d10
 8008a2c:	20001d20 	.word	0x20001d20
 8008a30:	20001d30 	.word	0x20001d30
 8008a34:	20001d40 	.word	0x20001d40
 8008a38:	20001d48 	.word	0x20001d48
 8008a3c:	0800e2a0 	.word	0x0800e2a0
 8008a40:	20001d50 	.word	0x20001d50
 8008a44:	0800e2a8 	.word	0x0800e2a8
 8008a48:	20001d64 	.word	0x20001d64
 8008a4c:	0800e2b8 	.word	0x0800e2b8
 8008a50:	20001d78 	.word	0x20001d78
 8008a54:	0800e2c8 	.word	0x0800e2c8
 8008a58:	20001d8c 	.word	0x20001d8c
 8008a5c:	0800e2d0 	.word	0x0800e2d0
 8008a60:	20001da0 	.word	0x20001da0
 8008a64:	0800e2dc 	.word	0x0800e2dc
 8008a68:	20001db4 	.word	0x20001db4
 8008a6c:	20001df0 	.word	0x20001df0
 8008a70:	200020f8 	.word	0x200020f8
 8008a74:	20002168 	.word	0x20002168
 8008a78:	20002200 	.word	0x20002200
 8008a7c:	0800e288 	.word	0x0800e288
 8008a80:	20002258 	.word	0x20002258
 8008a84:	0800e2e8 	.word	0x0800e2e8
 8008a88:	2000226c 	.word	0x2000226c

08008a8c <_GLOBAL__sub_I_odom_pose>:
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a94:	2001      	movs	r0, #1
 8008a96:	f7ff ff5b 	bl	8008950 <_Z41__static_initialization_and_destruction_0ii>
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	607b      	str	r3, [r7, #4]
 8008aa6:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <HAL_MspInit+0x4c>)
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aaa:	4a0f      	ldr	r2, [pc, #60]	; (8008ae8 <HAL_MspInit+0x4c>)
 8008aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <HAL_MspInit+0x4c>)
 8008ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aba:	607b      	str	r3, [r7, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008abe:	2300      	movs	r3, #0
 8008ac0:	603b      	str	r3, [r7, #0]
 8008ac2:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <HAL_MspInit+0x4c>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <HAL_MspInit+0x4c>)
 8008ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008acc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ace:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <HAL_MspInit+0x4c>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40023800 	.word	0x40023800

08008aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008af4:	f107 0314 	add.w	r3, r7, #20
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	605a      	str	r2, [r3, #4]
 8008afe:	609a      	str	r2, [r3, #8]
 8008b00:	60da      	str	r2, [r3, #12]
 8008b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a19      	ldr	r2, [pc, #100]	; (8008b70 <HAL_I2C_MspInit+0x84>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d12b      	bne.n	8008b66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	4b18      	ldr	r3, [pc, #96]	; (8008b74 <HAL_I2C_MspInit+0x88>)
 8008b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b16:	4a17      	ldr	r2, [pc, #92]	; (8008b74 <HAL_I2C_MspInit+0x88>)
 8008b18:	f043 0302 	orr.w	r3, r3, #2
 8008b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b1e:	4b15      	ldr	r3, [pc, #84]	; (8008b74 <HAL_I2C_MspInit+0x88>)
 8008b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008b2a:	23c0      	movs	r3, #192	; 0xc0
 8008b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b2e:	2312      	movs	r3, #18
 8008b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b32:	2301      	movs	r3, #1
 8008b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b36:	2303      	movs	r3, #3
 8008b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008b3a:	2304      	movs	r3, #4
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b3e:	f107 0314 	add.w	r3, r7, #20
 8008b42:	4619      	mov	r1, r3
 8008b44:	480c      	ldr	r0, [pc, #48]	; (8008b78 <HAL_I2C_MspInit+0x8c>)
 8008b46:	f001 fe01 	bl	800a74c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <HAL_I2C_MspInit+0x88>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	4a08      	ldr	r2, [pc, #32]	; (8008b74 <HAL_I2C_MspInit+0x88>)
 8008b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b58:	6413      	str	r3, [r2, #64]	; 0x40
 8008b5a:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <HAL_I2C_MspInit+0x88>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008b66:	bf00      	nop
 8008b68:	3728      	adds	r7, #40	; 0x28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	40005400 	.word	0x40005400
 8008b74:	40023800 	.word	0x40023800
 8008b78:	40020400 	.word	0x40020400

08008b7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08e      	sub	sp, #56	; 0x38
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	605a      	str	r2, [r3, #4]
 8008b8e:	609a      	str	r2, [r3, #8]
 8008b90:	60da      	str	r2, [r3, #12]
 8008b92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a4c      	ldr	r2, [pc, #304]	; (8008ccc <HAL_TIM_Encoder_MspInit+0x150>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d12d      	bne.n	8008bfa <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	623b      	str	r3, [r7, #32]
 8008ba2:	4b4b      	ldr	r3, [pc, #300]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba6:	4a4a      	ldr	r2, [pc, #296]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008ba8:	f043 0301 	orr.w	r3, r3, #1
 8008bac:	6453      	str	r3, [r2, #68]	; 0x44
 8008bae:	4b48      	ldr	r3, [pc, #288]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	623b      	str	r3, [r7, #32]
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	4b44      	ldr	r3, [pc, #272]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	4a43      	ldr	r2, [pc, #268]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008bc4:	f043 0310 	orr.w	r3, r3, #16
 8008bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bca:	4b41      	ldr	r3, [pc, #260]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	61fb      	str	r3, [r7, #28]
 8008bd4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8008bd6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008be4:	2300      	movs	r3, #0
 8008be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008be8:	2301      	movs	r3, #1
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4838      	ldr	r0, [pc, #224]	; (8008cd4 <HAL_TIM_Encoder_MspInit+0x158>)
 8008bf4:	f001 fdaa 	bl	800a74c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008bf8:	e063      	b.n	8008cc2 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM4)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a36      	ldr	r2, [pc, #216]	; (8008cd8 <HAL_TIM_Encoder_MspInit+0x15c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d12d      	bne.n	8008c60 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	4b31      	ldr	r3, [pc, #196]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	4a30      	ldr	r2, [pc, #192]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c0e:	f043 0304 	orr.w	r3, r3, #4
 8008c12:	6413      	str	r3, [r2, #64]	; 0x40
 8008c14:	4b2e      	ldr	r3, [pc, #184]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	61bb      	str	r3, [r7, #24]
 8008c1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	4b2a      	ldr	r3, [pc, #168]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	4a29      	ldr	r2, [pc, #164]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c2a:	f043 0308 	orr.w	r3, r3, #8
 8008c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8008c30:	4b27      	ldr	r3, [pc, #156]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8008c3c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c42:	2302      	movs	r3, #2
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c56:	4619      	mov	r1, r3
 8008c58:	4820      	ldr	r0, [pc, #128]	; (8008cdc <HAL_TIM_Encoder_MspInit+0x160>)
 8008c5a:	f001 fd77 	bl	800a74c <HAL_GPIO_Init>
}
 8008c5e:	e030      	b.n	8008cc2 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM5)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <HAL_TIM_Encoder_MspInit+0x164>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d12b      	bne.n	8008cc2 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	4a17      	ldr	r2, [pc, #92]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c74:	f043 0308 	orr.w	r3, r3, #8
 8008c78:	6413      	str	r3, [r2, #64]	; 0x40
 8008c7a:	4b15      	ldr	r3, [pc, #84]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	4b11      	ldr	r3, [pc, #68]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8e:	4a10      	ldr	r2, [pc, #64]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	6313      	str	r3, [r2, #48]	; 0x30
 8008c96:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <HAL_TIM_Encoder_MspInit+0x154>)
 8008c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4809      	ldr	r0, [pc, #36]	; (8008ce4 <HAL_TIM_Encoder_MspInit+0x168>)
 8008cbe:	f001 fd45 	bl	800a74c <HAL_GPIO_Init>
}
 8008cc2:	bf00      	nop
 8008cc4:	3738      	adds	r7, #56	; 0x38
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	40000800 	.word	0x40000800
 8008cdc:	40020c00 	.word	0x40020c00
 8008ce0:	40000c00 	.word	0x40000c00
 8008ce4:	40020000 	.word	0x40020000

08008ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a18      	ldr	r2, [pc, #96]	; (8008d58 <HAL_TIM_Base_MspInit+0x70>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d10e      	bne.n	8008d18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_TIM_Base_MspInit+0x74>)
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	4a16      	ldr	r2, [pc, #88]	; (8008d5c <HAL_TIM_Base_MspInit+0x74>)
 8008d04:	f043 0302 	orr.w	r3, r3, #2
 8008d08:	6413      	str	r3, [r2, #64]	; 0x40
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <HAL_TIM_Base_MspInit+0x74>)
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8008d16:	e01a      	b.n	8008d4e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a10      	ldr	r2, [pc, #64]	; (8008d60 <HAL_TIM_Base_MspInit+0x78>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d115      	bne.n	8008d4e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008d22:	2300      	movs	r3, #0
 8008d24:	60bb      	str	r3, [r7, #8]
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <HAL_TIM_Base_MspInit+0x74>)
 8008d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2a:	4a0c      	ldr	r2, [pc, #48]	; (8008d5c <HAL_TIM_Base_MspInit+0x74>)
 8008d2c:	f043 0320 	orr.w	r3, r3, #32
 8008d30:	6413      	str	r3, [r2, #64]	; 0x40
 8008d32:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <HAL_TIM_Base_MspInit+0x74>)
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	60bb      	str	r3, [r7, #8]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	2037      	movs	r0, #55	; 0x37
 8008d44:	f001 f93b 	bl	8009fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008d48:	2037      	movs	r0, #55	; 0x37
 8008d4a:	f001 f954 	bl	8009ff6 <HAL_NVIC_EnableIRQ>
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	40001400 	.word	0x40001400

08008d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d6c:	f107 030c 	add.w	r3, r7, #12
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	605a      	str	r2, [r3, #4]
 8008d76:	609a      	str	r2, [r3, #8]
 8008d78:	60da      	str	r2, [r3, #12]
 8008d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a12      	ldr	r2, [pc, #72]	; (8008dcc <HAL_TIM_MspPostInit+0x68>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d11d      	bne.n	8008dc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	4b11      	ldr	r3, [pc, #68]	; (8008dd0 <HAL_TIM_MspPostInit+0x6c>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8e:	4a10      	ldr	r2, [pc, #64]	; (8008dd0 <HAL_TIM_MspPostInit+0x6c>)
 8008d90:	f043 0301 	orr.w	r3, r3, #1
 8008d94:	6313      	str	r3, [r2, #48]	; 0x30
 8008d96:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <HAL_TIM_MspPostInit+0x6c>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	60bb      	str	r3, [r7, #8]
 8008da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008da2:	23c0      	movs	r3, #192	; 0xc0
 8008da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008da6:	2302      	movs	r3, #2
 8008da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008db2:	2302      	movs	r3, #2
 8008db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008db6:	f107 030c 	add.w	r3, r7, #12
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <HAL_TIM_MspPostInit+0x70>)
 8008dbe:	f001 fcc5 	bl	800a74c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008dc2:	bf00      	nop
 8008dc4:	3720      	adds	r7, #32
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40023800 	.word	0x40023800
 8008dd4:	40020000 	.word	0x40020000

08008dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	; 0x28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de0:	f107 0314 	add.w	r3, r7, #20
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	609a      	str	r2, [r3, #8]
 8008dec:	60da      	str	r2, [r3, #12]
 8008dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a4c      	ldr	r2, [pc, #304]	; (8008f28 <HAL_UART_MspInit+0x150>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	f040 8091 	bne.w	8008f1e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	4b4a      	ldr	r3, [pc, #296]	; (8008f2c <HAL_UART_MspInit+0x154>)
 8008e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e04:	4a49      	ldr	r2, [pc, #292]	; (8008f2c <HAL_UART_MspInit+0x154>)
 8008e06:	f043 0310 	orr.w	r3, r3, #16
 8008e0a:	6453      	str	r3, [r2, #68]	; 0x44
 8008e0c:	4b47      	ldr	r3, [pc, #284]	; (8008f2c <HAL_UART_MspInit+0x154>)
 8008e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	4b43      	ldr	r3, [pc, #268]	; (8008f2c <HAL_UART_MspInit+0x154>)
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e20:	4a42      	ldr	r2, [pc, #264]	; (8008f2c <HAL_UART_MspInit+0x154>)
 8008e22:	f043 0301 	orr.w	r3, r3, #1
 8008e26:	6313      	str	r3, [r2, #48]	; 0x30
 8008e28:	4b40      	ldr	r3, [pc, #256]	; (8008f2c <HAL_UART_MspInit+0x154>)
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008e34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e42:	2303      	movs	r3, #3
 8008e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e46:	2307      	movs	r3, #7
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e4a:	f107 0314 	add.w	r3, r7, #20
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4837      	ldr	r0, [pc, #220]	; (8008f30 <HAL_UART_MspInit+0x158>)
 8008e52:	f001 fc7b 	bl	800a74c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008e56:	4b37      	ldr	r3, [pc, #220]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e58:	4a37      	ldr	r2, [pc, #220]	; (8008f38 <HAL_UART_MspInit+0x160>)
 8008e5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008e5c:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e64:	4b33      	ldr	r3, [pc, #204]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e6a:	4b32      	ldr	r3, [pc, #200]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e70:	4b30      	ldr	r3, [pc, #192]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e76:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e78:	4b2e      	ldr	r3, [pc, #184]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e7e:	4b2d      	ldr	r3, [pc, #180]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008e84:	4b2b      	ldr	r3, [pc, #172]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008e8a:	4b2a      	ldr	r3, [pc, #168]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e90:	4b28      	ldr	r3, [pc, #160]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008e96:	4827      	ldr	r0, [pc, #156]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008e98:	f001 f8c8 	bl	800a02c <HAL_DMA_Init>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8008ea2:	f7fb f90f 	bl	80040c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a22      	ldr	r2, [pc, #136]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008eaa:	635a      	str	r2, [r3, #52]	; 0x34
 8008eac:	4a21      	ldr	r2, [pc, #132]	; (8008f34 <HAL_UART_MspInit+0x15c>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008eb2:	4b22      	ldr	r3, [pc, #136]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008eb4:	4a22      	ldr	r2, [pc, #136]	; (8008f40 <HAL_UART_MspInit+0x168>)
 8008eb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8008eb8:	4b20      	ldr	r3, [pc, #128]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008ebe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008ec0:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008ec2:	2240      	movs	r2, #64	; 0x40
 8008ec4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ec6:	4b1d      	ldr	r3, [pc, #116]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ed2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ed4:	4b19      	ldr	r3, [pc, #100]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008ee0:	4b16      	ldr	r3, [pc, #88]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008eec:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008ef2:	4812      	ldr	r0, [pc, #72]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008ef4:	f001 f89a 	bl	800a02c <HAL_DMA_Init>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8008efe:	f7fb f8e1 	bl	80040c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a0d      	ldr	r2, [pc, #52]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
 8008f08:	4a0c      	ldr	r2, [pc, #48]	; (8008f3c <HAL_UART_MspInit+0x164>)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2100      	movs	r1, #0
 8008f12:	2025      	movs	r0, #37	; 0x25
 8008f14:	f001 f853 	bl	8009fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f18:	2025      	movs	r0, #37	; 0x25
 8008f1a:	f001 f86c 	bl	8009ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008f1e:	bf00      	nop
 8008f20:	3728      	adds	r7, #40	; 0x28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	40011000 	.word	0x40011000
 8008f2c:	40023800 	.word	0x40023800
 8008f30:	40020000 	.word	0x40020000
 8008f34:	200004ec 	.word	0x200004ec
 8008f38:	40026440 	.word	0x40026440
 8008f3c:	2000054c 	.word	0x2000054c
 8008f40:	400264b8 	.word	0x400264b8

08008f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008f48:	bf00      	nop
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f52:	b480      	push	{r7}
 8008f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f56:	e7fe      	b.n	8008f56 <HardFault_Handler+0x4>

08008f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f5c:	e7fe      	b.n	8008f5c <MemManage_Handler+0x4>

08008f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f62:	e7fe      	b.n	8008f62 <BusFault_Handler+0x4>

08008f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f68:	e7fe      	b.n	8008f68 <UsageFault_Handler+0x4>

08008f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f6e:	bf00      	nop
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f7c:	bf00      	nop
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f86:	b480      	push	{r7}
 8008f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f8a:	bf00      	nop
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f98:	f000 ff16 	bl	8009dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f9c:	bf00      	nop
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	f001 fd85 	bl	800aab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008faa:	bf00      	nop
 8008fac:	bd80      	pop	{r7, pc}

08008fae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008fb2:	2002      	movs	r0, #2
 8008fb4:	f001 fd7e 	bl	800aab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008fb8:	bf00      	nop
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008fc0:	4802      	ldr	r0, [pc, #8]	; (8008fcc <USART1_IRQHandler+0x10>)
 8008fc2:	f003 fc49 	bl	800c858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	200004ac 	.word	0x200004ac

08008fd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008fd4:	4802      	ldr	r0, [pc, #8]	; (8008fe0 <TIM7_IRQHandler+0x10>)
 8008fd6:	f002 fcb6 	bl	800b946 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008fda:	bf00      	nop
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20001c4c 	.word	0x20001c4c

08008fe4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008fe8:	4802      	ldr	r0, [pc, #8]	; (8008ff4 <DMA2_Stream2_IRQHandler+0x10>)
 8008fea:	f001 f947 	bl	800a27c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008fee:	bf00      	nop
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	200004ec 	.word	0x200004ec

08008ff8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008ffc:	4802      	ldr	r0, [pc, #8]	; (8009008 <DMA2_Stream7_IRQHandler+0x10>)
 8008ffe:	f001 f93d 	bl	800a27c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009002:	bf00      	nop
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	2000054c 	.word	0x2000054c

0800900c <_Z41__static_initialization_and_destruction_0ii>:
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d140      	bne.n	800909e <_Z41__static_initialization_and_destruction_0ii+0x92>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009022:	4293      	cmp	r3, r2
 8009024:	d13b      	bne.n	800909e <_Z41__static_initialization_and_destruction_0ii+0x92>
static std_msgs::String debug_msg;
 8009026:	4820      	ldr	r0, [pc, #128]	; (80090a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009028:	f7f7 feb8 	bl	8000d9c <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 800902c:	481f      	ldr	r0, [pc, #124]	; (80090ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800902e:	f7f7 ff51 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8009032:	481f      	ldr	r0, [pc, #124]	; (80090b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009034:	f7f7 ff4e 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 tick_msg;
 8009038:	481e      	ldr	r0, [pc, #120]	; (80090b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800903a:	f7f7 ff4b 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test1_msg;
 800903e:	481e      	ldr	r0, [pc, #120]	; (80090b8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009040:	f7f7 ff48 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test2_msg;
 8009044:	481d      	ldr	r0, [pc, #116]	; (80090bc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009046:	f7f7 ff45 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Float32 lwheel_vel_msg;
 800904a:	481d      	ldr	r0, [pc, #116]	; (80090c0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800904c:	f7f8 f8ce 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static std_msgs::Float32 rwheel_vel_msg;
 8009050:	481c      	ldr	r0, [pc, #112]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009052:	f7f8 f8cb 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 8009056:	2300      	movs	r3, #0
 8009058:	4a13      	ldr	r2, [pc, #76]	; (80090a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800905a:	491b      	ldr	r1, [pc, #108]	; (80090c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800905c:	481b      	ldr	r0, [pc, #108]	; (80090cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800905e:	f7f7 fe7b 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8009062:	2300      	movs	r3, #0
 8009064:	4a11      	ldr	r2, [pc, #68]	; (80090ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009066:	491a      	ldr	r1, [pc, #104]	; (80090d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009068:	481a      	ldr	r0, [pc, #104]	; (80090d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800906a:	f7f7 fe75 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 800906e:	2300      	movs	r3, #0
 8009070:	4a0f      	ldr	r2, [pc, #60]	; (80090b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009072:	4919      	ldr	r1, [pc, #100]	; (80090d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009074:	4819      	ldr	r0, [pc, #100]	; (80090dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009076:	f7f7 fe6f 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher tick_pub("tick", &tick_msg);
 800907a:	2300      	movs	r3, #0
 800907c:	4a0d      	ldr	r2, [pc, #52]	; (80090b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800907e:	4918      	ldr	r1, [pc, #96]	; (80090e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8009080:	4818      	ldr	r0, [pc, #96]	; (80090e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8009082:	f7f7 fe69 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher lwheel_vel_pub("lwheel_vel", &lwheel_vel_msg);
 8009086:	2300      	movs	r3, #0
 8009088:	4a0d      	ldr	r2, [pc, #52]	; (80090c0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800908a:	4917      	ldr	r1, [pc, #92]	; (80090e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800908c:	4817      	ldr	r0, [pc, #92]	; (80090ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800908e:	f7f7 fe63 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher rwheel_vel_pub("rwheel_vel", &rwheel_vel_msg);
 8009092:	2300      	movs	r3, #0
 8009094:	4a0b      	ldr	r2, [pc, #44]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009096:	4916      	ldr	r1, [pc, #88]	; (80090f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8009098:	4816      	ldr	r0, [pc, #88]	; (80090f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800909a:	f7f7 fe5d 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20002280 	.word	0x20002280
 80090ac:	20002288 	.word	0x20002288
 80090b0:	20002298 	.word	0x20002298
 80090b4:	200022a8 	.word	0x200022a8
 80090b8:	200022b8 	.word	0x200022b8
 80090bc:	200022c8 	.word	0x200022c8
 80090c0:	200022d8 	.word	0x200022d8
 80090c4:	200022e0 	.word	0x200022e0
 80090c8:	0800e39c 	.word	0x0800e39c
 80090cc:	200022e8 	.word	0x200022e8
 80090d0:	0800e3a4 	.word	0x0800e3a4
 80090d4:	200022fc 	.word	0x200022fc
 80090d8:	0800e3b4 	.word	0x0800e3b4
 80090dc:	20002310 	.word	0x20002310
 80090e0:	0800e3c4 	.word	0x0800e3c4
 80090e4:	20002324 	.word	0x20002324
 80090e8:	0800e3cc 	.word	0x0800e3cc
 80090ec:	20002338 	.word	0x20002338
 80090f0:	0800e3d8 	.word	0x0800e3d8
 80090f4:	2000234c 	.word	0x2000234c

080090f8 <_GLOBAL__sub_I_NMI_Handler>:
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009100:	2001      	movs	r0, #1
 8009102:	f7ff ff83 	bl	800900c <_Z41__static_initialization_and_destruction_0ii>
 8009106:	bd80      	pop	{r7, pc}

08009108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
	return 1;
 800910c:	2301      	movs	r3, #1
}
 800910e:	4618      	mov	r0, r3
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <_kill>:

int _kill(int pid, int sig)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009122:	f004 fa75 	bl	800d610 <__errno>
 8009126:	4602      	mov	r2, r0
 8009128:	2316      	movs	r3, #22
 800912a:	6013      	str	r3, [r2, #0]
	return -1;
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <_exit>:

void _exit (int status)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009140:	f04f 31ff 	mov.w	r1, #4294967295
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ffe7 	bl	8009118 <_kill>
	while (1) {}		/* Make sure we hang here */
 800914a:	e7fe      	b.n	800914a <_exit+0x12>

0800914c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009154:	4b11      	ldr	r3, [pc, #68]	; (800919c <_sbrk+0x50>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <_sbrk+0x16>
		heap_end = &end;
 800915c:	4b0f      	ldr	r3, [pc, #60]	; (800919c <_sbrk+0x50>)
 800915e:	4a10      	ldr	r2, [pc, #64]	; (80091a0 <_sbrk+0x54>)
 8009160:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009162:	4b0e      	ldr	r3, [pc, #56]	; (800919c <_sbrk+0x50>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <_sbrk+0x50>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4413      	add	r3, r2
 8009170:	466a      	mov	r2, sp
 8009172:	4293      	cmp	r3, r2
 8009174:	d907      	bls.n	8009186 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009176:	f004 fa4b 	bl	800d610 <__errno>
 800917a:	4602      	mov	r2, r0
 800917c:	230c      	movs	r3, #12
 800917e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009180:	f04f 33ff 	mov.w	r3, #4294967295
 8009184:	e006      	b.n	8009194 <_sbrk+0x48>
	}

	heap_end += incr;
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <_sbrk+0x50>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4413      	add	r3, r2
 800918e:	4a03      	ldr	r2, [pc, #12]	; (800919c <_sbrk+0x50>)
 8009190:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009192:	68fb      	ldr	r3, [r7, #12]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20002360 	.word	0x20002360
 80091a0:	200025e0 	.word	0x200025e0

080091a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80091a8:	4b08      	ldr	r3, [pc, #32]	; (80091cc <SystemInit+0x28>)
 80091aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ae:	4a07      	ldr	r2, [pc, #28]	; (80091cc <SystemInit+0x28>)
 80091b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <SystemInit+0x28>)
 80091ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80091be:	609a      	str	r2, [r3, #8]
#endif
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	e000ed00 	.word	0xe000ed00

080091d0 <_Z11encoderInitv>:
//void rwheel_vtargetCB(const std_msgs::Float32& msg) {
//	vel_target[RIGHT] = msg.data;
//}


void encoderInit() {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08e      	sub	sp, #56	; 0x38
 80091d4:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80091d6:	2300      	movs	r3, #0
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	4b73      	ldr	r3, [pc, #460]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 80091dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091de:	4a72      	ldr	r2, [pc, #456]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 80091e0:	f043 0308 	orr.w	r3, r3, #8
 80091e4:	6313      	str	r3, [r2, #48]	; 0x30
 80091e6:	4b70      	ldr	r3, [pc, #448]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	f003 0308 	and.w	r3, r3, #8
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80091f2:	2300      	movs	r3, #0
 80091f4:	607b      	str	r3, [r7, #4]
 80091f6:	4b6c      	ldr	r3, [pc, #432]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fa:	4a6b      	ldr	r2, [pc, #428]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 80091fc:	f043 0301 	orr.w	r3, r3, #1
 8009200:	6313      	str	r3, [r2, #48]	; 0x30
 8009202:	4b69      	ldr	r3, [pc, #420]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	607b      	str	r3, [r7, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800920e:	2300      	movs	r3, #0
 8009210:	603b      	str	r3, [r7, #0]
 8009212:	4b65      	ldr	r3, [pc, #404]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 8009214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009216:	4a64      	ldr	r2, [pc, #400]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 8009218:	f043 0310 	orr.w	r3, r3, #16
 800921c:	6313      	str	r3, [r2, #48]	; 0x30
 800921e:	4b62      	ldr	r3, [pc, #392]	; (80093a8 <_Z11encoderInitv+0x1d8>)
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	683b      	ldr	r3, [r7, #0]

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800922a:	f107 0314 	add.w	r3, r7, #20
 800922e:	2224      	movs	r2, #36	; 0x24
 8009230:	2100      	movs	r1, #0
 8009232:	4618      	mov	r0, r3
 8009234:	f004 fa21 	bl	800d67a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8009238:	f107 030c 	add.w	r3, r7, #12
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8009242:	4b5a      	ldr	r3, [pc, #360]	; (80093ac <_Z11encoderInitv+0x1dc>)
 8009244:	4a5a      	ldr	r2, [pc, #360]	; (80093b0 <_Z11encoderInitv+0x1e0>)
 8009246:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8009248:	4b58      	ldr	r3, [pc, #352]	; (80093ac <_Z11encoderInitv+0x1dc>)
 800924a:	2200      	movs	r2, #0
 800924c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800924e:	4b57      	ldr	r3, [pc, #348]	; (80093ac <_Z11encoderInitv+0x1dc>)
 8009250:	2200      	movs	r2, #0
 8009252:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8009254:	4b55      	ldr	r3, [pc, #340]	; (80093ac <_Z11encoderInitv+0x1dc>)
 8009256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800925a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800925c:	4b53      	ldr	r3, [pc, #332]	; (80093ac <_Z11encoderInitv+0x1dc>)
 800925e:	2200      	movs	r2, #0
 8009260:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009262:	4b52      	ldr	r3, [pc, #328]	; (80093ac <_Z11encoderInitv+0x1dc>)
 8009264:	2200      	movs	r2, #0
 8009266:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009268:	2303      	movs	r3, #3
 800926a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009270:	2301      	movs	r3, #1
 8009272:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009274:	2300      	movs	r3, #0
 8009276:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800927c:	2300      	movs	r3, #0
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009280:	2301      	movs	r3, #1
 8009282:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009284:	2300      	movs	r3, #0
 8009286:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 800928c:	f107 0314 	add.w	r3, r7, #20
 8009290:	4619      	mov	r1, r3
 8009292:	4846      	ldr	r0, [pc, #280]	; (80093ac <_Z11encoderInitv+0x1dc>)
 8009294:	f002 fa8e 	bl	800b7b4 <HAL_TIM_Encoder_Init>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	bf14      	ite	ne
 800929e:	2301      	movne	r3, #1
 80092a0:	2300      	moveq	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <_Z11encoderInitv+0xdc>
		Error_Handler();
 80092a8:	f7fa ff0c 	bl	80040c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80092b4:	f107 030c 	add.w	r3, r7, #12
 80092b8:	4619      	mov	r1, r3
 80092ba:	483c      	ldr	r0, [pc, #240]	; (80093ac <_Z11encoderInitv+0x1dc>)
 80092bc:	f003 f902 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80092c0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bf14      	ite	ne
 80092c6:	2301      	movne	r3, #1
 80092c8:	2300      	moveq	r3, #0
 80092ca:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <_Z11encoderInitv+0x104>
		Error_Handler();
 80092d0:	f7fa fef8 	bl	80040c4 <Error_Handler>
	}


	sConfig = { 0 };
 80092d4:	f107 0314 	add.w	r3, r7, #20
 80092d8:	2224      	movs	r2, #36	; 0x24
 80092da:	2100      	movs	r1, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f004 f9cc 	bl	800d67a <memset>
	sMasterConfig = { 0 };
 80092e2:	f107 030c 	add.w	r3, r7, #12
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	605a      	str	r2, [r3, #4]

	htim5.Instance = TIM5;
 80092ec:	4b31      	ldr	r3, [pc, #196]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 80092ee:	4a32      	ldr	r2, [pc, #200]	; (80093b8 <_Z11encoderInitv+0x1e8>)
 80092f0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80092f2:	4b30      	ldr	r3, [pc, #192]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092f8:	4b2e      	ldr	r3, [pc, #184]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 80092fe:	4b2d      	ldr	r3, [pc, #180]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 8009300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009304:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009306:	4b2b      	ldr	r3, [pc, #172]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 8009308:	2200      	movs	r2, #0
 800930a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800930c:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 800930e:	2200      	movs	r2, #0
 8009310:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009312:	2301      	movs	r3, #1
 8009314:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009316:	2300      	movs	r3, #0
 8009318:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800931a:	2301      	movs	r3, #1
 800931c:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800931e:	2300      	movs	r3, #0
 8009320:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009326:	2300      	movs	r3, #0
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800932a:	2301      	movs	r3, #1
 800932c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800932e:	2300      	movs	r3, #0
 8009330:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8009336:	f107 0314 	add.w	r3, r7, #20
 800933a:	4619      	mov	r1, r3
 800933c:	481d      	ldr	r0, [pc, #116]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 800933e:	f002 fa39 	bl	800b7b4 <HAL_TIM_Encoder_Init>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	bf14      	ite	ne
 8009348:	2301      	movne	r3, #1
 800934a:	2300      	moveq	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <_Z11encoderInitv+0x186>
		Error_Handler();
 8009352:	f7fa feb7 	bl	80040c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009356:	2300      	movs	r3, #0
 8009358:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800935a:	2300      	movs	r3, #0
 800935c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800935e:	f107 030c 	add.w	r3, r7, #12
 8009362:	4619      	mov	r1, r3
 8009364:	4813      	ldr	r0, [pc, #76]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 8009366:	f003 f8ad 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 800936a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800936c:	2b00      	cmp	r3, #0
 800936e:	bf14      	ite	ne
 8009370:	2301      	movne	r3, #1
 8009372:	2300      	moveq	r3, #0
 8009374:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <_Z11encoderInitv+0x1ae>
		Error_Handler();
 800937a:	f7fa fea3 	bl	80040c4 <Error_Handler>
	}


	// Encoder start
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800937e:	213c      	movs	r1, #60	; 0x3c
 8009380:	480a      	ldr	r0, [pc, #40]	; (80093ac <_Z11encoderInitv+0x1dc>)
 8009382:	f002 faa9 	bl	800b8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8009386:	213c      	movs	r1, #60	; 0x3c
 8009388:	480a      	ldr	r0, [pc, #40]	; (80093b4 <_Z11encoderInitv+0x1e4>)
 800938a:	f002 faa5 	bl	800b8d8 <HAL_TIM_Encoder_Start>

	// parameter initialize
	low_encoder_wrap = UNSIGNED16_MAX * 0.2f;
 800938e:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <_Z11encoderInitv+0x1ec>)
 8009390:	4a0b      	ldr	r2, [pc, #44]	; (80093c0 <_Z11encoderInitv+0x1f0>)
 8009392:	601a      	str	r2, [r3, #0]
	high_encoder_wrap = UNSIGNED16_MAX * 0.8f;
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <_Z11encoderInitv+0x1f4>)
 8009396:	4a0c      	ldr	r2, [pc, #48]	; (80093c8 <_Z11encoderInitv+0x1f8>)
 8009398:	601a      	str	r2, [r3, #0]
	init_encoder = true;
 800939a:	4b0c      	ldr	r3, [pc, #48]	; (80093cc <_Z11encoderInitv+0x1fc>)
 800939c:	2201      	movs	r2, #1
 800939e:	701a      	strb	r2, [r3, #0]
}
 80093a0:	bf00      	nop
 80093a2:	3738      	adds	r7, #56	; 0x38
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	40023800 	.word	0x40023800
 80093ac:	20001bcc 	.word	0x20001bcc
 80093b0:	40000800 	.word	0x40000800
 80093b4:	20001c0c 	.word	0x20001c0c
 80093b8:	40000c00 	.word	0x40000c00
 80093bc:	20002448 	.word	0x20002448
 80093c0:	464ccc00 	.word	0x464ccc00
 80093c4:	2000244c 	.word	0x2000244c
 80093c8:	474ccc00 	.word	0x474ccc00
 80093cc:	20002450 	.word	0x20002450

080093d0 <_Z17updateEncoderInfott>:

// 모터가 바라보는 방향을 구함
void updateEncoderInfo(uint16_t left_tick, uint16_t right_tick) {
 80093d0:	b5b0      	push	{r4, r5, r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	460a      	mov	r2, r1
 80093da:	80fb      	strh	r3, [r7, #6]
 80093dc:	4613      	mov	r3, r2
 80093de:	80bb      	strh	r3, [r7, #4]
	uint16_t cur_tick[WHEEL_NUM] = {left_tick, right_tick };
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	81bb      	strh	r3, [r7, #12]
 80093e4:	88bb      	ldrh	r3, [r7, #4]
 80093e6:	81fb      	strh	r3, [r7, #14]

	if (init_encoder) {
 80093e8:	4b6d      	ldr	r3, [pc, #436]	; (80095a0 <_Z17updateEncoderInfott+0x1d0>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d021      	beq.n	8009434 <_Z17updateEncoderInfott+0x64>
		for (int i = 0; i < WHEEL_NUM; i++) {
 80093f0:	2300      	movs	r3, #0
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	dc12      	bgt.n	8009420 <_Z17updateEncoderInfott+0x50>
			last_diff_tick[i] = 0;
 80093fa:	4a6a      	ldr	r2, [pc, #424]	; (80095a4 <_Z17updateEncoderInfott+0x1d4>)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2100      	movs	r1, #0
 8009400:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			last_rad[i] = 0.f;
 8009404:	4a68      	ldr	r2, [pc, #416]	; (80095a8 <_Z17updateEncoderInfott+0x1d8>)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	00db      	lsls	r3, r3, #3
 800940a:	441a      	add	r2, r3
 800940c:	f04f 0300 	mov.w	r3, #0
 8009410:	f04f 0400 	mov.w	r4, #0
 8009414:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < WHEEL_NUM; i++) {
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	3301      	adds	r3, #1
 800941c:	617b      	str	r3, [r7, #20]
 800941e:	e7e9      	b.n	80093f4 <_Z17updateEncoderInfott+0x24>
		}

		last_tick[LEFT] = left_tick;
 8009420:	4a62      	ldr	r2, [pc, #392]	; (80095ac <_Z17updateEncoderInfott+0x1dc>)
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	8013      	strh	r3, [r2, #0]
		last_tick[RIGHT] = right_tick;
 8009426:	4a61      	ldr	r2, [pc, #388]	; (80095ac <_Z17updateEncoderInfott+0x1dc>)
 8009428:	88bb      	ldrh	r3, [r7, #4]
 800942a:	8053      	strh	r3, [r2, #2]

		init_encoder = false;
 800942c:	4b5c      	ldr	r3, [pc, #368]	; (80095a0 <_Z17updateEncoderInfott+0x1d0>)
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
		return;
 8009432:	e0ad      	b.n	8009590 <_Z17updateEncoderInfott+0x1c0>
	}

	cur_tick[LEFT] = left_tick;
 8009434:	88fb      	ldrh	r3, [r7, #6]
 8009436:	81bb      	strh	r3, [r7, #12]
	cur_tick[RIGHT] = right_tick;
 8009438:	88bb      	ldrh	r3, [r7, #4]
 800943a:	81fb      	strh	r3, [r7, #14]
	for (int idx = 0; idx < WHEEL_NUM; idx++) {
 800943c:	2300      	movs	r3, #0
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2b01      	cmp	r3, #1
 8009444:	f300 80a4 	bgt.w	8009590 <_Z17updateEncoderInfott+0x1c0>
		if (cur_tick[idx] < low_encoder_wrap
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	f107 0218 	add.w	r2, r7, #24
 8009450:	4413      	add	r3, r2
 8009452:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800945e:	4b54      	ldr	r3, [pc, #336]	; (80095b0 <_Z17updateEncoderInfott+0x1e0>)
 8009460:	edd3 7a00 	vldr	s15, [r3]
 8009464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946c:	d524      	bpl.n	80094b8 <_Z17updateEncoderInfott+0xe8>
				&& last_tick[idx] > high_encoder_wrap) {
 800946e:	4a4f      	ldr	r2, [pc, #316]	; (80095ac <_Z17updateEncoderInfott+0x1dc>)
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800947e:	4b4d      	ldr	r3, [pc, #308]	; (80095b4 <_Z17updateEncoderInfott+0x1e4>)
 8009480:	edd3 7a00 	vldr	s15, [r3]
 8009484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948c:	dd14      	ble.n	80094b8 <_Z17updateEncoderInfott+0xe8>
			last_diff_tick[idx] = cur_tick[idx] + (UNSIGNED16_MAX - last_tick[idx]);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	f107 0218 	add.w	r2, r7, #24
 8009496:	4413      	add	r3, r2
 8009498:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800949c:	4619      	mov	r1, r3
 800949e:	4a43      	ldr	r2, [pc, #268]	; (80095ac <_Z17updateEncoderInfott+0x1dc>)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80094aa:	33ff      	adds	r3, #255	; 0xff
 80094ac:	18ca      	adds	r2, r1, r3
 80094ae:	493d      	ldr	r1, [pc, #244]	; (80095a4 <_Z17updateEncoderInfott+0x1d4>)
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80094b6:	e047      	b.n	8009548 <_Z17updateEncoderInfott+0x178>
		} else if (cur_tick[idx] > high_encoder_wrap
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	f107 0218 	add.w	r2, r7, #24
 80094c0:	4413      	add	r3, r2
 80094c2:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094ce:	4b39      	ldr	r3, [pc, #228]	; (80095b4 <_Z17updateEncoderInfott+0x1e4>)
 80094d0:	edd3 7a00 	vldr	s15, [r3]
 80094d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094dc:	dd23      	ble.n	8009526 <_Z17updateEncoderInfott+0x156>
				&& last_tick[idx] < low_encoder_wrap) {
 80094de:	4a33      	ldr	r2, [pc, #204]	; (80095ac <_Z17updateEncoderInfott+0x1dc>)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094ee:	4b30      	ldr	r3, [pc, #192]	; (80095b0 <_Z17updateEncoderInfott+0x1e0>)
 80094f0:	edd3 7a00 	vldr	s15, [r3]
 80094f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fc:	d513      	bpl.n	8009526 <_Z17updateEncoderInfott+0x156>
			last_diff_tick[idx] = cur_tick[idx] - UNSIGNED16_MAX - last_tick[idx];
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	f107 0218 	add.w	r2, r7, #24
 8009506:	4413      	add	r3, r2
 8009508:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800950c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8009510:	3bff      	subs	r3, #255	; 0xff
 8009512:	4926      	ldr	r1, [pc, #152]	; (80095ac <_Z17updateEncoderInfott+0x1dc>)
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800951a:	1a9a      	subs	r2, r3, r2
 800951c:	4921      	ldr	r1, [pc, #132]	; (80095a4 <_Z17updateEncoderInfott+0x1d4>)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009524:	e010      	b.n	8009548 <_Z17updateEncoderInfott+0x178>
		} else {
			last_diff_tick[idx] = cur_tick[idx] - last_tick[idx];
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	f107 0218 	add.w	r2, r7, #24
 800952e:	4413      	add	r3, r2
 8009530:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8009534:	4619      	mov	r1, r3
 8009536:	4a1d      	ldr	r2, [pc, #116]	; (80095ac <_Z17updateEncoderInfott+0x1dc>)
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800953e:	1aca      	subs	r2, r1, r3
 8009540:	4918      	ldr	r1, [pc, #96]	; (80095a4 <_Z17updateEncoderInfott+0x1d4>)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		last_rad[idx] += TICK2RAD * (double) last_diff_tick[idx];
 8009548:	4a17      	ldr	r2, [pc, #92]	; (80095a8 <_Z17updateEncoderInfott+0x1d8>)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4413      	add	r3, r2
 8009550:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009554:	4a13      	ldr	r2, [pc, #76]	; (80095a4 <_Z17updateEncoderInfott+0x1d4>)
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800955c:	4618      	mov	r0, r3
 800955e:	f7f6 ff8d 	bl	800047c <__aeabi_i2d>
 8009562:	a30d      	add	r3, pc, #52	; (adr r3, 8009598 <_Z17updateEncoderInfott+0x1c8>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f6 fff2 	bl	8000550 <__aeabi_dmul>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4620      	mov	r0, r4
 8009572:	4629      	mov	r1, r5
 8009574:	f7f6 fe36 	bl	80001e4 <__adddf3>
 8009578:	4603      	mov	r3, r0
 800957a:	460c      	mov	r4, r1
 800957c:	490a      	ldr	r1, [pc, #40]	; (80095a8 <_Z17updateEncoderInfott+0x1d8>)
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	00d2      	lsls	r2, r2, #3
 8009582:	440a      	add	r2, r1
 8009584:	e9c2 3400 	strd	r3, r4, [r2]
	for (int idx = 0; idx < WHEEL_NUM; idx++) {
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	3301      	adds	r3, #1
 800958c:	613b      	str	r3, [r7, #16]
 800958e:	e757      	b.n	8009440 <_Z17updateEncoderInfott+0x70>
	}


}
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bdb0      	pop	{r4, r5, r7, pc}
 8009596:	bf00      	nop
 8009598:	fc84628a 	.word	0xfc84628a
 800959c:	3fc1a124 	.word	0x3fc1a124
 80095a0:	20002450 	.word	0x20002450
 80095a4:	20002454 	.word	0x20002454
 80095a8:	20002460 	.word	0x20002460
 80095ac:	2000245c 	.word	0x2000245c
 80095b0:	20002448 	.word	0x20002448
 80095b4:	2000244c 	.word	0x2000244c

080095b8 <_Z41__static_initialization_and_destruction_0ii>:
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d140      	bne.n	800964a <_Z41__static_initialization_and_destruction_0ii+0x92>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d13b      	bne.n	800964a <_Z41__static_initialization_and_destruction_0ii+0x92>
static std_msgs::String debug_msg;
 80095d2:	4820      	ldr	r0, [pc, #128]	; (8009654 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80095d4:	f7f7 fbe2 	bl	8000d9c <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 80095d8:	481f      	ldr	r0, [pc, #124]	; (8009658 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80095da:	f7f7 fc7b 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 80095de:	481f      	ldr	r0, [pc, #124]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80095e0:	f7f7 fc78 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 tick_msg;
 80095e4:	481e      	ldr	r0, [pc, #120]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80095e6:	f7f7 fc75 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test1_msg;
 80095ea:	481e      	ldr	r0, [pc, #120]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80095ec:	f7f7 fc72 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test2_msg;
 80095f0:	481d      	ldr	r0, [pc, #116]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80095f2:	f7f7 fc6f 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Float32 lwheel_vel_msg;
 80095f6:	481d      	ldr	r0, [pc, #116]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80095f8:	f7f7 fdf8 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static std_msgs::Float32 rwheel_vel_msg;
 80095fc:	481c      	ldr	r0, [pc, #112]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80095fe:	f7f7 fdf5 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 8009602:	2300      	movs	r3, #0
 8009604:	4a13      	ldr	r2, [pc, #76]	; (8009654 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009606:	491b      	ldr	r1, [pc, #108]	; (8009674 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009608:	481b      	ldr	r0, [pc, #108]	; (8009678 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800960a:	f7f7 fba5 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 800960e:	2300      	movs	r3, #0
 8009610:	4a11      	ldr	r2, [pc, #68]	; (8009658 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009612:	491a      	ldr	r1, [pc, #104]	; (800967c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009614:	481a      	ldr	r0, [pc, #104]	; (8009680 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009616:	f7f7 fb9f 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 800961a:	2300      	movs	r3, #0
 800961c:	4a0f      	ldr	r2, [pc, #60]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800961e:	4919      	ldr	r1, [pc, #100]	; (8009684 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009620:	4819      	ldr	r0, [pc, #100]	; (8009688 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009622:	f7f7 fb99 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher tick_pub("tick", &tick_msg);
 8009626:	2300      	movs	r3, #0
 8009628:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800962a:	4918      	ldr	r1, [pc, #96]	; (800968c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800962c:	4818      	ldr	r0, [pc, #96]	; (8009690 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800962e:	f7f7 fb93 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher lwheel_vel_pub("lwheel_vel", &lwheel_vel_msg);
 8009632:	2300      	movs	r3, #0
 8009634:	4a0d      	ldr	r2, [pc, #52]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009636:	4917      	ldr	r1, [pc, #92]	; (8009694 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8009638:	4817      	ldr	r0, [pc, #92]	; (8009698 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800963a:	f7f7 fb8d 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher rwheel_vel_pub("rwheel_vel", &rwheel_vel_msg);
 800963e:	2300      	movs	r3, #0
 8009640:	4a0b      	ldr	r2, [pc, #44]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009642:	4916      	ldr	r1, [pc, #88]	; (800969c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8009644:	4816      	ldr	r0, [pc, #88]	; (80096a0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8009646:	f7f7 fb87 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20002364 	.word	0x20002364
 8009658:	20002370 	.word	0x20002370
 800965c:	20002380 	.word	0x20002380
 8009660:	20002390 	.word	0x20002390
 8009664:	200023a0 	.word	0x200023a0
 8009668:	200023b0 	.word	0x200023b0
 800966c:	200023c0 	.word	0x200023c0
 8009670:	200023c8 	.word	0x200023c8
 8009674:	0800e488 	.word	0x0800e488
 8009678:	200023d0 	.word	0x200023d0
 800967c:	0800e490 	.word	0x0800e490
 8009680:	200023e4 	.word	0x200023e4
 8009684:	0800e4a0 	.word	0x0800e4a0
 8009688:	200023f8 	.word	0x200023f8
 800968c:	0800e4b0 	.word	0x0800e4b0
 8009690:	2000240c 	.word	0x2000240c
 8009694:	0800e4b8 	.word	0x0800e4b8
 8009698:	20002420 	.word	0x20002420
 800969c:	0800e4c4 	.word	0x0800e4c4
 80096a0:	20002434 	.word	0x20002434

080096a4 <_GLOBAL__sub_I_left_encoder_count>:
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096ac:	2001      	movs	r0, #1
 80096ae:	f7ff ff83 	bl	80095b8 <_Z41__static_initialization_and_destruction_0ii>
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <_Z12wheelDirInitv>:

float vel_Kp[WHEEL_NUM];
float vel_Ki[WHEEL_NUM];
float vel_Kd[WHEEL_NUM];

void wheelDirInit() {
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80096ba:	1d3b      	adds	r3, r7, #4
 80096bc:	2200      	movs	r2, #0
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	605a      	str	r2, [r3, #4]
 80096c2:	609a      	str	r2, [r3, #8]
 80096c4:	60da      	str	r2, [r3, #12]
 80096c6:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80096c8:	2300      	movs	r3, #0
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	4b10      	ldr	r3, [pc, #64]	; (8009710 <_Z12wheelDirInitv+0x5c>)
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	4a0f      	ldr	r2, [pc, #60]	; (8009710 <_Z12wheelDirInitv+0x5c>)
 80096d2:	f043 0310 	orr.w	r3, r3, #16
 80096d6:	6313      	str	r3, [r2, #48]	; 0x30
 80096d8:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <_Z12wheelDirInitv+0x5c>)
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	f003 0310 	and.w	r3, r3, #16
 80096e0:	603b      	str	r3, [r7, #0]
 80096e2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80096e4:	2200      	movs	r2, #0
 80096e6:	213c      	movs	r1, #60	; 0x3c
 80096e8:	480a      	ldr	r0, [pc, #40]	; (8009714 <_Z12wheelDirInitv+0x60>)
 80096ea:	f001 f9c9 	bl	800aa80 <HAL_GPIO_WritePin>
			MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin | MOTOR_RIGHT_DIR1_Pin
					| MOTOR_RIGHT_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin
 80096ee:	233c      	movs	r3, #60	; 0x3c
 80096f0:	607b      	str	r3, [r7, #4]
			| MOTOR_RIGHT_DIR1_Pin | MOTOR_RIGHT_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096f2:	2301      	movs	r3, #1
 80096f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80096fe:	1d3b      	adds	r3, r7, #4
 8009700:	4619      	mov	r1, r3
 8009702:	4804      	ldr	r0, [pc, #16]	; (8009714 <_Z12wheelDirInitv+0x60>)
 8009704:	f001 f822 	bl	800a74c <HAL_GPIO_Init>

}
 8009708:	bf00      	nop
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	40023800 	.word	0x40023800
 8009714:	40021000 	.word	0x40021000

08009718 <_Z12wheelPWMInitv>:

void wheelPWMInit() {
 8009718:	b580      	push	{r7, lr}
 800971a:	b08e      	sub	sp, #56	; 0x38
 800971c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	603b      	str	r3, [r7, #0]
 8009722:	4b3e      	ldr	r3, [pc, #248]	; (800981c <_Z12wheelPWMInitv+0x104>)
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	4a3d      	ldr	r2, [pc, #244]	; (800981c <_Z12wheelPWMInitv+0x104>)
 8009728:	f043 0301 	orr.w	r3, r3, #1
 800972c:	6313      	str	r3, [r2, #48]	; 0x30
 800972e:	4b3b      	ldr	r3, [pc, #236]	; (800981c <_Z12wheelPWMInitv+0x104>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	683b      	ldr	r3, [r7, #0]

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800973a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	605a      	str	r2, [r3, #4]
 8009744:	609a      	str	r2, [r3, #8]
 8009746:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8009748:	f107 0320 	add.w	r3, r7, #32
 800974c:	2200      	movs	r2, #0
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8009752:	1d3b      	adds	r3, r7, #4
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	605a      	str	r2, [r3, #4]
 800975a:	609a      	str	r2, [r3, #8]
 800975c:	60da      	str	r2, [r3, #12]
 800975e:	611a      	str	r2, [r3, #16]
 8009760:	615a      	str	r2, [r3, #20]
 8009762:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 8009764:	4b2e      	ldr	r3, [pc, #184]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 8009766:	4a2f      	ldr	r2, [pc, #188]	; (8009824 <_Z12wheelPWMInitv+0x10c>)
 8009768:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2 - 1;
 800976a:	4b2d      	ldr	r3, [pc, #180]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 800976c:	2201      	movs	r2, #1
 800976e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009770:	4b2b      	ldr	r3, [pc, #172]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 8009772:	2200      	movs	r2, #0
 8009774:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 42000 - 1;
 8009776:	4b2a      	ldr	r3, [pc, #168]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 8009778:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800977c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800977e:	4b28      	ldr	r3, [pc, #160]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 8009780:	2200      	movs	r2, #0
 8009782:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009784:	4b26      	ldr	r3, [pc, #152]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 8009786:	2200      	movs	r2, #0
 8009788:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800978a:	4825      	ldr	r0, [pc, #148]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 800978c:	f001 ff50 	bl	800b630 <HAL_TIM_Base_Init>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009798:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800979a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800979e:	4619      	mov	r1, r3
 80097a0:	481f      	ldr	r0, [pc, #124]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 80097a2:	f002 fa9f 	bl	800bce4 <HAL_TIM_ConfigClockSource>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80097aa:	481d      	ldr	r0, [pc, #116]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 80097ac:	f001 ff8f 	bl	800b6ce <HAL_TIM_PWM_Init>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097b4:	2300      	movs	r3, #0
 80097b6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80097bc:	f107 0320 	add.w	r3, r7, #32
 80097c0:	4619      	mov	r1, r3
 80097c2:	4817      	ldr	r0, [pc, #92]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 80097c4:	f002 fe7e 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80097c8:	4603      	mov	r3, r0
			!= HAL_OK) {
 80097ca:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80097cc:	2360      	movs	r3, #96	; 0x60
 80097ce:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80097dc:	1d3b      	adds	r3, r7, #4
 80097de:	2200      	movs	r2, #0
 80097e0:	4619      	mov	r1, r3
 80097e2:	480f      	ldr	r0, [pc, #60]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 80097e4:	f002 f9b8 	bl	800bb58 <HAL_TIM_PWM_ConfigChannel>
 80097e8:	4603      	mov	r3, r0
			!= HAL_OK) {
 80097ea:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80097ec:	1d3b      	adds	r3, r7, #4
 80097ee:	2204      	movs	r2, #4
 80097f0:	4619      	mov	r1, r3
 80097f2:	480b      	ldr	r0, [pc, #44]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 80097f4:	f002 f9b0 	bl	800bb58 <HAL_TIM_PWM_ConfigChannel>
 80097f8:	4603      	mov	r3, r0
			!= HAL_OK) {
 80097fa:	2b00      	cmp	r3, #0
//		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim3);
 80097fc:	4808      	ldr	r0, [pc, #32]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 80097fe:	f7ff fab1 	bl	8008d64 <HAL_TIM_MspPostInit>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8009802:	2100      	movs	r1, #0
 8009804:	4806      	ldr	r0, [pc, #24]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 8009806:	f001 ff97 	bl	800b738 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800980a:	2104      	movs	r1, #4
 800980c:	4804      	ldr	r0, [pc, #16]	; (8009820 <_Z12wheelPWMInitv+0x108>)
 800980e:	f001 ff93 	bl	800b738 <HAL_TIM_PWM_Start>
}
 8009812:	bf00      	nop
 8009814:	3738      	adds	r7, #56	; 0x38
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40023800 	.word	0x40023800
 8009820:	20002550 	.word	0x20002550
 8009824:	40000400 	.word	0x40000400

08009828 <_Z12calcVelocitytt>:
//	vel_Ki[RIGHT];
//	vel_Kd[RIGHT];

}

void calcVelocity(uint16_t left_tick, uint16_t right_tick) {
 8009828:	b590      	push	{r4, r7, lr}
 800982a:	b08b      	sub	sp, #44	; 0x2c
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	460a      	mov	r2, r1
 8009832:	80fb      	strh	r3, [r7, #6]
 8009834:	4613      	mov	r3, r2
 8009836:	80bb      	strh	r3, [r7, #4]
	uint16_t cur_tick[WHEEL_NUM] = { left_tick, right_tick };
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	82bb      	strh	r3, [r7, #20]
 800983c:	88bb      	ldrh	r3, [r7, #4]
 800983e:	82fb      	strh	r3, [r7, #22]
	static uint32_t prev_calcVel_time[WHEEL_NUM] = {0 };
	static uint32_t cur_calcVel_time[WHEEL_NUM] = {0 };
	static uint32_t calcVel_time[WHEEL_NUM] = {0 };

	for (int idx = 0; idx < WHEEL_NUM; idx++) {
 8009840:	2300      	movs	r3, #0
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	2b01      	cmp	r3, #1
 8009848:	f300 80f5 	bgt.w	8009a36 <_Z12calcVelocitytt+0x20e>
		ros::Time h = nh.now();
 800984c:	f107 030c 	add.w	r3, r7, #12
 8009850:	497f      	ldr	r1, [pc, #508]	; (8009a50 <_Z12calcVelocitytt+0x228>)
 8009852:	4618      	mov	r0, r3
 8009854:	f7fa f9dc 	bl	8003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>

		cur_calcVel_time[idx] = tenk_tick;
 8009858:	4b7e      	ldr	r3, [pc, #504]	; (8009a54 <_Z12calcVelocitytt+0x22c>)
 800985a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800985e:	4619      	mov	r1, r3
 8009860:	4a7d      	ldr	r2, [pc, #500]	; (8009a58 <_Z12calcVelocitytt+0x230>)
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		calcVel_time[idx] = cur_calcVel_time[idx] - prev_calcVel_time[idx];
 8009868:	4a7b      	ldr	r2, [pc, #492]	; (8009a58 <_Z12calcVelocitytt+0x230>)
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009870:	497a      	ldr	r1, [pc, #488]	; (8009a5c <_Z12calcVelocitytt+0x234>)
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009878:	1ad2      	subs	r2, r2, r3
 800987a:	4979      	ldr	r1, [pc, #484]	; (8009a60 <_Z12calcVelocitytt+0x238>)
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		prev_calcVel_time[idx] = cur_calcVel_time[idx];
 8009882:	4a75      	ldr	r2, [pc, #468]	; (8009a58 <_Z12calcVelocitytt+0x230>)
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800988a:	4974      	ldr	r1, [pc, #464]	; (8009a5c <_Z12calcVelocitytt+0x234>)
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		double dt = (double) calcVel_time[idx] * 0.000001;
 8009892:	4a73      	ldr	r2, [pc, #460]	; (8009a60 <_Z12calcVelocitytt+0x238>)
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800989a:	4618      	mov	r0, r3
 800989c:	f7f6 fdde 	bl	800045c <__aeabi_ui2d>
 80098a0:	a367      	add	r3, pc, #412	; (adr r3, 8009a40 <_Z12calcVelocitytt+0x218>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f6 fe53 	bl	8000550 <__aeabi_dmul>
 80098aa:	4603      	mov	r3, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	e9c7 3406 	strd	r3, r4, [r7, #24]

		if (cur_tick[idx] < low_encoder_wrap && last_tick[idx] > high_encoder_wrap) {
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	005b      	lsls	r3, r3, #1
 80098b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80098ba:	4413      	add	r3, r2
 80098bc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098c8:	4b66      	ldr	r3, [pc, #408]	; (8009a64 <_Z12calcVelocitytt+0x23c>)
 80098ca:	edd3 7a00 	vldr	s15, [r3]
 80098ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d6:	d51f      	bpl.n	8009918 <_Z12calcVelocitytt+0xf0>
 80098d8:	4a63      	ldr	r2, [pc, #396]	; (8009a68 <_Z12calcVelocitytt+0x240>)
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e0:	ee07 3a90 	vmov	s15, r3
 80098e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098e8:	4b60      	ldr	r3, [pc, #384]	; (8009a6c <_Z12calcVelocitytt+0x244>)
 80098ea:	edd3 7a00 	vldr	s15, [r3]
 80098ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f6:	dd0f      	ble.n	8009918 <_Z12calcVelocitytt+0xf0>
			wheel_mult[idx] = wheel_mult[idx] + 1;
 80098f8:	4a5d      	ldr	r2, [pc, #372]	; (8009a70 <_Z12calcVelocitytt+0x248>)
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	edd3 7a00 	vldr	s15, [r3]
 8009904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800990c:	4a58      	ldr	r2, [pc, #352]	; (8009a70 <_Z12calcVelocitytt+0x248>)
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	edc3 7a00 	vstr	s15, [r3]
		}

		if (cur_tick[idx] > high_encoder_wrap && last_tick[idx] < low_encoder_wrap) {
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009920:	4413      	add	r3, r2
 8009922:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800992e:	4b4f      	ldr	r3, [pc, #316]	; (8009a6c <_Z12calcVelocitytt+0x244>)
 8009930:	edd3 7a00 	vldr	s15, [r3]
 8009934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800993c:	dd1f      	ble.n	800997e <_Z12calcVelocitytt+0x156>
 800993e:	4a4a      	ldr	r2, [pc, #296]	; (8009a68 <_Z12calcVelocitytt+0x240>)
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800994e:	4b45      	ldr	r3, [pc, #276]	; (8009a64 <_Z12calcVelocitytt+0x23c>)
 8009950:	edd3 7a00 	vldr	s15, [r3]
 8009954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995c:	d50f      	bpl.n	800997e <_Z12calcVelocitytt+0x156>
			wheel_mult[idx] = wheel_mult[idx] - 1;
 800995e:	4a44      	ldr	r2, [pc, #272]	; (8009a70 <_Z12calcVelocitytt+0x248>)
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	edd3 7a00 	vldr	s15, [r3]
 800996a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800996e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009972:	4a3f      	ldr	r2, [pc, #252]	; (8009a70 <_Z12calcVelocitytt+0x248>)
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	edc3 7a00 	vstr	s15, [r3]
		} //오버플로우를 막으려고 한 것

		wheel_latest[idx] = (double) (cur_tick[idx] + wheel_mult[idx] * UNSIGNED16_MAX) * TICK2METER;
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009986:	4413      	add	r3, r2
 8009988:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009994:	4a36      	ldr	r2, [pc, #216]	; (8009a70 <_Z12calcVelocitytt+0x248>)
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	edd3 7a00 	vldr	s15, [r3]
 80099a0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8009a74 <_Z12calcVelocitytt+0x24c>
 80099a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80099a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ac:	ee17 0a90 	vmov	r0, s15
 80099b0:	f7f6 fd76 	bl	80004a0 <__aeabi_f2d>
 80099b4:	a324      	add	r3, pc, #144	; (adr r3, 8009a48 <_Z12calcVelocitytt+0x220>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f7f6 fdc9 	bl	8000550 <__aeabi_dmul>
 80099be:	4603      	mov	r3, r0
 80099c0:	460c      	mov	r4, r1
 80099c2:	4618      	mov	r0, r3
 80099c4:	4621      	mov	r1, r4
 80099c6:	f7f6 ffd5 	bl	8000974 <__aeabi_d2f>
 80099ca:	4601      	mov	r1, r0
 80099cc:	4a2a      	ldr	r2, [pc, #168]	; (8009a78 <_Z12calcVelocitytt+0x250>)
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	6019      	str	r1, [r3, #0]

		cur_vel_ouput[idx] = (double) (wheel_latest[idx] - wheel_prev[idx]) / dt;
 80099d6:	4a28      	ldr	r2, [pc, #160]	; (8009a78 <_Z12calcVelocitytt+0x250>)
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	ed93 7a00 	vldr	s14, [r3]
 80099e2:	4a26      	ldr	r2, [pc, #152]	; (8009a7c <_Z12calcVelocitytt+0x254>)
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	edd3 7a00 	vldr	s15, [r3]
 80099ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099f2:	ee17 0a90 	vmov	r0, s15
 80099f6:	f7f6 fd53 	bl	80004a0 <__aeabi_f2d>
 80099fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099fe:	f7f6 fed1 	bl	80007a4 <__aeabi_ddiv>
 8009a02:	4603      	mov	r3, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	4618      	mov	r0, r3
 8009a08:	4621      	mov	r1, r4
 8009a0a:	f7f6 ffb3 	bl	8000974 <__aeabi_d2f>
 8009a0e:	4601      	mov	r1, r0
 8009a10:	4a1b      	ldr	r2, [pc, #108]	; (8009a80 <_Z12calcVelocitytt+0x258>)
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	6019      	str	r1, [r3, #0]
		wheel_prev[idx] = wheel_latest[idx];
 8009a1a:	4a17      	ldr	r2, [pc, #92]	; (8009a78 <_Z12calcVelocitytt+0x250>)
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	4915      	ldr	r1, [pc, #84]	; (8009a7c <_Z12calcVelocitytt+0x254>)
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	601a      	str	r2, [r3, #0]
	for (int idx = 0; idx < WHEEL_NUM; idx++) {
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	3301      	adds	r3, #1
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
 8009a34:	e706      	b.n	8009844 <_Z12calcVelocitytt+0x1c>
	}
}
 8009a36:	bf00      	nop
 8009a38:	372c      	adds	r7, #44	; 0x2c
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd90      	pop	{r4, r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	a0b5ed8d 	.word	0xa0b5ed8d
 8009a44:	3eb0c6f7 	.word	0x3eb0c6f7
 8009a48:	95fa5200 	.word	0x95fa5200
 8009a4c:	3f8255ab 	.word	0x3f8255ab
 8009a50:	20000690 	.word	0x20000690
 8009a54:	20001c90 	.word	0x20001c90
 8009a58:	200025c0 	.word	0x200025c0
 8009a5c:	200025b8 	.word	0x200025b8
 8009a60:	200025c8 	.word	0x200025c8
 8009a64:	20002448 	.word	0x20002448
 8009a68:	2000245c 	.word	0x2000245c
 8009a6c:	2000244c 	.word	0x2000244c
 8009a70:	200025a0 	.word	0x200025a0
 8009a74:	477fff00 	.word	0x477fff00
 8009a78:	20002598 	.word	0x20002598
 8009a7c:	20002590 	.word	0x20002590
 8009a80:	200025b0 	.word	0x200025b0

08009a84 <_Z13moveLeftWheelv>:

void moveLeftWheel() {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
	if (vel_target[LEFT] > 0) {
 8009a88:	4b25      	ldr	r3, [pc, #148]	; (8009b20 <_Z13moveLeftWheelv+0x9c>)
 8009a8a:	edd3 7a00 	vldr	s15, [r3]
 8009a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	dd14      	ble.n	8009ac2 <_Z13moveLeftWheelv+0x3e>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2104      	movs	r1, #4
 8009a9c:	4821      	ldr	r0, [pc, #132]	; (8009b24 <_Z13moveLeftWheelv+0xa0>)
 8009a9e:	f000 ffef 	bl	800aa80 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	2108      	movs	r1, #8
 8009aa6:	481f      	ldr	r0, [pc, #124]	; (8009b24 <_Z13moveLeftWheelv+0xa0>)
 8009aa8:	f000 ffea 	bl	800aa80 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		TIM3->CCR1 = (uint16_t) vel_target[LEFT];
 8009aac:	4b1c      	ldr	r3, [pc, #112]	; (8009b20 <_Z13moveLeftWheelv+0x9c>)
 8009aae:	edd3 7a00 	vldr	s15, [r3]
 8009ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab6:	ee17 3a90 	vmov	r3, s15
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	4b1a      	ldr	r3, [pc, #104]	; (8009b28 <_Z13moveLeftWheelv+0xa4>)
 8009abe:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
				GPIO_PIN_RESET);
		TIM3->CCR1 = (uint16_t) 0;
	}

}
 8009ac0:	e02b      	b.n	8009b1a <_Z13moveLeftWheelv+0x96>
	} else if (vel_target[LEFT] < 0) {
 8009ac2:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <_Z13moveLeftWheelv+0x9c>)
 8009ac4:	edd3 7a00 	vldr	s15, [r3]
 8009ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad0:	d516      	bpl.n	8009b00 <_Z13moveLeftWheelv+0x7c>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	2104      	movs	r1, #4
 8009ad6:	4813      	ldr	r0, [pc, #76]	; (8009b24 <_Z13moveLeftWheelv+0xa0>)
 8009ad8:	f000 ffd2 	bl	800aa80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 8009adc:	2200      	movs	r2, #0
 8009ade:	2108      	movs	r1, #8
 8009ae0:	4810      	ldr	r0, [pc, #64]	; (8009b24 <_Z13moveLeftWheelv+0xa0>)
 8009ae2:	f000 ffcd 	bl	800aa80 <HAL_GPIO_WritePin>
		TIM3->CCR1 = (uint16_t) (vel_target[LEFT]*-1);
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <_Z13moveLeftWheelv+0x9c>)
 8009ae8:	edd3 7a00 	vldr	s15, [r3]
 8009aec:	eef1 7a67 	vneg.f32	s15, s15
 8009af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af4:	ee17 3a90 	vmov	r3, s15
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <_Z13moveLeftWheelv+0xa4>)
 8009afc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009afe:	e00c      	b.n	8009b1a <_Z13moveLeftWheelv+0x96>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8009b00:	2200      	movs	r2, #0
 8009b02:	2104      	movs	r1, #4
 8009b04:	4807      	ldr	r0, [pc, #28]	; (8009b24 <_Z13moveLeftWheelv+0xa0>)
 8009b06:	f000 ffbb 	bl	800aa80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2108      	movs	r1, #8
 8009b0e:	4805      	ldr	r0, [pc, #20]	; (8009b24 <_Z13moveLeftWheelv+0xa0>)
 8009b10:	f000 ffb6 	bl	800aa80 <HAL_GPIO_WritePin>
		TIM3->CCR1 = (uint16_t) 0;
 8009b14:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <_Z13moveLeftWheelv+0xa4>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009b1a:	bf00      	nop
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	200025a8 	.word	0x200025a8
 8009b24:	40021000 	.word	0x40021000
 8009b28:	40000400 	.word	0x40000400

08009b2c <_Z14moveRightWheelv>:
void moveRightWheel() {
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
	if (vel_target[RIGHT] > 0) {
 8009b30:	4b25      	ldr	r3, [pc, #148]	; (8009bc8 <_Z14moveRightWheelv+0x9c>)
 8009b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3e:	dd14      	ble.n	8009b6a <_Z14moveRightWheelv+0x3e>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 8009b40:	2200      	movs	r2, #0
 8009b42:	2110      	movs	r1, #16
 8009b44:	4821      	ldr	r0, [pc, #132]	; (8009bcc <_Z14moveRightWheelv+0xa0>)
 8009b46:	f000 ff9b 	bl	800aa80 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	2120      	movs	r1, #32
 8009b4e:	481f      	ldr	r0, [pc, #124]	; (8009bcc <_Z14moveRightWheelv+0xa0>)
 8009b50:	f000 ff96 	bl	800aa80 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		TIM3->CCR2 = (uint16_t) vel_target[RIGHT];
 8009b54:	4b1c      	ldr	r3, [pc, #112]	; (8009bc8 <_Z14moveRightWheelv+0x9c>)
 8009b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b5e:	ee17 3a90 	vmov	r3, s15
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	4b1a      	ldr	r3, [pc, #104]	; (8009bd0 <_Z14moveRightWheelv+0xa4>)
 8009b66:	639a      	str	r2, [r3, #56]	; 0x38
				GPIO_PIN_RESET);

		TIM3->CCR2 = (uint16_t) 0;
	}

}
 8009b68:	e02b      	b.n	8009bc2 <_Z14moveRightWheelv+0x96>
	} else if (vel_target[RIGHT] < 0) {
 8009b6a:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <_Z14moveRightWheelv+0x9c>)
 8009b6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b78:	d516      	bpl.n	8009ba8 <_Z14moveRightWheelv+0x7c>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	2110      	movs	r1, #16
 8009b7e:	4813      	ldr	r0, [pc, #76]	; (8009bcc <_Z14moveRightWheelv+0xa0>)
 8009b80:	f000 ff7e 	bl	800aa80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 8009b84:	2200      	movs	r2, #0
 8009b86:	2120      	movs	r1, #32
 8009b88:	4810      	ldr	r0, [pc, #64]	; (8009bcc <_Z14moveRightWheelv+0xa0>)
 8009b8a:	f000 ff79 	bl	800aa80 <HAL_GPIO_WritePin>
		TIM3->CCR2 = (uint16_t) (vel_target[RIGHT]*-1);
 8009b8e:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <_Z14moveRightWheelv+0x9c>)
 8009b90:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b94:	eef1 7a67 	vneg.f32	s15, s15
 8009b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9c:	ee17 3a90 	vmov	r3, s15
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <_Z14moveRightWheelv+0xa4>)
 8009ba4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009ba6:	e00c      	b.n	8009bc2 <_Z14moveRightWheelv+0x96>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2110      	movs	r1, #16
 8009bac:	4807      	ldr	r0, [pc, #28]	; (8009bcc <_Z14moveRightWheelv+0xa0>)
 8009bae:	f000 ff67 	bl	800aa80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2120      	movs	r1, #32
 8009bb6:	4805      	ldr	r0, [pc, #20]	; (8009bcc <_Z14moveRightWheelv+0xa0>)
 8009bb8:	f000 ff62 	bl	800aa80 <HAL_GPIO_WritePin>
		TIM3->CCR2 = (uint16_t) 0;
 8009bbc:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <_Z14moveRightWheelv+0xa4>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009bc2:	bf00      	nop
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200025a8 	.word	0x200025a8
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	40000400 	.word	0x40000400

08009bd4 <_Z41__static_initialization_and_destruction_0ii>:
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d140      	bne.n	8009c66 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d13b      	bne.n	8009c66 <_Z41__static_initialization_and_destruction_0ii+0x92>
static std_msgs::String debug_msg;
 8009bee:	4820      	ldr	r0, [pc, #128]	; (8009c70 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009bf0:	f7f7 f8d4 	bl	8000d9c <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8009bf4:	481f      	ldr	r0, [pc, #124]	; (8009c74 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009bf6:	f7f7 f96d 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8009bfa:	481f      	ldr	r0, [pc, #124]	; (8009c78 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009bfc:	f7f7 f96a 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 tick_msg;
 8009c00:	481e      	ldr	r0, [pc, #120]	; (8009c7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009c02:	f7f7 f967 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test1_msg;
 8009c06:	481e      	ldr	r0, [pc, #120]	; (8009c80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c08:	f7f7 f964 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 test2_msg;
 8009c0c:	481d      	ldr	r0, [pc, #116]	; (8009c84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c0e:	f7f7 f961 	bl	8000ed4 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Float32 lwheel_vel_msg;
 8009c12:	481d      	ldr	r0, [pc, #116]	; (8009c88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c14:	f7f7 faea 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static std_msgs::Float32 rwheel_vel_msg;
 8009c18:	481c      	ldr	r0, [pc, #112]	; (8009c8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c1a:	f7f7 fae7 	bl	80011ec <_ZN8std_msgs7Float32C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4a13      	ldr	r2, [pc, #76]	; (8009c70 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009c22:	491b      	ldr	r1, [pc, #108]	; (8009c90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009c24:	481b      	ldr	r0, [pc, #108]	; (8009c94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009c26:	f7f7 f897 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	4a11      	ldr	r2, [pc, #68]	; (8009c74 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009c2e:	491a      	ldr	r1, [pc, #104]	; (8009c98 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c30:	481a      	ldr	r0, [pc, #104]	; (8009c9c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009c32:	f7f7 f891 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8009c36:	2300      	movs	r3, #0
 8009c38:	4a0f      	ldr	r2, [pc, #60]	; (8009c78 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009c3a:	4919      	ldr	r1, [pc, #100]	; (8009ca0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009c3c:	4819      	ldr	r0, [pc, #100]	; (8009ca4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009c3e:	f7f7 f88b 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher tick_pub("tick", &tick_msg);
 8009c42:	2300      	movs	r3, #0
 8009c44:	4a0d      	ldr	r2, [pc, #52]	; (8009c7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009c46:	4918      	ldr	r1, [pc, #96]	; (8009ca8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8009c48:	4818      	ldr	r0, [pc, #96]	; (8009cac <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8009c4a:	f7f7 f885 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher lwheel_vel_pub("lwheel_vel", &lwheel_vel_msg);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	4a0d      	ldr	r2, [pc, #52]	; (8009c88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c52:	4917      	ldr	r1, [pc, #92]	; (8009cb0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8009c54:	4817      	ldr	r0, [pc, #92]	; (8009cb4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8009c56:	f7f7 f87f 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher rwheel_vel_pub("rwheel_vel", &rwheel_vel_msg);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	4a0b      	ldr	r2, [pc, #44]	; (8009c8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c5e:	4916      	ldr	r1, [pc, #88]	; (8009cb8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8009c60:	4816      	ldr	r0, [pc, #88]	; (8009cbc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8009c62:	f7f7 f879 	bl	8000d58 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8009c66:	bf00      	nop
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20002470 	.word	0x20002470
 8009c74:	20002478 	.word	0x20002478
 8009c78:	20002488 	.word	0x20002488
 8009c7c:	20002498 	.word	0x20002498
 8009c80:	200024a8 	.word	0x200024a8
 8009c84:	200024b8 	.word	0x200024b8
 8009c88:	200024c8 	.word	0x200024c8
 8009c8c:	200024d0 	.word	0x200024d0
 8009c90:	0800e574 	.word	0x0800e574
 8009c94:	200024d8 	.word	0x200024d8
 8009c98:	0800e57c 	.word	0x0800e57c
 8009c9c:	200024ec 	.word	0x200024ec
 8009ca0:	0800e58c 	.word	0x0800e58c
 8009ca4:	20002500 	.word	0x20002500
 8009ca8:	0800e59c 	.word	0x0800e59c
 8009cac:	20002514 	.word	0x20002514
 8009cb0:	0800e5a4 	.word	0x0800e5a4
 8009cb4:	20002528 	.word	0x20002528
 8009cb8:	0800e5b0 	.word	0x0800e5b0
 8009cbc:	2000253c 	.word	0x2000253c

08009cc0 <_GLOBAL__sub_I_wheel_prev>:
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009cc8:	2001      	movs	r0, #1
 8009cca:	f7ff ff83 	bl	8009bd4 <_Z41__static_initialization_and_destruction_0ii>
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009cd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009cd6:	e003      	b.n	8009ce0 <LoopCopyDataInit>

08009cd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009cd8:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009cda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009cdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009cde:	3104      	adds	r1, #4

08009ce0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ce0:	480b      	ldr	r0, [pc, #44]	; (8009d10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ce2:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ce4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009ce6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ce8:	d3f6      	bcc.n	8009cd8 <CopyDataInit>
  ldr  r2, =_sbss
 8009cea:	4a0b      	ldr	r2, [pc, #44]	; (8009d18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009cec:	e002      	b.n	8009cf4 <LoopFillZerobss>

08009cee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009cee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009cf0:	f842 3b04 	str.w	r3, [r2], #4

08009cf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009cf8:	d3f9      	bcc.n	8009cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009cfa:	f7ff fa53 	bl	80091a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cfe:	f003 fc8d 	bl	800d61c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009d02:	f7fa f86f 	bl	8003de4 <main>
  bx  lr    
 8009d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009d08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009d0c:	0800e8d4 	.word	0x0800e8d4
  ldr  r0, =_sdata
 8009d10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009d14:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8009d18:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8009d1c:	200025e0 	.word	0x200025e0

08009d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d20:	e7fe      	b.n	8009d20 <ADC_IRQHandler>
	...

08009d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009d28:	4b0e      	ldr	r3, [pc, #56]	; (8009d64 <HAL_Init+0x40>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a0d      	ldr	r2, [pc, #52]	; (8009d64 <HAL_Init+0x40>)
 8009d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009d34:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <HAL_Init+0x40>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a0a      	ldr	r2, [pc, #40]	; (8009d64 <HAL_Init+0x40>)
 8009d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d40:	4b08      	ldr	r3, [pc, #32]	; (8009d64 <HAL_Init+0x40>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a07      	ldr	r2, [pc, #28]	; (8009d64 <HAL_Init+0x40>)
 8009d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d4c:	2003      	movs	r0, #3
 8009d4e:	f000 f92b 	bl	8009fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009d52:	2000      	movs	r0, #0
 8009d54:	f000 f808 	bl	8009d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009d58:	f7fe fea0 	bl	8008a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	40023c00 	.word	0x40023c00

08009d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009d70:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <HAL_InitTick+0x54>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	4b12      	ldr	r3, [pc, #72]	; (8009dc0 <HAL_InitTick+0x58>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f943 	bl	800a012 <HAL_SYSTICK_Config>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e00e      	b.n	8009db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b0f      	cmp	r3, #15
 8009d9a:	d80a      	bhi.n	8009db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	f000 f90b 	bl	8009fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009da8:	4a06      	ldr	r2, [pc, #24]	; (8009dc4 <HAL_InitTick+0x5c>)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	e000      	b.n	8009db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20000008 	.word	0x20000008
 8009dc0:	20000010 	.word	0x20000010
 8009dc4:	2000000c 	.word	0x2000000c

08009dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <HAL_IncTick+0x20>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4b06      	ldr	r3, [pc, #24]	; (8009dec <HAL_IncTick+0x24>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	4a04      	ldr	r2, [pc, #16]	; (8009dec <HAL_IncTick+0x24>)
 8009dda:	6013      	str	r3, [r2, #0]
}
 8009ddc:	bf00      	nop
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20000010 	.word	0x20000010
 8009dec:	200025d8 	.word	0x200025d8

08009df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009df0:	b480      	push	{r7}
 8009df2:	af00      	add	r7, sp, #0
  return uwTick;
 8009df4:	4b03      	ldr	r3, [pc, #12]	; (8009e04 <HAL_GetTick+0x14>)
 8009df6:	681b      	ldr	r3, [r3, #0]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	200025d8 	.word	0x200025d8

08009e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e18:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <__NVIC_SetPriorityGrouping+0x44>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e24:	4013      	ands	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e3a:	4a04      	ldr	r2, [pc, #16]	; (8009e4c <__NVIC_SetPriorityGrouping+0x44>)
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	60d3      	str	r3, [r2, #12]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	e000ed00 	.word	0xe000ed00

08009e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e50:	b480      	push	{r7}
 8009e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e54:	4b04      	ldr	r3, [pc, #16]	; (8009e68 <__NVIC_GetPriorityGrouping+0x18>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	0a1b      	lsrs	r3, r3, #8
 8009e5a:	f003 0307 	and.w	r3, r3, #7
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	e000ed00 	.word	0xe000ed00

08009e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	db0b      	blt.n	8009e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	f003 021f 	and.w	r2, r3, #31
 8009e84:	4907      	ldr	r1, [pc, #28]	; (8009ea4 <__NVIC_EnableIRQ+0x38>)
 8009e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	2001      	movs	r0, #1
 8009e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8009e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	e000e100 	.word	0xe000e100

08009ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	db0a      	blt.n	8009ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	490c      	ldr	r1, [pc, #48]	; (8009ef4 <__NVIC_SetPriority+0x4c>)
 8009ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ec6:	0112      	lsls	r2, r2, #4
 8009ec8:	b2d2      	uxtb	r2, r2
 8009eca:	440b      	add	r3, r1
 8009ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009ed0:	e00a      	b.n	8009ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	4908      	ldr	r1, [pc, #32]	; (8009ef8 <__NVIC_SetPriority+0x50>)
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
 8009eda:	f003 030f 	and.w	r3, r3, #15
 8009ede:	3b04      	subs	r3, #4
 8009ee0:	0112      	lsls	r2, r2, #4
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	761a      	strb	r2, [r3, #24]
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	e000e100 	.word	0xe000e100
 8009ef8:	e000ed00 	.word	0xe000ed00

08009efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b089      	sub	sp, #36	; 0x24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f003 0307 	and.w	r3, r3, #7
 8009f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	f1c3 0307 	rsb	r3, r3, #7
 8009f16:	2b04      	cmp	r3, #4
 8009f18:	bf28      	it	cs
 8009f1a:	2304      	movcs	r3, #4
 8009f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	3304      	adds	r3, #4
 8009f22:	2b06      	cmp	r3, #6
 8009f24:	d902      	bls.n	8009f2c <NVIC_EncodePriority+0x30>
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	3b03      	subs	r3, #3
 8009f2a:	e000      	b.n	8009f2e <NVIC_EncodePriority+0x32>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f30:	f04f 32ff 	mov.w	r2, #4294967295
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3a:	43da      	mvns	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	401a      	ands	r2, r3
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f44:	f04f 31ff 	mov.w	r1, #4294967295
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4e:	43d9      	mvns	r1, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f54:	4313      	orrs	r3, r2
         );
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3724      	adds	r7, #36	; 0x24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
	...

08009f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f74:	d301      	bcc.n	8009f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f76:	2301      	movs	r3, #1
 8009f78:	e00f      	b.n	8009f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f7a:	4a0a      	ldr	r2, [pc, #40]	; (8009fa4 <SysTick_Config+0x40>)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f82:	210f      	movs	r1, #15
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	f7ff ff8e 	bl	8009ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009f8c:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <SysTick_Config+0x40>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009f92:	4b04      	ldr	r3, [pc, #16]	; (8009fa4 <SysTick_Config+0x40>)
 8009f94:	2207      	movs	r2, #7
 8009f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	e000e010 	.word	0xe000e010

08009fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff ff29 	bl	8009e08 <__NVIC_SetPriorityGrouping>
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009fd0:	f7ff ff3e 	bl	8009e50 <__NVIC_GetPriorityGrouping>
 8009fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68b9      	ldr	r1, [r7, #8]
 8009fda:	6978      	ldr	r0, [r7, #20]
 8009fdc:	f7ff ff8e 	bl	8009efc <NVIC_EncodePriority>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff ff5d 	bl	8009ea8 <__NVIC_SetPriority>
}
 8009fee:	bf00      	nop
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a004:	4618      	mov	r0, r3
 800a006:	f7ff ff31 	bl	8009e6c <__NVIC_EnableIRQ>
}
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff ffa2 	bl	8009f64 <SysTick_Config>
 800a020:	4603      	mov	r3, r0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a038:	f7ff feda 	bl	8009df0 <HAL_GetTick>
 800a03c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e099      	b.n	800a17c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 0201 	bic.w	r2, r2, #1
 800a066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a068:	e00f      	b.n	800a08a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a06a:	f7ff fec1 	bl	8009df0 <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	2b05      	cmp	r3, #5
 800a076:	d908      	bls.n	800a08a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2220      	movs	r2, #32
 800a07c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2203      	movs	r2, #3
 800a082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e078      	b.n	800a17c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e8      	bne.n	800a06a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4b38      	ldr	r3, [pc, #224]	; (800a184 <HAL_DMA_Init+0x158>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d107      	bne.n	800a0f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f023 0307 	bic.w	r3, r3, #7
 800a10a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	4313      	orrs	r3, r2
 800a114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d117      	bne.n	800a14e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00e      	beq.n	800a14e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fa91 	bl	800a658 <DMA_CheckFifoParam>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d008      	beq.n	800a14e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2240      	movs	r2, #64	; 0x40
 800a140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a14a:	2301      	movs	r3, #1
 800a14c:	e016      	b.n	800a17c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fa48 	bl	800a5ec <DMA_CalcBaseAndBitshift>
 800a15c:	4603      	mov	r3, r0
 800a15e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a164:	223f      	movs	r2, #63	; 0x3f
 800a166:	409a      	lsls	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	f010803f 	.word	0xf010803f

0800a188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a19e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <HAL_DMA_Start_IT+0x26>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e040      	b.n	800a230 <HAL_DMA_Start_IT+0xa8>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d12f      	bne.n	800a222 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	68b9      	ldr	r1, [r7, #8]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f9da 	bl	800a590 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e0:	223f      	movs	r2, #63	; 0x3f
 800a1e2:	409a      	lsls	r2, r3
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0216 	orr.w	r2, r2, #22
 800a1f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d007      	beq.n	800a210 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0208 	orr.w	r2, r2, #8
 800a20e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0201 	orr.w	r2, r2, #1
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	e005      	b.n	800a22e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a22a:	2302      	movs	r3, #2
 800a22c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d004      	beq.n	800a256 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2280      	movs	r2, #128	; 0x80
 800a250:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e00c      	b.n	800a270 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2205      	movs	r2, #5
 800a25a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0201 	bic.w	r2, r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a284:	2300      	movs	r3, #0
 800a286:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a288:	4b92      	ldr	r3, [pc, #584]	; (800a4d4 <HAL_DMA_IRQHandler+0x258>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a92      	ldr	r2, [pc, #584]	; (800a4d8 <HAL_DMA_IRQHandler+0x25c>)
 800a28e:	fba2 2303 	umull	r2, r3, r2, r3
 800a292:	0a9b      	lsrs	r3, r3, #10
 800a294:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a6:	2208      	movs	r2, #8
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d01a      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d013      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f022 0204 	bic.w	r2, r2, #4
 800a2ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	409a      	lsls	r2, r3
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e0:	f043 0201 	orr.w	r2, r3, #1
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	409a      	lsls	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d012      	beq.n	800a31e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a30a:	2201      	movs	r2, #1
 800a30c:	409a      	lsls	r2, r3
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a316:	f043 0202 	orr.w	r2, r3, #2
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a322:	2204      	movs	r2, #4
 800a324:	409a      	lsls	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4013      	ands	r3, r2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d012      	beq.n	800a354 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00b      	beq.n	800a354 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a340:	2204      	movs	r2, #4
 800a342:	409a      	lsls	r2, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34c:	f043 0204 	orr.w	r2, r3, #4
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a358:	2210      	movs	r2, #16
 800a35a:	409a      	lsls	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d043      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0308 	and.w	r3, r3, #8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d03c      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a376:	2210      	movs	r2, #16
 800a378:	409a      	lsls	r2, r3
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d018      	beq.n	800a3be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d108      	bne.n	800a3ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d024      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	4798      	blx	r3
 800a3aa:	e01f      	b.n	800a3ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d01b      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
 800a3bc:	e016      	b.n	800a3ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d107      	bne.n	800a3dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0208 	bic.w	r2, r2, #8
 800a3da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 808e 	beq.w	800a51a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8086 	beq.w	800a51a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a412:	2220      	movs	r2, #32
 800a414:	409a      	lsls	r2, r3
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b05      	cmp	r3, #5
 800a424:	d136      	bne.n	800a494 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f022 0216 	bic.w	r2, r2, #22
 800a434:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	695a      	ldr	r2, [r3, #20]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a444:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d103      	bne.n	800a456 <HAL_DMA_IRQHandler+0x1da>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a452:	2b00      	cmp	r3, #0
 800a454:	d007      	beq.n	800a466 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0208 	bic.w	r2, r2, #8
 800a464:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a46a:	223f      	movs	r2, #63	; 0x3f
 800a46c:	409a      	lsls	r2, r3
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a486:	2b00      	cmp	r3, #0
 800a488:	d07d      	beq.n	800a586 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
        }
        return;
 800a492:	e078      	b.n	800a586 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d01c      	beq.n	800a4dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d108      	bne.n	800a4c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d030      	beq.n	800a51a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	4798      	blx	r3
 800a4c0:	e02b      	b.n	800a51a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d027      	beq.n	800a51a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	4798      	blx	r3
 800a4d2:	e022      	b.n	800a51a <HAL_DMA_IRQHandler+0x29e>
 800a4d4:	20000008 	.word	0x20000008
 800a4d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10f      	bne.n	800a50a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0210 	bic.w	r2, r2, #16
 800a4f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d032      	beq.n	800a588 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d022      	beq.n	800a574 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2205      	movs	r2, #5
 800a532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0201 	bic.w	r2, r2, #1
 800a544:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3301      	adds	r3, #1
 800a54a:	60bb      	str	r3, [r7, #8]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d307      	bcc.n	800a562 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1f2      	bne.n	800a546 <HAL_DMA_IRQHandler+0x2ca>
 800a560:	e000      	b.n	800a564 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a562:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d005      	beq.n	800a588 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	4798      	blx	r3
 800a584:	e000      	b.n	800a588 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a586:	bf00      	nop
    }
  }
}
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop

0800a590 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	d108      	bne.n	800a5d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a5ce:	e007      	b.n	800a5e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	60da      	str	r2, [r3, #12]
}
 800a5e0:	bf00      	nop
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	3b10      	subs	r3, #16
 800a5fc:	4a14      	ldr	r2, [pc, #80]	; (800a650 <DMA_CalcBaseAndBitshift+0x64>)
 800a5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a602:	091b      	lsrs	r3, r3, #4
 800a604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a606:	4a13      	ldr	r2, [pc, #76]	; (800a654 <DMA_CalcBaseAndBitshift+0x68>)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4413      	add	r3, r2
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b03      	cmp	r3, #3
 800a618:	d909      	bls.n	800a62e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	659a      	str	r2, [r3, #88]	; 0x58
 800a62c:	e007      	b.n	800a63e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a642:	4618      	mov	r0, r3
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	aaaaaaab 	.word	0xaaaaaaab
 800a654:	0800e8a0 	.word	0x0800e8a0

0800a658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d11f      	bne.n	800a6b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b03      	cmp	r3, #3
 800a676:	d855      	bhi.n	800a724 <DMA_CheckFifoParam+0xcc>
 800a678:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <DMA_CheckFifoParam+0x28>)
 800a67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67e:	bf00      	nop
 800a680:	0800a691 	.word	0x0800a691
 800a684:	0800a6a3 	.word	0x0800a6a3
 800a688:	0800a691 	.word	0x0800a691
 800a68c:	0800a725 	.word	0x0800a725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d045      	beq.n	800a728 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6a0:	e042      	b.n	800a728 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6aa:	d13f      	bne.n	800a72c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6b0:	e03c      	b.n	800a72c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ba:	d121      	bne.n	800a700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d836      	bhi.n	800a730 <DMA_CheckFifoParam+0xd8>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <DMA_CheckFifoParam+0x70>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6d9 	.word	0x0800a6d9
 800a6cc:	0800a6df 	.word	0x0800a6df
 800a6d0:	0800a6d9 	.word	0x0800a6d9
 800a6d4:	0800a6f1 	.word	0x0800a6f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	73fb      	strb	r3, [r7, #15]
      break;
 800a6dc:	e02f      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d024      	beq.n	800a734 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6ee:	e021      	b.n	800a734 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6f8:	d11e      	bne.n	800a738 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a6fe:	e01b      	b.n	800a738 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d902      	bls.n	800a70c <DMA_CheckFifoParam+0xb4>
 800a706:	2b03      	cmp	r3, #3
 800a708:	d003      	beq.n	800a712 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a70a:	e018      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]
      break;
 800a710:	e015      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00e      	beq.n	800a73c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	73fb      	strb	r3, [r7, #15]
      break;
 800a722:	e00b      	b.n	800a73c <DMA_CheckFifoParam+0xe4>
      break;
 800a724:	bf00      	nop
 800a726:	e00a      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      break;
 800a728:	bf00      	nop
 800a72a:	e008      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      break;
 800a72c:	bf00      	nop
 800a72e:	e006      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      break;
 800a730:	bf00      	nop
 800a732:	e004      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      break;
 800a734:	bf00      	nop
 800a736:	e002      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      break;   
 800a738:	bf00      	nop
 800a73a:	e000      	b.n	800a73e <DMA_CheckFifoParam+0xe6>
      break;
 800a73c:	bf00      	nop
    }
  } 
  
  return status; 
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b089      	sub	sp, #36	; 0x24
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a75e:	2300      	movs	r3, #0
 800a760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
 800a766:	e16b      	b.n	800aa40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a768:	2201      	movs	r2, #1
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	fa02 f303 	lsl.w	r3, r2, r3
 800a770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	4013      	ands	r3, r2
 800a77a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	429a      	cmp	r2, r3
 800a782:	f040 815a 	bne.w	800aa3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d00b      	beq.n	800a7a6 <HAL_GPIO_Init+0x5a>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	2b02      	cmp	r3, #2
 800a794:	d007      	beq.n	800a7a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a79a:	2b11      	cmp	r3, #17
 800a79c:	d003      	beq.n	800a7a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	2b12      	cmp	r3, #18
 800a7a4:	d130      	bne.n	800a808 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	43db      	mvns	r3, r3
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a7dc:	2201      	movs	r2, #1
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e4:	43db      	mvns	r3, r3
 800a7e6:	69ba      	ldr	r2, [r7, #24]
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	091b      	lsrs	r3, r3, #4
 800a7f2:	f003 0201 	and.w	r2, r3, #1
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fc:	69ba      	ldr	r2, [r7, #24]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	005b      	lsls	r3, r3, #1
 800a812:	2203      	movs	r2, #3
 800a814:	fa02 f303 	lsl.w	r3, r2, r3
 800a818:	43db      	mvns	r3, r3
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	4013      	ands	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	fa02 f303 	lsl.w	r3, r2, r3
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	4313      	orrs	r3, r2
 800a830:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d003      	beq.n	800a848 <HAL_GPIO_Init+0xfc>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b12      	cmp	r3, #18
 800a846:	d123      	bne.n	800a890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	08da      	lsrs	r2, r3, #3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3208      	adds	r2, #8
 800a850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	220f      	movs	r2, #15
 800a860:	fa02 f303 	lsl.w	r3, r2, r3
 800a864:	43db      	mvns	r3, r3
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	4013      	ands	r3, r2
 800a86a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	691a      	ldr	r2, [r3, #16]
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	fa02 f303 	lsl.w	r3, r2, r3
 800a87c:	69ba      	ldr	r2, [r7, #24]
 800a87e:	4313      	orrs	r3, r2
 800a880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	08da      	lsrs	r2, r3, #3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	3208      	adds	r2, #8
 800a88a:	69b9      	ldr	r1, [r7, #24]
 800a88c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	2203      	movs	r2, #3
 800a89c:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	69ba      	ldr	r2, [r7, #24]
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f003 0203 	and.w	r2, r3, #3
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 80b4 	beq.w	800aa3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	4b5f      	ldr	r3, [pc, #380]	; (800aa54 <HAL_GPIO_Init+0x308>)
 800a8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8da:	4a5e      	ldr	r2, [pc, #376]	; (800aa54 <HAL_GPIO_Init+0x308>)
 800a8dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a8e2:	4b5c      	ldr	r3, [pc, #368]	; (800aa54 <HAL_GPIO_Init+0x308>)
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a8ee:	4a5a      	ldr	r2, [pc, #360]	; (800aa58 <HAL_GPIO_Init+0x30c>)
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	089b      	lsrs	r3, r3, #2
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	220f      	movs	r2, #15
 800a906:	fa02 f303 	lsl.w	r3, r2, r3
 800a90a:	43db      	mvns	r3, r3
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	4013      	ands	r3, r2
 800a910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a51      	ldr	r2, [pc, #324]	; (800aa5c <HAL_GPIO_Init+0x310>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d02b      	beq.n	800a972 <HAL_GPIO_Init+0x226>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a50      	ldr	r2, [pc, #320]	; (800aa60 <HAL_GPIO_Init+0x314>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d025      	beq.n	800a96e <HAL_GPIO_Init+0x222>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a4f      	ldr	r2, [pc, #316]	; (800aa64 <HAL_GPIO_Init+0x318>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d01f      	beq.n	800a96a <HAL_GPIO_Init+0x21e>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a4e      	ldr	r2, [pc, #312]	; (800aa68 <HAL_GPIO_Init+0x31c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d019      	beq.n	800a966 <HAL_GPIO_Init+0x21a>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a4d      	ldr	r2, [pc, #308]	; (800aa6c <HAL_GPIO_Init+0x320>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d013      	beq.n	800a962 <HAL_GPIO_Init+0x216>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a4c      	ldr	r2, [pc, #304]	; (800aa70 <HAL_GPIO_Init+0x324>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00d      	beq.n	800a95e <HAL_GPIO_Init+0x212>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a4b      	ldr	r2, [pc, #300]	; (800aa74 <HAL_GPIO_Init+0x328>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d007      	beq.n	800a95a <HAL_GPIO_Init+0x20e>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a4a      	ldr	r2, [pc, #296]	; (800aa78 <HAL_GPIO_Init+0x32c>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d101      	bne.n	800a956 <HAL_GPIO_Init+0x20a>
 800a952:	2307      	movs	r3, #7
 800a954:	e00e      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a956:	2308      	movs	r3, #8
 800a958:	e00c      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a95a:	2306      	movs	r3, #6
 800a95c:	e00a      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a95e:	2305      	movs	r3, #5
 800a960:	e008      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a962:	2304      	movs	r3, #4
 800a964:	e006      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a966:	2303      	movs	r3, #3
 800a968:	e004      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e002      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a96e:	2301      	movs	r3, #1
 800a970:	e000      	b.n	800a974 <HAL_GPIO_Init+0x228>
 800a972:	2300      	movs	r3, #0
 800a974:	69fa      	ldr	r2, [r7, #28]
 800a976:	f002 0203 	and.w	r2, r2, #3
 800a97a:	0092      	lsls	r2, r2, #2
 800a97c:	4093      	lsls	r3, r2
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	4313      	orrs	r3, r2
 800a982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a984:	4934      	ldr	r1, [pc, #208]	; (800aa58 <HAL_GPIO_Init+0x30c>)
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	089b      	lsrs	r3, r3, #2
 800a98a:	3302      	adds	r3, #2
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a992:	4b3a      	ldr	r3, [pc, #232]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	43db      	mvns	r3, r3
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	4013      	ands	r3, r2
 800a9a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a9ae:	69ba      	ldr	r2, [r7, #24]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a9b6:	4a31      	ldr	r2, [pc, #196]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a9bc:	4b2f      	ldr	r3, [pc, #188]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	43db      	mvns	r3, r3
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a9d8:	69ba      	ldr	r2, [r7, #24]
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a9e0:	4a26      	ldr	r2, [pc, #152]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a9e6:	4b25      	ldr	r3, [pc, #148]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	43db      	mvns	r3, r3
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aa0a:	4a1c      	ldr	r2, [pc, #112]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aa10:	4b1a      	ldr	r3, [pc, #104]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aa34:	4a11      	ldr	r2, [pc, #68]	; (800aa7c <HAL_GPIO_Init+0x330>)
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	61fb      	str	r3, [r7, #28]
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	2b0f      	cmp	r3, #15
 800aa44:	f67f ae90 	bls.w	800a768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa48:	bf00      	nop
 800aa4a:	3724      	adds	r7, #36	; 0x24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	40023800 	.word	0x40023800
 800aa58:	40013800 	.word	0x40013800
 800aa5c:	40020000 	.word	0x40020000
 800aa60:	40020400 	.word	0x40020400
 800aa64:	40020800 	.word	0x40020800
 800aa68:	40020c00 	.word	0x40020c00
 800aa6c:	40021000 	.word	0x40021000
 800aa70:	40021400 	.word	0x40021400
 800aa74:	40021800 	.word	0x40021800
 800aa78:	40021c00 	.word	0x40021c00
 800aa7c:	40013c00 	.word	0x40013c00

0800aa80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	807b      	strh	r3, [r7, #2]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aa90:	787b      	ldrb	r3, [r7, #1]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa96:	887a      	ldrh	r2, [r7, #2]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aa9c:	e003      	b.n	800aaa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aa9e:	887b      	ldrh	r3, [r7, #2]
 800aaa0:	041a      	lsls	r2, r3, #16
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	619a      	str	r2, [r3, #24]
}
 800aaa6:	bf00      	nop
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
	...

0800aab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800aabe:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aac0:	695a      	ldr	r2, [r3, #20]
 800aac2:	88fb      	ldrh	r3, [r7, #6]
 800aac4:	4013      	ands	r3, r2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d006      	beq.n	800aad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800aaca:	4a05      	ldr	r2, [pc, #20]	; (800aae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aacc:	88fb      	ldrh	r3, [r7, #6]
 800aace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 f806 	bl	800aae4 <HAL_GPIO_EXTI_Callback>
  }
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	40013c00 	.word	0x40013c00

0800aae4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800aaee:	bf00      	nop
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e11f      	b.n	800ad4e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d106      	bne.n	800ab28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7fd ffe2 	bl	8008aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2224      	movs	r2, #36	; 0x24
 800ab2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f022 0201 	bic.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ab60:	f000 fd3e 	bl	800b5e0 <HAL_RCC_GetPCLK1Freq>
 800ab64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	4a7b      	ldr	r2, [pc, #492]	; (800ad58 <HAL_I2C_Init+0x25c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d807      	bhi.n	800ab80 <HAL_I2C_Init+0x84>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4a7a      	ldr	r2, [pc, #488]	; (800ad5c <HAL_I2C_Init+0x260>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	bf94      	ite	ls
 800ab78:	2301      	movls	r3, #1
 800ab7a:	2300      	movhi	r3, #0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	e006      	b.n	800ab8e <HAL_I2C_Init+0x92>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4a77      	ldr	r2, [pc, #476]	; (800ad60 <HAL_I2C_Init+0x264>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	bf94      	ite	ls
 800ab88:	2301      	movls	r3, #1
 800ab8a:	2300      	movhi	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e0db      	b.n	800ad4e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4a72      	ldr	r2, [pc, #456]	; (800ad64 <HAL_I2C_Init+0x268>)
 800ab9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9e:	0c9b      	lsrs	r3, r3, #18
 800aba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	4a64      	ldr	r2, [pc, #400]	; (800ad58 <HAL_I2C_Init+0x25c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d802      	bhi.n	800abd0 <HAL_I2C_Init+0xd4>
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	3301      	adds	r3, #1
 800abce:	e009      	b.n	800abe4 <HAL_I2C_Init+0xe8>
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800abd6:	fb02 f303 	mul.w	r3, r2, r3
 800abda:	4a63      	ldr	r2, [pc, #396]	; (800ad68 <HAL_I2C_Init+0x26c>)
 800abdc:	fba2 2303 	umull	r2, r3, r2, r3
 800abe0:	099b      	lsrs	r3, r3, #6
 800abe2:	3301      	adds	r3, #1
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6812      	ldr	r2, [r2, #0]
 800abe8:	430b      	orrs	r3, r1
 800abea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800abf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	4956      	ldr	r1, [pc, #344]	; (800ad58 <HAL_I2C_Init+0x25c>)
 800ac00:	428b      	cmp	r3, r1
 800ac02:	d80d      	bhi.n	800ac20 <HAL_I2C_Init+0x124>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	1e59      	subs	r1, r3, #1
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac12:	3301      	adds	r3, #1
 800ac14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	bf38      	it	cc
 800ac1c:	2304      	movcc	r3, #4
 800ac1e:	e04f      	b.n	800acc0 <HAL_I2C_Init+0x1c4>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d111      	bne.n	800ac4c <HAL_I2C_Init+0x150>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	1e58      	subs	r0, r3, #1
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6859      	ldr	r1, [r3, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	440b      	add	r3, r1
 800ac36:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	bf0c      	ite	eq
 800ac44:	2301      	moveq	r3, #1
 800ac46:	2300      	movne	r3, #0
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	e012      	b.n	800ac72 <HAL_I2C_Init+0x176>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	1e58      	subs	r0, r3, #1
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6859      	ldr	r1, [r3, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	440b      	add	r3, r1
 800ac5a:	0099      	lsls	r1, r3, #2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac62:	3301      	adds	r3, #1
 800ac64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2301      	moveq	r3, #1
 800ac6e:	2300      	movne	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <HAL_I2C_Init+0x17e>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e022      	b.n	800acc0 <HAL_I2C_Init+0x1c4>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10e      	bne.n	800aca0 <HAL_I2C_Init+0x1a4>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	1e58      	subs	r0, r3, #1
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6859      	ldr	r1, [r3, #4]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	440b      	add	r3, r1
 800ac90:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac94:	3301      	adds	r3, #1
 800ac96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac9e:	e00f      	b.n	800acc0 <HAL_I2C_Init+0x1c4>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	1e58      	subs	r0, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6859      	ldr	r1, [r3, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	0099      	lsls	r1, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800acb6:	3301      	adds	r3, #1
 800acb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	6809      	ldr	r1, [r1, #0]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	69da      	ldr	r2, [r3, #28]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800acee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	6911      	ldr	r1, [r2, #16]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	68d2      	ldr	r2, [r2, #12]
 800acfa:	4311      	orrs	r1, r2
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	6812      	ldr	r2, [r2, #0]
 800ad00:	430b      	orrs	r3, r1
 800ad02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	695a      	ldr	r2, [r3, #20]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f042 0201 	orr.w	r2, r2, #1
 800ad2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	000186a0 	.word	0x000186a0
 800ad5c:	001e847f 	.word	0x001e847f
 800ad60:	003d08ff 	.word	0x003d08ff
 800ad64:	431bde83 	.word	0x431bde83
 800ad68:	10624dd3 	.word	0x10624dd3

0800ad6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e25b      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d075      	beq.n	800ae76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ad8a:	4ba3      	ldr	r3, [pc, #652]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f003 030c 	and.w	r3, r3, #12
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	d00c      	beq.n	800adb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad96:	4ba0      	ldr	r3, [pc, #640]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	d112      	bne.n	800adc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ada2:	4b9d      	ldr	r3, [pc, #628]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adae:	d10b      	bne.n	800adc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adb0:	4b99      	ldr	r3, [pc, #612]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d05b      	beq.n	800ae74 <HAL_RCC_OscConfig+0x108>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d157      	bne.n	800ae74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e236      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800add0:	d106      	bne.n	800ade0 <HAL_RCC_OscConfig+0x74>
 800add2:	4b91      	ldr	r3, [pc, #580]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a90      	ldr	r2, [pc, #576]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800add8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	e01d      	b.n	800ae1c <HAL_RCC_OscConfig+0xb0>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ade8:	d10c      	bne.n	800ae04 <HAL_RCC_OscConfig+0x98>
 800adea:	4b8b      	ldr	r3, [pc, #556]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a8a      	ldr	r2, [pc, #552]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800adf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adf4:	6013      	str	r3, [r2, #0]
 800adf6:	4b88      	ldr	r3, [pc, #544]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a87      	ldr	r2, [pc, #540]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800adfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	e00b      	b.n	800ae1c <HAL_RCC_OscConfig+0xb0>
 800ae04:	4b84      	ldr	r3, [pc, #528]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a83      	ldr	r2, [pc, #524]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	4b81      	ldr	r3, [pc, #516]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a80      	ldr	r2, [pc, #512]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d013      	beq.n	800ae4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae24:	f7fe ffe4 	bl	8009df0 <HAL_GetTick>
 800ae28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae2a:	e008      	b.n	800ae3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae2c:	f7fe ffe0 	bl	8009df0 <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b64      	cmp	r3, #100	; 0x64
 800ae38:	d901      	bls.n	800ae3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e1fb      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae3e:	4b76      	ldr	r3, [pc, #472]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0f0      	beq.n	800ae2c <HAL_RCC_OscConfig+0xc0>
 800ae4a:	e014      	b.n	800ae76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae4c:	f7fe ffd0 	bl	8009df0 <HAL_GetTick>
 800ae50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae54:	f7fe ffcc 	bl	8009df0 <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b64      	cmp	r3, #100	; 0x64
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e1e7      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae66:	4b6c      	ldr	r3, [pc, #432]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1f0      	bne.n	800ae54 <HAL_RCC_OscConfig+0xe8>
 800ae72:	e000      	b.n	800ae76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d063      	beq.n	800af4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ae82:	4b65      	ldr	r3, [pc, #404]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f003 030c 	and.w	r3, r3, #12
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00b      	beq.n	800aea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae8e:	4b62      	ldr	r3, [pc, #392]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ae96:	2b08      	cmp	r3, #8
 800ae98:	d11c      	bne.n	800aed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae9a:	4b5f      	ldr	r3, [pc, #380]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d116      	bne.n	800aed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aea6:	4b5c      	ldr	r3, [pc, #368]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0302 	and.w	r3, r3, #2
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d005      	beq.n	800aebe <HAL_RCC_OscConfig+0x152>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d001      	beq.n	800aebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e1bb      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aebe:	4b56      	ldr	r3, [pc, #344]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	4952      	ldr	r1, [pc, #328]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aed2:	e03a      	b.n	800af4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d020      	beq.n	800af1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aedc:	4b4f      	ldr	r3, [pc, #316]	; (800b01c <HAL_RCC_OscConfig+0x2b0>)
 800aede:	2201      	movs	r2, #1
 800aee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee2:	f7fe ff85 	bl	8009df0 <HAL_GetTick>
 800aee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aee8:	e008      	b.n	800aefc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aeea:	f7fe ff81 	bl	8009df0 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d901      	bls.n	800aefc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e19c      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aefc:	4b46      	ldr	r3, [pc, #280]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0302 	and.w	r3, r3, #2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0f0      	beq.n	800aeea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af08:	4b43      	ldr	r3, [pc, #268]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	4940      	ldr	r1, [pc, #256]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	600b      	str	r3, [r1, #0]
 800af1c:	e015      	b.n	800af4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af1e:	4b3f      	ldr	r3, [pc, #252]	; (800b01c <HAL_RCC_OscConfig+0x2b0>)
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af24:	f7fe ff64 	bl	8009df0 <HAL_GetTick>
 800af28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af2a:	e008      	b.n	800af3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af2c:	f7fe ff60 	bl	8009df0 <HAL_GetTick>
 800af30:	4602      	mov	r2, r0
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d901      	bls.n	800af3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e17b      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af3e:	4b36      	ldr	r3, [pc, #216]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f0      	bne.n	800af2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0308 	and.w	r3, r3, #8
 800af52:	2b00      	cmp	r3, #0
 800af54:	d030      	beq.n	800afb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d016      	beq.n	800af8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af5e:	4b30      	ldr	r3, [pc, #192]	; (800b020 <HAL_RCC_OscConfig+0x2b4>)
 800af60:	2201      	movs	r2, #1
 800af62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af64:	f7fe ff44 	bl	8009df0 <HAL_GetTick>
 800af68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af6a:	e008      	b.n	800af7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af6c:	f7fe ff40 	bl	8009df0 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e15b      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af7e:	4b26      	ldr	r3, [pc, #152]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800af80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <HAL_RCC_OscConfig+0x200>
 800af8a:	e015      	b.n	800afb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af8c:	4b24      	ldr	r3, [pc, #144]	; (800b020 <HAL_RCC_OscConfig+0x2b4>)
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af92:	f7fe ff2d 	bl	8009df0 <HAL_GetTick>
 800af96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af98:	e008      	b.n	800afac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af9a:	f7fe ff29 	bl	8009df0 <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d901      	bls.n	800afac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e144      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afac:	4b1a      	ldr	r3, [pc, #104]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800afae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1f0      	bne.n	800af9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 80a0 	beq.w	800b106 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afc6:	2300      	movs	r3, #0
 800afc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10f      	bne.n	800aff6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afd6:	2300      	movs	r3, #0
 800afd8:	60bb      	str	r3, [r7, #8]
 800afda:	4b0f      	ldr	r3, [pc, #60]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	4a0e      	ldr	r2, [pc, #56]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800afe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afe4:	6413      	str	r3, [r2, #64]	; 0x40
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <HAL_RCC_OscConfig+0x2ac>)
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afee:	60bb      	str	r3, [r7, #8]
 800aff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aff2:	2301      	movs	r3, #1
 800aff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aff6:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <HAL_RCC_OscConfig+0x2b8>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800affe:	2b00      	cmp	r3, #0
 800b000:	d121      	bne.n	800b046 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b002:	4b08      	ldr	r3, [pc, #32]	; (800b024 <HAL_RCC_OscConfig+0x2b8>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a07      	ldr	r2, [pc, #28]	; (800b024 <HAL_RCC_OscConfig+0x2b8>)
 800b008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b00c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b00e:	f7fe feef 	bl	8009df0 <HAL_GetTick>
 800b012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b014:	e011      	b.n	800b03a <HAL_RCC_OscConfig+0x2ce>
 800b016:	bf00      	nop
 800b018:	40023800 	.word	0x40023800
 800b01c:	42470000 	.word	0x42470000
 800b020:	42470e80 	.word	0x42470e80
 800b024:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b028:	f7fe fee2 	bl	8009df0 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b02      	cmp	r3, #2
 800b034:	d901      	bls.n	800b03a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e0fd      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b03a:	4b81      	ldr	r3, [pc, #516]	; (800b240 <HAL_RCC_OscConfig+0x4d4>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0f0      	beq.n	800b028 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d106      	bne.n	800b05c <HAL_RCC_OscConfig+0x2f0>
 800b04e:	4b7d      	ldr	r3, [pc, #500]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b052:	4a7c      	ldr	r2, [pc, #496]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b054:	f043 0301 	orr.w	r3, r3, #1
 800b058:	6713      	str	r3, [r2, #112]	; 0x70
 800b05a:	e01c      	b.n	800b096 <HAL_RCC_OscConfig+0x32a>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2b05      	cmp	r3, #5
 800b062:	d10c      	bne.n	800b07e <HAL_RCC_OscConfig+0x312>
 800b064:	4b77      	ldr	r3, [pc, #476]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b068:	4a76      	ldr	r2, [pc, #472]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b06a:	f043 0304 	orr.w	r3, r3, #4
 800b06e:	6713      	str	r3, [r2, #112]	; 0x70
 800b070:	4b74      	ldr	r3, [pc, #464]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b074:	4a73      	ldr	r2, [pc, #460]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b076:	f043 0301 	orr.w	r3, r3, #1
 800b07a:	6713      	str	r3, [r2, #112]	; 0x70
 800b07c:	e00b      	b.n	800b096 <HAL_RCC_OscConfig+0x32a>
 800b07e:	4b71      	ldr	r3, [pc, #452]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b082:	4a70      	ldr	r2, [pc, #448]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b084:	f023 0301 	bic.w	r3, r3, #1
 800b088:	6713      	str	r3, [r2, #112]	; 0x70
 800b08a:	4b6e      	ldr	r3, [pc, #440]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08e:	4a6d      	ldr	r2, [pc, #436]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b090:	f023 0304 	bic.w	r3, r3, #4
 800b094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d015      	beq.n	800b0ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b09e:	f7fe fea7 	bl	8009df0 <HAL_GetTick>
 800b0a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0a4:	e00a      	b.n	800b0bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0a6:	f7fe fea3 	bl	8009df0 <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d901      	bls.n	800b0bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e0bc      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0bc:	4b61      	ldr	r3, [pc, #388]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c0:	f003 0302 	and.w	r3, r3, #2
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0ee      	beq.n	800b0a6 <HAL_RCC_OscConfig+0x33a>
 800b0c8:	e014      	b.n	800b0f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0ca:	f7fe fe91 	bl	8009df0 <HAL_GetTick>
 800b0ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0d0:	e00a      	b.n	800b0e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0d2:	f7fe fe8d 	bl	8009df0 <HAL_GetTick>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d901      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e0a6      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0e8:	4b56      	ldr	r3, [pc, #344]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ec:	f003 0302 	and.w	r3, r3, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1ee      	bne.n	800b0d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d105      	bne.n	800b106 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0fa:	4b52      	ldr	r3, [pc, #328]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	4a51      	ldr	r2, [pc, #324]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 8092 	beq.w	800b234 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b110:	4b4c      	ldr	r3, [pc, #304]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f003 030c 	and.w	r3, r3, #12
 800b118:	2b08      	cmp	r3, #8
 800b11a:	d05c      	beq.n	800b1d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	2b02      	cmp	r3, #2
 800b122:	d141      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b124:	4b48      	ldr	r3, [pc, #288]	; (800b248 <HAL_RCC_OscConfig+0x4dc>)
 800b126:	2200      	movs	r2, #0
 800b128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b12a:	f7fe fe61 	bl	8009df0 <HAL_GetTick>
 800b12e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b130:	e008      	b.n	800b144 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b132:	f7fe fe5d 	bl	8009df0 <HAL_GetTick>
 800b136:	4602      	mov	r2, r0
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d901      	bls.n	800b144 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	e078      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b144:	4b3f      	ldr	r3, [pc, #252]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1f0      	bne.n	800b132 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	69da      	ldr	r2, [r3, #28]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a1b      	ldr	r3, [r3, #32]
 800b158:	431a      	orrs	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	019b      	lsls	r3, r3, #6
 800b160:	431a      	orrs	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b166:	085b      	lsrs	r3, r3, #1
 800b168:	3b01      	subs	r3, #1
 800b16a:	041b      	lsls	r3, r3, #16
 800b16c:	431a      	orrs	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	061b      	lsls	r3, r3, #24
 800b174:	4933      	ldr	r1, [pc, #204]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b176:	4313      	orrs	r3, r2
 800b178:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b17a:	4b33      	ldr	r3, [pc, #204]	; (800b248 <HAL_RCC_OscConfig+0x4dc>)
 800b17c:	2201      	movs	r2, #1
 800b17e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b180:	f7fe fe36 	bl	8009df0 <HAL_GetTick>
 800b184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b186:	e008      	b.n	800b19a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b188:	f7fe fe32 	bl	8009df0 <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	2b02      	cmp	r3, #2
 800b194:	d901      	bls.n	800b19a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b196:	2303      	movs	r3, #3
 800b198:	e04d      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b19a:	4b2a      	ldr	r3, [pc, #168]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0f0      	beq.n	800b188 <HAL_RCC_OscConfig+0x41c>
 800b1a6:	e045      	b.n	800b234 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1a8:	4b27      	ldr	r3, [pc, #156]	; (800b248 <HAL_RCC_OscConfig+0x4dc>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1ae:	f7fe fe1f 	bl	8009df0 <HAL_GetTick>
 800b1b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1b4:	e008      	b.n	800b1c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1b6:	f7fe fe1b 	bl	8009df0 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d901      	bls.n	800b1c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e036      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1c8:	4b1e      	ldr	r3, [pc, #120]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1f0      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x44a>
 800b1d4:	e02e      	b.n	800b234 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d101      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e029      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b1e2:	4b18      	ldr	r3, [pc, #96]	; (800b244 <HAL_RCC_OscConfig+0x4d8>)
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d11c      	bne.n	800b230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b200:	429a      	cmp	r2, r3
 800b202:	d115      	bne.n	800b230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b20a:	4013      	ands	r3, r2
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b210:	4293      	cmp	r3, r2
 800b212:	d10d      	bne.n	800b230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b21e:	429a      	cmp	r2, r3
 800b220:	d106      	bne.n	800b230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d001      	beq.n	800b234 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e000      	b.n	800b236 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	40007000 	.word	0x40007000
 800b244:	40023800 	.word	0x40023800
 800b248:	42470060 	.word	0x42470060

0800b24c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e0cc      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b260:	4b68      	ldr	r3, [pc, #416]	; (800b404 <HAL_RCC_ClockConfig+0x1b8>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 030f 	and.w	r3, r3, #15
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d90c      	bls.n	800b288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b26e:	4b65      	ldr	r3, [pc, #404]	; (800b404 <HAL_RCC_ClockConfig+0x1b8>)
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b276:	4b63      	ldr	r3, [pc, #396]	; (800b404 <HAL_RCC_ClockConfig+0x1b8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 030f 	and.w	r3, r3, #15
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d001      	beq.n	800b288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	e0b8      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0302 	and.w	r3, r3, #2
 800b290:	2b00      	cmp	r3, #0
 800b292:	d020      	beq.n	800b2d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0304 	and.w	r3, r3, #4
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d005      	beq.n	800b2ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2a0:	4b59      	ldr	r3, [pc, #356]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	4a58      	ldr	r2, [pc, #352]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b2a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b2aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d005      	beq.n	800b2c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2b8:	4b53      	ldr	r3, [pc, #332]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	4a52      	ldr	r2, [pc, #328]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b2be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b2c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2c4:	4b50      	ldr	r3, [pc, #320]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	494d      	ldr	r1, [pc, #308]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d044      	beq.n	800b36c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d107      	bne.n	800b2fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2ea:	4b47      	ldr	r3, [pc, #284]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d119      	bne.n	800b32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e07f      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d003      	beq.n	800b30a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b306:	2b03      	cmp	r3, #3
 800b308:	d107      	bne.n	800b31a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b30a:	4b3f      	ldr	r3, [pc, #252]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d109      	bne.n	800b32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e06f      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b31a:	4b3b      	ldr	r3, [pc, #236]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e067      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b32a:	4b37      	ldr	r3, [pc, #220]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f023 0203 	bic.w	r2, r3, #3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	4934      	ldr	r1, [pc, #208]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b338:	4313      	orrs	r3, r2
 800b33a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b33c:	f7fe fd58 	bl	8009df0 <HAL_GetTick>
 800b340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b342:	e00a      	b.n	800b35a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b344:	f7fe fd54 	bl	8009df0 <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b352:	4293      	cmp	r3, r2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e04f      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b35a:	4b2b      	ldr	r3, [pc, #172]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f003 020c 	and.w	r2, r3, #12
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	429a      	cmp	r2, r3
 800b36a:	d1eb      	bne.n	800b344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b36c:	4b25      	ldr	r3, [pc, #148]	; (800b404 <HAL_RCC_ClockConfig+0x1b8>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 030f 	and.w	r3, r3, #15
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	429a      	cmp	r2, r3
 800b378:	d20c      	bcs.n	800b394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b37a:	4b22      	ldr	r3, [pc, #136]	; (800b404 <HAL_RCC_ClockConfig+0x1b8>)
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b382:	4b20      	ldr	r3, [pc, #128]	; (800b404 <HAL_RCC_ClockConfig+0x1b8>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 030f 	and.w	r3, r3, #15
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d001      	beq.n	800b394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e032      	b.n	800b3fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0304 	and.w	r3, r3, #4
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d008      	beq.n	800b3b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3a0:	4b19      	ldr	r3, [pc, #100]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	4916      	ldr	r1, [pc, #88]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0308 	and.w	r3, r3, #8
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d009      	beq.n	800b3d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3be:	4b12      	ldr	r3, [pc, #72]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	490e      	ldr	r1, [pc, #56]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b3d2:	f000 f821 	bl	800b418 <HAL_RCC_GetSysClockFreq>
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <HAL_RCC_ClockConfig+0x1bc>)
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	091b      	lsrs	r3, r3, #4
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <HAL_RCC_ClockConfig+0x1c0>)
 800b3e4:	5cd3      	ldrb	r3, [r2, r3]
 800b3e6:	fa21 f303 	lsr.w	r3, r1, r3
 800b3ea:	4a09      	ldr	r2, [pc, #36]	; (800b410 <HAL_RCC_ClockConfig+0x1c4>)
 800b3ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b3ee:	4b09      	ldr	r3, [pc, #36]	; (800b414 <HAL_RCC_ClockConfig+0x1c8>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fcb8 	bl	8009d68 <HAL_InitTick>

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	40023c00 	.word	0x40023c00
 800b408:	40023800 	.word	0x40023800
 800b40c:	0800e888 	.word	0x0800e888
 800b410:	20000008 	.word	0x20000008
 800b414:	2000000c 	.word	0x2000000c

0800b418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	607b      	str	r3, [r7, #4]
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
 800b426:	2300      	movs	r3, #0
 800b428:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b42e:	4b63      	ldr	r3, [pc, #396]	; (800b5bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	f003 030c 	and.w	r3, r3, #12
 800b436:	2b04      	cmp	r3, #4
 800b438:	d007      	beq.n	800b44a <HAL_RCC_GetSysClockFreq+0x32>
 800b43a:	2b08      	cmp	r3, #8
 800b43c:	d008      	beq.n	800b450 <HAL_RCC_GetSysClockFreq+0x38>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f040 80b4 	bne.w	800b5ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b444:	4b5e      	ldr	r3, [pc, #376]	; (800b5c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b446:	60bb      	str	r3, [r7, #8]
       break;
 800b448:	e0b3      	b.n	800b5b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b44a:	4b5e      	ldr	r3, [pc, #376]	; (800b5c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b44c:	60bb      	str	r3, [r7, #8]
      break;
 800b44e:	e0b0      	b.n	800b5b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b450:	4b5a      	ldr	r3, [pc, #360]	; (800b5bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b458:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b45a:	4b58      	ldr	r3, [pc, #352]	; (800b5bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d04a      	beq.n	800b4fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b466:	4b55      	ldr	r3, [pc, #340]	; (800b5bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	099b      	lsrs	r3, r3, #6
 800b46c:	f04f 0400 	mov.w	r4, #0
 800b470:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	ea03 0501 	and.w	r5, r3, r1
 800b47c:	ea04 0602 	and.w	r6, r4, r2
 800b480:	4629      	mov	r1, r5
 800b482:	4632      	mov	r2, r6
 800b484:	f04f 0300 	mov.w	r3, #0
 800b488:	f04f 0400 	mov.w	r4, #0
 800b48c:	0154      	lsls	r4, r2, #5
 800b48e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b492:	014b      	lsls	r3, r1, #5
 800b494:	4619      	mov	r1, r3
 800b496:	4622      	mov	r2, r4
 800b498:	1b49      	subs	r1, r1, r5
 800b49a:	eb62 0206 	sbc.w	r2, r2, r6
 800b49e:	f04f 0300 	mov.w	r3, #0
 800b4a2:	f04f 0400 	mov.w	r4, #0
 800b4a6:	0194      	lsls	r4, r2, #6
 800b4a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b4ac:	018b      	lsls	r3, r1, #6
 800b4ae:	1a5b      	subs	r3, r3, r1
 800b4b0:	eb64 0402 	sbc.w	r4, r4, r2
 800b4b4:	f04f 0100 	mov.w	r1, #0
 800b4b8:	f04f 0200 	mov.w	r2, #0
 800b4bc:	00e2      	lsls	r2, r4, #3
 800b4be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b4c2:	00d9      	lsls	r1, r3, #3
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4614      	mov	r4, r2
 800b4c8:	195b      	adds	r3, r3, r5
 800b4ca:	eb44 0406 	adc.w	r4, r4, r6
 800b4ce:	f04f 0100 	mov.w	r1, #0
 800b4d2:	f04f 0200 	mov.w	r2, #0
 800b4d6:	0262      	lsls	r2, r4, #9
 800b4d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b4dc:	0259      	lsls	r1, r3, #9
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f04f 0400 	mov.w	r4, #0
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	4623      	mov	r3, r4
 800b4f0:	f7f5 fa90 	bl	8000a14 <__aeabi_uldivmod>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	e049      	b.n	800b590 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4fc:	4b2f      	ldr	r3, [pc, #188]	; (800b5bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	099b      	lsrs	r3, r3, #6
 800b502:	f04f 0400 	mov.w	r4, #0
 800b506:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b50a:	f04f 0200 	mov.w	r2, #0
 800b50e:	ea03 0501 	and.w	r5, r3, r1
 800b512:	ea04 0602 	and.w	r6, r4, r2
 800b516:	4629      	mov	r1, r5
 800b518:	4632      	mov	r2, r6
 800b51a:	f04f 0300 	mov.w	r3, #0
 800b51e:	f04f 0400 	mov.w	r4, #0
 800b522:	0154      	lsls	r4, r2, #5
 800b524:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b528:	014b      	lsls	r3, r1, #5
 800b52a:	4619      	mov	r1, r3
 800b52c:	4622      	mov	r2, r4
 800b52e:	1b49      	subs	r1, r1, r5
 800b530:	eb62 0206 	sbc.w	r2, r2, r6
 800b534:	f04f 0300 	mov.w	r3, #0
 800b538:	f04f 0400 	mov.w	r4, #0
 800b53c:	0194      	lsls	r4, r2, #6
 800b53e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b542:	018b      	lsls	r3, r1, #6
 800b544:	1a5b      	subs	r3, r3, r1
 800b546:	eb64 0402 	sbc.w	r4, r4, r2
 800b54a:	f04f 0100 	mov.w	r1, #0
 800b54e:	f04f 0200 	mov.w	r2, #0
 800b552:	00e2      	lsls	r2, r4, #3
 800b554:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b558:	00d9      	lsls	r1, r3, #3
 800b55a:	460b      	mov	r3, r1
 800b55c:	4614      	mov	r4, r2
 800b55e:	195b      	adds	r3, r3, r5
 800b560:	eb44 0406 	adc.w	r4, r4, r6
 800b564:	f04f 0100 	mov.w	r1, #0
 800b568:	f04f 0200 	mov.w	r2, #0
 800b56c:	02a2      	lsls	r2, r4, #10
 800b56e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b572:	0299      	lsls	r1, r3, #10
 800b574:	460b      	mov	r3, r1
 800b576:	4614      	mov	r4, r2
 800b578:	4618      	mov	r0, r3
 800b57a:	4621      	mov	r1, r4
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f04f 0400 	mov.w	r4, #0
 800b582:	461a      	mov	r2, r3
 800b584:	4623      	mov	r3, r4
 800b586:	f7f5 fa45 	bl	8000a14 <__aeabi_uldivmod>
 800b58a:	4603      	mov	r3, r0
 800b58c:	460c      	mov	r4, r1
 800b58e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	0c1b      	lsrs	r3, r3, #16
 800b596:	f003 0303 	and.w	r3, r3, #3
 800b59a:	3301      	adds	r3, #1
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a8:	60bb      	str	r3, [r7, #8]
      break;
 800b5aa:	e002      	b.n	800b5b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b5ae:	60bb      	str	r3, [r7, #8]
      break;
 800b5b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5bc:	40023800 	.word	0x40023800
 800b5c0:	00f42400 	.word	0x00f42400
 800b5c4:	007a1200 	.word	0x007a1200

0800b5c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5cc:	4b03      	ldr	r3, [pc, #12]	; (800b5dc <HAL_RCC_GetHCLKFreq+0x14>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20000008 	.word	0x20000008

0800b5e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b5e4:	f7ff fff0 	bl	800b5c8 <HAL_RCC_GetHCLKFreq>
 800b5e8:	4601      	mov	r1, r0
 800b5ea:	4b05      	ldr	r3, [pc, #20]	; (800b600 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	0a9b      	lsrs	r3, r3, #10
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	4a03      	ldr	r2, [pc, #12]	; (800b604 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5f6:	5cd3      	ldrb	r3, [r2, r3]
 800b5f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	40023800 	.word	0x40023800
 800b604:	0800e898 	.word	0x0800e898

0800b608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b60c:	f7ff ffdc 	bl	800b5c8 <HAL_RCC_GetHCLKFreq>
 800b610:	4601      	mov	r1, r0
 800b612:	4b05      	ldr	r3, [pc, #20]	; (800b628 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	0b5b      	lsrs	r3, r3, #13
 800b618:	f003 0307 	and.w	r3, r3, #7
 800b61c:	4a03      	ldr	r2, [pc, #12]	; (800b62c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b61e:	5cd3      	ldrb	r3, [r2, r3]
 800b620:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b624:	4618      	mov	r0, r3
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40023800 	.word	0x40023800
 800b62c:	0800e898 	.word	0x0800e898

0800b630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e01d      	b.n	800b67e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7fd fb46 	bl	8008ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2202      	movs	r2, #2
 800b660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4619      	mov	r1, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	f000 fc18 	bl	800bea4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b686:	b480      	push	{r7}
 800b688:	b085      	sub	sp, #20
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f042 0201 	orr.w	r2, r2, #1
 800b69c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f003 0307 	and.w	r3, r3, #7
 800b6a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b06      	cmp	r3, #6
 800b6ae:	d007      	beq.n	800b6c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f042 0201 	orr.w	r2, r2, #1
 800b6be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e01d      	b.n	800b71c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d106      	bne.n	800b6fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f815 	bl	800b724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	3304      	adds	r3, #4
 800b70a:	4619      	mov	r1, r3
 800b70c:	4610      	mov	r0, r2
 800b70e:	f000 fbc9 	bl	800bea4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2201      	movs	r2, #1
 800b748:	6839      	ldr	r1, [r7, #0]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 fe94 	bl	800c478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a15      	ldr	r2, [pc, #84]	; (800b7ac <HAL_TIM_PWM_Start+0x74>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d004      	beq.n	800b764 <HAL_TIM_PWM_Start+0x2c>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a14      	ldr	r2, [pc, #80]	; (800b7b0 <HAL_TIM_PWM_Start+0x78>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d101      	bne.n	800b768 <HAL_TIM_PWM_Start+0x30>
 800b764:	2301      	movs	r3, #1
 800b766:	e000      	b.n	800b76a <HAL_TIM_PWM_Start+0x32>
 800b768:	2300      	movs	r3, #0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d007      	beq.n	800b77e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b77c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f003 0307 	and.w	r3, r3, #7
 800b788:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b06      	cmp	r3, #6
 800b78e:	d007      	beq.n	800b7a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f042 0201 	orr.w	r2, r2, #1
 800b79e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	40010000 	.word	0x40010000
 800b7b0:	40010400 	.word	0x40010400

0800b7b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e083      	b.n	800b8d0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7fd f9cd 	bl	8008b7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6812      	ldr	r2, [r2, #0]
 800b7f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7f8:	f023 0307 	bic.w	r3, r3, #7
 800b7fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	3304      	adds	r3, #4
 800b806:	4619      	mov	r1, r3
 800b808:	4610      	mov	r0, r2
 800b80a:	f000 fb4b 	bl	800bea4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	6a1b      	ldr	r3, [r3, #32]
 800b824:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b836:	f023 0303 	bic.w	r3, r3, #3
 800b83a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	021b      	lsls	r3, r3, #8
 800b846:	4313      	orrs	r3, r2
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b854:	f023 030c 	bic.w	r3, r3, #12
 800b858:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	021b      	lsls	r3, r3, #8
 800b870:	4313      	orrs	r3, r2
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4313      	orrs	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	011a      	lsls	r2, r3, #4
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	031b      	lsls	r3, r3, #12
 800b884:	4313      	orrs	r3, r2
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	4313      	orrs	r3, r2
 800b88a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b89a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <HAL_TIM_Encoder_Start+0x16>
 800b8e8:	2b04      	cmp	r3, #4
 800b8ea:	d008      	beq.n	800b8fe <HAL_TIM_Encoder_Start+0x26>
 800b8ec:	e00f      	b.n	800b90e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 fdbe 	bl	800c478 <TIM_CCxChannelCmd>
      break;
 800b8fc:	e016      	b.n	800b92c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2201      	movs	r2, #1
 800b904:	2104      	movs	r1, #4
 800b906:	4618      	mov	r0, r3
 800b908:	f000 fdb6 	bl	800c478 <TIM_CCxChannelCmd>
      break;
 800b90c:	e00e      	b.n	800b92c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2201      	movs	r2, #1
 800b914:	2100      	movs	r1, #0
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fdae 	bl	800c478 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2201      	movs	r2, #1
 800b922:	2104      	movs	r1, #4
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fda7 	bl	800c478 <TIM_CCxChannelCmd>
      break;
 800b92a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f042 0201 	orr.w	r2, r2, #1
 800b93a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f003 0302 	and.w	r3, r3, #2
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d122      	bne.n	800b9a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	f003 0302 	and.w	r3, r3, #2
 800b966:	2b02      	cmp	r3, #2
 800b968:	d11b      	bne.n	800b9a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f06f 0202 	mvn.w	r2, #2
 800b972:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	f003 0303 	and.w	r3, r3, #3
 800b984:	2b00      	cmp	r3, #0
 800b986:	d003      	beq.n	800b990 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fa6c 	bl	800be66 <HAL_TIM_IC_CaptureCallback>
 800b98e:	e005      	b.n	800b99c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fa5e 	bl	800be52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fa6f 	bl	800be7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d122      	bne.n	800b9f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	f003 0304 	and.w	r3, r3, #4
 800b9ba:	2b04      	cmp	r3, #4
 800b9bc:	d11b      	bne.n	800b9f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f06f 0204 	mvn.w	r2, #4
 800b9c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fa42 	bl	800be66 <HAL_TIM_IC_CaptureCallback>
 800b9e2:	e005      	b.n	800b9f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fa34 	bl	800be52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa45 	bl	800be7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	f003 0308 	and.w	r3, r3, #8
 800ba00:	2b08      	cmp	r3, #8
 800ba02:	d122      	bne.n	800ba4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	f003 0308 	and.w	r3, r3, #8
 800ba0e:	2b08      	cmp	r3, #8
 800ba10:	d11b      	bne.n	800ba4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f06f 0208 	mvn.w	r2, #8
 800ba1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	f003 0303 	and.w	r3, r3, #3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fa18 	bl	800be66 <HAL_TIM_IC_CaptureCallback>
 800ba36:	e005      	b.n	800ba44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fa0a 	bl	800be52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fa1b 	bl	800be7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b10      	cmp	r3, #16
 800ba56:	d122      	bne.n	800ba9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	f003 0310 	and.w	r3, r3, #16
 800ba62:	2b10      	cmp	r3, #16
 800ba64:	d11b      	bne.n	800ba9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f06f 0210 	mvn.w	r2, #16
 800ba6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2208      	movs	r2, #8
 800ba74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f9ee 	bl	800be66 <HAL_TIM_IC_CaptureCallback>
 800ba8a:	e005      	b.n	800ba98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f9e0 	bl	800be52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f9f1 	bl	800be7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d10e      	bne.n	800baca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d107      	bne.n	800baca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f06f 0201 	mvn.w	r2, #1
 800bac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7f9 fc99 	bl	80053fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad4:	2b80      	cmp	r3, #128	; 0x80
 800bad6:	d10e      	bne.n	800baf6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae2:	2b80      	cmp	r3, #128	; 0x80
 800bae4:	d107      	bne.n	800baf6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800baee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fd6d 	bl	800c5d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d10e      	bne.n	800bb22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb0e:	2b40      	cmp	r3, #64	; 0x40
 800bb10:	d107      	bne.n	800bb22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f9b6 	bl	800be8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	f003 0320 	and.w	r3, r3, #32
 800bb2c:	2b20      	cmp	r3, #32
 800bb2e:	d10e      	bne.n	800bb4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f003 0320 	and.w	r3, r3, #32
 800bb3a:	2b20      	cmp	r3, #32
 800bb3c:	d107      	bne.n	800bb4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f06f 0220 	mvn.w	r2, #32
 800bb46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 fd37 	bl	800c5bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb4e:	bf00      	nop
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d101      	bne.n	800bb72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e0b4      	b.n	800bcdc <HAL_TIM_PWM_ConfigChannel+0x184>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b0c      	cmp	r3, #12
 800bb86:	f200 809f 	bhi.w	800bcc8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bb8a:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbc5 	.word	0x0800bbc5
 800bb94:	0800bcc9 	.word	0x0800bcc9
 800bb98:	0800bcc9 	.word	0x0800bcc9
 800bb9c:	0800bcc9 	.word	0x0800bcc9
 800bba0:	0800bc05 	.word	0x0800bc05
 800bba4:	0800bcc9 	.word	0x0800bcc9
 800bba8:	0800bcc9 	.word	0x0800bcc9
 800bbac:	0800bcc9 	.word	0x0800bcc9
 800bbb0:	0800bc47 	.word	0x0800bc47
 800bbb4:	0800bcc9 	.word	0x0800bcc9
 800bbb8:	0800bcc9 	.word	0x0800bcc9
 800bbbc:	0800bcc9 	.word	0x0800bcc9
 800bbc0:	0800bc87 	.word	0x0800bc87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 fa0a 	bl	800bfe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	699a      	ldr	r2, [r3, #24]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f042 0208 	orr.w	r2, r2, #8
 800bbde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	699a      	ldr	r2, [r3, #24]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f022 0204 	bic.w	r2, r2, #4
 800bbee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6999      	ldr	r1, [r3, #24]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	691a      	ldr	r2, [r3, #16]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	619a      	str	r2, [r3, #24]
      break;
 800bc02:	e062      	b.n	800bcca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68b9      	ldr	r1, [r7, #8]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f000 fa5a 	bl	800c0c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	699a      	ldr	r2, [r3, #24]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	699a      	ldr	r2, [r3, #24]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6999      	ldr	r1, [r3, #24]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	021a      	lsls	r2, r3, #8
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	619a      	str	r2, [r3, #24]
      break;
 800bc44:	e041      	b.n	800bcca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68b9      	ldr	r1, [r7, #8]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 faaf 	bl	800c1b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	69da      	ldr	r2, [r3, #28]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f042 0208 	orr.w	r2, r2, #8
 800bc60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69da      	ldr	r2, [r3, #28]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f022 0204 	bic.w	r2, r2, #4
 800bc70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	69d9      	ldr	r1, [r3, #28]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	691a      	ldr	r2, [r3, #16]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	61da      	str	r2, [r3, #28]
      break;
 800bc84:	e021      	b.n	800bcca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 fb03 	bl	800c298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	69da      	ldr	r2, [r3, #28]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69da      	ldr	r2, [r3, #28]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	69d9      	ldr	r1, [r3, #28]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	021a      	lsls	r2, r3, #8
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	61da      	str	r2, [r3, #28]
      break;
 800bcc6:	e000      	b.n	800bcca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bcc8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d101      	bne.n	800bcfc <HAL_TIM_ConfigClockSource+0x18>
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	e0a6      	b.n	800be4a <HAL_TIM_ConfigClockSource+0x166>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b40      	cmp	r3, #64	; 0x40
 800bd32:	d067      	beq.n	800be04 <HAL_TIM_ConfigClockSource+0x120>
 800bd34:	2b40      	cmp	r3, #64	; 0x40
 800bd36:	d80b      	bhi.n	800bd50 <HAL_TIM_ConfigClockSource+0x6c>
 800bd38:	2b10      	cmp	r3, #16
 800bd3a:	d073      	beq.n	800be24 <HAL_TIM_ConfigClockSource+0x140>
 800bd3c:	2b10      	cmp	r3, #16
 800bd3e:	d802      	bhi.n	800bd46 <HAL_TIM_ConfigClockSource+0x62>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d06f      	beq.n	800be24 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bd44:	e078      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bd46:	2b20      	cmp	r3, #32
 800bd48:	d06c      	beq.n	800be24 <HAL_TIM_ConfigClockSource+0x140>
 800bd4a:	2b30      	cmp	r3, #48	; 0x30
 800bd4c:	d06a      	beq.n	800be24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bd4e:	e073      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bd50:	2b70      	cmp	r3, #112	; 0x70
 800bd52:	d00d      	beq.n	800bd70 <HAL_TIM_ConfigClockSource+0x8c>
 800bd54:	2b70      	cmp	r3, #112	; 0x70
 800bd56:	d804      	bhi.n	800bd62 <HAL_TIM_ConfigClockSource+0x7e>
 800bd58:	2b50      	cmp	r3, #80	; 0x50
 800bd5a:	d033      	beq.n	800bdc4 <HAL_TIM_ConfigClockSource+0xe0>
 800bd5c:	2b60      	cmp	r3, #96	; 0x60
 800bd5e:	d041      	beq.n	800bde4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bd60:	e06a      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bd62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd66:	d066      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x152>
 800bd68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd6c:	d017      	beq.n	800bd9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bd6e:	e063      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	6899      	ldr	r1, [r3, #8]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	f000 fb5a 	bl	800c438 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	609a      	str	r2, [r3, #8]
      break;
 800bd9c:	e04c      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	6899      	ldr	r1, [r3, #8]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	f000 fb43 	bl	800c438 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdc0:	609a      	str	r2, [r3, #8]
      break;
 800bdc2:	e039      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	6859      	ldr	r1, [r3, #4]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	f000 fab7 	bl	800c344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2150      	movs	r1, #80	; 0x50
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fb10 	bl	800c402 <TIM_ITRx_SetConfig>
      break;
 800bde2:	e029      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6818      	ldr	r0, [r3, #0]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	6859      	ldr	r1, [r3, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f000 fad6 	bl	800c3a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2160      	movs	r1, #96	; 0x60
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 fb00 	bl	800c402 <TIM_ITRx_SetConfig>
      break;
 800be02:	e019      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6818      	ldr	r0, [r3, #0]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	6859      	ldr	r1, [r3, #4]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	461a      	mov	r2, r3
 800be12:	f000 fa97 	bl	800c344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2140      	movs	r1, #64	; 0x40
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 faf0 	bl	800c402 <TIM_ITRx_SetConfig>
      break;
 800be22:	e009      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4619      	mov	r1, r3
 800be2e:	4610      	mov	r0, r2
 800be30:	f000 fae7 	bl	800c402 <TIM_ITRx_SetConfig>
      break;
 800be34:	e000      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800be36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be5a:	bf00      	nop
 800be5c:	370c      	adds	r7, #12
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be6e:	bf00      	nop
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be7a:	b480      	push	{r7}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be82:	bf00      	nop
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be8e:	b480      	push	{r7}
 800be90:	b083      	sub	sp, #12
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be96:	bf00      	nop
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
	...

0800bea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a40      	ldr	r2, [pc, #256]	; (800bfb8 <TIM_Base_SetConfig+0x114>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d013      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bec2:	d00f      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a3d      	ldr	r2, [pc, #244]	; (800bfbc <TIM_Base_SetConfig+0x118>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d00b      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a3c      	ldr	r2, [pc, #240]	; (800bfc0 <TIM_Base_SetConfig+0x11c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d007      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a3b      	ldr	r2, [pc, #236]	; (800bfc4 <TIM_Base_SetConfig+0x120>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d003      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a3a      	ldr	r2, [pc, #232]	; (800bfc8 <TIM_Base_SetConfig+0x124>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d108      	bne.n	800bef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a2f      	ldr	r2, [pc, #188]	; (800bfb8 <TIM_Base_SetConfig+0x114>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d02b      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf04:	d027      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a2c      	ldr	r2, [pc, #176]	; (800bfbc <TIM_Base_SetConfig+0x118>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d023      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a2b      	ldr	r2, [pc, #172]	; (800bfc0 <TIM_Base_SetConfig+0x11c>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d01f      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a2a      	ldr	r2, [pc, #168]	; (800bfc4 <TIM_Base_SetConfig+0x120>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d01b      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a29      	ldr	r2, [pc, #164]	; (800bfc8 <TIM_Base_SetConfig+0x124>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d017      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a28      	ldr	r2, [pc, #160]	; (800bfcc <TIM_Base_SetConfig+0x128>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d013      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a27      	ldr	r2, [pc, #156]	; (800bfd0 <TIM_Base_SetConfig+0x12c>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d00f      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a26      	ldr	r2, [pc, #152]	; (800bfd4 <TIM_Base_SetConfig+0x130>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d00b      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a25      	ldr	r2, [pc, #148]	; (800bfd8 <TIM_Base_SetConfig+0x134>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d007      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a24      	ldr	r2, [pc, #144]	; (800bfdc <TIM_Base_SetConfig+0x138>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d003      	beq.n	800bf56 <TIM_Base_SetConfig+0xb2>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a23      	ldr	r2, [pc, #140]	; (800bfe0 <TIM_Base_SetConfig+0x13c>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d108      	bne.n	800bf68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a0a      	ldr	r2, [pc, #40]	; (800bfb8 <TIM_Base_SetConfig+0x114>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d003      	beq.n	800bf9c <TIM_Base_SetConfig+0xf8>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a0c      	ldr	r2, [pc, #48]	; (800bfc8 <TIM_Base_SetConfig+0x124>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d103      	bne.n	800bfa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	615a      	str	r2, [r3, #20]
}
 800bfaa:	bf00      	nop
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	40010000 	.word	0x40010000
 800bfbc:	40000400 	.word	0x40000400
 800bfc0:	40000800 	.word	0x40000800
 800bfc4:	40000c00 	.word	0x40000c00
 800bfc8:	40010400 	.word	0x40010400
 800bfcc:	40014000 	.word	0x40014000
 800bfd0:	40014400 	.word	0x40014400
 800bfd4:	40014800 	.word	0x40014800
 800bfd8:	40001800 	.word	0x40001800
 800bfdc:	40001c00 	.word	0x40001c00
 800bfe0:	40002000 	.word	0x40002000

0800bfe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f023 0201 	bic.w	r2, r3, #1
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f023 0303 	bic.w	r3, r3, #3
 800c01a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f023 0302 	bic.w	r3, r3, #2
 800c02c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	4313      	orrs	r3, r2
 800c036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a20      	ldr	r2, [pc, #128]	; (800c0bc <TIM_OC1_SetConfig+0xd8>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d003      	beq.n	800c048 <TIM_OC1_SetConfig+0x64>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a1f      	ldr	r2, [pc, #124]	; (800c0c0 <TIM_OC1_SetConfig+0xdc>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d10c      	bne.n	800c062 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f023 0308 	bic.w	r3, r3, #8
 800c04e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	4313      	orrs	r3, r2
 800c058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f023 0304 	bic.w	r3, r3, #4
 800c060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <TIM_OC1_SetConfig+0xd8>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d003      	beq.n	800c072 <TIM_OC1_SetConfig+0x8e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a14      	ldr	r2, [pc, #80]	; (800c0c0 <TIM_OC1_SetConfig+0xdc>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d111      	bne.n	800c096 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	4313      	orrs	r3, r2
 800c08a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	4313      	orrs	r3, r2
 800c094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	685a      	ldr	r2, [r3, #4]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	621a      	str	r2, [r3, #32]
}
 800c0b0:	bf00      	nop
 800c0b2:	371c      	adds	r7, #28
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	40010000 	.word	0x40010000
 800c0c0:	40010400 	.word	0x40010400

0800c0c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b087      	sub	sp, #28
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	f023 0210 	bic.w	r2, r3, #16
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	4313      	orrs	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f023 0320 	bic.w	r3, r3, #32
 800c10e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	011b      	lsls	r3, r3, #4
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	4313      	orrs	r3, r2
 800c11a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a22      	ldr	r2, [pc, #136]	; (800c1a8 <TIM_OC2_SetConfig+0xe4>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d003      	beq.n	800c12c <TIM_OC2_SetConfig+0x68>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a21      	ldr	r2, [pc, #132]	; (800c1ac <TIM_OC2_SetConfig+0xe8>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d10d      	bne.n	800c148 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	011b      	lsls	r3, r3, #4
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a17      	ldr	r2, [pc, #92]	; (800c1a8 <TIM_OC2_SetConfig+0xe4>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d003      	beq.n	800c158 <TIM_OC2_SetConfig+0x94>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a16      	ldr	r2, [pc, #88]	; (800c1ac <TIM_OC2_SetConfig+0xe8>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d113      	bne.n	800c180 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c15e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	695b      	ldr	r3, [r3, #20]
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	4313      	orrs	r3, r2
 800c172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	693a      	ldr	r2, [r7, #16]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	621a      	str	r2, [r3, #32]
}
 800c19a:	bf00      	nop
 800c19c:	371c      	adds	r7, #28
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	40010000 	.word	0x40010000
 800c1ac:	40010400 	.word	0x40010400

0800c1b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f023 0303 	bic.w	r3, r3, #3
 800c1e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	021b      	lsls	r3, r3, #8
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	4313      	orrs	r3, r2
 800c204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a21      	ldr	r2, [pc, #132]	; (800c290 <TIM_OC3_SetConfig+0xe0>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d003      	beq.n	800c216 <TIM_OC3_SetConfig+0x66>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a20      	ldr	r2, [pc, #128]	; (800c294 <TIM_OC3_SetConfig+0xe4>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d10d      	bne.n	800c232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c21c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	021b      	lsls	r3, r3, #8
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	4313      	orrs	r3, r2
 800c228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a16      	ldr	r2, [pc, #88]	; (800c290 <TIM_OC3_SetConfig+0xe0>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d003      	beq.n	800c242 <TIM_OC3_SetConfig+0x92>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a15      	ldr	r2, [pc, #84]	; (800c294 <TIM_OC3_SetConfig+0xe4>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d113      	bne.n	800c26a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	011b      	lsls	r3, r3, #4
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	699b      	ldr	r3, [r3, #24]
 800c262:	011b      	lsls	r3, r3, #4
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	4313      	orrs	r3, r2
 800c268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	621a      	str	r2, [r3, #32]
}
 800c284:	bf00      	nop
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	40010000 	.word	0x40010000
 800c294:	40010400 	.word	0x40010400

0800c298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	69db      	ldr	r3, [r3, #28]
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	021b      	lsls	r3, r3, #8
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	031b      	lsls	r3, r3, #12
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a12      	ldr	r2, [pc, #72]	; (800c33c <TIM_OC4_SetConfig+0xa4>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d003      	beq.n	800c300 <TIM_OC4_SetConfig+0x68>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a11      	ldr	r2, [pc, #68]	; (800c340 <TIM_OC4_SetConfig+0xa8>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d109      	bne.n	800c314 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	695b      	ldr	r3, [r3, #20]
 800c30c:	019b      	lsls	r3, r3, #6
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	4313      	orrs	r3, r2
 800c312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	685a      	ldr	r2, [r3, #4]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	693a      	ldr	r2, [r7, #16]
 800c32c:	621a      	str	r2, [r3, #32]
}
 800c32e:	bf00      	nop
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	40010000 	.word	0x40010000
 800c340:	40010400 	.word	0x40010400

0800c344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c344:	b480      	push	{r7}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6a1b      	ldr	r3, [r3, #32]
 800c354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	f023 0201 	bic.w	r2, r3, #1
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	4313      	orrs	r3, r2
 800c378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f023 030a 	bic.w	r3, r3, #10
 800c380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	4313      	orrs	r3, r2
 800c388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	621a      	str	r2, [r3, #32]
}
 800c396:	bf00      	nop
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b087      	sub	sp, #28
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	60f8      	str	r0, [r7, #12]
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	f023 0210 	bic.w	r2, r3, #16
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6a1b      	ldr	r3, [r3, #32]
 800c3c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	031b      	lsls	r3, r3, #12
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	621a      	str	r2, [r3, #32]
}
 800c3f6:	bf00      	nop
 800c3f8:	371c      	adds	r7, #28
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c402:	b480      	push	{r7}
 800c404:	b085      	sub	sp, #20
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	4313      	orrs	r3, r2
 800c420:	f043 0307 	orr.w	r3, r3, #7
 800c424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	609a      	str	r2, [r3, #8]
}
 800c42c:	bf00      	nop
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
 800c444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	021a      	lsls	r2, r3, #8
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	431a      	orrs	r2, r3
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	4313      	orrs	r3, r2
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	4313      	orrs	r3, r2
 800c464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	609a      	str	r2, [r3, #8]
}
 800c46c:	bf00      	nop
 800c46e:	371c      	adds	r7, #28
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f003 031f 	and.w	r3, r3, #31
 800c48a:	2201      	movs	r2, #1
 800c48c:	fa02 f303 	lsl.w	r3, r2, r3
 800c490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6a1a      	ldr	r2, [r3, #32]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	43db      	mvns	r3, r3
 800c49a:	401a      	ands	r2, r3
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6a1a      	ldr	r2, [r3, #32]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f003 031f 	and.w	r3, r3, #31
 800c4aa:	6879      	ldr	r1, [r7, #4]
 800c4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b0:	431a      	orrs	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	621a      	str	r2, [r3, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	371c      	adds	r7, #28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d101      	bne.n	800c4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4d8:	2302      	movs	r3, #2
 800c4da:	e05a      	b.n	800c592 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a21      	ldr	r2, [pc, #132]	; (800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d022      	beq.n	800c566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c528:	d01d      	beq.n	800c566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a1d      	ldr	r2, [pc, #116]	; (800c5a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d018      	beq.n	800c566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a1b      	ldr	r2, [pc, #108]	; (800c5a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d013      	beq.n	800c566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a1a      	ldr	r2, [pc, #104]	; (800c5ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d00e      	beq.n	800c566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a18      	ldr	r2, [pc, #96]	; (800c5b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d009      	beq.n	800c566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a17      	ldr	r2, [pc, #92]	; (800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d004      	beq.n	800c566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a15      	ldr	r2, [pc, #84]	; (800c5b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d10c      	bne.n	800c580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c56c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	4313      	orrs	r3, r2
 800c576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	40010000 	.word	0x40010000
 800c5a4:	40000400 	.word	0x40000400
 800c5a8:	40000800 	.word	0x40000800
 800c5ac:	40000c00 	.word	0x40000c00
 800c5b0:	40010400 	.word	0x40010400
 800c5b4:	40014000 	.word	0x40014000
 800c5b8:	40001800 	.word	0x40001800

0800c5bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5c4:	bf00      	nop
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e03f      	b.n	800c676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7fc fbe4 	bl	8008dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2224      	movs	r2, #36	; 0x24
 800c614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fc2d 	bl	800ce88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	691a      	ldr	r2, [r3, #16]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c63c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	695a      	ldr	r2, [r3, #20]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c64c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68da      	ldr	r2, [r3, #12]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c65c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2220      	movs	r2, #32
 800c668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2220      	movs	r2, #32
 800c670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	4613      	mov	r3, r2
 800c68c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c694:	b2db      	uxtb	r3, r3
 800c696:	2b20      	cmp	r3, #32
 800c698:	d153      	bne.n	800c742 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <HAL_UART_Transmit_DMA+0x26>
 800c6a0:	88fb      	ldrh	r3, [r7, #6]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e04c      	b.n	800c744 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d101      	bne.n	800c6b8 <HAL_UART_Transmit_DMA+0x38>
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	e045      	b.n	800c744 <HAL_UART_Transmit_DMA+0xc4>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	88fa      	ldrh	r2, [r7, #6]
 800c6ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	88fa      	ldrh	r2, [r7, #6]
 800c6d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2221      	movs	r2, #33	; 0x21
 800c6dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	4a19      	ldr	r2, [pc, #100]	; (800c74c <HAL_UART_Transmit_DMA+0xcc>)
 800c6e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ec:	4a18      	ldr	r2, [pc, #96]	; (800c750 <HAL_UART_Transmit_DMA+0xd0>)
 800c6ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f4:	4a17      	ldr	r2, [pc, #92]	; (800c754 <HAL_UART_Transmit_DMA+0xd4>)
 800c6f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c700:	f107 0308 	add.w	r3, r7, #8
 800c704:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	6819      	ldr	r1, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3304      	adds	r3, #4
 800c714:	461a      	mov	r2, r3
 800c716:	88fb      	ldrh	r3, [r7, #6]
 800c718:	f7fd fd36 	bl	800a188 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c724:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	695a      	ldr	r2, [r3, #20]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c73c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c73e:	2300      	movs	r3, #0
 800c740:	e000      	b.n	800c744 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800c742:	2302      	movs	r3, #2
  }
}
 800c744:	4618      	mov	r0, r3
 800c746:	3718      	adds	r7, #24
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	0800ca95 	.word	0x0800ca95
 800c750:	0800cae7 	.word	0x0800cae7
 800c754:	0800cb87 	.word	0x0800cb87

0800c758 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	4613      	mov	r3, r2
 800c764:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b20      	cmp	r3, #32
 800c770:	d166      	bne.n	800c840 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <HAL_UART_Receive_DMA+0x26>
 800c778:	88fb      	ldrh	r3, [r7, #6]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	e05f      	b.n	800c842 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d101      	bne.n	800c790 <HAL_UART_Receive_DMA+0x38>
 800c78c:	2302      	movs	r3, #2
 800c78e:	e058      	b.n	800c842 <HAL_UART_Receive_DMA+0xea>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	88fa      	ldrh	r2, [r7, #6]
 800c7a2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2222      	movs	r2, #34	; 0x22
 800c7ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b6:	4a25      	ldr	r2, [pc, #148]	; (800c84c <HAL_UART_Receive_DMA+0xf4>)
 800c7b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7be:	4a24      	ldr	r2, [pc, #144]	; (800c850 <HAL_UART_Receive_DMA+0xf8>)
 800c7c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c6:	4a23      	ldr	r2, [pc, #140]	; (800c854 <HAL_UART_Receive_DMA+0xfc>)
 800c7c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800c7d2:	f107 0308 	add.w	r3, r7, #8
 800c7d6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	88fb      	ldrh	r3, [r7, #6]
 800c7ea:	f7fd fccd 	bl	800a188 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	613b      	str	r3, [r7, #16]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	613b      	str	r3, [r7, #16]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	613b      	str	r3, [r7, #16]
 800c802:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2200      	movs	r2, #0
 800c808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68da      	ldr	r2, [r3, #12]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c81a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	695a      	ldr	r2, [r3, #20]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f042 0201 	orr.w	r2, r2, #1
 800c82a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	695a      	ldr	r2, [r3, #20]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c83a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	e000      	b.n	800c842 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c840:	2302      	movs	r3, #2
  }
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	0800cb03 	.word	0x0800cb03
 800c850:	0800cb6b 	.word	0x0800cb6b
 800c854:	0800cb87 	.word	0x0800cb87

0800c858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	695b      	ldr	r3, [r3, #20]
 800c876:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c878:	2300      	movs	r3, #0
 800c87a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	f003 030f 	and.w	r3, r3, #15
 800c886:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10d      	bne.n	800c8aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	f003 0320 	and.w	r3, r3, #32
 800c894:	2b00      	cmp	r3, #0
 800c896:	d008      	beq.n	800c8aa <HAL_UART_IRQHandler+0x52>
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	f003 0320 	and.w	r3, r3, #32
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 fa6f 	bl	800cd86 <UART_Receive_IT>
      return;
 800c8a8:	e0d1      	b.n	800ca4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 80b0 	beq.w	800ca12 <HAL_UART_IRQHandler+0x1ba>
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d105      	bne.n	800c8c8 <HAL_UART_IRQHandler+0x70>
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 80a5 	beq.w	800ca12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <HAL_UART_IRQHandler+0x90>
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d005      	beq.n	800c8e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e0:	f043 0201 	orr.w	r2, r3, #1
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	f003 0304 	and.w	r3, r3, #4
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00a      	beq.n	800c908 <HAL_UART_IRQHandler+0xb0>
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d005      	beq.n	800c908 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c900:	f043 0202 	orr.w	r2, r3, #2
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	f003 0302 	and.w	r3, r3, #2
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00a      	beq.n	800c928 <HAL_UART_IRQHandler+0xd0>
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f003 0301 	and.w	r3, r3, #1
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d005      	beq.n	800c928 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c920:	f043 0204 	orr.w	r2, r3, #4
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	f003 0308 	and.w	r3, r3, #8
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00f      	beq.n	800c952 <HAL_UART_IRQHandler+0xfa>
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	f003 0320 	and.w	r3, r3, #32
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d104      	bne.n	800c946 <HAL_UART_IRQHandler+0xee>
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	d005      	beq.n	800c952 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94a:	f043 0208 	orr.w	r2, r3, #8
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c956:	2b00      	cmp	r3, #0
 800c958:	d078      	beq.n	800ca4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	f003 0320 	and.w	r3, r3, #32
 800c960:	2b00      	cmp	r3, #0
 800c962:	d007      	beq.n	800c974 <HAL_UART_IRQHandler+0x11c>
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	f003 0320 	and.w	r3, r3, #32
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fa09 	bl	800cd86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	695b      	ldr	r3, [r3, #20]
 800c97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97e:	2b40      	cmp	r3, #64	; 0x40
 800c980:	bf0c      	ite	eq
 800c982:	2301      	moveq	r3, #1
 800c984:	2300      	movne	r3, #0
 800c986:	b2db      	uxtb	r3, r3
 800c988:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98e:	f003 0308 	and.w	r3, r3, #8
 800c992:	2b00      	cmp	r3, #0
 800c994:	d102      	bne.n	800c99c <HAL_UART_IRQHandler+0x144>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d031      	beq.n	800ca00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f952 	bl	800cc46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ac:	2b40      	cmp	r3, #64	; 0x40
 800c9ae:	d123      	bne.n	800c9f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	695a      	ldr	r2, [r3, #20]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d013      	beq.n	800c9f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9cc:	4a21      	ldr	r2, [pc, #132]	; (800ca54 <HAL_UART_IRQHandler+0x1fc>)
 800c9ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fd fc2f 	bl	800a238 <HAL_DMA_Abort_IT>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d016      	beq.n	800ca0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ee:	e00e      	b.n	800ca0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f845 	bl	800ca80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9f6:	e00a      	b.n	800ca0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f841 	bl	800ca80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fe:	e006      	b.n	800ca0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f83d 	bl	800ca80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ca0c:	e01e      	b.n	800ca4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca0e:	bf00      	nop
    return;
 800ca10:	e01c      	b.n	800ca4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d008      	beq.n	800ca2e <HAL_UART_IRQHandler+0x1d6>
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f93f 	bl	800ccaa <UART_Transmit_IT>
    return;
 800ca2c:	e00f      	b.n	800ca4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00a      	beq.n	800ca4e <HAL_UART_IRQHandler+0x1f6>
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d005      	beq.n	800ca4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f987 	bl	800cd56 <UART_EndTransmit_IT>
    return;
 800ca48:	bf00      	nop
 800ca4a:	e000      	b.n	800ca4e <HAL_UART_IRQHandler+0x1f6>
    return;
 800ca4c:	bf00      	nop
  }
}
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	0800cc83 	.word	0x0800cc83

0800ca58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caac:	2b00      	cmp	r3, #0
 800caae:	d113      	bne.n	800cad8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	695a      	ldr	r2, [r3, #20]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cac4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cad4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cad6:	e002      	b.n	800cade <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7f8 fafb 	bl	80050d4 <HAL_UART_TxCpltCallback>
}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f7ff ffaf 	bl	800ca58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cafa:	bf00      	nop
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d11e      	bne.n	800cb5c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68da      	ldr	r2, [r3, #12]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb32:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	695a      	ldr	r2, [r3, #20]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0201 	bic.w	r2, r2, #1
 800cb42:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	695a      	ldr	r2, [r3, #20]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb52:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2220      	movs	r2, #32
 800cb58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f7f8 facb 	bl	80050f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb62:	bf00      	nop
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f7ff ff77 	bl	800ca6c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb7e:	bf00      	nop
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b084      	sub	sp, #16
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cba2:	2b80      	cmp	r3, #128	; 0x80
 800cba4:	bf0c      	ite	eq
 800cba6:	2301      	moveq	r3, #1
 800cba8:	2300      	movne	r3, #0
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b21      	cmp	r3, #33	; 0x21
 800cbb8:	d108      	bne.n	800cbcc <UART_DMAError+0x46>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d005      	beq.n	800cbcc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cbc6:	68b8      	ldr	r0, [r7, #8]
 800cbc8:	f000 f827 	bl	800cc1a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd6:	2b40      	cmp	r3, #64	; 0x40
 800cbd8:	bf0c      	ite	eq
 800cbda:	2301      	moveq	r3, #1
 800cbdc:	2300      	movne	r3, #0
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b22      	cmp	r3, #34	; 0x22
 800cbec:	d108      	bne.n	800cc00 <UART_DMAError+0x7a>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d005      	beq.n	800cc00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cbfa:	68b8      	ldr	r0, [r7, #8]
 800cbfc:	f000 f823 	bl	800cc46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc04:	f043 0210 	orr.w	r2, r3, #16
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc0c:	68b8      	ldr	r0, [r7, #8]
 800cc0e:	f7ff ff37 	bl	800ca80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc12:	bf00      	nop
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b083      	sub	sp, #12
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cc30:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2220      	movs	r2, #32
 800cc36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800cc3a:	bf00      	nop
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc46:	b480      	push	{r7}
 800cc48:	b083      	sub	sp, #12
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cc5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	695a      	ldr	r2, [r3, #20]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f022 0201 	bic.w	r2, r2, #1
 800cc6c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2220      	movs	r2, #32
 800cc72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800cc76:	bf00      	nop
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b084      	sub	sp, #16
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f7ff feef 	bl	800ca80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cca2:	bf00      	nop
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b085      	sub	sp, #20
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b21      	cmp	r3, #33	; 0x21
 800ccbc:	d144      	bne.n	800cd48 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccc6:	d11a      	bne.n	800ccfe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a1b      	ldr	r3, [r3, #32]
 800cccc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	881b      	ldrh	r3, [r3, #0]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccdc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d105      	bne.n	800ccf2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a1b      	ldr	r3, [r3, #32]
 800ccea:	1c9a      	adds	r2, r3, #2
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	621a      	str	r2, [r3, #32]
 800ccf0:	e00e      	b.n	800cd10 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	621a      	str	r2, [r3, #32]
 800ccfc:	e008      	b.n	800cd10 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	1c59      	adds	r1, r3, #1
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	6211      	str	r1, [r2, #32]
 800cd08:	781a      	ldrb	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10f      	bne.n	800cd44 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68da      	ldr	r2, [r3, #12]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	e000      	b.n	800cd4a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cd48:	2302      	movs	r3, #2
  }
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr

0800cd56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68da      	ldr	r2, [r3, #12]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2220      	movs	r2, #32
 800cd72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7f8 f9ac 	bl	80050d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b22      	cmp	r3, #34	; 0x22
 800cd98:	d171      	bne.n	800ce7e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cda2:	d123      	bne.n	800cdec <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10e      	bne.n	800cdd0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc8:	1c9a      	adds	r2, r3, #2
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	629a      	str	r2, [r3, #40]	; 0x28
 800cdce:	e029      	b.n	800ce24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	629a      	str	r2, [r3, #40]	; 0x28
 800cdea:	e01b      	b.n	800ce24 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10a      	bne.n	800ce0a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6858      	ldr	r0, [r3, #4]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfe:	1c59      	adds	r1, r3, #1
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	6291      	str	r1, [r2, #40]	; 0x28
 800ce04:	b2c2      	uxtb	r2, r0
 800ce06:	701a      	strb	r2, [r3, #0]
 800ce08:	e00c      	b.n	800ce24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce16:	1c58      	adds	r0, r3, #1
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	6288      	str	r0, [r1, #40]	; 0x28
 800ce1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce20:	b2d2      	uxtb	r2, r2
 800ce22:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	4619      	mov	r1, r3
 800ce32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d120      	bne.n	800ce7a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68da      	ldr	r2, [r3, #12]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f022 0220 	bic.w	r2, r2, #32
 800ce46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	695a      	ldr	r2, [r3, #20]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0201 	bic.w	r2, r2, #1
 800ce66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2220      	movs	r2, #32
 800ce6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7f8 f941 	bl	80050f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	e002      	b.n	800ce80 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	e000      	b.n	800ce80 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ce7e:	2302      	movs	r3, #2
  }
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8c:	b085      	sub	sp, #20
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68da      	ldr	r2, [r3, #12]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	430a      	orrs	r2, r1
 800cea6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	689a      	ldr	r2, [r3, #8]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	431a      	orrs	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ceca:	f023 030c 	bic.w	r3, r3, #12
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	6812      	ldr	r2, [r2, #0]
 800ced2:	68f9      	ldr	r1, [r7, #12]
 800ced4:	430b      	orrs	r3, r1
 800ced6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	699a      	ldr	r2, [r3, #24]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	430a      	orrs	r2, r1
 800ceec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	69db      	ldr	r3, [r3, #28]
 800cef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cef6:	f040 818b 	bne.w	800d210 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4ac1      	ldr	r2, [pc, #772]	; (800d204 <UART_SetConfig+0x37c>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d005      	beq.n	800cf10 <UART_SetConfig+0x88>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4abf      	ldr	r2, [pc, #764]	; (800d208 <UART_SetConfig+0x380>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	f040 80bd 	bne.w	800d08a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cf10:	f7fe fb7a 	bl	800b608 <HAL_RCC_GetPCLK2Freq>
 800cf14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	461d      	mov	r5, r3
 800cf1a:	f04f 0600 	mov.w	r6, #0
 800cf1e:	46a8      	mov	r8, r5
 800cf20:	46b1      	mov	r9, r6
 800cf22:	eb18 0308 	adds.w	r3, r8, r8
 800cf26:	eb49 0409 	adc.w	r4, r9, r9
 800cf2a:	4698      	mov	r8, r3
 800cf2c:	46a1      	mov	r9, r4
 800cf2e:	eb18 0805 	adds.w	r8, r8, r5
 800cf32:	eb49 0906 	adc.w	r9, r9, r6
 800cf36:	f04f 0100 	mov.w	r1, #0
 800cf3a:	f04f 0200 	mov.w	r2, #0
 800cf3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cf42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cf46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cf4a:	4688      	mov	r8, r1
 800cf4c:	4691      	mov	r9, r2
 800cf4e:	eb18 0005 	adds.w	r0, r8, r5
 800cf52:	eb49 0106 	adc.w	r1, r9, r6
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	461d      	mov	r5, r3
 800cf5c:	f04f 0600 	mov.w	r6, #0
 800cf60:	196b      	adds	r3, r5, r5
 800cf62:	eb46 0406 	adc.w	r4, r6, r6
 800cf66:	461a      	mov	r2, r3
 800cf68:	4623      	mov	r3, r4
 800cf6a:	f7f3 fd53 	bl	8000a14 <__aeabi_uldivmod>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	460c      	mov	r4, r1
 800cf72:	461a      	mov	r2, r3
 800cf74:	4ba5      	ldr	r3, [pc, #660]	; (800d20c <UART_SetConfig+0x384>)
 800cf76:	fba3 2302 	umull	r2, r3, r3, r2
 800cf7a:	095b      	lsrs	r3, r3, #5
 800cf7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	461d      	mov	r5, r3
 800cf84:	f04f 0600 	mov.w	r6, #0
 800cf88:	46a9      	mov	r9, r5
 800cf8a:	46b2      	mov	sl, r6
 800cf8c:	eb19 0309 	adds.w	r3, r9, r9
 800cf90:	eb4a 040a 	adc.w	r4, sl, sl
 800cf94:	4699      	mov	r9, r3
 800cf96:	46a2      	mov	sl, r4
 800cf98:	eb19 0905 	adds.w	r9, r9, r5
 800cf9c:	eb4a 0a06 	adc.w	sl, sl, r6
 800cfa0:	f04f 0100 	mov.w	r1, #0
 800cfa4:	f04f 0200 	mov.w	r2, #0
 800cfa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cfb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cfb4:	4689      	mov	r9, r1
 800cfb6:	4692      	mov	sl, r2
 800cfb8:	eb19 0005 	adds.w	r0, r9, r5
 800cfbc:	eb4a 0106 	adc.w	r1, sl, r6
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	461d      	mov	r5, r3
 800cfc6:	f04f 0600 	mov.w	r6, #0
 800cfca:	196b      	adds	r3, r5, r5
 800cfcc:	eb46 0406 	adc.w	r4, r6, r6
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	f7f3 fd1e 	bl	8000a14 <__aeabi_uldivmod>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	460c      	mov	r4, r1
 800cfdc:	461a      	mov	r2, r3
 800cfde:	4b8b      	ldr	r3, [pc, #556]	; (800d20c <UART_SetConfig+0x384>)
 800cfe0:	fba3 1302 	umull	r1, r3, r3, r2
 800cfe4:	095b      	lsrs	r3, r3, #5
 800cfe6:	2164      	movs	r1, #100	; 0x64
 800cfe8:	fb01 f303 	mul.w	r3, r1, r3
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	00db      	lsls	r3, r3, #3
 800cff0:	3332      	adds	r3, #50	; 0x32
 800cff2:	4a86      	ldr	r2, [pc, #536]	; (800d20c <UART_SetConfig+0x384>)
 800cff4:	fba2 2303 	umull	r2, r3, r2, r3
 800cff8:	095b      	lsrs	r3, r3, #5
 800cffa:	005b      	lsls	r3, r3, #1
 800cffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d000:	4498      	add	r8, r3
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	461d      	mov	r5, r3
 800d006:	f04f 0600 	mov.w	r6, #0
 800d00a:	46a9      	mov	r9, r5
 800d00c:	46b2      	mov	sl, r6
 800d00e:	eb19 0309 	adds.w	r3, r9, r9
 800d012:	eb4a 040a 	adc.w	r4, sl, sl
 800d016:	4699      	mov	r9, r3
 800d018:	46a2      	mov	sl, r4
 800d01a:	eb19 0905 	adds.w	r9, r9, r5
 800d01e:	eb4a 0a06 	adc.w	sl, sl, r6
 800d022:	f04f 0100 	mov.w	r1, #0
 800d026:	f04f 0200 	mov.w	r2, #0
 800d02a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d02e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d036:	4689      	mov	r9, r1
 800d038:	4692      	mov	sl, r2
 800d03a:	eb19 0005 	adds.w	r0, r9, r5
 800d03e:	eb4a 0106 	adc.w	r1, sl, r6
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	461d      	mov	r5, r3
 800d048:	f04f 0600 	mov.w	r6, #0
 800d04c:	196b      	adds	r3, r5, r5
 800d04e:	eb46 0406 	adc.w	r4, r6, r6
 800d052:	461a      	mov	r2, r3
 800d054:	4623      	mov	r3, r4
 800d056:	f7f3 fcdd 	bl	8000a14 <__aeabi_uldivmod>
 800d05a:	4603      	mov	r3, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	461a      	mov	r2, r3
 800d060:	4b6a      	ldr	r3, [pc, #424]	; (800d20c <UART_SetConfig+0x384>)
 800d062:	fba3 1302 	umull	r1, r3, r3, r2
 800d066:	095b      	lsrs	r3, r3, #5
 800d068:	2164      	movs	r1, #100	; 0x64
 800d06a:	fb01 f303 	mul.w	r3, r1, r3
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	00db      	lsls	r3, r3, #3
 800d072:	3332      	adds	r3, #50	; 0x32
 800d074:	4a65      	ldr	r2, [pc, #404]	; (800d20c <UART_SetConfig+0x384>)
 800d076:	fba2 2303 	umull	r2, r3, r2, r3
 800d07a:	095b      	lsrs	r3, r3, #5
 800d07c:	f003 0207 	and.w	r2, r3, #7
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4442      	add	r2, r8
 800d086:	609a      	str	r2, [r3, #8]
 800d088:	e26f      	b.n	800d56a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d08a:	f7fe faa9 	bl	800b5e0 <HAL_RCC_GetPCLK1Freq>
 800d08e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	461d      	mov	r5, r3
 800d094:	f04f 0600 	mov.w	r6, #0
 800d098:	46a8      	mov	r8, r5
 800d09a:	46b1      	mov	r9, r6
 800d09c:	eb18 0308 	adds.w	r3, r8, r8
 800d0a0:	eb49 0409 	adc.w	r4, r9, r9
 800d0a4:	4698      	mov	r8, r3
 800d0a6:	46a1      	mov	r9, r4
 800d0a8:	eb18 0805 	adds.w	r8, r8, r5
 800d0ac:	eb49 0906 	adc.w	r9, r9, r6
 800d0b0:	f04f 0100 	mov.w	r1, #0
 800d0b4:	f04f 0200 	mov.w	r2, #0
 800d0b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d0bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d0c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d0c4:	4688      	mov	r8, r1
 800d0c6:	4691      	mov	r9, r2
 800d0c8:	eb18 0005 	adds.w	r0, r8, r5
 800d0cc:	eb49 0106 	adc.w	r1, r9, r6
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	461d      	mov	r5, r3
 800d0d6:	f04f 0600 	mov.w	r6, #0
 800d0da:	196b      	adds	r3, r5, r5
 800d0dc:	eb46 0406 	adc.w	r4, r6, r6
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	4623      	mov	r3, r4
 800d0e4:	f7f3 fc96 	bl	8000a14 <__aeabi_uldivmod>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	4b47      	ldr	r3, [pc, #284]	; (800d20c <UART_SetConfig+0x384>)
 800d0f0:	fba3 2302 	umull	r2, r3, r3, r2
 800d0f4:	095b      	lsrs	r3, r3, #5
 800d0f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	461d      	mov	r5, r3
 800d0fe:	f04f 0600 	mov.w	r6, #0
 800d102:	46a9      	mov	r9, r5
 800d104:	46b2      	mov	sl, r6
 800d106:	eb19 0309 	adds.w	r3, r9, r9
 800d10a:	eb4a 040a 	adc.w	r4, sl, sl
 800d10e:	4699      	mov	r9, r3
 800d110:	46a2      	mov	sl, r4
 800d112:	eb19 0905 	adds.w	r9, r9, r5
 800d116:	eb4a 0a06 	adc.w	sl, sl, r6
 800d11a:	f04f 0100 	mov.w	r1, #0
 800d11e:	f04f 0200 	mov.w	r2, #0
 800d122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d12a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d12e:	4689      	mov	r9, r1
 800d130:	4692      	mov	sl, r2
 800d132:	eb19 0005 	adds.w	r0, r9, r5
 800d136:	eb4a 0106 	adc.w	r1, sl, r6
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	461d      	mov	r5, r3
 800d140:	f04f 0600 	mov.w	r6, #0
 800d144:	196b      	adds	r3, r5, r5
 800d146:	eb46 0406 	adc.w	r4, r6, r6
 800d14a:	461a      	mov	r2, r3
 800d14c:	4623      	mov	r3, r4
 800d14e:	f7f3 fc61 	bl	8000a14 <__aeabi_uldivmod>
 800d152:	4603      	mov	r3, r0
 800d154:	460c      	mov	r4, r1
 800d156:	461a      	mov	r2, r3
 800d158:	4b2c      	ldr	r3, [pc, #176]	; (800d20c <UART_SetConfig+0x384>)
 800d15a:	fba3 1302 	umull	r1, r3, r3, r2
 800d15e:	095b      	lsrs	r3, r3, #5
 800d160:	2164      	movs	r1, #100	; 0x64
 800d162:	fb01 f303 	mul.w	r3, r1, r3
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	3332      	adds	r3, #50	; 0x32
 800d16c:	4a27      	ldr	r2, [pc, #156]	; (800d20c <UART_SetConfig+0x384>)
 800d16e:	fba2 2303 	umull	r2, r3, r2, r3
 800d172:	095b      	lsrs	r3, r3, #5
 800d174:	005b      	lsls	r3, r3, #1
 800d176:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d17a:	4498      	add	r8, r3
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	461d      	mov	r5, r3
 800d180:	f04f 0600 	mov.w	r6, #0
 800d184:	46a9      	mov	r9, r5
 800d186:	46b2      	mov	sl, r6
 800d188:	eb19 0309 	adds.w	r3, r9, r9
 800d18c:	eb4a 040a 	adc.w	r4, sl, sl
 800d190:	4699      	mov	r9, r3
 800d192:	46a2      	mov	sl, r4
 800d194:	eb19 0905 	adds.w	r9, r9, r5
 800d198:	eb4a 0a06 	adc.w	sl, sl, r6
 800d19c:	f04f 0100 	mov.w	r1, #0
 800d1a0:	f04f 0200 	mov.w	r2, #0
 800d1a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d1a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d1ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d1b0:	4689      	mov	r9, r1
 800d1b2:	4692      	mov	sl, r2
 800d1b4:	eb19 0005 	adds.w	r0, r9, r5
 800d1b8:	eb4a 0106 	adc.w	r1, sl, r6
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	461d      	mov	r5, r3
 800d1c2:	f04f 0600 	mov.w	r6, #0
 800d1c6:	196b      	adds	r3, r5, r5
 800d1c8:	eb46 0406 	adc.w	r4, r6, r6
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	4623      	mov	r3, r4
 800d1d0:	f7f3 fc20 	bl	8000a14 <__aeabi_uldivmod>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4b0c      	ldr	r3, [pc, #48]	; (800d20c <UART_SetConfig+0x384>)
 800d1dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d1e0:	095b      	lsrs	r3, r3, #5
 800d1e2:	2164      	movs	r1, #100	; 0x64
 800d1e4:	fb01 f303 	mul.w	r3, r1, r3
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	00db      	lsls	r3, r3, #3
 800d1ec:	3332      	adds	r3, #50	; 0x32
 800d1ee:	4a07      	ldr	r2, [pc, #28]	; (800d20c <UART_SetConfig+0x384>)
 800d1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f4:	095b      	lsrs	r3, r3, #5
 800d1f6:	f003 0207 	and.w	r2, r3, #7
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4442      	add	r2, r8
 800d200:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d202:	e1b2      	b.n	800d56a <UART_SetConfig+0x6e2>
 800d204:	40011000 	.word	0x40011000
 800d208:	40011400 	.word	0x40011400
 800d20c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4ad7      	ldr	r2, [pc, #860]	; (800d574 <UART_SetConfig+0x6ec>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d005      	beq.n	800d226 <UART_SetConfig+0x39e>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4ad6      	ldr	r2, [pc, #856]	; (800d578 <UART_SetConfig+0x6f0>)
 800d220:	4293      	cmp	r3, r2
 800d222:	f040 80d1 	bne.w	800d3c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d226:	f7fe f9ef 	bl	800b608 <HAL_RCC_GetPCLK2Freq>
 800d22a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	469a      	mov	sl, r3
 800d230:	f04f 0b00 	mov.w	fp, #0
 800d234:	46d0      	mov	r8, sl
 800d236:	46d9      	mov	r9, fp
 800d238:	eb18 0308 	adds.w	r3, r8, r8
 800d23c:	eb49 0409 	adc.w	r4, r9, r9
 800d240:	4698      	mov	r8, r3
 800d242:	46a1      	mov	r9, r4
 800d244:	eb18 080a 	adds.w	r8, r8, sl
 800d248:	eb49 090b 	adc.w	r9, r9, fp
 800d24c:	f04f 0100 	mov.w	r1, #0
 800d250:	f04f 0200 	mov.w	r2, #0
 800d254:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d258:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d25c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d260:	4688      	mov	r8, r1
 800d262:	4691      	mov	r9, r2
 800d264:	eb1a 0508 	adds.w	r5, sl, r8
 800d268:	eb4b 0609 	adc.w	r6, fp, r9
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4619      	mov	r1, r3
 800d272:	f04f 0200 	mov.w	r2, #0
 800d276:	f04f 0300 	mov.w	r3, #0
 800d27a:	f04f 0400 	mov.w	r4, #0
 800d27e:	0094      	lsls	r4, r2, #2
 800d280:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d284:	008b      	lsls	r3, r1, #2
 800d286:	461a      	mov	r2, r3
 800d288:	4623      	mov	r3, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	4631      	mov	r1, r6
 800d28e:	f7f3 fbc1 	bl	8000a14 <__aeabi_uldivmod>
 800d292:	4603      	mov	r3, r0
 800d294:	460c      	mov	r4, r1
 800d296:	461a      	mov	r2, r3
 800d298:	4bb8      	ldr	r3, [pc, #736]	; (800d57c <UART_SetConfig+0x6f4>)
 800d29a:	fba3 2302 	umull	r2, r3, r3, r2
 800d29e:	095b      	lsrs	r3, r3, #5
 800d2a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	469b      	mov	fp, r3
 800d2a8:	f04f 0c00 	mov.w	ip, #0
 800d2ac:	46d9      	mov	r9, fp
 800d2ae:	46e2      	mov	sl, ip
 800d2b0:	eb19 0309 	adds.w	r3, r9, r9
 800d2b4:	eb4a 040a 	adc.w	r4, sl, sl
 800d2b8:	4699      	mov	r9, r3
 800d2ba:	46a2      	mov	sl, r4
 800d2bc:	eb19 090b 	adds.w	r9, r9, fp
 800d2c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d2c4:	f04f 0100 	mov.w	r1, #0
 800d2c8:	f04f 0200 	mov.w	r2, #0
 800d2cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2d8:	4689      	mov	r9, r1
 800d2da:	4692      	mov	sl, r2
 800d2dc:	eb1b 0509 	adds.w	r5, fp, r9
 800d2e0:	eb4c 060a 	adc.w	r6, ip, sl
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	f04f 0200 	mov.w	r2, #0
 800d2ee:	f04f 0300 	mov.w	r3, #0
 800d2f2:	f04f 0400 	mov.w	r4, #0
 800d2f6:	0094      	lsls	r4, r2, #2
 800d2f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d2fc:	008b      	lsls	r3, r1, #2
 800d2fe:	461a      	mov	r2, r3
 800d300:	4623      	mov	r3, r4
 800d302:	4628      	mov	r0, r5
 800d304:	4631      	mov	r1, r6
 800d306:	f7f3 fb85 	bl	8000a14 <__aeabi_uldivmod>
 800d30a:	4603      	mov	r3, r0
 800d30c:	460c      	mov	r4, r1
 800d30e:	461a      	mov	r2, r3
 800d310:	4b9a      	ldr	r3, [pc, #616]	; (800d57c <UART_SetConfig+0x6f4>)
 800d312:	fba3 1302 	umull	r1, r3, r3, r2
 800d316:	095b      	lsrs	r3, r3, #5
 800d318:	2164      	movs	r1, #100	; 0x64
 800d31a:	fb01 f303 	mul.w	r3, r1, r3
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	011b      	lsls	r3, r3, #4
 800d322:	3332      	adds	r3, #50	; 0x32
 800d324:	4a95      	ldr	r2, [pc, #596]	; (800d57c <UART_SetConfig+0x6f4>)
 800d326:	fba2 2303 	umull	r2, r3, r2, r3
 800d32a:	095b      	lsrs	r3, r3, #5
 800d32c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d330:	4498      	add	r8, r3
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	469b      	mov	fp, r3
 800d336:	f04f 0c00 	mov.w	ip, #0
 800d33a:	46d9      	mov	r9, fp
 800d33c:	46e2      	mov	sl, ip
 800d33e:	eb19 0309 	adds.w	r3, r9, r9
 800d342:	eb4a 040a 	adc.w	r4, sl, sl
 800d346:	4699      	mov	r9, r3
 800d348:	46a2      	mov	sl, r4
 800d34a:	eb19 090b 	adds.w	r9, r9, fp
 800d34e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d352:	f04f 0100 	mov.w	r1, #0
 800d356:	f04f 0200 	mov.w	r2, #0
 800d35a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d35e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d362:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d366:	4689      	mov	r9, r1
 800d368:	4692      	mov	sl, r2
 800d36a:	eb1b 0509 	adds.w	r5, fp, r9
 800d36e:	eb4c 060a 	adc.w	r6, ip, sl
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	4619      	mov	r1, r3
 800d378:	f04f 0200 	mov.w	r2, #0
 800d37c:	f04f 0300 	mov.w	r3, #0
 800d380:	f04f 0400 	mov.w	r4, #0
 800d384:	0094      	lsls	r4, r2, #2
 800d386:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d38a:	008b      	lsls	r3, r1, #2
 800d38c:	461a      	mov	r2, r3
 800d38e:	4623      	mov	r3, r4
 800d390:	4628      	mov	r0, r5
 800d392:	4631      	mov	r1, r6
 800d394:	f7f3 fb3e 	bl	8000a14 <__aeabi_uldivmod>
 800d398:	4603      	mov	r3, r0
 800d39a:	460c      	mov	r4, r1
 800d39c:	461a      	mov	r2, r3
 800d39e:	4b77      	ldr	r3, [pc, #476]	; (800d57c <UART_SetConfig+0x6f4>)
 800d3a0:	fba3 1302 	umull	r1, r3, r3, r2
 800d3a4:	095b      	lsrs	r3, r3, #5
 800d3a6:	2164      	movs	r1, #100	; 0x64
 800d3a8:	fb01 f303 	mul.w	r3, r1, r3
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	011b      	lsls	r3, r3, #4
 800d3b0:	3332      	adds	r3, #50	; 0x32
 800d3b2:	4a72      	ldr	r2, [pc, #456]	; (800d57c <UART_SetConfig+0x6f4>)
 800d3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b8:	095b      	lsrs	r3, r3, #5
 800d3ba:	f003 020f 	and.w	r2, r3, #15
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4442      	add	r2, r8
 800d3c4:	609a      	str	r2, [r3, #8]
 800d3c6:	e0d0      	b.n	800d56a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d3c8:	f7fe f90a 	bl	800b5e0 <HAL_RCC_GetPCLK1Freq>
 800d3cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	469a      	mov	sl, r3
 800d3d2:	f04f 0b00 	mov.w	fp, #0
 800d3d6:	46d0      	mov	r8, sl
 800d3d8:	46d9      	mov	r9, fp
 800d3da:	eb18 0308 	adds.w	r3, r8, r8
 800d3de:	eb49 0409 	adc.w	r4, r9, r9
 800d3e2:	4698      	mov	r8, r3
 800d3e4:	46a1      	mov	r9, r4
 800d3e6:	eb18 080a 	adds.w	r8, r8, sl
 800d3ea:	eb49 090b 	adc.w	r9, r9, fp
 800d3ee:	f04f 0100 	mov.w	r1, #0
 800d3f2:	f04f 0200 	mov.w	r2, #0
 800d3f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d3fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d3fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d402:	4688      	mov	r8, r1
 800d404:	4691      	mov	r9, r2
 800d406:	eb1a 0508 	adds.w	r5, sl, r8
 800d40a:	eb4b 0609 	adc.w	r6, fp, r9
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	4619      	mov	r1, r3
 800d414:	f04f 0200 	mov.w	r2, #0
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	f04f 0400 	mov.w	r4, #0
 800d420:	0094      	lsls	r4, r2, #2
 800d422:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d426:	008b      	lsls	r3, r1, #2
 800d428:	461a      	mov	r2, r3
 800d42a:	4623      	mov	r3, r4
 800d42c:	4628      	mov	r0, r5
 800d42e:	4631      	mov	r1, r6
 800d430:	f7f3 faf0 	bl	8000a14 <__aeabi_uldivmod>
 800d434:	4603      	mov	r3, r0
 800d436:	460c      	mov	r4, r1
 800d438:	461a      	mov	r2, r3
 800d43a:	4b50      	ldr	r3, [pc, #320]	; (800d57c <UART_SetConfig+0x6f4>)
 800d43c:	fba3 2302 	umull	r2, r3, r3, r2
 800d440:	095b      	lsrs	r3, r3, #5
 800d442:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	469b      	mov	fp, r3
 800d44a:	f04f 0c00 	mov.w	ip, #0
 800d44e:	46d9      	mov	r9, fp
 800d450:	46e2      	mov	sl, ip
 800d452:	eb19 0309 	adds.w	r3, r9, r9
 800d456:	eb4a 040a 	adc.w	r4, sl, sl
 800d45a:	4699      	mov	r9, r3
 800d45c:	46a2      	mov	sl, r4
 800d45e:	eb19 090b 	adds.w	r9, r9, fp
 800d462:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d466:	f04f 0100 	mov.w	r1, #0
 800d46a:	f04f 0200 	mov.w	r2, #0
 800d46e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d47a:	4689      	mov	r9, r1
 800d47c:	4692      	mov	sl, r2
 800d47e:	eb1b 0509 	adds.w	r5, fp, r9
 800d482:	eb4c 060a 	adc.w	r6, ip, sl
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	4619      	mov	r1, r3
 800d48c:	f04f 0200 	mov.w	r2, #0
 800d490:	f04f 0300 	mov.w	r3, #0
 800d494:	f04f 0400 	mov.w	r4, #0
 800d498:	0094      	lsls	r4, r2, #2
 800d49a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d49e:	008b      	lsls	r3, r1, #2
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	4623      	mov	r3, r4
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	f7f3 fab4 	bl	8000a14 <__aeabi_uldivmod>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4b32      	ldr	r3, [pc, #200]	; (800d57c <UART_SetConfig+0x6f4>)
 800d4b4:	fba3 1302 	umull	r1, r3, r3, r2
 800d4b8:	095b      	lsrs	r3, r3, #5
 800d4ba:	2164      	movs	r1, #100	; 0x64
 800d4bc:	fb01 f303 	mul.w	r3, r1, r3
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	011b      	lsls	r3, r3, #4
 800d4c4:	3332      	adds	r3, #50	; 0x32
 800d4c6:	4a2d      	ldr	r2, [pc, #180]	; (800d57c <UART_SetConfig+0x6f4>)
 800d4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4cc:	095b      	lsrs	r3, r3, #5
 800d4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4d2:	4498      	add	r8, r3
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	469b      	mov	fp, r3
 800d4d8:	f04f 0c00 	mov.w	ip, #0
 800d4dc:	46d9      	mov	r9, fp
 800d4de:	46e2      	mov	sl, ip
 800d4e0:	eb19 0309 	adds.w	r3, r9, r9
 800d4e4:	eb4a 040a 	adc.w	r4, sl, sl
 800d4e8:	4699      	mov	r9, r3
 800d4ea:	46a2      	mov	sl, r4
 800d4ec:	eb19 090b 	adds.w	r9, r9, fp
 800d4f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d4f4:	f04f 0100 	mov.w	r1, #0
 800d4f8:	f04f 0200 	mov.w	r2, #0
 800d4fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d508:	4689      	mov	r9, r1
 800d50a:	4692      	mov	sl, r2
 800d50c:	eb1b 0509 	adds.w	r5, fp, r9
 800d510:	eb4c 060a 	adc.w	r6, ip, sl
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	4619      	mov	r1, r3
 800d51a:	f04f 0200 	mov.w	r2, #0
 800d51e:	f04f 0300 	mov.w	r3, #0
 800d522:	f04f 0400 	mov.w	r4, #0
 800d526:	0094      	lsls	r4, r2, #2
 800d528:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d52c:	008b      	lsls	r3, r1, #2
 800d52e:	461a      	mov	r2, r3
 800d530:	4623      	mov	r3, r4
 800d532:	4628      	mov	r0, r5
 800d534:	4631      	mov	r1, r6
 800d536:	f7f3 fa6d 	bl	8000a14 <__aeabi_uldivmod>
 800d53a:	4603      	mov	r3, r0
 800d53c:	460c      	mov	r4, r1
 800d53e:	461a      	mov	r2, r3
 800d540:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <UART_SetConfig+0x6f4>)
 800d542:	fba3 1302 	umull	r1, r3, r3, r2
 800d546:	095b      	lsrs	r3, r3, #5
 800d548:	2164      	movs	r1, #100	; 0x64
 800d54a:	fb01 f303 	mul.w	r3, r1, r3
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	011b      	lsls	r3, r3, #4
 800d552:	3332      	adds	r3, #50	; 0x32
 800d554:	4a09      	ldr	r2, [pc, #36]	; (800d57c <UART_SetConfig+0x6f4>)
 800d556:	fba2 2303 	umull	r2, r3, r2, r3
 800d55a:	095b      	lsrs	r3, r3, #5
 800d55c:	f003 020f 	and.w	r2, r3, #15
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4442      	add	r2, r8
 800d566:	609a      	str	r2, [r3, #8]
}
 800d568:	e7ff      	b.n	800d56a <UART_SetConfig+0x6e2>
 800d56a:	bf00      	nop
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d574:	40011000 	.word	0x40011000
 800d578:	40011400 	.word	0x40011400
 800d57c:	51eb851f 	.word	0x51eb851f

0800d580 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	0a5a      	lsrs	r2, r3, #9
 800d590:	490f      	ldr	r1, [pc, #60]	; (800d5d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800d592:	fba1 1202 	umull	r1, r2, r1, r2
 800d596:	09d2      	lsrs	r2, r2, #7
 800d598:	490e      	ldr	r1, [pc, #56]	; (800d5d4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800d59a:	fb01 f202 	mul.w	r2, r1, r2
 800d59e:	1a9b      	subs	r3, r3, r2
 800d5a0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	0a5b      	lsrs	r3, r3, #9
 800d5a8:	4a09      	ldr	r2, [pc, #36]	; (800d5d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800d5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ae:	09db      	lsrs	r3, r3, #7
 800d5b0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	441a      	add	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	601a      	str	r2, [r3, #0]
}
 800d5c4:	bf00      	nop
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr
 800d5d0:	00044b83 	.word	0x00044b83
 800d5d4:	3b9aca00 	.word	0x3b9aca00

0800d5d8 <__cxa_pure_virtual>:
 800d5d8:	b508      	push	{r3, lr}
 800d5da:	f000 f80d 	bl	800d5f8 <_ZSt9terminatev>

0800d5de <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d5de:	b508      	push	{r3, lr}
 800d5e0:	4780      	blx	r0
 800d5e2:	f000 f80e 	bl	800d602 <abort>
	...

0800d5e8 <_ZSt13get_terminatev>:
 800d5e8:	4b02      	ldr	r3, [pc, #8]	; (800d5f4 <_ZSt13get_terminatev+0xc>)
 800d5ea:	6818      	ldr	r0, [r3, #0]
 800d5ec:	f3bf 8f5b 	dmb	ish
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	20000014 	.word	0x20000014

0800d5f8 <_ZSt9terminatev>:
 800d5f8:	b508      	push	{r3, lr}
 800d5fa:	f7ff fff5 	bl	800d5e8 <_ZSt13get_terminatev>
 800d5fe:	f7ff ffee 	bl	800d5de <_ZN10__cxxabiv111__terminateEPFvvE>

0800d602 <abort>:
 800d602:	b508      	push	{r3, lr}
 800d604:	2006      	movs	r0, #6
 800d606:	f000 f929 	bl	800d85c <raise>
 800d60a:	2001      	movs	r0, #1
 800d60c:	f7fb fd94 	bl	8009138 <_exit>

0800d610 <__errno>:
 800d610:	4b01      	ldr	r3, [pc, #4]	; (800d618 <__errno+0x8>)
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	20000018 	.word	0x20000018

0800d61c <__libc_init_array>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	4e0d      	ldr	r6, [pc, #52]	; (800d654 <__libc_init_array+0x38>)
 800d620:	4c0d      	ldr	r4, [pc, #52]	; (800d658 <__libc_init_array+0x3c>)
 800d622:	1ba4      	subs	r4, r4, r6
 800d624:	10a4      	asrs	r4, r4, #2
 800d626:	2500      	movs	r5, #0
 800d628:	42a5      	cmp	r5, r4
 800d62a:	d109      	bne.n	800d640 <__libc_init_array+0x24>
 800d62c:	4e0b      	ldr	r6, [pc, #44]	; (800d65c <__libc_init_array+0x40>)
 800d62e:	4c0c      	ldr	r4, [pc, #48]	; (800d660 <__libc_init_array+0x44>)
 800d630:	f000 f960 	bl	800d8f4 <_init>
 800d634:	1ba4      	subs	r4, r4, r6
 800d636:	10a4      	asrs	r4, r4, #2
 800d638:	2500      	movs	r5, #0
 800d63a:	42a5      	cmp	r5, r4
 800d63c:	d105      	bne.n	800d64a <__libc_init_array+0x2e>
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d644:	4798      	blx	r3
 800d646:	3501      	adds	r5, #1
 800d648:	e7ee      	b.n	800d628 <__libc_init_array+0xc>
 800d64a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d64e:	4798      	blx	r3
 800d650:	3501      	adds	r5, #1
 800d652:	e7f2      	b.n	800d63a <__libc_init_array+0x1e>
 800d654:	0800e8b0 	.word	0x0800e8b0
 800d658:	0800e8b0 	.word	0x0800e8b0
 800d65c:	0800e8b0 	.word	0x0800e8b0
 800d660:	0800e8d0 	.word	0x0800e8d0

0800d664 <memcpy>:
 800d664:	b510      	push	{r4, lr}
 800d666:	1e43      	subs	r3, r0, #1
 800d668:	440a      	add	r2, r1
 800d66a:	4291      	cmp	r1, r2
 800d66c:	d100      	bne.n	800d670 <memcpy+0xc>
 800d66e:	bd10      	pop	{r4, pc}
 800d670:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d678:	e7f7      	b.n	800d66a <memcpy+0x6>

0800d67a <memset>:
 800d67a:	4402      	add	r2, r0
 800d67c:	4603      	mov	r3, r0
 800d67e:	4293      	cmp	r3, r2
 800d680:	d100      	bne.n	800d684 <memset+0xa>
 800d682:	4770      	bx	lr
 800d684:	f803 1b01 	strb.w	r1, [r3], #1
 800d688:	e7f9      	b.n	800d67e <memset+0x4>
	...

0800d68c <_free_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4605      	mov	r5, r0
 800d690:	2900      	cmp	r1, #0
 800d692:	d045      	beq.n	800d720 <_free_r+0x94>
 800d694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d698:	1f0c      	subs	r4, r1, #4
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	bfb8      	it	lt
 800d69e:	18e4      	addlt	r4, r4, r3
 800d6a0:	f000 f8f8 	bl	800d894 <__malloc_lock>
 800d6a4:	4a1f      	ldr	r2, [pc, #124]	; (800d724 <_free_r+0x98>)
 800d6a6:	6813      	ldr	r3, [r2, #0]
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	b933      	cbnz	r3, 800d6ba <_free_r+0x2e>
 800d6ac:	6063      	str	r3, [r4, #4]
 800d6ae:	6014      	str	r4, [r2, #0]
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6b6:	f000 b8ee 	b.w	800d896 <__malloc_unlock>
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	d90c      	bls.n	800d6d8 <_free_r+0x4c>
 800d6be:	6821      	ldr	r1, [r4, #0]
 800d6c0:	1862      	adds	r2, r4, r1
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	bf04      	itt	eq
 800d6c6:	681a      	ldreq	r2, [r3, #0]
 800d6c8:	685b      	ldreq	r3, [r3, #4]
 800d6ca:	6063      	str	r3, [r4, #4]
 800d6cc:	bf04      	itt	eq
 800d6ce:	1852      	addeq	r2, r2, r1
 800d6d0:	6022      	streq	r2, [r4, #0]
 800d6d2:	6004      	str	r4, [r0, #0]
 800d6d4:	e7ec      	b.n	800d6b0 <_free_r+0x24>
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	b10a      	cbz	r2, 800d6e0 <_free_r+0x54>
 800d6dc:	42a2      	cmp	r2, r4
 800d6de:	d9fa      	bls.n	800d6d6 <_free_r+0x4a>
 800d6e0:	6819      	ldr	r1, [r3, #0]
 800d6e2:	1858      	adds	r0, r3, r1
 800d6e4:	42a0      	cmp	r0, r4
 800d6e6:	d10b      	bne.n	800d700 <_free_r+0x74>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	4401      	add	r1, r0
 800d6ec:	1858      	adds	r0, r3, r1
 800d6ee:	4282      	cmp	r2, r0
 800d6f0:	6019      	str	r1, [r3, #0]
 800d6f2:	d1dd      	bne.n	800d6b0 <_free_r+0x24>
 800d6f4:	6810      	ldr	r0, [r2, #0]
 800d6f6:	6852      	ldr	r2, [r2, #4]
 800d6f8:	605a      	str	r2, [r3, #4]
 800d6fa:	4401      	add	r1, r0
 800d6fc:	6019      	str	r1, [r3, #0]
 800d6fe:	e7d7      	b.n	800d6b0 <_free_r+0x24>
 800d700:	d902      	bls.n	800d708 <_free_r+0x7c>
 800d702:	230c      	movs	r3, #12
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	e7d3      	b.n	800d6b0 <_free_r+0x24>
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	1821      	adds	r1, r4, r0
 800d70c:	428a      	cmp	r2, r1
 800d70e:	bf04      	itt	eq
 800d710:	6811      	ldreq	r1, [r2, #0]
 800d712:	6852      	ldreq	r2, [r2, #4]
 800d714:	6062      	str	r2, [r4, #4]
 800d716:	bf04      	itt	eq
 800d718:	1809      	addeq	r1, r1, r0
 800d71a:	6021      	streq	r1, [r4, #0]
 800d71c:	605c      	str	r4, [r3, #4]
 800d71e:	e7c7      	b.n	800d6b0 <_free_r+0x24>
 800d720:	bd38      	pop	{r3, r4, r5, pc}
 800d722:	bf00      	nop
 800d724:	200025d0 	.word	0x200025d0

0800d728 <_malloc_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	1ccd      	adds	r5, r1, #3
 800d72c:	f025 0503 	bic.w	r5, r5, #3
 800d730:	3508      	adds	r5, #8
 800d732:	2d0c      	cmp	r5, #12
 800d734:	bf38      	it	cc
 800d736:	250c      	movcc	r5, #12
 800d738:	2d00      	cmp	r5, #0
 800d73a:	4606      	mov	r6, r0
 800d73c:	db01      	blt.n	800d742 <_malloc_r+0x1a>
 800d73e:	42a9      	cmp	r1, r5
 800d740:	d903      	bls.n	800d74a <_malloc_r+0x22>
 800d742:	230c      	movs	r3, #12
 800d744:	6033      	str	r3, [r6, #0]
 800d746:	2000      	movs	r0, #0
 800d748:	bd70      	pop	{r4, r5, r6, pc}
 800d74a:	f000 f8a3 	bl	800d894 <__malloc_lock>
 800d74e:	4a21      	ldr	r2, [pc, #132]	; (800d7d4 <_malloc_r+0xac>)
 800d750:	6814      	ldr	r4, [r2, #0]
 800d752:	4621      	mov	r1, r4
 800d754:	b991      	cbnz	r1, 800d77c <_malloc_r+0x54>
 800d756:	4c20      	ldr	r4, [pc, #128]	; (800d7d8 <_malloc_r+0xb0>)
 800d758:	6823      	ldr	r3, [r4, #0]
 800d75a:	b91b      	cbnz	r3, 800d764 <_malloc_r+0x3c>
 800d75c:	4630      	mov	r0, r6
 800d75e:	f000 f845 	bl	800d7ec <_sbrk_r>
 800d762:	6020      	str	r0, [r4, #0]
 800d764:	4629      	mov	r1, r5
 800d766:	4630      	mov	r0, r6
 800d768:	f000 f840 	bl	800d7ec <_sbrk_r>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d124      	bne.n	800d7ba <_malloc_r+0x92>
 800d770:	230c      	movs	r3, #12
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	4630      	mov	r0, r6
 800d776:	f000 f88e 	bl	800d896 <__malloc_unlock>
 800d77a:	e7e4      	b.n	800d746 <_malloc_r+0x1e>
 800d77c:	680b      	ldr	r3, [r1, #0]
 800d77e:	1b5b      	subs	r3, r3, r5
 800d780:	d418      	bmi.n	800d7b4 <_malloc_r+0x8c>
 800d782:	2b0b      	cmp	r3, #11
 800d784:	d90f      	bls.n	800d7a6 <_malloc_r+0x7e>
 800d786:	600b      	str	r3, [r1, #0]
 800d788:	50cd      	str	r5, [r1, r3]
 800d78a:	18cc      	adds	r4, r1, r3
 800d78c:	4630      	mov	r0, r6
 800d78e:	f000 f882 	bl	800d896 <__malloc_unlock>
 800d792:	f104 000b 	add.w	r0, r4, #11
 800d796:	1d23      	adds	r3, r4, #4
 800d798:	f020 0007 	bic.w	r0, r0, #7
 800d79c:	1ac3      	subs	r3, r0, r3
 800d79e:	d0d3      	beq.n	800d748 <_malloc_r+0x20>
 800d7a0:	425a      	negs	r2, r3
 800d7a2:	50e2      	str	r2, [r4, r3]
 800d7a4:	e7d0      	b.n	800d748 <_malloc_r+0x20>
 800d7a6:	428c      	cmp	r4, r1
 800d7a8:	684b      	ldr	r3, [r1, #4]
 800d7aa:	bf16      	itet	ne
 800d7ac:	6063      	strne	r3, [r4, #4]
 800d7ae:	6013      	streq	r3, [r2, #0]
 800d7b0:	460c      	movne	r4, r1
 800d7b2:	e7eb      	b.n	800d78c <_malloc_r+0x64>
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	6849      	ldr	r1, [r1, #4]
 800d7b8:	e7cc      	b.n	800d754 <_malloc_r+0x2c>
 800d7ba:	1cc4      	adds	r4, r0, #3
 800d7bc:	f024 0403 	bic.w	r4, r4, #3
 800d7c0:	42a0      	cmp	r0, r4
 800d7c2:	d005      	beq.n	800d7d0 <_malloc_r+0xa8>
 800d7c4:	1a21      	subs	r1, r4, r0
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f000 f810 	bl	800d7ec <_sbrk_r>
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d0cf      	beq.n	800d770 <_malloc_r+0x48>
 800d7d0:	6025      	str	r5, [r4, #0]
 800d7d2:	e7db      	b.n	800d78c <_malloc_r+0x64>
 800d7d4:	200025d0 	.word	0x200025d0
 800d7d8:	200025d4 	.word	0x200025d4

0800d7dc <realloc>:
 800d7dc:	4b02      	ldr	r3, [pc, #8]	; (800d7e8 <realloc+0xc>)
 800d7de:	460a      	mov	r2, r1
 800d7e0:	4601      	mov	r1, r0
 800d7e2:	6818      	ldr	r0, [r3, #0]
 800d7e4:	f000 b858 	b.w	800d898 <_realloc_r>
 800d7e8:	20000018 	.word	0x20000018

0800d7ec <_sbrk_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4c06      	ldr	r4, [pc, #24]	; (800d808 <_sbrk_r+0x1c>)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	4605      	mov	r5, r0
 800d7f4:	4608      	mov	r0, r1
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	f7fb fca8 	bl	800914c <_sbrk>
 800d7fc:	1c43      	adds	r3, r0, #1
 800d7fe:	d102      	bne.n	800d806 <_sbrk_r+0x1a>
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	b103      	cbz	r3, 800d806 <_sbrk_r+0x1a>
 800d804:	602b      	str	r3, [r5, #0]
 800d806:	bd38      	pop	{r3, r4, r5, pc}
 800d808:	200025dc 	.word	0x200025dc

0800d80c <_raise_r>:
 800d80c:	291f      	cmp	r1, #31
 800d80e:	b538      	push	{r3, r4, r5, lr}
 800d810:	4604      	mov	r4, r0
 800d812:	460d      	mov	r5, r1
 800d814:	d904      	bls.n	800d820 <_raise_r+0x14>
 800d816:	2316      	movs	r3, #22
 800d818:	6003      	str	r3, [r0, #0]
 800d81a:	f04f 30ff 	mov.w	r0, #4294967295
 800d81e:	bd38      	pop	{r3, r4, r5, pc}
 800d820:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d822:	b112      	cbz	r2, 800d82a <_raise_r+0x1e>
 800d824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d828:	b94b      	cbnz	r3, 800d83e <_raise_r+0x32>
 800d82a:	4620      	mov	r0, r4
 800d82c:	f000 f830 	bl	800d890 <_getpid_r>
 800d830:	462a      	mov	r2, r5
 800d832:	4601      	mov	r1, r0
 800d834:	4620      	mov	r0, r4
 800d836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d83a:	f000 b817 	b.w	800d86c <_kill_r>
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d00a      	beq.n	800d858 <_raise_r+0x4c>
 800d842:	1c59      	adds	r1, r3, #1
 800d844:	d103      	bne.n	800d84e <_raise_r+0x42>
 800d846:	2316      	movs	r3, #22
 800d848:	6003      	str	r3, [r0, #0]
 800d84a:	2001      	movs	r0, #1
 800d84c:	e7e7      	b.n	800d81e <_raise_r+0x12>
 800d84e:	2400      	movs	r4, #0
 800d850:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d854:	4628      	mov	r0, r5
 800d856:	4798      	blx	r3
 800d858:	2000      	movs	r0, #0
 800d85a:	e7e0      	b.n	800d81e <_raise_r+0x12>

0800d85c <raise>:
 800d85c:	4b02      	ldr	r3, [pc, #8]	; (800d868 <raise+0xc>)
 800d85e:	4601      	mov	r1, r0
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	f7ff bfd3 	b.w	800d80c <_raise_r>
 800d866:	bf00      	nop
 800d868:	20000018 	.word	0x20000018

0800d86c <_kill_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4c07      	ldr	r4, [pc, #28]	; (800d88c <_kill_r+0x20>)
 800d870:	2300      	movs	r3, #0
 800d872:	4605      	mov	r5, r0
 800d874:	4608      	mov	r0, r1
 800d876:	4611      	mov	r1, r2
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	f7fb fc4d 	bl	8009118 <_kill>
 800d87e:	1c43      	adds	r3, r0, #1
 800d880:	d102      	bne.n	800d888 <_kill_r+0x1c>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	b103      	cbz	r3, 800d888 <_kill_r+0x1c>
 800d886:	602b      	str	r3, [r5, #0]
 800d888:	bd38      	pop	{r3, r4, r5, pc}
 800d88a:	bf00      	nop
 800d88c:	200025dc 	.word	0x200025dc

0800d890 <_getpid_r>:
 800d890:	f7fb bc3a 	b.w	8009108 <_getpid>

0800d894 <__malloc_lock>:
 800d894:	4770      	bx	lr

0800d896 <__malloc_unlock>:
 800d896:	4770      	bx	lr

0800d898 <_realloc_r>:
 800d898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89a:	4607      	mov	r7, r0
 800d89c:	4614      	mov	r4, r2
 800d89e:	460e      	mov	r6, r1
 800d8a0:	b921      	cbnz	r1, 800d8ac <_realloc_r+0x14>
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8a8:	f7ff bf3e 	b.w	800d728 <_malloc_r>
 800d8ac:	b922      	cbnz	r2, 800d8b8 <_realloc_r+0x20>
 800d8ae:	f7ff feed 	bl	800d68c <_free_r>
 800d8b2:	4625      	mov	r5, r4
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8b8:	f000 f814 	bl	800d8e4 <_malloc_usable_size_r>
 800d8bc:	42a0      	cmp	r0, r4
 800d8be:	d20f      	bcs.n	800d8e0 <_realloc_r+0x48>
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	f7ff ff30 	bl	800d728 <_malloc_r>
 800d8c8:	4605      	mov	r5, r0
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d0f2      	beq.n	800d8b4 <_realloc_r+0x1c>
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4622      	mov	r2, r4
 800d8d2:	f7ff fec7 	bl	800d664 <memcpy>
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4638      	mov	r0, r7
 800d8da:	f7ff fed7 	bl	800d68c <_free_r>
 800d8de:	e7e9      	b.n	800d8b4 <_realloc_r+0x1c>
 800d8e0:	4635      	mov	r5, r6
 800d8e2:	e7e7      	b.n	800d8b4 <_realloc_r+0x1c>

0800d8e4 <_malloc_usable_size_r>:
 800d8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8e8:	1f18      	subs	r0, r3, #4
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bfbc      	itt	lt
 800d8ee:	580b      	ldrlt	r3, [r1, r0]
 800d8f0:	18c0      	addlt	r0, r0, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_init>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr

0800d900 <_fini>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	bf00      	nop
 800d904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d906:	bc08      	pop	{r3}
 800d908:	469e      	mov	lr, r3
 800d90a:	4770      	bx	lr
