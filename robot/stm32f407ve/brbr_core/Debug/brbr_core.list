
brbr_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae0  20000074  080053ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  080053ec  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010952  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000256f  00000000  00000000  000309f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00033b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d0b  00000000  00000000  000346d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a506  00000000  00000000  000593e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d055d  00000000  00000000  000638e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003618  00000000  00000000  00133ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800510c 	.word	0x0800510c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800510c 	.word	0x0800510c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f002 f8c0 	bl	8002660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80a 	bl	80004f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f906 	bl	80006f4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80004e8:	f000 f8dc 	bl	80006a4 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80004ec:	f000 f878 	bl	80005e0 <_ZL12MX_I2C1_Initv>

  MX_USART1_UART_Init();
 80004f0:	f000 f8aa 	bl	8000648 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x1c>
	...

080004f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 fcc3 	bl	8004e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <_Z18SystemClock_Configv+0xe0>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <_Z18SystemClock_Configv+0xe0>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <_Z18SystemClock_Configv+0xe0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <_Z18SystemClock_Configv+0xe4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <_Z18SystemClock_Configv+0xe4>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <_Z18SystemClock_Configv+0xe4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800056c:	23a8      	movs	r3, #168	; 0xa8
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f893 	bl	80036a8 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000592:	f000 f90d 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fae7 	bl	8003b88 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	bf14      	ite	ne
 80005c0:	2301      	movne	r3, #1
 80005c2:	2300      	moveq	r3, #0
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80005ca:	f000 f8f1 	bl	80007b0 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <_ZL12MX_I2C1_Initv+0x60>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 80005ec:	4a15      	ldr	r2, [pc, #84]	; (8000644 <_ZL12MX_I2C1_Initv+0x64>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <_ZL12MX_I2C1_Initv+0x5c>)
 800061e:	f002 ff0b 	bl	8003438 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	bf14      	ite	ne
 8000628:	2301      	movne	r3, #1
 800062a:	2300      	moveq	r3, #0
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000632:	f000 f8bd 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000090 	.word	0x20000090
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000680:	f003 fc74 	bl	8003f6c <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000694:	f000 f88c 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000e4 	.word	0x200000e4
 80006a0:	40011000 	.word	0x40011000

080006a4 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <_ZL11MX_DMA_Initv+0x4c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <_ZL11MX_DMA_Initv+0x4c>)
 80006b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <_ZL11MX_DMA_Initv+0x4c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	203a      	movs	r0, #58	; 0x3a
 80006cc:	f002 f915 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006d0:	203a      	movs	r0, #58	; 0x3a
 80006d2:	f002 f92e 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2046      	movs	r0, #70	; 0x46
 80006dc:	f002 f90d 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006e0:	2046      	movs	r0, #70	; 0x46
 80006e2:	f002 f926 	bl	8002932 <HAL_NVIC_EnableIRQ>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_A_DIR1_Pin|MOTOR_A_DIR2_Pin|MOTOR_B_DIR1_Pin|MOTOR_B_DIR2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	213c      	movs	r1, #60	; 0x3c
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <_ZL12MX_GPIO_Initv+0xb8>)
 8000780:	f002 fe1c 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIR1_Pin|MOTOR_A_DIR2_Pin|MOTOR_B_DIR1_Pin|MOTOR_B_DIR2_Pin;
 8000784:	233c      	movs	r3, #60	; 0x3c
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <_ZL12MX_GPIO_Initv+0xb8>)
 800079c:	f002 fc74 	bl	8003088 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40021000 	.word	0x40021000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <_ZN3ros3MsgC1Ev+0x1c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	08005334 	.word	0x08005334

08000800 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
      data()
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ffe8 	bl	80007e0 <_ZN3ros3MsgC1Ev>
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3304      	adds	r3, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffcf 	bl	80007be <_ZN3ros4TimeC1Ev>
    {
    }
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	0800531c 	.word	0x0800531c

08000830 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6859      	ldr	r1, [r3, #4]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	4413      	add	r3, r2
 8000848:	b2ca      	uxtb	r2, r1
 800084a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	0a19      	lsrs	r1, r3, #8
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	b2ca      	uxtb	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	0c19      	lsrs	r1, r3, #16
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3302      	adds	r3, #2
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	4413      	add	r3, r2
 800086c:	b2ca      	uxtb	r2, r1
 800086e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	0e19      	lsrs	r1, r3, #24
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3303      	adds	r3, #3
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	4413      	add	r3, r2
 800087e:	b2ca      	uxtb	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3304      	adds	r3, #4
 8000886:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6899      	ldr	r1, [r3, #8]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	4413      	add	r3, r2
 8000892:	b2ca      	uxtb	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	0a19      	lsrs	r1, r3, #8
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	b2ca      	uxtb	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	0c19      	lsrs	r1, r3, #16
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3302      	adds	r3, #2
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	4413      	add	r3, r2
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	0e19      	lsrs	r1, r3, #24
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3303      	adds	r3, #3
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	b2ca      	uxtb	r2, r1
 80008ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3304      	adds	r3, #4
 80008d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80008d2:	68fb      	ldr	r3, [r7, #12]
    }
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	6839      	ldr	r1, [r7, #0]
 8000906:	440b      	add	r3, r1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	431a      	orrs	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3302      	adds	r3, #2
 800091a:	6839      	ldr	r1, [r7, #0]
 800091c:	440b      	add	r3, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	041b      	lsls	r3, r3, #16
 8000922:	431a      	orrs	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3303      	adds	r3, #3
 8000930:	6839      	ldr	r1, [r7, #0]
 8000932:	440b      	add	r3, r1
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	061b      	lsls	r3, r3, #24
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3304      	adds	r3, #4
 8000942:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	440b      	add	r3, r1
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	431a      	orrs	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3302      	adds	r3, #2
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	440b      	add	r3, r1
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3303      	adds	r3, #3
 8000986:	6839      	ldr	r1, [r7, #0]
 8000988:	440b      	add	r3, r1
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	061b      	lsls	r3, r3, #24
 800098e:	431a      	orrs	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3304      	adds	r3, #4
 8000998:	60fb      	str	r3, [r7, #12]
     return offset;
 800099a:	68fb      	ldr	r3, [r7, #12]
    }
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	08005124 	.word	0x08005124

080009c4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	08005134 	.word	0x08005134

080009e0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fef8 	bl	80007e0 <_ZN3ros3MsgC1Ev>
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	809a      	strh	r2, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
    {
    }
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08005304 	.word	0x08005304
 8000a24:	08005158 	.word	0x08005158

08000a28 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	8899      	ldrh	r1, [r3, #4]
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2ca      	uxtb	r2, r1
 8000a42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	889b      	ldrh	r3, [r3, #4]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	b299      	uxth	r1, r3
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	b2ca      	uxtb	r2, r1
 8000a56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbb0 	bl	80001c8 <strlen>
 8000a68:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	69b9      	ldr	r1, [r7, #24]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 feb6 	bl	80017e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	18d0      	adds	r0, r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f004 f9f6 	bl	8004e7c <memcpy>
      offset += length_topic_name;
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4413      	add	r3, r2
 8000a96:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fb93 	bl	80001c8 <strlen>
 8000aa2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	6979      	ldr	r1, [r7, #20]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fe99 	bl	80017e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	18d0      	adds	r0, r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f004 f9d9 	bl	8004e7c <memcpy>
      offset += length_message_type;
 8000aca:	69fa      	ldr	r2, [r7, #28]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	4413      	add	r3, r2
 8000ad0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb76 	bl	80001c8 <strlen>
 8000adc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	6939      	ldr	r1, [r7, #16]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fe7c 	bl	80017e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3304      	adds	r3, #4
 8000af0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	18d0      	adds	r0, r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4619      	mov	r1, r3
 8000b00:	f004 f9bc 	bl	8004e7c <memcpy>
      offset += length_md5sum;
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4413      	add	r3, r2
 8000b0a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000b12:	68f9      	ldr	r1, [r7, #12]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	0a19      	lsrs	r1, r3, #8
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3301      	adds	r3, #1
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	4413      	add	r3, r2
 8000b2a:	b2ca      	uxtb	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	0c19      	lsrs	r1, r3, #16
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3302      	adds	r3, #2
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	0e19      	lsrs	r1, r3, #24
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3303      	adds	r3, #3
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	61fb      	str	r3, [r7, #28]
      return offset;
 8000b54:	69fb      	ldr	r3, [r7, #28]
    }
 8000b56:	4618      	mov	r0, r3
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b08a      	sub	sp, #40	; 0x28
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	889b      	ldrh	r3, [r3, #4]
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	3301      	adds	r3, #1
 8000b84:	6839      	ldr	r1, [r7, #0]
 8000b86:	440b      	add	r3, r1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	441a      	add	r2, r3
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fe38 	bl	8001820 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d20c      	bcs.n	8000be0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	441a      	add	r2, r3
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6839      	ldr	r1, [r7, #0]
 8000bd2:	440b      	add	r3, r1
 8000bd4:	7812      	ldrb	r2, [r2, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	3301      	adds	r3, #1
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bde:	e7ec      	b.n	8000bba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	3b01      	subs	r3, #1
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	441a      	add	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	441a      	add	r2, r3
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fe05 	bl	8001820 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	623b      	str	r3, [r7, #32]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4413      	add	r3, r2
 8000c26:	6a3a      	ldr	r2, [r7, #32]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d20c      	bcs.n	8000c46 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	441a      	add	r2, r3
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	6839      	ldr	r1, [r7, #0]
 8000c38:	440b      	add	r3, r1
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	3301      	adds	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
 8000c44:	e7ec      	b.n	8000c20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	441a      	add	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4413      	add	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	441a      	add	r2, r3
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fdd2 	bl	8001820 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	3304      	adds	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	69fa      	ldr	r2, [r7, #28]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d20c      	bcs.n	8000cac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	441a      	add	r2, r3
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6839      	ldr	r1, [r7, #0]
 8000c9e:	440b      	add	r3, r1
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	e7ec      	b.n	8000c86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	441a      	add	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	6839      	ldr	r1, [r7, #0]
 8000cda:	440a      	add	r2, r1
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	6839      	ldr	r1, [r7, #0]
 8000cea:	440b      	add	r3, r1
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	440b      	add	r3, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	3303      	adds	r3, #3
 8000d0c:	6839      	ldr	r1, [r7, #0]
 8000d0e:	440b      	add	r3, r1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	4313      	orrs	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	3304      	adds	r3, #4
 8000d22:	61bb      	str	r3, [r7, #24]
     return offset;
 8000d24:	69bb      	ldr	r3, [r7, #24]
    }
 8000d26:	4618      	mov	r0, r3
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	0800515c 	.word	0x0800515c

08000d4c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	08005178 	.word	0x08005178

08000d68 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fd34 	bl	80007e0 <_ZN3ros3MsgC1Ev>
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	711a      	strb	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000d88:	609a      	str	r2, [r3, #8]
    {
    }
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	080052ec 	.word	0x080052ec
 8000d98:	08005158 	.word	0x08005158

08000d9c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	7912      	ldrb	r2, [r2, #4]
 8000db4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fa01 	bl	80001c8 <strlen>
 8000dc6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fd07 	bl	80017e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	18d0      	adds	r0, r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f004 f847 	bl	8004e7c <memcpy>
      offset += length_msg;
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000df6:	68fb      	ldr	r3, [r7, #12]
    }
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	441a      	add	r2, r3
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fcf7 	bl	8001820 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	3304      	adds	r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d20c      	bcs.n	8000e62 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	441a      	add	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	6839      	ldr	r1, [r7, #0]
 8000e54:	440b      	add	r3, r1
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	e7ec      	b.n	8000e3c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	441a      	add	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
     return offset;
 8000e86:	693b      	ldr	r3, [r7, #16]
    }
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	0800519c 	.word	0x0800519c

08000eac <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	080051b0 	.word	0x080051b0

08000ec8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc84 	bl	80007e0 <_ZN3ros3MsgC1Ev>
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	080052d4 	.word	0x080052d4

08000f10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6859      	ldr	r1, [r3, #4]
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b2ca      	uxtb	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	0a19      	lsrs	r1, r3, #8
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	3301      	adds	r3, #1
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	0c19      	lsrs	r1, r3, #16
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	3302      	adds	r3, #2
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	0e19      	lsrs	r1, r3, #24
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	3303      	adds	r3, #3
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3304      	adds	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	6a3a      	ldr	r2, [r7, #32]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d22b      	bcs.n	8000fce <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000f84:	6939      	ldr	r1, [r7, #16]
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b2ca      	uxtb	r2, r1
 8000f8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	0a19      	lsrs	r1, r3, #8
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	3301      	adds	r3, #1
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b2ca      	uxtb	r2, r1
 8000f9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	0c19      	lsrs	r1, r3, #16
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	b2ca      	uxtb	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	0e19      	lsrs	r1, r3, #24
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	3303      	adds	r3, #3
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b2ca      	uxtb	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
 8000fcc:	e7ce      	b.n	8000f6c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2ca      	uxtb	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	0a19      	lsrs	r1, r3, #8
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	0c19      	lsrs	r1, r3, #16
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2ca      	uxtb	r2, r1
 8000ffe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	0e19      	lsrs	r1, r3, #24
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	3303      	adds	r3, #3
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3304      	adds	r3, #4
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	429a      	cmp	r2, r3
 8001024:	d22b      	bcs.n	800107e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001034:	68f9      	ldr	r1, [r7, #12]
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	0a19      	lsrs	r1, r3, #8
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	3301      	adds	r3, #1
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	b2ca      	uxtb	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	0c19      	lsrs	r1, r3, #16
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	3302      	adds	r3, #2
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	0e19      	lsrs	r1, r3, #24
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	3303      	adds	r3, #3
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	4413      	add	r3, r2
 800106c:	b2ca      	uxtb	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	3304      	adds	r3, #4
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	e7ce      	b.n	800101c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69d9      	ldr	r1, [r3, #28]
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	0a19      	lsrs	r1, r3, #8
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3301      	adds	r3, #1
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	4413      	add	r3, r2
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	0c19      	lsrs	r1, r3, #16
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	3302      	adds	r3, #2
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	b2ca      	uxtb	r2, r1
 80010ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	0e19      	lsrs	r1, r3, #24
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	3303      	adds	r3, #3
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3304      	adds	r3, #4
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d228      	bcs.n	8001128 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f870 	bl	80001c8 <strlen>
 80010e8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	6979      	ldr	r1, [r7, #20]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fb76 	bl	80017e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3304      	adds	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	18d0      	adds	r0, r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4619      	mov	r1, r3
 8001114:	f003 feb2 	bl	8004e7c <memcpy>
      offset += length_stringsi;
 8001118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	4413      	add	r3, r2
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	3301      	adds	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	e7d1      	b.n	80010cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800112a:	4618      	mov	r0, r3
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001132:	b580      	push	{r7, lr}
 8001134:	b08e      	sub	sp, #56	; 0x38
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	3301      	adds	r3, #1
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	6a3a      	ldr	r2, [r7, #32]
 8001158:	4313      	orrs	r3, r2
 800115a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115e:	3302      	adds	r3, #2
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	041b      	lsls	r3, r3, #16
 8001168:	6a3a      	ldr	r2, [r7, #32]
 800116a:	4313      	orrs	r3, r2
 800116c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001170:	3303      	adds	r3, #3
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	6a3a      	ldr	r2, [r7, #32]
 800117c:	4313      	orrs	r3, r2
 800117e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001182:	3304      	adds	r3, #4
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	6a3a      	ldr	r2, [r7, #32]
 800118c:	429a      	cmp	r2, r3
 800118e:	d90a      	bls.n	80011a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f003 fe82 	bl	8004ea4 <realloc>
 80011a0:	4602      	mov	r2, r0
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d236      	bcs.n	8001228 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	440a      	add	r2, r1
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d0:	3301      	adds	r3, #1
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	440b      	add	r3, r1
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	4313      	orrs	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e2:	3302      	adds	r3, #2
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	440b      	add	r3, r1
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f4:	3303      	adds	r3, #3
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	440b      	add	r3, r1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	4313      	orrs	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120a:	3304      	adds	r3, #4
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	3301      	adds	r3, #1
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
 8001226:	e7c3      	b.n	80011b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	3301      	adds	r3, #1
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	4313      	orrs	r3, r2
 8001242:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001246:	3302      	adds	r3, #2
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	4313      	orrs	r3, r2
 8001254:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001258:	3303      	adds	r3, #3
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	061b      	lsls	r3, r3, #24
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	4313      	orrs	r3, r2
 8001266:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126a:	3304      	adds	r3, #4
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	429a      	cmp	r2, r3
 8001276:	d90a      	bls.n	800128e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4619      	mov	r1, r3
 8001282:	4610      	mov	r0, r2
 8001284:	f003 fe0e 	bl	8004ea4 <realloc>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129e:	429a      	cmp	r2, r3
 80012a0:	d236      	bcs.n	8001310 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	440a      	add	r2, r1
 80012ae:	7812      	ldrb	r2, [r2, #0]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b8:	3301      	adds	r3, #1
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	440b      	add	r3, r1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ca:	3302      	adds	r3, #2
 80012cc:	6839      	ldr	r1, [r7, #0]
 80012ce:	440b      	add	r3, r1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012dc:	3303      	adds	r3, #3
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	3304      	adds	r3, #4
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	3214      	adds	r2, #20
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130a:	3301      	adds	r3, #1
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800130e:	e7c3      	b.n	8001298 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131c:	3301      	adds	r3, #1
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	3302      	adds	r3, #2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	041b      	lsls	r3, r3, #16
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800133e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001340:	3303      	adds	r3, #3
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	061b      	lsls	r3, r3, #24
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	3304      	adds	r3, #4
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	429a      	cmp	r2, r3
 800135e:	d90a      	bls.n	8001376 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f003 fd9a 	bl	8004ea4 <realloc>
 8001370:	4602      	mov	r2, r0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001386:	429a      	cmp	r2, r3
 8001388:	d23f      	bcs.n	800140a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800138a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	441a      	add	r2, r3
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fa42 	bl	8001820 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139e:	3304      	adds	r3, #4
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d20c      	bcs.n	80013cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	441a      	add	r2, r3
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	440b      	add	r3, r1
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e7ec      	b.n	80013a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80013cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4413      	add	r3, r2
 80013d2:	3b01      	subs	r3, #1
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80013dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013de:	3b01      	subs	r3, #1
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	441a      	add	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80013e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	3220      	adds	r2, #32
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	3301      	adds	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
 8001408:	e7ba      	b.n	8001380 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800140c:	4618      	mov	r0, r3
 800140e:	3738      	adds	r7, #56	; 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	08005270 	.word	0x08005270

08001430 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	080051d4 	.word	0x080051d4

0800144c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
  }
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	425b      	negs	r3, r3
 80014a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <_ZN13STM32HardwareC1Ev+0x34>)
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	200000e4 	.word	0x200000e4

080014f0 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ffc4 	bl	8001492 <_ZN13STM32Hardware10getRdmaIndEv>
 800150a:	4603      	mov	r3, r0
 800150c:	429c      	cmp	r4, r3
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d012      	beq.n	8001540 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001520:	1c59      	adds	r1, r3, #1
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	791b      	ldrb	r3, [r3, #4]
 800152e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001540:	68fb      	ldr	r3, [r7, #12]
    }
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
	...

0800154c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b20      	cmp	r3, #32
 8001560:	d108      	bne.n	8001574 <_ZN13STM32Hardware5flushEv+0x28>
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	f083 0301 	eor.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <_ZN13STM32Hardware5flushEv+0x28>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <_ZN13STM32Hardware5flushEv+0x2a>
 8001574:	2300      	movs	r3, #0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d03f      	beq.n	80015fa <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <_ZN13STM32Hardware5flushEv+0xb8>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800158c:	429a      	cmp	r2, r3
 800158e:	d031      	beq.n	80015f4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800159c:	429a      	cmp	r2, r3
 800159e:	d20a      	bcs.n	80015b6 <_ZN13STM32Hardware5flushEv+0x6a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	e006      	b.n	80015c4 <_ZN13STM32Hardware5flushEv+0x78>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	89fa      	ldrh	r2, [r7, #14]
 80015da:	4619      	mov	r1, r3
 80015dc:	f002 fd14 	bl	8004008 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	4413      	add	r3, r2
 80015ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <_ZN13STM32Hardware5flushEv+0xb8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
      }
    }
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200001e4 	.word	0x200001e4

08001608 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
      int n = length;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800161e:	bfa8      	it	ge
 8001620:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001624:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800162c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	4293      	cmp	r3, r2
 8001634:	bf28      	it	cs
 8001636:	4613      	movcs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fc15 	bl	8004e7c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	429a      	cmp	r2, r3
 800166c:	d00b      	beq.n	8001686 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	18d1      	adds	r1, r2, r3
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	461a      	mov	r2, r3
 8001682:	f003 fbfb 	bl	8004e7c <memcpy>
      }

      flush();
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff ff60 	bl	800154c <_ZN13STM32Hardware5flushEv>
    }
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	f001 f846 	bl	800272c <HAL_GetTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
      data("")
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f892 	bl	80007e0 <_ZN3ros3MsgC1Ev>
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_ZN8std_msgs6StringC1Ev+0x28>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80016c6:	605a      	str	r2, [r3, #4]
    {
    }
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	080052a8 	.word	0x080052a8
 80016d8:	08005158 	.word	0x08005158

080016dc <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd6a 	bl	80001c8 <strlen>
 80016f4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f870 	bl	80017e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3304      	adds	r3, #4
 8001708:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	18d0      	adds	r0, r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	4619      	mov	r1, r3
 8001718:	f003 fbb0 	bl	8004e7c <memcpy>
      offset += length_data;
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4413      	add	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
      return offset;
 8001724:	68fb      	ldr	r3, [r7, #12]
    }
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	441a      	add	r2, r3
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f000 f869 	bl	8001820 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	3304      	adds	r3, #4
 8001752:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	d20c      	bcs.n	800177e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	441a      	add	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3b01      	subs	r3, #1
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	440b      	add	r3, r1
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e7ec      	b.n	8001758 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	3b01      	subs	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	3b01      	subs	r3, #1
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	441a      	add	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
     return offset;
 80017a2:	693b      	ldr	r3, [r7, #16]
    }
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	080051f8 	.word	0x080051f8

080017c8 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	08005208 	.word	0x08005208

080017e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d80d      	bhi.n	8001814 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	fa22 f103 	lsr.w	r1, r2, r3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e7ee      	b.n	80017f2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d811      	bhi.n	800185e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	440a      	add	r2, r1
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	4611      	mov	r1, r2
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	00d2      	lsls	r2, r2, #3
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e7ea      	b.n	8001834 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	080052c0 	.word	0x080052c0

0800188c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ffe8 	bl	800186c <_ZN3ros15NodeHandleBase_C1Ev>
 800189c:	4a3a      	ldr	r2, [pc, #232]	; (8001988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fe06 	bl	80014b8 <_ZN13STM32HardwareC1Ev>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb04 	bl	8000ec8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b18      	cmp	r3, #24
 80018c8:	d80b      	bhi.n	80018e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e7f0      	b.n	80018c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b18      	cmp	r3, #24
 80018ea:	d80a      	bhi.n	8001902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80018f4:	2100      	movs	r1, #0
 80018f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	3301      	adds	r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	e7f1      	b.n	80018e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190c:	d20a      	bcs.n	8001924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e7f0      	b.n	8001906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800192e:	d20a      	bcs.n	8001946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4413      	add	r3, r2
 8001936:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3301      	adds	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	e7f0      	b.n	8001928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	08005294 	.word	0x08005294

0800198c <_Z41__static_initialization_and_destruction_0ii>:
	wheelPWMInit();
}

void loop(void) {

}
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d110      	bne.n	80019be <_Z41__static_initialization_and_destruction_0ii+0x32>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10b      	bne.n	80019be <_Z41__static_initialization_and_destruction_0ii+0x32>
#define INC_MAINAPP_H_

#include <ros.h>
#include <std_msgs/String.h>
//
static ros::NodeHandle nh;
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80019a8:	f7ff ff70 	bl	800188c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String str_msg;
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019ae:	f7ff fe7d 	bl	80016ac <_ZN8std_msgs6StringC1Ev>
static ros::Publisher chatter("chatter", &str_msg);
 80019b2:	2300      	movs	r3, #0
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019b6:	4906      	ldr	r1, [pc, #24]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80019ba:	f7ff fd47 	bl	800144c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200001e8 	.word	0x200001e8
 80019cc:	20000b24 	.word	0x20000b24
 80019d0:	0800522c 	.word	0x0800522c
 80019d4:	20000b2c 	.word	0x20000b2c

080019d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b63      	cmp	r3, #99	; 0x63
 80019e8:	dd09      	ble.n	80019fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e077      	b.n	8001aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001a0a:	3207      	adds	r2, #7
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
 8001a12:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	22fe      	movs	r2, #254	; 0xfe
 8001a20:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	121b      	asrs	r3, r3, #8
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001a48:	4413      	add	r3, r2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	121b      	asrs	r3, r3, #8
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001a72:	2305      	movs	r3, #5
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3307      	adds	r3, #7
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	da0d      	bge.n	8001a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4413      	add	r3, r2
 8001a86:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e7ec      	b.n	8001a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3307      	adds	r3, #7
 8001aa0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	425a      	negs	r2, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	bf58      	it	pl
 8001aac:	4253      	negpl	r3, r2
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	1c59      	adds	r1, r3, #1
 8001ab4:	6179      	str	r1, [r7, #20]
 8001ab6:	43d2      	mvns	r2, r2
 8001ab8:	b2d1      	uxtb	r1, r2
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	460a      	mov	r2, r1
 8001ac0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	dc0a      	bgt.n	8001ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1d18      	adds	r0, r3, #4
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff fd95 	bl	8001608 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	e005      	b.n	8001aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001ae2:	4905      	ldr	r1, [pc, #20]	; (8001af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f9f2 	bl	8001ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001aee:	4618      	mov	r0, r3
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	08005234 	.word	0x08005234

08001afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fdc3 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8001b0e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d903      	bls.n	8001b2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d903      	bls.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d014      	beq.n	8001b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd9c 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad2      	subs	r2, r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	bf8c      	ite	hi
 8001b6c:	2301      	movhi	r3, #1
 8001b6e:	2300      	movls	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001b76:	f06f 0301 	mvn.w	r3, #1
 8001b7a:	e197      	b.n	8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fcb5 	bl	80014f0 <_ZN13STM32Hardware4readEv>
 8001b86:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f2c0 8177 	blt.w	8001e7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	441a      	add	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	d11e      	bne.n	8001be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001bb0:	1c59      	adds	r1, r3, #1
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	b2d1      	uxtb	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1b4      	bne.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2208      	movs	r2, #8
 8001be2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001be6:	e7af      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d128      	bne.n	8001c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2bff      	cmp	r3, #255	; 0xff
 8001bf6:	d10d      	bne.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f103 0214 	add.w	r2, r3, #20
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001c12:	e799      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd3b 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf8c      	ite	hi
 8001c2c:	2301      	movhi	r3, #1
 8001c2e:	2300      	movls	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d088      	beq.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001c3e:	f06f 0301 	mvn.w	r3, #1
 8001c42:	e133      	b.n	8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d11b      	bne.n	8001c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2bfe      	cmp	r3, #254	; 0xfe
 8001c52:	d107      	bne.n	8001c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c62:	e771      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f43f af65 	beq.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f933 	bl	8001eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001c84:	e760      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d113      	bne.n	8001cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001cb6:	e747      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d110      	bne.n	8001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	441a      	add	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ce2:	e731      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d116      	bne.n	8001d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001cf4:	425a      	negs	r2, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	bf58      	it	pl
 8001cfc:	4253      	negpl	r3, r2
 8001cfe:	2bff      	cmp	r3, #255	; 0xff
 8001d00:	d107      	bne.n	8001d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d10:	e71a      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d1a:	e715      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d10f      	bne.n	8001d46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001d44:	e700      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d117      	bne.n	8001d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	441a      	add	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2207      	movs	r2, #7
 8001d66:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f aee9 	bne.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d7e:	e6e3      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	f47f aede 	bne.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001d9a:	425a      	negs	r2, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	bf58      	it	pl
 8001da2:	4253      	negpl	r3, r2
 8001da4:	2bff      	cmp	r3, #255	; 0xff
 8001da6:	f47f aecf 	bne.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d110      	bne.n	8001dd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f898 	bl	8001eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8b3 	bl	8001f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e06a      	b.n	8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ddc:	2b0a      	cmp	r3, #10
 8001dde:	d107      	bne.n	8001df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f97b 	bl	80020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001dee:	e6ab      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d10e      	bne.n	8001e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f7ff f992 	bl	8001132 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001e16:	e697      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e1e:	2b0b      	cmp	r3, #11
 8001e20:	d104      	bne.n	8001e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001e2a:	e68d      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e32:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f43f ae81 	beq.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e4c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e60:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4798      	blx	r3
    while (true)
 8001e7c:	e664      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001e7e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00f      	beq.n	8001eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d906      	bls.n	8001eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f824 	bl	8001eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001eaa:	2300      	movs	r3, #0
  }
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    return configured_;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	2103      	movs	r1, #3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f94d 	bl	800217c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fc82 	bl	8000800 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f107 020c 	add.w	r2, r7, #12
 8001f06:	210a      	movs	r1, #10
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
    rt_time = hardware_.time();
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fbbf 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8001f16:	4602      	mov	r2, r0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8001f26:	b590      	push	{r4, r7, lr}
 8001f28:	b08b      	sub	sp, #44	; 0x2c
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fd54 	bl	80009e0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	2b18      	cmp	r3, #24
 8001f40:	dc63      	bgt.n	800200a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d056      	beq.n	8002002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3308      	adds	r3, #8
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4798      	blx	r3
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4798      	blx	r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fda:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681c      	ldr	r4, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fa42 	bl	800147a <_ZN3ros9Publisher15getEndpointTypeEv>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	3301      	adds	r3, #1
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	e798      	b.n	8001f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	2b18      	cmp	r3, #24
 8002012:	dc5f      	bgt.n	80020d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	f202 2222 	addw	r2, r2, #546	; 0x222
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d053      	beq.n	80020cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002028:	f202 2222 	addw	r2, r2, #546	; 0x222
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	b29b      	uxth	r3, r3
 8002034:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800204e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002056:	f202 2222 	addw	r2, r2, #546	; 0x222
 800205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3308      	adds	r3, #8
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4608      	mov	r0, r1
 8002066:	4798      	blx	r3
 8002068:	4603      	mov	r3, r0
 800206a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4608      	mov	r0, r1
 800208c:	4798      	blx	r3
 800208e:	4603      	mov	r3, r0
 8002090:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002096:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681c      	ldr	r4, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3304      	adds	r3, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4608      	mov	r0, r1
 80020be:	4798      	blx	r3
 80020c0:	4601      	mov	r1, r0
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	461a      	mov	r2, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3301      	adds	r3, #1
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	e79c      	b.n	800200e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80020dc:	bf00      	nop
 80020de:	372c      	adds	r7, #44	; 0x2c
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd90      	pop	{r4, r7, pc}

080020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fb84 	bl	8000800 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fac9 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8002102:	4602      	mov	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fbe3 	bl	80008e0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	4915      	ldr	r1, [pc, #84]	; (8002174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002120:	fba1 1303 	umull	r1, r3, r1, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800212a:	6939      	ldr	r1, [r7, #16]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002130:	fba3 0302 	umull	r0, r3, r3, r2
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800213a:	fb00 f303 	mul.w	r3, r0, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	440b      	add	r3, r1
 8002148:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	3304      	adds	r3, #4
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f82e 	bl	80021b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3304      	adds	r3, #4
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fa99 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	10624dd3 	.word	0x10624dd3
 8002178:	000f4240 	.word	0x000f4240

0800217c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	460b      	mov	r3, r1
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fdea 	bl	8000d68 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f107 0214 	add.w	r2, r7, #20
 80021a6:	2107      	movs	r1, #7
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	4798      	blx	r3
  }
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fa66 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 80021c8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4915      	ldr	r1, [pc, #84]	; (8002228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80021d2:	fba1 1303 	umull	r1, r3, r1, r3
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80021ea:	fba3 0302 	umull	r0, r3, r3, r2
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f4:	fb00 f303 	mul.w	r3, r0, r3
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	4a0c      	ldr	r2, [pc, #48]	; (800222c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	1aca      	subs	r2, r1, r3
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002204:	4413      	add	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f002 fdbc 	bl	8004d98 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	10624dd3 	.word	0x10624dd3
 800222c:	000f4240 	.word	0x000f4240
 8002230:	3b9aca00 	.word	0x3b9aca00

08002234 <_GLOBAL__sub_I__Z5setupv>:
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
 8002238:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff fba5 	bl	800198c <_Z41__static_initialization_and_destruction_0ii>
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_MspInit+0x4c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_MspInit+0x4c>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_I2C_MspInit+0x84>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_I2C_MspInit+0x88>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a17      	ldr	r2, [pc, #92]	; (800231c <HAL_I2C_MspInit+0x88>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_I2C_MspInit+0x88>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022d2:	23c0      	movs	r3, #192	; 0xc0
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d6:	2312      	movs	r3, #18
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022da:	2301      	movs	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022e2:	2304      	movs	r3, #4
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <HAL_I2C_MspInit+0x8c>)
 80022ee:	f000 fecb 	bl	8003088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_I2C_MspInit+0x88>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <HAL_I2C_MspInit+0x88>)
 80022fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_I2C_MspInit+0x88>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40005400 	.word	0x40005400
 800231c:	40023800 	.word	0x40023800
 8002320:	40020400 	.word	0x40020400

08002324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_UART_MspInit+0x150>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 8091 	bne.w	800246a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_UART_MspInit+0x154>)
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	4a49      	ldr	r2, [pc, #292]	; (8002478 <HAL_UART_MspInit+0x154>)
 8002352:	f043 0310 	orr.w	r3, r3, #16
 8002356:	6453      	str	r3, [r2, #68]	; 0x44
 8002358:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_UART_MspInit+0x154>)
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_UART_MspInit+0x154>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a42      	ldr	r2, [pc, #264]	; (8002478 <HAL_UART_MspInit+0x154>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b40      	ldr	r3, [pc, #256]	; (8002478 <HAL_UART_MspInit+0x154>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002380:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002392:	2307      	movs	r3, #7
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4837      	ldr	r0, [pc, #220]	; (800247c <HAL_UART_MspInit+0x158>)
 800239e:	f000 fe73 	bl	8003088 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023a2:	4b37      	ldr	r3, [pc, #220]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023a4:	4a37      	ldr	r2, [pc, #220]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b0:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023e2:	4827      	ldr	r0, [pc, #156]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023e4:	f000 fac0 	bl	8002968 <HAL_DMA_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023ee:	f7fe f9df 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_UART_MspInit+0x15c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_UART_MspInit+0x168>)
 8002402:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_UART_MspInit+0x164>)
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002414:	2200      	movs	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_UART_MspInit+0x164>)
 800241a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800241e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002422:	2200      	movs	r2, #0
 8002424:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_UART_MspInit+0x164>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_UART_MspInit+0x164>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800243e:	4812      	ldr	r0, [pc, #72]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002440:	f000 fa92 	bl	8002968 <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800244a:	f7fe f9b1 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_UART_MspInit+0x164>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2025      	movs	r0, #37	; 0x25
 8002460:	f000 fa4b 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002464:	2025      	movs	r0, #37	; 0x25
 8002466:	f000 fa64 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40011000 	.word	0x40011000
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000
 8002480:	20000124 	.word	0x20000124
 8002484:	40026440 	.word	0x40026440
 8002488:	20000184 	.word	0x20000184
 800248c:	400264b8 	.word	0x400264b8

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 f90e 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 ff7d 	bl	80033f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}

080024fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024fe:	2002      	movs	r0, #2
 8002500:	f000 ff76 	bl	80033f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <USART1_IRQHandler+0x10>)
 800250e:	f001 fde7 	bl	80040e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200000e4 	.word	0x200000e4

0800251c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <DMA2_Stream2_IRQHandler+0x10>)
 8002522:	f000 fb49 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000124 	.word	0x20000124

08002530 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <DMA2_Stream7_IRQHandler+0x10>)
 8002536:	f000 fb3f 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000184 	.word	0x20000184

08002544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	return 1;
 8002548:	2301      	movs	r3, #1
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_kill>:

int _kill(int pid, int sig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800255e:	f002 fc63 	bl	8004e28 <__errno>
 8002562:	4602      	mov	r2, r0
 8002564:	2316      	movs	r3, #22
 8002566:	6013      	str	r3, [r2, #0]
	return -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_exit>:

void _exit (int status)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ffe7 	bl	8002554 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002586:	e7fe      	b.n	8002586 <_exit+0x12>

08002588 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <_sbrk+0x50>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x16>
		heap_end = &end;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <_sbrk+0x50>)
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <_sbrk+0x54>)
 800259c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <_sbrk+0x50>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <_sbrk+0x50>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	466a      	mov	r2, sp
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d907      	bls.n	80025c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025b2:	f002 fc39 	bl	8004e28 <__errno>
 80025b6:	4602      	mov	r2, r0
 80025b8:	230c      	movs	r3, #12
 80025ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
 80025c0:	e006      	b.n	80025d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <_sbrk+0x50>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <_sbrk+0x50>)
 80025cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000b40 	.word	0x20000b40
 80025dc:	20000b58 	.word	0x20000b58

080025e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <SystemInit+0x28>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	4a07      	ldr	r2, [pc, #28]	; (8002608 <SystemInit+0x28>)
 80025ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SystemInit+0x28>)
 80025f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025fa:	609a      	str	r2, [r3, #8]
#endif
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800260c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002644 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002612:	e003      	b.n	800261c <LoopCopyDataInit>

08002614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800261a:	3104      	adds	r1, #4

0800261c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800261c:	480b      	ldr	r0, [pc, #44]	; (800264c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002624:	d3f6      	bcc.n	8002614 <CopyDataInit>
  ldr  r2, =_sbss
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002628:	e002      	b.n	8002630 <LoopFillZerobss>

0800262a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800262a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800262c:	f842 3b04 	str.w	r3, [r2], #4

08002630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002634:	d3f9      	bcc.n	800262a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002636:	f7ff ffd3 	bl	80025e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263a:	f002 fbfb 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263e:	f7fd ff4b 	bl	80004d8 <main>
  bx  lr    
 8002642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002644:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002648:	08005378 	.word	0x08005378
  ldr  r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002650:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002654:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002658:	20000b54 	.word	0x20000b54

0800265c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC_IRQHandler>
	...

08002660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_Init+0x40>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_Init+0x40>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_Init+0x40>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002688:	2003      	movs	r0, #3
 800268a:	f000 f92b 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268e:	2000      	movs	r0, #0
 8002690:	f000 f808 	bl	80026a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002694:	f7ff fdd6 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_InitTick+0x54>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x58>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f943 	bl	800294e <HAL_SYSTICK_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00e      	b.n	80026f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d80a      	bhi.n	80026ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f000 f90b 	bl	80028fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e4:	4a06      	ldr	r2, [pc, #24]	; (8002700 <HAL_InitTick+0x5c>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000008 	.word	0x20000008
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000008 	.word	0x20000008
 8002728:	20000b4c 	.word	0x20000b4c

0800272c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_GetTick+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000b4c 	.word	0x20000b4c

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f7ff ff8e 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff29 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800290c:	f7ff ff3e 	bl	800278c <__NVIC_GetPriorityGrouping>
 8002910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff8e 	bl	8002838 <NVIC_EncodePriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff5d 	bl	80027e4 <__NVIC_SetPriority>
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff31 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffa2 	bl	80028a0 <SysTick_Config>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff feda 	bl	800272c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e099      	b.n	8002ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	e00f      	b.n	80029c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a6:	f7ff fec1 	bl	800272c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d908      	bls.n	80029c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e078      	b.n	8002ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e8      	bne.n	80029a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_DMA_Init+0x158>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0307 	bic.w	r3, r3, #7
 8002a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d117      	bne.n	8002a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa91 	bl	8002f94 <DMA_CheckFifoParam>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a86:	2301      	movs	r3, #1
 8002a88:	e016      	b.n	8002ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa48 	bl	8002f28 <DMA_CalcBaseAndBitshift>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	223f      	movs	r2, #63	; 0x3f
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	f010803f 	.word	0xf010803f

08002ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_DMA_Start_IT+0x26>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e040      	b.n	8002b6c <HAL_DMA_Start_IT+0xa8>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d12f      	bne.n	8002b5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f9da 	bl	8002ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	223f      	movs	r2, #63	; 0x3f
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0216 	orr.w	r2, r2, #22
 8002b32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e005      	b.n	8002b6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00c      	b.n	8002bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_DMA_IRQHandler+0x258>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a92      	ldr	r2, [pc, #584]	; (8002e14 <HAL_DMA_IRQHandler+0x25c>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2208      	movs	r2, #8
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	2208      	movs	r2, #8
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	2201      	movs	r2, #1
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2204      	movs	r2, #4
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2210      	movs	r2, #16
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d043      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03c      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d024      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
 8002ce6:	e01f      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e016      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 808e 	beq.w	8002e56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8086 	beq.w	8002e56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2220      	movs	r2, #32
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d136      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0216 	bic.w	r2, r2, #22
 8002d70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x1da>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0208 	bic.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	223f      	movs	r2, #63	; 0x3f
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d07d      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
        }
        return;
 8002dce:	e078      	b.n	8002ec2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01c      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d030      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e02b      	b.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d027      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e022      	b.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
 8002e10:	20000000 	.word	0x20000000
 8002e14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0210 	bic.w	r2, r2, #16
 8002e34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d032      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d307      	bcc.n	8002e9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f2      	bne.n	8002e82 <HAL_DMA_IRQHandler+0x2ca>
 8002e9c:	e000      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e000      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ec2:	bf00      	nop
    }
  }
}
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop

08002ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d108      	bne.n	8002f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f0a:	e007      	b.n	8002f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3b10      	subs	r3, #16
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <DMA_CalcBaseAndBitshift+0x64>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <DMA_CalcBaseAndBitshift+0x68>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d909      	bls.n	8002f6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
 8002f68:	e007      	b.n	8002f7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	aaaaaaab 	.word	0xaaaaaaab
 8002f90:	0800535c 	.word	0x0800535c

08002f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11f      	bne.n	8002fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d855      	bhi.n	8003060 <DMA_CheckFifoParam+0xcc>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <DMA_CheckFifoParam+0x28>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fdf 	.word	0x08002fdf
 8002fc4:	08002fcd 	.word	0x08002fcd
 8002fc8:	08003061 	.word	0x08003061
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d045      	beq.n	8003064 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e042      	b.n	8003064 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe6:	d13f      	bne.n	8003068 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e03c      	b.n	8003068 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	d121      	bne.n	800303c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d836      	bhi.n	800306c <DMA_CheckFifoParam+0xd8>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <DMA_CheckFifoParam+0x70>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	0800301b 	.word	0x0800301b
 800300c:	08003015 	.word	0x08003015
 8003010:	0800302d 	.word	0x0800302d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e02f      	b.n	800307a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d024      	beq.n	8003070 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e021      	b.n	8003070 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003034:	d11e      	bne.n	8003074 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800303a:	e01b      	b.n	8003074 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <DMA_CheckFifoParam+0xb4>
 8003042:	2b03      	cmp	r3, #3
 8003044:	d003      	beq.n	800304e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003046:	e018      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      break;
 800304c:	e015      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
      break;
 800305e:	e00b      	b.n	8003078 <DMA_CheckFifoParam+0xe4>
      break;
 8003060:	bf00      	nop
 8003062:	e00a      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003064:	bf00      	nop
 8003066:	e008      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003068:	bf00      	nop
 800306a:	e006      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 800306c:	bf00      	nop
 800306e:	e004      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003070:	bf00      	nop
 8003072:	e002      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;   
 8003074:	bf00      	nop
 8003076:	e000      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003078:	bf00      	nop
    }
  } 
  
  return status; 
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e16b      	b.n	800337c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030a4:	2201      	movs	r2, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	429a      	cmp	r2, r3
 80030be:	f040 815a 	bne.w	8003376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d00b      	beq.n	80030e2 <HAL_GPIO_Init+0x5a>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030d6:	2b11      	cmp	r3, #17
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0xfc>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b12      	cmp	r3, #18
 8003182:	d123      	bne.n	80031cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	08da      	lsrs	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3208      	adds	r2, #8
 80031c6:	69b9      	ldr	r1, [r7, #24]
 80031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0203 	and.w	r2, r3, #3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80b4 	beq.w	8003376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b5f      	ldr	r3, [pc, #380]	; (8003390 <HAL_GPIO_Init+0x308>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a5e      	ldr	r2, [pc, #376]	; (8003390 <HAL_GPIO_Init+0x308>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	4b5c      	ldr	r3, [pc, #368]	; (8003390 <HAL_GPIO_Init+0x308>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322a:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <HAL_GPIO_Init+0x30c>)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a51      	ldr	r2, [pc, #324]	; (8003398 <HAL_GPIO_Init+0x310>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02b      	beq.n	80032ae <HAL_GPIO_Init+0x226>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_GPIO_Init+0x314>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d025      	beq.n	80032aa <HAL_GPIO_Init+0x222>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4f      	ldr	r2, [pc, #316]	; (80033a0 <HAL_GPIO_Init+0x318>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01f      	beq.n	80032a6 <HAL_GPIO_Init+0x21e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4e      	ldr	r2, [pc, #312]	; (80033a4 <HAL_GPIO_Init+0x31c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d019      	beq.n	80032a2 <HAL_GPIO_Init+0x21a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4d      	ldr	r2, [pc, #308]	; (80033a8 <HAL_GPIO_Init+0x320>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_GPIO_Init+0x216>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4c      	ldr	r2, [pc, #304]	; (80033ac <HAL_GPIO_Init+0x324>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00d      	beq.n	800329a <HAL_GPIO_Init+0x212>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4b      	ldr	r2, [pc, #300]	; (80033b0 <HAL_GPIO_Init+0x328>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <HAL_GPIO_Init+0x20e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4a      	ldr	r2, [pc, #296]	; (80033b4 <HAL_GPIO_Init+0x32c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_GPIO_Init+0x20a>
 800328e:	2307      	movs	r3, #7
 8003290:	e00e      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 8003292:	2308      	movs	r3, #8
 8003294:	e00c      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 8003296:	2306      	movs	r3, #6
 8003298:	e00a      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 800329a:	2305      	movs	r3, #5
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 800329e:	2304      	movs	r3, #4
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_Init+0x228>
 80032ae:	2300      	movs	r3, #0
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	f002 0203 	and.w	r2, r2, #3
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	4093      	lsls	r3, r2
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c0:	4934      	ldr	r1, [pc, #208]	; (8003394 <HAL_GPIO_Init+0x30c>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3302      	adds	r3, #2
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_GPIO_Init+0x330>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f2:	4a31      	ldr	r2, [pc, #196]	; (80033b8 <HAL_GPIO_Init+0x330>)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032f8:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <HAL_GPIO_Init+0x330>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <HAL_GPIO_Init+0x330>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003322:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_GPIO_Init+0x330>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_GPIO_Init+0x330>)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_GPIO_Init+0x330>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <HAL_GPIO_Init+0x330>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3301      	adds	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	f67f ae90 	bls.w	80030a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003384:	bf00      	nop
 8003386:	3724      	adds	r7, #36	; 0x24
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40023800 	.word	0x40023800
 8003394:	40013800 	.word	0x40013800
 8003398:	40020000 	.word	0x40020000
 800339c:	40020400 	.word	0x40020400
 80033a0:	40020800 	.word	0x40020800
 80033a4:	40020c00 	.word	0x40020c00
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40021400 	.word	0x40021400
 80033b0:	40021800 	.word	0x40021800
 80033b4:	40021c00 	.word	0x40021c00
 80033b8:	40013c00 	.word	0x40013c00

080033bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033cc:	787b      	ldrb	r3, [r7, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d8:	e003      	b.n	80033e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f806 	bl	8003420 <HAL_GPIO_EXTI_Callback>
  }
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40013c00 	.word	0x40013c00

08003420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e11f      	b.n	800368a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe ff18 	bl	8002294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800349c:	f000 fd3e 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 80034a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a7b      	ldr	r2, [pc, #492]	; (8003694 <HAL_I2C_Init+0x25c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d807      	bhi.n	80034bc <HAL_I2C_Init+0x84>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a7a      	ldr	r2, [pc, #488]	; (8003698 <HAL_I2C_Init+0x260>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	bf94      	ite	ls
 80034b4:	2301      	movls	r3, #1
 80034b6:	2300      	movhi	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e006      	b.n	80034ca <HAL_I2C_Init+0x92>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a77      	ldr	r2, [pc, #476]	; (800369c <HAL_I2C_Init+0x264>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0db      	b.n	800368a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a72      	ldr	r2, [pc, #456]	; (80036a0 <HAL_I2C_Init+0x268>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0c9b      	lsrs	r3, r3, #18
 80034dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a64      	ldr	r2, [pc, #400]	; (8003694 <HAL_I2C_Init+0x25c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d802      	bhi.n	800350c <HAL_I2C_Init+0xd4>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	e009      	b.n	8003520 <HAL_I2C_Init+0xe8>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	4a63      	ldr	r2, [pc, #396]	; (80036a4 <HAL_I2C_Init+0x26c>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	3301      	adds	r3, #1
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4956      	ldr	r1, [pc, #344]	; (8003694 <HAL_I2C_Init+0x25c>)
 800353c:	428b      	cmp	r3, r1
 800353e:	d80d      	bhi.n	800355c <HAL_I2C_Init+0x124>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e59      	subs	r1, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fbb1 f3f3 	udiv	r3, r1, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	2b04      	cmp	r3, #4
 8003556:	bf38      	it	cc
 8003558:	2304      	movcc	r3, #4
 800355a:	e04f      	b.n	80035fc <HAL_I2C_Init+0x1c4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <HAL_I2C_Init+0x150>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e012      	b.n	80035ae <HAL_I2C_Init+0x176>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e58      	subs	r0, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	0099      	lsls	r1, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Init+0x17e>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e022      	b.n	80035fc <HAL_I2C_Init+0x1c4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10e      	bne.n	80035dc <HAL_I2C_Init+0x1a4>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1e58      	subs	r0, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	440b      	add	r3, r1
 80035cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035da:	e00f      	b.n	80035fc <HAL_I2C_Init+0x1c4>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	6809      	ldr	r1, [r1, #0]
 8003600:	4313      	orrs	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800362a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6911      	ldr	r1, [r2, #16]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68d2      	ldr	r2, [r2, #12]
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	430b      	orrs	r3, r1
 800363e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	000186a0 	.word	0x000186a0
 8003698:	001e847f 	.word	0x001e847f
 800369c:	003d08ff 	.word	0x003d08ff
 80036a0:	431bde83 	.word	0x431bde83
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e25b      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d075      	beq.n	80037b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c6:	4ba3      	ldr	r3, [pc, #652]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d00c      	beq.n	80036ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d2:	4ba0      	ldr	r3, [pc, #640]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d112      	bne.n	8003704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036de:	4b9d      	ldr	r3, [pc, #628]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ea:	d10b      	bne.n	8003704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	4b99      	ldr	r3, [pc, #612]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x108>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d157      	bne.n	80037b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e236      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x74>
 800370e:	4b91      	ldr	r3, [pc, #580]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a90      	ldr	r2, [pc, #576]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xb0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x98>
 8003726:	4b8b      	ldr	r3, [pc, #556]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a8a      	ldr	r2, [pc, #552]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b88      	ldr	r3, [pc, #544]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a87      	ldr	r2, [pc, #540]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xb0>
 8003740:	4b84      	ldr	r3, [pc, #528]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a83      	ldr	r2, [pc, #524]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a80      	ldr	r2, [pc, #512]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe ffe4 	bl	800272c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003768:	f7fe ffe0 	bl	800272c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1fb      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xc0>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe ffd0 	bl	800272c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe ffcc 	bl	800272c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1e7      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	4b6c      	ldr	r3, [pc, #432]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0xe8>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d063      	beq.n	8003886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037be:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ca:	4b62      	ldr	r3, [pc, #392]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d11c      	bne.n	8003810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d6:	4b5f      	ldr	r3, [pc, #380]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	4b5c      	ldr	r3, [pc, #368]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x152>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1bb      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b56      	ldr	r3, [pc, #344]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4952      	ldr	r1, [pc, #328]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	e03a      	b.n	8003886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003818:	4b4f      	ldr	r3, [pc, #316]	; (8003958 <HAL_RCC_OscConfig+0x2b0>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe ff85 	bl	800272c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003826:	f7fe ff81 	bl	800272c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e19c      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4940      	ldr	r1, [pc, #256]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <HAL_RCC_OscConfig+0x2b0>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe ff64 	bl	800272c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003868:	f7fe ff60 	bl	800272c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e17b      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d030      	beq.n	80038f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389a:	4b30      	ldr	r3, [pc, #192]	; (800395c <HAL_RCC_OscConfig+0x2b4>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fe ff44 	bl	800272c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fe ff40 	bl	800272c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e15b      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x200>
 80038c6:	e015      	b.n	80038f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_RCC_OscConfig+0x2b4>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fe ff2d 	bl	800272c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d6:	f7fe ff29 	bl	800272c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e144      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80a0 	beq.w	8003a42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	6413      	str	r3, [r2, #64]	; 0x40
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_OscConfig+0x2b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d121      	bne.n	8003982 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <HAL_RCC_OscConfig+0x2b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a07      	ldr	r2, [pc, #28]	; (8003960 <HAL_RCC_OscConfig+0x2b8>)
 8003944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394a:	f7fe feef 	bl	800272c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	e011      	b.n	8003976 <HAL_RCC_OscConfig+0x2ce>
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	42470000 	.word	0x42470000
 800395c:	42470e80 	.word	0x42470e80
 8003960:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003964:	f7fe fee2 	bl	800272c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e0fd      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x4d4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d106      	bne.n	8003998 <HAL_RCC_OscConfig+0x2f0>
 800398a:	4b7d      	ldr	r3, [pc, #500]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a7c      	ldr	r2, [pc, #496]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	e01c      	b.n	80039d2 <HAL_RCC_OscConfig+0x32a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b05      	cmp	r3, #5
 800399e:	d10c      	bne.n	80039ba <HAL_RCC_OscConfig+0x312>
 80039a0:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a76      	ldr	r2, [pc, #472]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	4b74      	ldr	r3, [pc, #464]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a73      	ldr	r2, [pc, #460]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
 80039b8:	e00b      	b.n	80039d2 <HAL_RCC_OscConfig+0x32a>
 80039ba:	4b71      	ldr	r3, [pc, #452]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	4a70      	ldr	r2, [pc, #448]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6713      	str	r3, [r2, #112]	; 0x70
 80039c6:	4b6e      	ldr	r3, [pc, #440]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a6d      	ldr	r2, [pc, #436]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d015      	beq.n	8003a06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fe fea7 	bl	800272c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe fea3 	bl	800272c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0bc      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ee      	beq.n	80039e2 <HAL_RCC_OscConfig+0x33a>
 8003a04:	e014      	b.n	8003a30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7fe fe91 	bl	800272c <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe fe8d 	bl	800272c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0a6      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a24:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ee      	bne.n	8003a0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d105      	bne.n	8003a42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a36:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a51      	ldr	r2, [pc, #324]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8092 	beq.w	8003b70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d05c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d141      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a60:	4b48      	ldr	r3, [pc, #288]	; (8003b84 <HAL_RCC_OscConfig+0x4dc>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fe fe61 	bl	800272c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fe fe5d 	bl	800272c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e078      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	019b      	lsls	r3, r3, #6
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	061b      	lsls	r3, r3, #24
 8003ab0:	4933      	ldr	r1, [pc, #204]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab6:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <HAL_RCC_OscConfig+0x4dc>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fe fe36 	bl	800272c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fe fe32 	bl	800272c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e04d      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x41c>
 8003ae2:	e045      	b.n	8003b70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_OscConfig+0x4dc>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe fe1f 	bl	800272c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fe fe1b 	bl	800272c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e036      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x44a>
 8003b10:	e02e      	b.n	8003b70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e029      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_RCC_OscConfig+0x4d8>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d11c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d115      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	40023800 	.word	0x40023800
 8003b84:	42470060 	.word	0x42470060

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cc      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d90c      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e067      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4934      	ldr	r1, [pc, #208]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c78:	f7fe fd58 	bl	800272c <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fd54 	bl	800272c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e04f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20c      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	5cd3      	ldrb	r3, [r2, r3]
 8003d22:	fa21 f303 	lsr.w	r3, r1, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fcb8 	bl	80026a4 <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08005344 	.word	0x08005344
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	2300      	movs	r3, #0
 8003d64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d007      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x32>
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d008      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x38>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 80b4 	bne.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d82:	60bb      	str	r3, [r7, #8]
       break;
 8003d84:	e0b3      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d86:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d88:	60bb      	str	r3, [r7, #8]
      break;
 8003d8a:	e0b0      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d96:	4b58      	ldr	r3, [pc, #352]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d04a      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da2:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	f04f 0400 	mov.w	r4, #0
 8003dac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	ea03 0501 	and.w	r5, r3, r1
 8003db8:	ea04 0602 	and.w	r6, r4, r2
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f04f 0400 	mov.w	r4, #0
 8003dc8:	0154      	lsls	r4, r2, #5
 8003dca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dce:	014b      	lsls	r3, r1, #5
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	1b49      	subs	r1, r1, r5
 8003dd6:	eb62 0206 	sbc.w	r2, r2, r6
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	f04f 0400 	mov.w	r4, #0
 8003de2:	0194      	lsls	r4, r2, #6
 8003de4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003de8:	018b      	lsls	r3, r1, #6
 8003dea:	1a5b      	subs	r3, r3, r1
 8003dec:	eb64 0402 	sbc.w	r4, r4, r2
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	00e2      	lsls	r2, r4, #3
 8003dfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dfe:	00d9      	lsls	r1, r3, #3
 8003e00:	460b      	mov	r3, r1
 8003e02:	4614      	mov	r4, r2
 8003e04:	195b      	adds	r3, r3, r5
 8003e06:	eb44 0406 	adc.w	r4, r4, r6
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	0262      	lsls	r2, r4, #9
 8003e14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e18:	0259      	lsls	r1, r3, #9
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	4621      	mov	r1, r4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f04f 0400 	mov.w	r4, #0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	f7fc f9d4 	bl	80001d8 <__aeabi_uldivmod>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e049      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e38:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	099b      	lsrs	r3, r3, #6
 8003e3e:	f04f 0400 	mov.w	r4, #0
 8003e42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	ea03 0501 	and.w	r5, r3, r1
 8003e4e:	ea04 0602 	and.w	r6, r4, r2
 8003e52:	4629      	mov	r1, r5
 8003e54:	4632      	mov	r2, r6
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	f04f 0400 	mov.w	r4, #0
 8003e5e:	0154      	lsls	r4, r2, #5
 8003e60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e64:	014b      	lsls	r3, r1, #5
 8003e66:	4619      	mov	r1, r3
 8003e68:	4622      	mov	r2, r4
 8003e6a:	1b49      	subs	r1, r1, r5
 8003e6c:	eb62 0206 	sbc.w	r2, r2, r6
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f04f 0400 	mov.w	r4, #0
 8003e78:	0194      	lsls	r4, r2, #6
 8003e7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e7e:	018b      	lsls	r3, r1, #6
 8003e80:	1a5b      	subs	r3, r3, r1
 8003e82:	eb64 0402 	sbc.w	r4, r4, r2
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	00e2      	lsls	r2, r4, #3
 8003e90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e94:	00d9      	lsls	r1, r3, #3
 8003e96:	460b      	mov	r3, r1
 8003e98:	4614      	mov	r4, r2
 8003e9a:	195b      	adds	r3, r3, r5
 8003e9c:	eb44 0406 	adc.w	r4, r4, r6
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	02a2      	lsls	r2, r4, #10
 8003eaa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003eae:	0299      	lsls	r1, r3, #10
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f04f 0400 	mov.w	r4, #0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	f7fc f989 	bl	80001d8 <__aeabi_uldivmod>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	460c      	mov	r4, r1
 8003eca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	60bb      	str	r3, [r7, #8]
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eea:	60bb      	str	r3, [r7, #8]
      break;
 8003eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eee:	68bb      	ldr	r3, [r7, #8]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200

08003f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f20:	f7ff fff0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f24:	4601      	mov	r1, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4a03      	ldr	r2, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08005354 	.word	0x08005354

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f48:	f7ff ffdc 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4601      	mov	r1, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0b5b      	lsrs	r3, r3, #13
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4a03      	ldr	r2, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	08005354 	.word	0x08005354

08003f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e03f      	b.n	8003ffe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fe f9c6 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fb75 	bl	80046a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b20      	cmp	r3, #32
 8004020:	d153      	bne.n	80040ca <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_UART_Transmit_DMA+0x26>
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e04c      	b.n	80040cc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_UART_Transmit_DMA+0x38>
 800403c:	2302      	movs	r3, #2
 800403e:	e045      	b.n	80040cc <HAL_UART_Transmit_DMA+0xc4>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2221      	movs	r2, #33	; 0x21
 8004064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <HAL_UART_Transmit_DMA+0xcc>)
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_UART_Transmit_DMA+0xd0>)
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_UART_Transmit_DMA+0xd4>)
 800407e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	2200      	movs	r2, #0
 8004086:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004088:	f107 0308 	add.w	r3, r7, #8
 800408c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3304      	adds	r3, #4
 800409c:	461a      	mov	r2, r3
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	f7fe fd10 	bl	8002ac4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040c4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	08004331 	.word	0x08004331
 80040d8:	08004383 	.word	0x08004383
 80040dc:	0800439f 	.word	0x0800439f

080040e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_UART_IRQHandler+0x52>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fa37 	bl	800459e <UART_Receive_IT>
      return;
 8004130:	e0d1      	b.n	80042d6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80b0 	beq.w	800429a <HAL_UART_IRQHandler+0x1ba>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <HAL_UART_IRQHandler+0x70>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80a5 	beq.w	800429a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_UART_IRQHandler+0x90>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	f043 0201 	orr.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_UART_IRQHandler+0xb0>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	f043 0202 	orr.w	r2, r3, #2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_UART_IRQHandler+0xd0>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	f043 0204 	orr.w	r2, r3, #4
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00f      	beq.n	80041da <HAL_UART_IRQHandler+0xfa>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d104      	bne.n	80041ce <HAL_UART_IRQHandler+0xee>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	f043 0208 	orr.w	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d078      	beq.n	80042d4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_UART_IRQHandler+0x11c>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9d1 	bl	800459e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <HAL_UART_IRQHandler+0x144>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d031      	beq.n	8004288 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f91a 	bl	800445e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d123      	bne.n	8004280 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004246:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004254:	4a21      	ldr	r2, [pc, #132]	; (80042dc <HAL_UART_IRQHandler+0x1fc>)
 8004256:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fc89 	bl	8002b74 <HAL_DMA_Abort_IT>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d016      	beq.n	8004296 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004272:	4610      	mov	r0, r2
 8004274:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004276:	e00e      	b.n	8004296 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f84f 	bl	800431c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427e:	e00a      	b.n	8004296 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f84b 	bl	800431c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004286:	e006      	b.n	8004296 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f847 	bl	800431c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004294:	e01e      	b.n	80042d4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004296:	bf00      	nop
    return;
 8004298:	e01c      	b.n	80042d4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x1d6>
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f907 	bl	80044c2 <UART_Transmit_IT>
    return;
 80042b4:	e00f      	b.n	80042d6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_UART_IRQHandler+0x1f6>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f94f 	bl	800456e <UART_EndTransmit_IT>
    return;
 80042d0:	bf00      	nop
 80042d2:	e000      	b.n	80042d6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80042d4:	bf00      	nop
  }
}
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	0800449b 	.word	0x0800449b

080042e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d113      	bne.n	8004374 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004360:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004370:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004372:	e002      	b.n	800437a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff ffb3 	bl	80042e0 <HAL_UART_TxCpltCallback>
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff ffaf 	bl	80042f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b21      	cmp	r3, #33	; 0x21
 80043d0:	d108      	bne.n	80043e4 <UART_DMAError+0x46>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80043de:	68b8      	ldr	r0, [r7, #8]
 80043e0:	f000 f827 	bl	8004432 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	bf0c      	ite	eq
 80043f2:	2301      	moveq	r3, #1
 80043f4:	2300      	movne	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b22      	cmp	r3, #34	; 0x22
 8004404:	d108      	bne.n	8004418 <UART_DMAError+0x7a>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2200      	movs	r2, #0
 8004410:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004412:	68b8      	ldr	r0, [r7, #8]
 8004414:	f000 f823 	bl	800445e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	f043 0210 	orr.w	r2, r3, #16
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004424:	68b8      	ldr	r0, [r7, #8]
 8004426:	f7ff ff79 	bl	800431c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004448:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004474:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff ff31 	bl	800431c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b21      	cmp	r3, #33	; 0x21
 80044d4:	d144      	bne.n	8004560 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	d11a      	bne.n	8004516 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]
 8004508:	e00e      	b.n	8004528 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]
 8004514:	e008      	b.n	8004528 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6211      	str	r1, [r2, #32]
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29b      	uxth	r3, r3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4619      	mov	r1, r3
 8004536:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10f      	bne.n	800455c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004584:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fea6 	bl	80042e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b22      	cmp	r3, #34	; 0x22
 80045b0:	d171      	bne.n	8004696 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d123      	bne.n	8004604 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10e      	bne.n	80045e8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	1c9a      	adds	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
 80045e6:	e029      	b.n	800463c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	629a      	str	r2, [r3, #40]	; 0x28
 8004602:	e01b      	b.n	800463c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6858      	ldr	r0, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6291      	str	r1, [r2, #40]	; 0x28
 800461c:	b2c2      	uxtb	r2, r0
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e00c      	b.n	800463c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	1c58      	adds	r0, r3, #1
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6288      	str	r0, [r1, #40]	; 0x28
 8004634:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29b      	uxth	r3, r3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4619      	mov	r1, r3
 800464a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800464c:	2b00      	cmp	r3, #0
 800464e:	d120      	bne.n	8004692 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0220 	bic.w	r2, r2, #32
 800465e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800466e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fe3d 	bl	8004308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e002      	b.n	8004698 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80046e2:	f023 030c 	bic.w	r3, r3, #12
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470e:	f040 818b 	bne.w	8004a28 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4ac1      	ldr	r2, [pc, #772]	; (8004a1c <UART_SetConfig+0x37c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d005      	beq.n	8004728 <UART_SetConfig+0x88>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4abf      	ldr	r2, [pc, #764]	; (8004a20 <UART_SetConfig+0x380>)
 8004722:	4293      	cmp	r3, r2
 8004724:	f040 80bd 	bne.w	80048a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7ff fc0c 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 800472c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	461d      	mov	r5, r3
 8004732:	f04f 0600 	mov.w	r6, #0
 8004736:	46a8      	mov	r8, r5
 8004738:	46b1      	mov	r9, r6
 800473a:	eb18 0308 	adds.w	r3, r8, r8
 800473e:	eb49 0409 	adc.w	r4, r9, r9
 8004742:	4698      	mov	r8, r3
 8004744:	46a1      	mov	r9, r4
 8004746:	eb18 0805 	adds.w	r8, r8, r5
 800474a:	eb49 0906 	adc.w	r9, r9, r6
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800475a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800475e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004762:	4688      	mov	r8, r1
 8004764:	4691      	mov	r9, r2
 8004766:	eb18 0005 	adds.w	r0, r8, r5
 800476a:	eb49 0106 	adc.w	r1, r9, r6
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	461d      	mov	r5, r3
 8004774:	f04f 0600 	mov.w	r6, #0
 8004778:	196b      	adds	r3, r5, r5
 800477a:	eb46 0406 	adc.w	r4, r6, r6
 800477e:	461a      	mov	r2, r3
 8004780:	4623      	mov	r3, r4
 8004782:	f7fb fd29 	bl	80001d8 <__aeabi_uldivmod>
 8004786:	4603      	mov	r3, r0
 8004788:	460c      	mov	r4, r1
 800478a:	461a      	mov	r2, r3
 800478c:	4ba5      	ldr	r3, [pc, #660]	; (8004a24 <UART_SetConfig+0x384>)
 800478e:	fba3 2302 	umull	r2, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	461d      	mov	r5, r3
 800479c:	f04f 0600 	mov.w	r6, #0
 80047a0:	46a9      	mov	r9, r5
 80047a2:	46b2      	mov	sl, r6
 80047a4:	eb19 0309 	adds.w	r3, r9, r9
 80047a8:	eb4a 040a 	adc.w	r4, sl, sl
 80047ac:	4699      	mov	r9, r3
 80047ae:	46a2      	mov	sl, r4
 80047b0:	eb19 0905 	adds.w	r9, r9, r5
 80047b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047cc:	4689      	mov	r9, r1
 80047ce:	4692      	mov	sl, r2
 80047d0:	eb19 0005 	adds.w	r0, r9, r5
 80047d4:	eb4a 0106 	adc.w	r1, sl, r6
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	461d      	mov	r5, r3
 80047de:	f04f 0600 	mov.w	r6, #0
 80047e2:	196b      	adds	r3, r5, r5
 80047e4:	eb46 0406 	adc.w	r4, r6, r6
 80047e8:	461a      	mov	r2, r3
 80047ea:	4623      	mov	r3, r4
 80047ec:	f7fb fcf4 	bl	80001d8 <__aeabi_uldivmod>
 80047f0:	4603      	mov	r3, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <UART_SetConfig+0x384>)
 80047f8:	fba3 1302 	umull	r1, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	2164      	movs	r1, #100	; 0x64
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	3332      	adds	r3, #50	; 0x32
 800480a:	4a86      	ldr	r2, [pc, #536]	; (8004a24 <UART_SetConfig+0x384>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004818:	4498      	add	r8, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	461d      	mov	r5, r3
 800481e:	f04f 0600 	mov.w	r6, #0
 8004822:	46a9      	mov	r9, r5
 8004824:	46b2      	mov	sl, r6
 8004826:	eb19 0309 	adds.w	r3, r9, r9
 800482a:	eb4a 040a 	adc.w	r4, sl, sl
 800482e:	4699      	mov	r9, r3
 8004830:	46a2      	mov	sl, r4
 8004832:	eb19 0905 	adds.w	r9, r9, r5
 8004836:	eb4a 0a06 	adc.w	sl, sl, r6
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004846:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800484a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800484e:	4689      	mov	r9, r1
 8004850:	4692      	mov	sl, r2
 8004852:	eb19 0005 	adds.w	r0, r9, r5
 8004856:	eb4a 0106 	adc.w	r1, sl, r6
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	461d      	mov	r5, r3
 8004860:	f04f 0600 	mov.w	r6, #0
 8004864:	196b      	adds	r3, r5, r5
 8004866:	eb46 0406 	adc.w	r4, r6, r6
 800486a:	461a      	mov	r2, r3
 800486c:	4623      	mov	r3, r4
 800486e:	f7fb fcb3 	bl	80001d8 <__aeabi_uldivmod>
 8004872:	4603      	mov	r3, r0
 8004874:	460c      	mov	r4, r1
 8004876:	461a      	mov	r2, r3
 8004878:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <UART_SetConfig+0x384>)
 800487a:	fba3 1302 	umull	r1, r3, r3, r2
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2164      	movs	r1, #100	; 0x64
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	3332      	adds	r3, #50	; 0x32
 800488c:	4a65      	ldr	r2, [pc, #404]	; (8004a24 <UART_SetConfig+0x384>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	f003 0207 	and.w	r2, r3, #7
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4442      	add	r2, r8
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	e26f      	b.n	8004d82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048a2:	f7ff fb3b 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 80048a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	461d      	mov	r5, r3
 80048ac:	f04f 0600 	mov.w	r6, #0
 80048b0:	46a8      	mov	r8, r5
 80048b2:	46b1      	mov	r9, r6
 80048b4:	eb18 0308 	adds.w	r3, r8, r8
 80048b8:	eb49 0409 	adc.w	r4, r9, r9
 80048bc:	4698      	mov	r8, r3
 80048be:	46a1      	mov	r9, r4
 80048c0:	eb18 0805 	adds.w	r8, r8, r5
 80048c4:	eb49 0906 	adc.w	r9, r9, r6
 80048c8:	f04f 0100 	mov.w	r1, #0
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048dc:	4688      	mov	r8, r1
 80048de:	4691      	mov	r9, r2
 80048e0:	eb18 0005 	adds.w	r0, r8, r5
 80048e4:	eb49 0106 	adc.w	r1, r9, r6
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	461d      	mov	r5, r3
 80048ee:	f04f 0600 	mov.w	r6, #0
 80048f2:	196b      	adds	r3, r5, r5
 80048f4:	eb46 0406 	adc.w	r4, r6, r6
 80048f8:	461a      	mov	r2, r3
 80048fa:	4623      	mov	r3, r4
 80048fc:	f7fb fc6c 	bl	80001d8 <__aeabi_uldivmod>
 8004900:	4603      	mov	r3, r0
 8004902:	460c      	mov	r4, r1
 8004904:	461a      	mov	r2, r3
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <UART_SetConfig+0x384>)
 8004908:	fba3 2302 	umull	r2, r3, r3, r2
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	461d      	mov	r5, r3
 8004916:	f04f 0600 	mov.w	r6, #0
 800491a:	46a9      	mov	r9, r5
 800491c:	46b2      	mov	sl, r6
 800491e:	eb19 0309 	adds.w	r3, r9, r9
 8004922:	eb4a 040a 	adc.w	r4, sl, sl
 8004926:	4699      	mov	r9, r3
 8004928:	46a2      	mov	sl, r4
 800492a:	eb19 0905 	adds.w	r9, r9, r5
 800492e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800493e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004942:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004946:	4689      	mov	r9, r1
 8004948:	4692      	mov	sl, r2
 800494a:	eb19 0005 	adds.w	r0, r9, r5
 800494e:	eb4a 0106 	adc.w	r1, sl, r6
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	461d      	mov	r5, r3
 8004958:	f04f 0600 	mov.w	r6, #0
 800495c:	196b      	adds	r3, r5, r5
 800495e:	eb46 0406 	adc.w	r4, r6, r6
 8004962:	461a      	mov	r2, r3
 8004964:	4623      	mov	r3, r4
 8004966:	f7fb fc37 	bl	80001d8 <__aeabi_uldivmod>
 800496a:	4603      	mov	r3, r0
 800496c:	460c      	mov	r4, r1
 800496e:	461a      	mov	r2, r3
 8004970:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <UART_SetConfig+0x384>)
 8004972:	fba3 1302 	umull	r1, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2164      	movs	r1, #100	; 0x64
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a27      	ldr	r2, [pc, #156]	; (8004a24 <UART_SetConfig+0x384>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004992:	4498      	add	r8, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	461d      	mov	r5, r3
 8004998:	f04f 0600 	mov.w	r6, #0
 800499c:	46a9      	mov	r9, r5
 800499e:	46b2      	mov	sl, r6
 80049a0:	eb19 0309 	adds.w	r3, r9, r9
 80049a4:	eb4a 040a 	adc.w	r4, sl, sl
 80049a8:	4699      	mov	r9, r3
 80049aa:	46a2      	mov	sl, r4
 80049ac:	eb19 0905 	adds.w	r9, r9, r5
 80049b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049c8:	4689      	mov	r9, r1
 80049ca:	4692      	mov	sl, r2
 80049cc:	eb19 0005 	adds.w	r0, r9, r5
 80049d0:	eb4a 0106 	adc.w	r1, sl, r6
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	461d      	mov	r5, r3
 80049da:	f04f 0600 	mov.w	r6, #0
 80049de:	196b      	adds	r3, r5, r5
 80049e0:	eb46 0406 	adc.w	r4, r6, r6
 80049e4:	461a      	mov	r2, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	f7fb fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80049ec:	4603      	mov	r3, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <UART_SetConfig+0x384>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	; 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	3332      	adds	r3, #50	; 0x32
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <UART_SetConfig+0x384>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 0207 	and.w	r2, r3, #7
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4442      	add	r2, r8
 8004a18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a1a:	e1b2      	b.n	8004d82 <UART_SetConfig+0x6e2>
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4ad7      	ldr	r2, [pc, #860]	; (8004d8c <UART_SetConfig+0x6ec>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d005      	beq.n	8004a3e <UART_SetConfig+0x39e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4ad6      	ldr	r2, [pc, #856]	; (8004d90 <UART_SetConfig+0x6f0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	f040 80d1 	bne.w	8004be0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a3e:	f7ff fa81 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8004a42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	469a      	mov	sl, r3
 8004a48:	f04f 0b00 	mov.w	fp, #0
 8004a4c:	46d0      	mov	r8, sl
 8004a4e:	46d9      	mov	r9, fp
 8004a50:	eb18 0308 	adds.w	r3, r8, r8
 8004a54:	eb49 0409 	adc.w	r4, r9, r9
 8004a58:	4698      	mov	r8, r3
 8004a5a:	46a1      	mov	r9, r4
 8004a5c:	eb18 080a 	adds.w	r8, r8, sl
 8004a60:	eb49 090b 	adc.w	r9, r9, fp
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a78:	4688      	mov	r8, r1
 8004a7a:	4691      	mov	r9, r2
 8004a7c:	eb1a 0508 	adds.w	r5, sl, r8
 8004a80:	eb4b 0609 	adc.w	r6, fp, r9
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	0094      	lsls	r4, r2, #2
 8004a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a9c:	008b      	lsls	r3, r1, #2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	f7fb fb97 	bl	80001d8 <__aeabi_uldivmod>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	460c      	mov	r4, r1
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4bb8      	ldr	r3, [pc, #736]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	469b      	mov	fp, r3
 8004ac0:	f04f 0c00 	mov.w	ip, #0
 8004ac4:	46d9      	mov	r9, fp
 8004ac6:	46e2      	mov	sl, ip
 8004ac8:	eb19 0309 	adds.w	r3, r9, r9
 8004acc:	eb4a 040a 	adc.w	r4, sl, sl
 8004ad0:	4699      	mov	r9, r3
 8004ad2:	46a2      	mov	sl, r4
 8004ad4:	eb19 090b 	adds.w	r9, r9, fp
 8004ad8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004af0:	4689      	mov	r9, r1
 8004af2:	4692      	mov	sl, r2
 8004af4:	eb1b 0509 	adds.w	r5, fp, r9
 8004af8:	eb4c 060a 	adc.w	r6, ip, sl
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4619      	mov	r1, r3
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	0094      	lsls	r4, r2, #2
 8004b10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b14:	008b      	lsls	r3, r1, #2
 8004b16:	461a      	mov	r2, r3
 8004b18:	4623      	mov	r3, r4
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	f7fb fb5b 	bl	80001d8 <__aeabi_uldivmod>
 8004b22:	4603      	mov	r3, r0
 8004b24:	460c      	mov	r4, r1
 8004b26:	461a      	mov	r2, r3
 8004b28:	4b9a      	ldr	r3, [pc, #616]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2164      	movs	r1, #100	; 0x64
 8004b32:	fb01 f303 	mul.w	r3, r1, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	3332      	adds	r3, #50	; 0x32
 8004b3c:	4a95      	ldr	r2, [pc, #596]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b48:	4498      	add	r8, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	469b      	mov	fp, r3
 8004b4e:	f04f 0c00 	mov.w	ip, #0
 8004b52:	46d9      	mov	r9, fp
 8004b54:	46e2      	mov	sl, ip
 8004b56:	eb19 0309 	adds.w	r3, r9, r9
 8004b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8004b5e:	4699      	mov	r9, r3
 8004b60:	46a2      	mov	sl, r4
 8004b62:	eb19 090b 	adds.w	r9, r9, fp
 8004b66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b7e:	4689      	mov	r9, r1
 8004b80:	4692      	mov	sl, r2
 8004b82:	eb1b 0509 	adds.w	r5, fp, r9
 8004b86:	eb4c 060a 	adc.w	r6, ip, sl
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	0094      	lsls	r4, r2, #2
 8004b9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ba2:	008b      	lsls	r3, r1, #2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	4631      	mov	r1, r6
 8004bac:	f7fb fb14 	bl	80001d8 <__aeabi_uldivmod>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b77      	ldr	r3, [pc, #476]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	2164      	movs	r1, #100	; 0x64
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	3332      	adds	r3, #50	; 0x32
 8004bca:	4a72      	ldr	r2, [pc, #456]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	f003 020f 	and.w	r2, r3, #15
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4442      	add	r2, r8
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	e0d0      	b.n	8004d82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7ff f99c 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8004be4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	469a      	mov	sl, r3
 8004bea:	f04f 0b00 	mov.w	fp, #0
 8004bee:	46d0      	mov	r8, sl
 8004bf0:	46d9      	mov	r9, fp
 8004bf2:	eb18 0308 	adds.w	r3, r8, r8
 8004bf6:	eb49 0409 	adc.w	r4, r9, r9
 8004bfa:	4698      	mov	r8, r3
 8004bfc:	46a1      	mov	r9, r4
 8004bfe:	eb18 080a 	adds.w	r8, r8, sl
 8004c02:	eb49 090b 	adc.w	r9, r9, fp
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c1a:	4688      	mov	r8, r1
 8004c1c:	4691      	mov	r9, r2
 8004c1e:	eb1a 0508 	adds.w	r5, sl, r8
 8004c22:	eb4b 0609 	adc.w	r6, fp, r9
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	f04f 0400 	mov.w	r4, #0
 8004c38:	0094      	lsls	r4, r2, #2
 8004c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c3e:	008b      	lsls	r3, r1, #2
 8004c40:	461a      	mov	r2, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	4628      	mov	r0, r5
 8004c46:	4631      	mov	r1, r6
 8004c48:	f7fb fac6 	bl	80001d8 <__aeabi_uldivmod>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	460c      	mov	r4, r1
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b50      	ldr	r3, [pc, #320]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004c54:	fba3 2302 	umull	r2, r3, r3, r2
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	469b      	mov	fp, r3
 8004c62:	f04f 0c00 	mov.w	ip, #0
 8004c66:	46d9      	mov	r9, fp
 8004c68:	46e2      	mov	sl, ip
 8004c6a:	eb19 0309 	adds.w	r3, r9, r9
 8004c6e:	eb4a 040a 	adc.w	r4, sl, sl
 8004c72:	4699      	mov	r9, r3
 8004c74:	46a2      	mov	sl, r4
 8004c76:	eb19 090b 	adds.w	r9, r9, fp
 8004c7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c7e:	f04f 0100 	mov.w	r1, #0
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c92:	4689      	mov	r9, r1
 8004c94:	4692      	mov	sl, r2
 8004c96:	eb1b 0509 	adds.w	r5, fp, r9
 8004c9a:	eb4c 060a 	adc.w	r6, ip, sl
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	f04f 0400 	mov.w	r4, #0
 8004cb0:	0094      	lsls	r4, r2, #2
 8004cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cb6:	008b      	lsls	r3, r1, #2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4623      	mov	r3, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	f7fb fa8a 	bl	80001d8 <__aeabi_uldivmod>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	; 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	3332      	adds	r3, #50	; 0x32
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cea:	4498      	add	r8, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	469b      	mov	fp, r3
 8004cf0:	f04f 0c00 	mov.w	ip, #0
 8004cf4:	46d9      	mov	r9, fp
 8004cf6:	46e2      	mov	sl, ip
 8004cf8:	eb19 0309 	adds.w	r3, r9, r9
 8004cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8004d00:	4699      	mov	r9, r3
 8004d02:	46a2      	mov	sl, r4
 8004d04:	eb19 090b 	adds.w	r9, r9, fp
 8004d08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d20:	4689      	mov	r9, r1
 8004d22:	4692      	mov	sl, r2
 8004d24:	eb1b 0509 	adds.w	r5, fp, r9
 8004d28:	eb4c 060a 	adc.w	r6, ip, sl
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4619      	mov	r1, r3
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	f04f 0400 	mov.w	r4, #0
 8004d3e:	0094      	lsls	r4, r2, #2
 8004d40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d44:	008b      	lsls	r3, r1, #2
 8004d46:	461a      	mov	r2, r3
 8004d48:	4623      	mov	r3, r4
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	f7fb fa43 	bl	80001d8 <__aeabi_uldivmod>
 8004d52:	4603      	mov	r3, r0
 8004d54:	460c      	mov	r4, r1
 8004d56:	461a      	mov	r2, r3
 8004d58:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2164      	movs	r1, #100	; 0x64
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	3332      	adds	r3, #50	; 0x32
 8004d6c:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <UART_SetConfig+0x6f4>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	f003 020f 	and.w	r2, r3, #15
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4442      	add	r2, r8
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	e7ff      	b.n	8004d82 <UART_SetConfig+0x6e2>
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8c:	40011000 	.word	0x40011000
 8004d90:	40011400 	.word	0x40011400
 8004d94:	51eb851f 	.word	0x51eb851f

08004d98 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0a5a      	lsrs	r2, r3, #9
 8004da8:	490f      	ldr	r1, [pc, #60]	; (8004de8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004daa:	fba1 1202 	umull	r1, r2, r1, r2
 8004dae:	09d2      	lsrs	r2, r2, #7
 8004db0:	490e      	ldr	r1, [pc, #56]	; (8004dec <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004db2:	fb01 f202 	mul.w	r2, r1, r2
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	0a5b      	lsrs	r3, r3, #9
 8004dc0:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	09db      	lsrs	r3, r3, #7
 8004dc8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	00044b83 	.word	0x00044b83
 8004dec:	3b9aca00 	.word	0x3b9aca00

08004df0 <__cxa_pure_virtual>:
 8004df0:	b508      	push	{r3, lr}
 8004df2:	f000 f80d 	bl	8004e10 <_ZSt9terminatev>

08004df6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004df6:	b508      	push	{r3, lr}
 8004df8:	4780      	blx	r0
 8004dfa:	f000 f80e 	bl	8004e1a <abort>
	...

08004e00 <_ZSt13get_terminatev>:
 8004e00:	4b02      	ldr	r3, [pc, #8]	; (8004e0c <_ZSt13get_terminatev+0xc>)
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	f3bf 8f5b 	dmb	ish
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	2000000c 	.word	0x2000000c

08004e10 <_ZSt9terminatev>:
 8004e10:	b508      	push	{r3, lr}
 8004e12:	f7ff fff5 	bl	8004e00 <_ZSt13get_terminatev>
 8004e16:	f7ff ffee 	bl	8004df6 <_ZN10__cxxabiv111__terminateEPFvvE>

08004e1a <abort>:
 8004e1a:	b508      	push	{r3, lr}
 8004e1c:	2006      	movs	r0, #6
 8004e1e:	f000 f871 	bl	8004f04 <raise>
 8004e22:	2001      	movs	r0, #1
 8004e24:	f7fd fba6 	bl	8002574 <_exit>

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000010 	.word	0x20000010

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4e0d      	ldr	r6, [pc, #52]	; (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1ba4      	subs	r4, r4, r6
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2500      	movs	r5, #0
 8004e40:	42a5      	cmp	r5, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4e0b      	ldr	r6, [pc, #44]	; (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	; (8004e78 <__libc_init_array+0x44>)
 8004e48:	f000 f960 	bl	800510c <_init>
 8004e4c:	1ba4      	subs	r4, r4, r6
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2500      	movs	r5, #0
 8004e52:	42a5      	cmp	r5, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e5c:	4798      	blx	r3
 8004e5e:	3501      	adds	r5, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e66:	4798      	blx	r3
 8004e68:	3501      	adds	r5, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	0800536c 	.word	0x0800536c
 8004e70:	0800536c 	.word	0x0800536c
 8004e74:	0800536c 	.word	0x0800536c
 8004e78:	08005374 	.word	0x08005374

08004e7c <memcpy>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	1e43      	subs	r3, r0, #1
 8004e80:	440a      	add	r2, r1
 8004e82:	4291      	cmp	r1, r2
 8004e84:	d100      	bne.n	8004e88 <memcpy+0xc>
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e90:	e7f7      	b.n	8004e82 <memcpy+0x6>

08004e92 <memset>:
 8004e92:	4402      	add	r2, r0
 8004e94:	4603      	mov	r3, r0
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d100      	bne.n	8004e9c <memset+0xa>
 8004e9a:	4770      	bx	lr
 8004e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea0:	e7f9      	b.n	8004e96 <memset+0x4>
	...

08004ea4 <realloc>:
 8004ea4:	4b02      	ldr	r3, [pc, #8]	; (8004eb0 <realloc+0xc>)
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	4601      	mov	r1, r0
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	f000 b8a0 	b.w	8004ff0 <_realloc_r>
 8004eb0:	20000010 	.word	0x20000010

08004eb4 <_raise_r>:
 8004eb4:	291f      	cmp	r1, #31
 8004eb6:	b538      	push	{r3, r4, r5, lr}
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	d904      	bls.n	8004ec8 <_raise_r+0x14>
 8004ebe:	2316      	movs	r3, #22
 8004ec0:	6003      	str	r3, [r0, #0]
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004eca:	b112      	cbz	r2, 8004ed2 <_raise_r+0x1e>
 8004ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ed0:	b94b      	cbnz	r3, 8004ee6 <_raise_r+0x32>
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f830 	bl	8004f38 <_getpid_r>
 8004ed8:	462a      	mov	r2, r5
 8004eda:	4601      	mov	r1, r0
 8004edc:	4620      	mov	r0, r4
 8004ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee2:	f000 b817 	b.w	8004f14 <_kill_r>
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d00a      	beq.n	8004f00 <_raise_r+0x4c>
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	d103      	bne.n	8004ef6 <_raise_r+0x42>
 8004eee:	2316      	movs	r3, #22
 8004ef0:	6003      	str	r3, [r0, #0]
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	e7e7      	b.n	8004ec6 <_raise_r+0x12>
 8004ef6:	2400      	movs	r4, #0
 8004ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004efc:	4628      	mov	r0, r5
 8004efe:	4798      	blx	r3
 8004f00:	2000      	movs	r0, #0
 8004f02:	e7e0      	b.n	8004ec6 <_raise_r+0x12>

08004f04 <raise>:
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <raise+0xc>)
 8004f06:	4601      	mov	r1, r0
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	f7ff bfd3 	b.w	8004eb4 <_raise_r>
 8004f0e:	bf00      	nop
 8004f10:	20000010 	.word	0x20000010

08004f14 <_kill_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4c07      	ldr	r4, [pc, #28]	; (8004f34 <_kill_r+0x20>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	f7fd fb17 	bl	8002554 <_kill>
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d102      	bne.n	8004f30 <_kill_r+0x1c>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	b103      	cbz	r3, 8004f30 <_kill_r+0x1c>
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	20000b50 	.word	0x20000b50

08004f38 <_getpid_r>:
 8004f38:	f7fd bb04 	b.w	8002544 <_getpid>

08004f3c <_malloc_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	1ccd      	adds	r5, r1, #3
 8004f40:	f025 0503 	bic.w	r5, r5, #3
 8004f44:	3508      	adds	r5, #8
 8004f46:	2d0c      	cmp	r5, #12
 8004f48:	bf38      	it	cc
 8004f4a:	250c      	movcc	r5, #12
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	4606      	mov	r6, r0
 8004f50:	db01      	blt.n	8004f56 <_malloc_r+0x1a>
 8004f52:	42a9      	cmp	r1, r5
 8004f54:	d903      	bls.n	8004f5e <_malloc_r+0x22>
 8004f56:	230c      	movs	r3, #12
 8004f58:	6033      	str	r3, [r6, #0]
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	f000 f87d 	bl	800505c <__malloc_lock>
 8004f62:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <_malloc_r+0xac>)
 8004f64:	6814      	ldr	r4, [r2, #0]
 8004f66:	4621      	mov	r1, r4
 8004f68:	b991      	cbnz	r1, 8004f90 <_malloc_r+0x54>
 8004f6a:	4c20      	ldr	r4, [pc, #128]	; (8004fec <_malloc_r+0xb0>)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	b91b      	cbnz	r3, 8004f78 <_malloc_r+0x3c>
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 f863 	bl	800503c <_sbrk_r>
 8004f76:	6020      	str	r0, [r4, #0]
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f000 f85e 	bl	800503c <_sbrk_r>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d124      	bne.n	8004fce <_malloc_r+0x92>
 8004f84:	230c      	movs	r3, #12
 8004f86:	6033      	str	r3, [r6, #0]
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f000 f868 	bl	800505e <__malloc_unlock>
 8004f8e:	e7e4      	b.n	8004f5a <_malloc_r+0x1e>
 8004f90:	680b      	ldr	r3, [r1, #0]
 8004f92:	1b5b      	subs	r3, r3, r5
 8004f94:	d418      	bmi.n	8004fc8 <_malloc_r+0x8c>
 8004f96:	2b0b      	cmp	r3, #11
 8004f98:	d90f      	bls.n	8004fba <_malloc_r+0x7e>
 8004f9a:	600b      	str	r3, [r1, #0]
 8004f9c:	50cd      	str	r5, [r1, r3]
 8004f9e:	18cc      	adds	r4, r1, r3
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 f85c 	bl	800505e <__malloc_unlock>
 8004fa6:	f104 000b 	add.w	r0, r4, #11
 8004faa:	1d23      	adds	r3, r4, #4
 8004fac:	f020 0007 	bic.w	r0, r0, #7
 8004fb0:	1ac3      	subs	r3, r0, r3
 8004fb2:	d0d3      	beq.n	8004f5c <_malloc_r+0x20>
 8004fb4:	425a      	negs	r2, r3
 8004fb6:	50e2      	str	r2, [r4, r3]
 8004fb8:	e7d0      	b.n	8004f5c <_malloc_r+0x20>
 8004fba:	428c      	cmp	r4, r1
 8004fbc:	684b      	ldr	r3, [r1, #4]
 8004fbe:	bf16      	itet	ne
 8004fc0:	6063      	strne	r3, [r4, #4]
 8004fc2:	6013      	streq	r3, [r2, #0]
 8004fc4:	460c      	movne	r4, r1
 8004fc6:	e7eb      	b.n	8004fa0 <_malloc_r+0x64>
 8004fc8:	460c      	mov	r4, r1
 8004fca:	6849      	ldr	r1, [r1, #4]
 8004fcc:	e7cc      	b.n	8004f68 <_malloc_r+0x2c>
 8004fce:	1cc4      	adds	r4, r0, #3
 8004fd0:	f024 0403 	bic.w	r4, r4, #3
 8004fd4:	42a0      	cmp	r0, r4
 8004fd6:	d005      	beq.n	8004fe4 <_malloc_r+0xa8>
 8004fd8:	1a21      	subs	r1, r4, r0
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f000 f82e 	bl	800503c <_sbrk_r>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d0cf      	beq.n	8004f84 <_malloc_r+0x48>
 8004fe4:	6025      	str	r5, [r4, #0]
 8004fe6:	e7db      	b.n	8004fa0 <_malloc_r+0x64>
 8004fe8:	20000b44 	.word	0x20000b44
 8004fec:	20000b48 	.word	0x20000b48

08004ff0 <_realloc_r>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	b921      	cbnz	r1, 8005004 <_realloc_r+0x14>
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005000:	f7ff bf9c 	b.w	8004f3c <_malloc_r>
 8005004:	b922      	cbnz	r2, 8005010 <_realloc_r+0x20>
 8005006:	f000 f82b 	bl	8005060 <_free_r>
 800500a:	4625      	mov	r5, r4
 800500c:	4628      	mov	r0, r5
 800500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005010:	f000 f874 	bl	80050fc <_malloc_usable_size_r>
 8005014:	42a0      	cmp	r0, r4
 8005016:	d20f      	bcs.n	8005038 <_realloc_r+0x48>
 8005018:	4621      	mov	r1, r4
 800501a:	4638      	mov	r0, r7
 800501c:	f7ff ff8e 	bl	8004f3c <_malloc_r>
 8005020:	4605      	mov	r5, r0
 8005022:	2800      	cmp	r0, #0
 8005024:	d0f2      	beq.n	800500c <_realloc_r+0x1c>
 8005026:	4631      	mov	r1, r6
 8005028:	4622      	mov	r2, r4
 800502a:	f7ff ff27 	bl	8004e7c <memcpy>
 800502e:	4631      	mov	r1, r6
 8005030:	4638      	mov	r0, r7
 8005032:	f000 f815 	bl	8005060 <_free_r>
 8005036:	e7e9      	b.n	800500c <_realloc_r+0x1c>
 8005038:	4635      	mov	r5, r6
 800503a:	e7e7      	b.n	800500c <_realloc_r+0x1c>

0800503c <_sbrk_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4c06      	ldr	r4, [pc, #24]	; (8005058 <_sbrk_r+0x1c>)
 8005040:	2300      	movs	r3, #0
 8005042:	4605      	mov	r5, r0
 8005044:	4608      	mov	r0, r1
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	f7fd fa9e 	bl	8002588 <_sbrk>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d102      	bne.n	8005056 <_sbrk_r+0x1a>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	b103      	cbz	r3, 8005056 <_sbrk_r+0x1a>
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	20000b50 	.word	0x20000b50

0800505c <__malloc_lock>:
 800505c:	4770      	bx	lr

0800505e <__malloc_unlock>:
 800505e:	4770      	bx	lr

08005060 <_free_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	2900      	cmp	r1, #0
 8005066:	d045      	beq.n	80050f4 <_free_r+0x94>
 8005068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506c:	1f0c      	subs	r4, r1, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	bfb8      	it	lt
 8005072:	18e4      	addlt	r4, r4, r3
 8005074:	f7ff fff2 	bl	800505c <__malloc_lock>
 8005078:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <_free_r+0x98>)
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	4610      	mov	r0, r2
 800507e:	b933      	cbnz	r3, 800508e <_free_r+0x2e>
 8005080:	6063      	str	r3, [r4, #4]
 8005082:	6014      	str	r4, [r2, #0]
 8005084:	4628      	mov	r0, r5
 8005086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800508a:	f7ff bfe8 	b.w	800505e <__malloc_unlock>
 800508e:	42a3      	cmp	r3, r4
 8005090:	d90c      	bls.n	80050ac <_free_r+0x4c>
 8005092:	6821      	ldr	r1, [r4, #0]
 8005094:	1862      	adds	r2, r4, r1
 8005096:	4293      	cmp	r3, r2
 8005098:	bf04      	itt	eq
 800509a:	681a      	ldreq	r2, [r3, #0]
 800509c:	685b      	ldreq	r3, [r3, #4]
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	bf04      	itt	eq
 80050a2:	1852      	addeq	r2, r2, r1
 80050a4:	6022      	streq	r2, [r4, #0]
 80050a6:	6004      	str	r4, [r0, #0]
 80050a8:	e7ec      	b.n	8005084 <_free_r+0x24>
 80050aa:	4613      	mov	r3, r2
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	b10a      	cbz	r2, 80050b4 <_free_r+0x54>
 80050b0:	42a2      	cmp	r2, r4
 80050b2:	d9fa      	bls.n	80050aa <_free_r+0x4a>
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	1858      	adds	r0, r3, r1
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d10b      	bne.n	80050d4 <_free_r+0x74>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	4401      	add	r1, r0
 80050c0:	1858      	adds	r0, r3, r1
 80050c2:	4282      	cmp	r2, r0
 80050c4:	6019      	str	r1, [r3, #0]
 80050c6:	d1dd      	bne.n	8005084 <_free_r+0x24>
 80050c8:	6810      	ldr	r0, [r2, #0]
 80050ca:	6852      	ldr	r2, [r2, #4]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	4401      	add	r1, r0
 80050d0:	6019      	str	r1, [r3, #0]
 80050d2:	e7d7      	b.n	8005084 <_free_r+0x24>
 80050d4:	d902      	bls.n	80050dc <_free_r+0x7c>
 80050d6:	230c      	movs	r3, #12
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	e7d3      	b.n	8005084 <_free_r+0x24>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	1821      	adds	r1, r4, r0
 80050e0:	428a      	cmp	r2, r1
 80050e2:	bf04      	itt	eq
 80050e4:	6811      	ldreq	r1, [r2, #0]
 80050e6:	6852      	ldreq	r2, [r2, #4]
 80050e8:	6062      	str	r2, [r4, #4]
 80050ea:	bf04      	itt	eq
 80050ec:	1809      	addeq	r1, r1, r0
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	605c      	str	r4, [r3, #4]
 80050f2:	e7c7      	b.n	8005084 <_free_r+0x24>
 80050f4:	bd38      	pop	{r3, r4, r5, pc}
 80050f6:	bf00      	nop
 80050f8:	20000b44 	.word	0x20000b44

080050fc <_malloc_usable_size_r>:
 80050fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005100:	1f18      	subs	r0, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfbc      	itt	lt
 8005106:	580b      	ldrlt	r3, [r1, r0]
 8005108:	18c0      	addlt	r0, r0, r3
 800510a:	4770      	bx	lr

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
