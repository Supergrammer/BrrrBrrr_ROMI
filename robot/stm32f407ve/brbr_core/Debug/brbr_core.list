
brbr_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006580  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac4  08006ac4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ac4  08006ac4  00016ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006acc  08006acc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e8  20000078  08006b50  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001560  08006b50  00021560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001937d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000335e  00000000  00000000  00039421  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  0003c780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0003dae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c20  00000000  00000000  0003ed68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea8e  00000000  00000000  00064988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1bc4  00000000  00000000  00073416  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  00145058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066f0 	.word	0x080066f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080066f0 	.word	0x080066f0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <_ZN3ros3MsgC1Ev+0x1c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	08006a94 	.word	0x08006a94

0800051c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
      data()
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ffe8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffce 	bl	80004d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08006a7c 	.word	0x08006a7c

0800054c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6859      	ldr	r1, [r3, #4]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	4413      	add	r3, r2
 8000564:	b2ca      	uxtb	r2, r1
 8000566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	0a19      	lsrs	r1, r3, #8
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	4413      	add	r3, r2
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0c19      	lsrs	r1, r3, #16
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3302      	adds	r3, #2
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0e19      	lsrs	r1, r3, #24
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3303      	adds	r3, #3
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	4413      	add	r3, r2
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3304      	adds	r3, #4
 80005a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	0a19      	lsrs	r1, r3, #8
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	0c19      	lsrs	r1, r3, #16
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3302      	adds	r3, #2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	0e19      	lsrs	r1, r3, #24
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3303      	adds	r3, #3
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3304      	adds	r3, #4
 80005ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80005ee:	68fb      	ldr	r3, [r7, #12]
    }
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	440b      	add	r3, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3302      	adds	r3, #2
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	440b      	add	r3, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	041b      	lsls	r3, r3, #16
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3303      	adds	r3, #3
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	440b      	add	r3, r1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3304      	adds	r3, #4
 800065e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	440b      	add	r3, r1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3302      	adds	r3, #2
 800068c:	6839      	ldr	r1, [r7, #0]
 800068e:	440b      	add	r3, r1
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3303      	adds	r3, #3
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	440b      	add	r3, r1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	061b      	lsls	r3, r3, #24
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3304      	adds	r3, #4
 80006b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80006b6:	68fb      	ldr	r3, [r7, #12]
    }
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	08006708 	.word	0x08006708

080006e0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	08006718 	.word	0x08006718

080006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	809a      	strh	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
    {
    }
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08006a64 	.word	0x08006a64
 8000740:	0800673c 	.word	0x0800673c

08000744 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8899      	ldrh	r1, [r3, #4]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	b2ca      	uxtb	r2, r1
 800075e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	b299      	uxth	r1, r3
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	b2ca      	uxtb	r2, r1
 8000772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3302      	adds	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd22 	bl	80001c8 <strlen>
 8000784:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	69b9      	ldr	r1, [r7, #24]
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f91d 	bl	80019ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	3304      	adds	r3, #4
 8000798:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	18d0      	adds	r0, r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	4619      	mov	r1, r3
 80007a8:	f005 fe5a 	bl	8006460 <memcpy>
      offset += length_topic_name;
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	4413      	add	r3, r2
 80007b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd05 	bl	80001c8 <strlen>
 80007be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	6979      	ldr	r1, [r7, #20]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f900 	bl	80019ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	18d0      	adds	r0, r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f005 fe3d 	bl	8006460 <memcpy>
      offset += length_message_type;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fce8 	bl	80001c8 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	6939      	ldr	r1, [r7, #16]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f8e3 	bl	80019ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3304      	adds	r3, #4
 800080c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	18d0      	adds	r0, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4619      	mov	r1, r3
 800081c:	f005 fe20 	bl	8006460 <memcpy>
      offset += length_md5sum;
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4413      	add	r3, r2
 8000826:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800082e:	68f9      	ldr	r1, [r7, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	0a19      	lsrs	r1, r3, #8
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3301      	adds	r3, #1
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	0c19      	lsrs	r1, r3, #16
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3302      	adds	r3, #2
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	b2ca      	uxtb	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	0e19      	lsrs	r1, r3, #24
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3303      	adds	r3, #3
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000870:	69fb      	ldr	r3, [r7, #28]
    }
 8000872:	4618      	mov	r0, r3
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800087a:	b580      	push	{r7, lr}
 800087c:	b08a      	sub	sp, #40	; 0x28
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	b21a      	sxth	r2, r3
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	3301      	adds	r3, #1
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3302      	adds	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	441a      	add	r2, r3
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f89f 	bl	8001a0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	3304      	adds	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	d20c      	bcs.n	80008fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	441a      	add	r2, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	440b      	add	r3, r1
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	3301      	adds	r3, #1
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
 80008fa:	e7ec      	b.n	80008d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	3b01      	subs	r3, #1
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	3b01      	subs	r3, #1
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	441a      	add	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	4413      	add	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	441a      	add	r2, r3
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f86c 	bl	8001a0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	3304      	adds	r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4413      	add	r3, r2
 8000942:	6a3a      	ldr	r2, [r7, #32]
 8000944:	429a      	cmp	r2, r3
 8000946:	d20c      	bcs.n	8000962 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	441a      	add	r2, r3
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3b01      	subs	r3, #1
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	440b      	add	r3, r1
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	3301      	adds	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	e7ec      	b.n	800093c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	3b01      	subs	r3, #1
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	3b01      	subs	r3, #1
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	441a      	add	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4413      	add	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	441a      	add	r2, r3
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f839 	bl	8001a0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	3304      	adds	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d20c      	bcs.n	80009c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	441a      	add	r2, r3
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	440b      	add	r3, r1
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	e7ec      	b.n	80009a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	3b01      	subs	r3, #1
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	3b01      	subs	r3, #1
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	441a      	add	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	440a      	add	r2, r1
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3301      	adds	r3, #1
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	440b      	add	r3, r1
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	3302      	adds	r3, #2
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	440b      	add	r3, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	3303      	adds	r3, #3
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a40:	69bb      	ldr	r3, [r7, #24]
    }
 8000a42:	4618      	mov	r0, r3
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	08006740 	.word	0x08006740

08000a68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	0800675c 	.word	0x0800675c

08000a84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd34 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	711a      	strb	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000aa4:	609a      	str	r2, [r3, #8]
    {
    }
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08006a4c 	.word	0x08006a4c
 8000ab4:	0800673c 	.word	0x0800673c

08000ab8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7912      	ldrb	r2, [r2, #4]
 8000ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb73 	bl	80001c8 <strlen>
 8000ae2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 ff6e 	bl	80019ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	18d0      	adds	r0, r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f005 fcab 	bl	8006460 <memcpy>
      offset += length_msg;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b12:	68fb      	ldr	r3, [r7, #12]
    }
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 ff5e 	bl	8001a0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3304      	adds	r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20c      	bcs.n	8000b7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	441a      	add	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e7ec      	b.n	8000b58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	3b01      	subs	r3, #1
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	441a      	add	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
     return offset;
 8000ba2:	693b      	ldr	r3, [r7, #16]
    }
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	08006780 	.word	0x08006780

08000bc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	08006794 	.word	0x08006794

08000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc84 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08006a34 	.word	0x08006a34

08000c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0c19      	lsrs	r1, r3, #16
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3302      	adds	r3, #2
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0e19      	lsrs	r1, r3, #24
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3303      	adds	r3, #3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3304      	adds	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d22b      	bcs.n	8000cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	0a19      	lsrs	r1, r3, #8
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	0e19      	lsrs	r1, r3, #24
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3304      	adds	r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	e7ce      	b.n	8000c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6919      	ldr	r1, [r3, #16]
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	0a19      	lsrs	r1, r3, #8
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	0c19      	lsrs	r1, r3, #16
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	3302      	adds	r3, #2
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	0e19      	lsrs	r1, r3, #24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3303      	adds	r3, #3
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3304      	adds	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d22b      	bcs.n	8000d9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	b2ca      	uxtb	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	0a19      	lsrs	r1, r3, #8
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	3301      	adds	r3, #1
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	0c19      	lsrs	r1, r3, #16
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3302      	adds	r3, #2
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2ca      	uxtb	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	0e19      	lsrs	r1, r3, #24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	3303      	adds	r3, #3
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3304      	adds	r3, #4
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e7ce      	b.n	8000d38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69d9      	ldr	r1, [r3, #28]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	b2ca      	uxtb	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	0a19      	lsrs	r1, r3, #8
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	0c19      	lsrs	r1, r3, #16
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	0e19      	lsrs	r1, r3, #24
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	3304      	adds	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d228      	bcs.n	8000e44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e2 	bl	80001c8 <strlen>
 8000e04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	6979      	ldr	r1, [r7, #20]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fddd 	bl	80019ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	3304      	adds	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	18d0      	adds	r0, r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f005 fb16 	bl	8006460 <memcpy>
      offset += length_stringsi;
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	e7d1      	b.n	8000de8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e46:	4618      	mov	r0, r3
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b08e      	sub	sp, #56	; 0x38
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	6a3a      	ldr	r2, [r7, #32]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	061b      	lsls	r3, r3, #24
 8000e96:	6a3a      	ldr	r2, [r7, #32]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d90a      	bls.n	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f005 fae6 	bl	8006488 <realloc>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a3a      	ldr	r2, [r7, #32]
 8000ec6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d236      	bcs.n	8000f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	440a      	add	r2, r1
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	3301      	adds	r3, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	3302      	adds	r3, #2
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	3303      	adds	r3, #3
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	440b      	add	r3, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	3304      	adds	r3, #4
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3e:	3301      	adds	r3, #1
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
 8000f42:	e7c3      	b.n	8000ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3301      	adds	r3, #1
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	3302      	adds	r3, #2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f74:	3303      	adds	r3, #3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f86:	3304      	adds	r3, #4
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d90a      	bls.n	8000faa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f005 fa72 	bl	8006488 <realloc>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d236      	bcs.n	800102c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	440a      	add	r2, r1
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	440b      	add	r3, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	440b      	add	r3, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3304      	adds	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	3214      	adds	r2, #20
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800102a:	e7c3      	b.n	8000fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	3301      	adds	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	3302      	adds	r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	3303      	adds	r3, #3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	3304      	adds	r3, #4
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	d90a      	bls.n	8001092 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f005 f9fe 	bl	8006488 <realloc>
 800108c:	4602      	mov	r2, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d23f      	bcs.n	8001126 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	441a      	add	r2, r3
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fca9 	bl	8001a0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	3304      	adds	r3, #4
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d20c      	bcs.n	80010e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	441a      	add	r2, r3
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	440b      	add	r3, r1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3301      	adds	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e7ec      	b.n	80010c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	3b01      	subs	r3, #1
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	3b01      	subs	r3, #1
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	441a      	add	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	3220      	adds	r2, #32
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	3301      	adds	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
 8001124:	e7ba      	b.n	800109c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001128:	4618      	mov	r0, r3
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	080069d0 	.word	0x080069d0

0800114c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	080067b8 	.word	0x080067b8

08001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	425b      	negs	r3, r3
 80011c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <_ZN13STM32HardwareC1Ev+0x34>)
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000a74 	.word	0x20000a74

0800120c <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffc4 	bl	80011ae <_ZN13STM32Hardware10getRdmaIndEv>
 8001226:	4603      	mov	r3, r0
 8001228:	429c      	cmp	r4, r3
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d012      	beq.n	800125c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800125c:	68fb      	ldr	r3, [r7, #12]
    }
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
	...

08001268 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b20      	cmp	r3, #32
 800127c:	d108      	bne.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <_ZN13STM32Hardware5flushEv+0x2a>
 8001290:	2300      	movs	r3, #0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03f      	beq.n	8001316 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d031      	beq.n	8001310 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d20a      	bcs.n	80012d2 <_ZN13STM32Hardware5flushEv+0x6a>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	e006      	b.n	80012e0 <_ZN13STM32Hardware5flushEv+0x78>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80012de:	b29b      	uxth	r3, r3
 80012e0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f004 f8c0 	bl	800547c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4413      	add	r3, r2
 8001306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
      }
    }
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000094 	.word	0x20000094

08001324 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133a:	bfa8      	it	ge
 800133c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001340:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001348:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	4293      	cmp	r3, r2
 8001350:	bf28      	it	cs
 8001352:	4613      	movcs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800135c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	4618      	mov	r0, r3
 800136a:	f005 f879 	bl	8006460 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00b      	beq.n	80013a2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	18d1      	adds	r1, r2, r3
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	461a      	mov	r2, r3
 800139e:	f005 f85f 	bl	8006460 <memcpy>
      }

      flush();
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ff60 	bl	8001268 <_ZN13STM32Hardware5flushEv>
    }
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	f001 fe1c 	bl	8002ff4 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
      data(0)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f892 	bl	80004fc <_ZN3ros3MsgC1Ev>
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <_ZN8std_msgs5Int64C1Ev+0x30>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	f04f 0400 	mov.w	r4, #0
 80013e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
    {
    }
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08006a08 	.word	0x08006a08

080013fc <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80013fc:	b490      	push	{r4, r7}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001410:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001414:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	440a      	add	r2, r1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001422:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	f04f 0400 	mov.w	r4, #0
 800142e:	0a0b      	lsrs	r3, r1, #8
 8001430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001434:	0a14      	lsrs	r4, r2, #8
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	3201      	adds	r2, #1
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	440a      	add	r2, r1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001442:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f04f 0400 	mov.w	r4, #0
 800144e:	0c0b      	lsrs	r3, r1, #16
 8001450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001454:	0c14      	lsrs	r4, r2, #16
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	3202      	adds	r2, #2
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	440a      	add	r2, r1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001462:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	f04f 0400 	mov.w	r4, #0
 800146e:	0e0b      	lsrs	r3, r1, #24
 8001470:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001474:	0e14      	lsrs	r4, r2, #24
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	3203      	adds	r2, #3
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	440a      	add	r2, r1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8001482:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	f04f 0400 	mov.w	r4, #0
 800148e:	0013      	movs	r3, r2
 8001490:	2400      	movs	r4, #0
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	3204      	adds	r2, #4
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	440a      	add	r2, r1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800149e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f04f 0400 	mov.w	r4, #0
 80014aa:	0a13      	lsrs	r3, r2, #8
 80014ac:	2400      	movs	r4, #0
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	3205      	adds	r2, #5
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	440a      	add	r2, r1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80014ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	f04f 0400 	mov.w	r4, #0
 80014c6:	0c13      	lsrs	r3, r2, #16
 80014c8:	2400      	movs	r4, #0
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	3206      	adds	r2, #6
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	440a      	add	r2, r1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80014d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	f04f 0400 	mov.w	r4, #0
 80014e2:	0e13      	lsrs	r3, r2, #24
 80014e4:	2400      	movs	r4, #0
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	3207      	adds	r2, #7
 80014ea:	6839      	ldr	r1, [r7, #0]
 80014ec:	440a      	add	r2, r1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->data);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3308      	adds	r3, #8
 80014f6:	617b      	str	r3, [r7, #20]
      return offset;
 80014f8:	697b      	ldr	r3, [r7, #20]
    }
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc90      	pop	{r4, r7}
 8001502:	4770      	bx	lr

08001504 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001504:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	f04f 0400 	mov.w	r4, #0
 800151c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001520:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	4403      	add	r3, r0
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	fa5f f883 	uxtb.w	r8, r3
 8001530:	f04f 0900 	mov.w	r9, #0
 8001534:	ea48 0301 	orr.w	r3, r8, r1
 8001538:	ea49 0402 	orr.w	r4, r9, r2
 800153c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001540:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2d9      	uxtb	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0b00 	mov.w	fp, #0
 8001558:	f04f 0c00 	mov.w	ip, #0
 800155c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001560:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001564:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001568:	ea4b 0308 	orr.w	r3, fp, r8
 800156c:	ea4c 0409 	orr.w	r4, ip, r9
 8001570:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001574:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3302      	adds	r3, #2
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2d9      	uxtb	r1, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0b00 	mov.w	fp, #0
 800158c:	f04f 0c00 	mov.w	ip, #0
 8001590:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8001594:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8001598:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 800159c:	ea4b 0308 	orr.w	r3, fp, r8
 80015a0:	ea4c 0409 	orr.w	r4, ip, r9
 80015a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3303      	adds	r3, #3
 80015b0:	6838      	ldr	r0, [r7, #0]
 80015b2:	4403      	add	r3, r0
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f04f 0400 	mov.w	r4, #0
 80015bc:	0a1e      	lsrs	r6, r3, #8
 80015be:	061d      	lsls	r5, r3, #24
 80015c0:	ea41 0305 	orr.w	r3, r1, r5
 80015c4:	ea42 0406 	orr.w	r4, r2, r6
 80015c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80015cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3304      	adds	r3, #4
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	4403      	add	r3, r0
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2dd      	uxtb	r5, r3
 80015dc:	f04f 0600 	mov.w	r6, #0
 80015e0:	f04f 0800 	mov.w	r8, #0
 80015e4:	f04f 0900 	mov.w	r9, #0
 80015e8:	46a9      	mov	r9, r5
 80015ea:	f04f 0800 	mov.w	r8, #0
 80015ee:	ea48 0301 	orr.w	r3, r8, r1
 80015f2:	ea49 0402 	orr.w	r4, r9, r2
 80015f6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80015fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3305      	adds	r3, #5
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	4403      	add	r3, r0
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2dd      	uxtb	r5, r3
 800160a:	f04f 0600 	mov.w	r6, #0
 800160e:	f04f 0800 	mov.w	r8, #0
 8001612:	f04f 0900 	mov.w	r9, #0
 8001616:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800161a:	f04f 0800 	mov.w	r8, #0
 800161e:	ea48 0301 	orr.w	r3, r8, r1
 8001622:	ea49 0402 	orr.w	r4, r9, r2
 8001626:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800162a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3306      	adds	r3, #6
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	4403      	add	r3, r0
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2dd      	uxtb	r5, r3
 800163a:	f04f 0600 	mov.w	r6, #0
 800163e:	f04f 0800 	mov.w	r8, #0
 8001642:	f04f 0900 	mov.w	r9, #0
 8001646:	ea4f 4905 	mov.w	r9, r5, lsl #16
 800164a:	f04f 0800 	mov.w	r8, #0
 800164e:	ea48 0301 	orr.w	r3, r8, r1
 8001652:	ea49 0402 	orr.w	r4, r9, r2
 8001656:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800165a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3307      	adds	r3, #7
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	4403      	add	r3, r0
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2dd      	uxtb	r5, r3
 800166a:	f04f 0600 	mov.w	r6, #0
 800166e:	f04f 0800 	mov.w	r8, #0
 8001672:	f04f 0900 	mov.w	r9, #0
 8001676:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800167a:	f04f 0800 	mov.w	r8, #0
 800167e:	ea48 0301 	orr.w	r3, r8, r1
 8001682:	ea49 0402 	orr.w	r4, r9, r2
 8001686:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->data = u_data.real;
 800168a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->data);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3308      	adds	r3, #8
 8001698:	617b      	str	r3, [r7, #20]
     return offset;
 800169a:	697b      	ldr	r3, [r7, #20]
    }
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80016a6:	4770      	bx	lr

080016a8 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	080067dc 	.word	0x080067dc

080016c4 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	080067ec 	.word	0x080067ec

080016e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016e4:	f001 fc20 	bl	8002f28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016e8:	f000 f80e 	bl	8001708 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016ec:	f000 f90a 	bl	8001904 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 80016f0:	f000 f8e0 	bl	80018b4 <_ZL11MX_DMA_Initv>
	MX_I2C1_Init();
 80016f4:	f000 f87c 	bl	80017f0 <_ZL12MX_I2C1_Initv>

	MX_USART1_UART_Init();
 80016f8:	f000 f8ae 	bl	8001858 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	setup();
 80016fc:	f000 fef8 	bl	80024f0 <_Z5setupv>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		loop();
 8001700:	f000 ff12 	bl	8002528 <_Z4loopv>
 8001704:	e7fc      	b.n	8001700 <main+0x20>
	...

08001708 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fead 	bl	8006476 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <_Z18SystemClock_Configv+0xe0>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <_Z18SystemClock_Configv+0xe0>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <_Z18SystemClock_Configv+0xe0>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <_Z18SystemClock_Configv+0xe4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <_Z18SystemClock_Configv+0xe4>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <_Z18SystemClock_Configv+0xe4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001768:	2301      	movs	r3, #1
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176c:	2310      	movs	r3, #16
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2302      	movs	r3, #2
 8001772:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001774:	2300      	movs	r3, #0
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001778:	2308      	movs	r3, #8
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800177c:	23a8      	movs	r3, #168	; 0xa8
 800177e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001780:	2302      	movs	r3, #2
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001784:	2304      	movs	r3, #4
 8001786:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fc1d 	bl	8003fcc <HAL_RCC_OscConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 80017a2:	f000 f90d 	bl	80019c0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2105      	movs	r1, #5
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fe71 	bl	80044ac <HAL_RCC_ClockConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <_Z18SystemClock_Configv+0xd6>
		Error_Handler();
 80017da:	f000 f8f1 	bl	80019c0 <Error_Handler>
	}
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	; 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <_ZL12MX_I2C1_Initv+0x60>)
 80017f8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 80017fc:	4a15      	ldr	r2, [pc, #84]	; (8001854 <_ZL12MX_I2C1_Initv+0x64>)
 80017fe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <_ZL12MX_I2C1_Initv+0x5c>)
 800182e:	f002 fa95 	bl	8003d5c <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 8001842:	f000 f8bd 	bl	80019c0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000a20 	.word	0x20000a20
 8001850:	40005400 	.word	0x40005400
 8001854:	000186a0 	.word	0x000186a0

08001858 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001860:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800188e:	4807      	ldr	r0, [pc, #28]	; (80018ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8001890:	f003 fda6 	bl	80053e0 <HAL_UART_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 80018a4:	f000 f88c 	bl	80019c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000a74 	.word	0x20000a74
 80018b0:	40011000 	.word	0x40011000

080018b4 <_ZL11MX_DMA_Initv>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <_ZL11MX_DMA_Initv+0x4c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <_ZL11MX_DMA_Initv+0x4c>)
 80018c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <_ZL11MX_DMA_Initv+0x4c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	203a      	movs	r0, #58	; 0x3a
 80018dc:	f001 fc93 	bl	8003206 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018e0:	203a      	movs	r0, #58	; 0x3a
 80018e2:	f001 fcac 	bl	800323e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2046      	movs	r0, #70	; 0x46
 80018ec:	f001 fc8b 	bl	8003206 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80018f0:	2046      	movs	r0, #70	; 0x46
 80018f2:	f001 fca4 	bl	800323e <HAL_NVIC_EnableIRQ>

}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <_ZL12MX_GPIO_Initv+0xb4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800198a:	2200      	movs	r2, #0
 800198c:	213c      	movs	r1, #60	; 0x3c
 800198e:	480b      	ldr	r0, [pc, #44]	; (80019bc <_ZL12MX_GPIO_Initv+0xb8>)
 8001990:	f002 f9b2 	bl	8003cf8 <HAL_GPIO_WritePin>
			MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
					| MOTOR_B_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
 8001994:	233c      	movs	r3, #60	; 0x3c
 8001996:	617b      	str	r3, [r7, #20]
			| MOTOR_B_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <_ZL12MX_GPIO_Initv+0xb8>)
 80019ac:	f001 fff2 	bl	8003994 <HAL_GPIO_Init>

}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40021000 	.word	0x40021000

080019c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d80d      	bhi.n	80019fe <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	fa22 f103 	lsr.w	r1, r2, r3
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e7ee      	b.n	80019dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d811      	bhi.n	8001a48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	440a      	add	r2, r1
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	4611      	mov	r1, r2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	00d2      	lsls	r2, r2, #3
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e7ea      	b.n	8001a1e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	08006a20 	.word	0x08006a20

08001a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ffe8 	bl	8001a54 <_ZN3ros15NodeHandleBase_C1Ev>
 8001a84:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fba0 	bl	80011d4 <_ZN13STM32HardwareC1Ev>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f89e 	bl	8000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b18      	cmp	r3, #24
 8001ab0:	d80b      	bhi.n	8001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e7f0      	b.n	8001aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b18      	cmp	r3, #24
 8001ad2:	d80a      	bhi.n	8001aea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001adc:	2100      	movs	r1, #0
 8001ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	e7f1      	b.n	8001ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af4:	d20a      	bcs.n	8001b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e7f0      	b.n	8001aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b16:	d20a      	bcs.n	8001b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	e7f0      	b.n	8001b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	080069f4 	.word	0x080069f4

08001b74 <_Z41__static_initialization_and_destruction_0ii>:
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d119      	bne.n	8001bb8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d114      	bne.n	8001bb8 <_Z41__static_initialization_and_destruction_0ii+0x44>

#include <ros.h>
//#include <std_msgs/String.h>
#include <std_msgs/Int64.h>

static ros::NodeHandle nh;
 8001b8e:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001b90:	f7ff ff70 	bl	8001a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
//static std_msgs::String str_msg;
static std_msgs::Int64 left_encoder_msg;
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001b96:	f7ff fc17 	bl	80013c8 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001b9c:	f7ff fc14 	bl	80013c8 <_ZN8std_msgs5Int64C1Ev>
//static ros::Publisher chatter("chatter", &str_msg);
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001ba4:	4909      	ldr	r1, [pc, #36]	; (8001bcc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001ba6:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001ba8:	f7ff fade 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8001bac:	2300      	movs	r3, #0
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001bb0:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001bb4:	f7ff fad8 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000098 	.word	0x20000098
 8001bc4:	200009d8 	.word	0x200009d8
 8001bc8:	200009e8 	.word	0x200009e8
 8001bcc:	08006810 	.word	0x08006810
 8001bd0:	200009f8 	.word	0x200009f8
 8001bd4:	08006820 	.word	0x08006820
 8001bd8:	20000a0c 	.word	0x20000a0c

08001bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b63      	cmp	r3, #99	; 0x63
 8001bec:	dd09      	ble.n	8001c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e077      	b.n	8001cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001c0e:	3207      	adds	r2, #7
 8001c10:	4611      	mov	r1, r2
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
 8001c16:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	22ff      	movs	r2, #255	; 0xff
 8001c1c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	22fe      	movs	r2, #254	; 0xfe
 8001c24:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	121b      	asrs	r3, r3, #8
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	121b      	asrs	r3, r3, #8
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001c76:	2305      	movs	r3, #5
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3307      	adds	r3, #7
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	da0d      	bge.n	8001ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	e7ec      	b.n	8001c7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3307      	adds	r3, #7
 8001ca4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	425a      	negs	r2, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	bf58      	it	pl
 8001cb0:	4253      	negpl	r3, r2
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1c59      	adds	r1, r3, #1
 8001cb8:	6179      	str	r1, [r7, #20]
 8001cba:	43d2      	mvns	r2, r2
 8001cbc:	b2d1      	uxtb	r1, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	460a      	mov	r2, r1
 8001cc4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cce:	dc0a      	bgt.n	8001ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1d18      	adds	r0, r3, #4
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7ff fb21 	bl	8001324 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	e005      	b.n	8001cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001ce6:	4905      	ldr	r1, [pc, #20]	; (8001cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f9f2 	bl	80020d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08006830 	.word	0x08006830

08001d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fb4f 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8001d12:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d903      	bls.n	8001d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d903      	bls.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d014      	beq.n	8001d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fb28 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad2      	subs	r2, r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	bf8c      	ite	hi
 8001d70:	2301      	movhi	r3, #1
 8001d72:	2300      	movls	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001d7a:	f06f 0301 	mvn.w	r3, #1
 8001d7e:	e197      	b.n	80020b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fa41 	bl	800120c <_ZN13STM32Hardware4readEv>
 8001d8a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f2c0 8177 	blt.w	8002082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d11e      	bne.n	8001dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001db4:	1c59      	adds	r1, r3, #1
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	b2d1      	uxtb	r1, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001dd0:	1e5a      	subs	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1b4      	bne.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2208      	movs	r2, #8
 8001de6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001dea:	e7af      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d128      	bne.n	8001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2bff      	cmp	r3, #255	; 0xff
 8001dfa:	d10d      	bne.n	8001e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f103 0214 	add.w	r2, r3, #20
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001e16:	e799      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fac7 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf8c      	ite	hi
 8001e30:	2301      	movhi	r3, #1
 8001e32:	2300      	movls	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d088      	beq.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001e42:	f06f 0301 	mvn.w	r3, #1
 8001e46:	e133      	b.n	80020b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d11b      	bne.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2bfe      	cmp	r3, #254	; 0xfe
 8001e56:	d107      	bne.n	8001e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e66:	e771      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f43f af65 	beq.w	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f933 	bl	80020ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001e88:	e760      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d113      	bne.n	8001ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001eba:	e747      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d110      	bne.n	8001ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	441a      	add	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ee6:	e731      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d116      	bne.n	8001f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001ef8:	425a      	negs	r2, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	bf58      	it	pl
 8001f00:	4253      	negpl	r3, r2
 8001f02:	2bff      	cmp	r3, #255	; 0xff
 8001f04:	d107      	bne.n	8001f16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f14:	e71a      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f1e:	e715      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d10f      	bne.n	8001f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001f48:	e700      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d117      	bne.n	8001f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	441a      	add	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2207      	movs	r2, #7
 8001f6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f aee9 	bne.w	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f82:	e6e3      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	f47f aede 	bne.w	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001f9e:	425a      	negs	r2, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	bf58      	it	pl
 8001fa6:	4253      	negpl	r3, r2
 8001fa8:	2bff      	cmp	r3, #255	; 0xff
 8001faa:	f47f aecf 	bne.w	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d110      	bne.n	8001fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f898 	bl	80020ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8b3 	bl	800212a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd8:	e06a      	b.n	80020b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001fe0:	2b0a      	cmp	r3, #10
 8001fe2:	d107      	bne.n	8001ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f97b 	bl	80022e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001ff2:	e6ab      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d10e      	bne.n	800201c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f7fe ff1e 	bl	8000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800201a:	e697      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002022:	2b0b      	cmp	r3, #11
 8002024:	d104      	bne.n	8002030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800202e:	e68d      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002036:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f43f ae81 	beq.w	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002050:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f202 2222 	addw	r2, r2, #546	; 0x222
 800205a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002064:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800206e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800207c:	4611      	mov	r1, r2
 800207e:	4798      	blx	r3
    while (true)
 8002080:	e664      	b.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002082:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00f      	beq.n	80020ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800209c:	4293      	cmp	r3, r2
 800209e:	d906      	bls.n	80020ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f824 	bl	80020ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80020ae:	2300      	movs	r3, #0
  }
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    return configured_;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	2103      	movs	r1, #3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f94d 	bl	8002380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa0e 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f107 020c 	add.w	r2, r7, #12
 800210a:	210a      	movs	r1, #10
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
    rt_time = hardware_.time();
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3304      	adds	r3, #4
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff f94b 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 800211a:	4602      	mov	r2, r0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b08b      	sub	sp, #44	; 0x2c
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fae0 	bl	80006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	2b18      	cmp	r3, #24
 8002144:	dc63      	bgt.n	800220e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d056      	beq.n	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	b29b      	uxth	r3, r3
 800216a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3308      	adds	r3, #8
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4798      	blx	r3
 80021a8:	4603      	mov	r3, r0
 80021aa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4608      	mov	r0, r1
 80021d4:	4798      	blx	r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80021da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021de:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681c      	ldr	r4, [r3, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe ffce 	bl	8001196 <_ZN3ros9Publisher15getEndpointTypeEv>
 80021fa:	4601      	mov	r1, r0
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	461a      	mov	r2, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3301      	adds	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
 800220c:	e798      	b.n	8002140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	2b18      	cmp	r3, #24
 8002216:	dc5f      	bgt.n	80022d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d053      	beq.n	80022d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	b29b      	uxth	r3, r3
 8002238:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002252:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800225e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3308      	adds	r3, #8
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4608      	mov	r0, r1
 800226a:	4798      	blx	r3
 800226c:	4603      	mov	r3, r0
 800226e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	330c      	adds	r3, #12
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4608      	mov	r0, r1
 8002290:	4798      	blx	r3
 8002292:	4603      	mov	r3, r0
 8002294:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681c      	ldr	r4, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80022aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80022b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4798      	blx	r3
 80022c4:	4601      	mov	r1, r0
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	461a      	mov	r2, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e79c      	b.n	8002212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80022e0:	bf00      	nop
 80022e2:	372c      	adds	r7, #44	; 0x2c
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f910 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff f855 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8002306:	4602      	mov	r2, r0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f96f 	bl	80005fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4915      	ldr	r1, [pc, #84]	; (8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002324:	fba1 1303 	umull	r1, r3, r1, r3
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800232e:	6939      	ldr	r1, [r7, #16]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002334:	fba3 0302 	umull	r0, r3, r3, r2
 8002338:	099b      	lsrs	r3, r3, #6
 800233a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233e:	fb00 f303 	mul.w	r3, r0, r3
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	440b      	add	r3, r1
 800234c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	3304      	adds	r3, #4
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f82e 	bl	80023b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f825 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	10624dd3 	.word	0x10624dd3
 800237c:	000f4240 	.word	0x000f4240

08002380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	460b      	mov	r3, r1
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fb76 	bl	8000a84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f107 0214 	add.w	r2, r7, #20
 80023aa:	2107      	movs	r1, #7
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	4798      	blx	r3
  }
 80023b0:	bf00      	nop
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fff2 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 80023cc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4915      	ldr	r1, [pc, #84]	; (800242c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80023d6:	fba1 1303 	umull	r1, r3, r1, r3
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80023ee:	fba3 0302 	umull	r0, r3, r3, r2
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023f8:	fb00 f303 	mul.w	r3, r0, r3
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	1aca      	subs	r2, r1, r3
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002408:	4413      	add	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f003 ffac 	bl	800637c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	10624dd3 	.word	0x10624dd3
 8002430:	000f4240 	.word	0x000f4240
 8002434:	3b9aca00 	.word	0x3b9aca00

08002438 <_GLOBAL__sub_I_hi2c1>:
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
 800243c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002440:	2001      	movs	r0, #1
 8002442:	f7ff fb97 	bl	8001b74 <_Z41__static_initialization_and_destruction_0ii>
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68d8      	ldr	r0, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6891      	ldr	r1, [r2, #8]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	4798      	blx	r3
 8002466:	4603      	mov	r3, r0
  };
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN13STM32Hardware4initEv>:
    void init(){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f804 	bl	8002486 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_ZN13STM32Hardware10reset_rbufEv>:
    void reset_rbuf(void){
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249a:	4619      	mov	r1, r3
 800249c:	f003 f85a 	bl	8005554 <HAL_UART_Receive_DMA>
    }
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_TxCpltCallback>:
#include "wheel_encoder.h"
#include <ros.h>
#include <std_msgs/String.h>
#include <std_msgs/Int64.h>

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <HAL_UART_TxCpltCallback+0x20>)
 80024b2:	f000 f86f 	bl	8002594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fed5 	bl	8001268 <_ZN13STM32Hardware5flushEv>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000b74 	.word	0x20000b74

080024cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_UART_RxCpltCallback+0x20>)
 80024d6:	f000 f85d 	bl	8002594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ffd2 	bl	8002486 <_ZN13STM32Hardware10reset_rbufEv>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000b74 	.word	0x20000b74

080024f0 <_Z5setupv>:

void setup(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	wheelDirInit();
 80024f4:	f000 fbd2 	bl	8002c9c <_Z12wheelDirInitv>
	wheelPWMInit();
 80024f8:	f000 fc2e 	bl	8002d58 <_Z12wheelPWMInitv>

	encoderInit();
 80024fc:	f000 fb82 	bl	8002c04 <_Z11encoderInitv>

	nh.initNode();
 8002500:	4806      	ldr	r0, [pc, #24]	; (800251c <_Z5setupv+0x2c>)
 8002502:	f000 f853 	bl	80025ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_encoder_pub);
 8002506:	4906      	ldr	r1, [pc, #24]	; (8002520 <_Z5setupv+0x30>)
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <_Z5setupv+0x2c>)
 800250a:	f000 f86c 	bl	80025e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_encoder_pub);
 800250e:	4905      	ldr	r1, [pc, #20]	; (8002524 <_Z5setupv+0x34>)
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <_Z5setupv+0x2c>)
 8002512:	f000 f868 	bl	80025e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
//	nh.advertise(chatter);
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000b74 	.word	0x20000b74
 8002520:	200014d0 	.word	0x200014d0
 8002524:	200014e4 	.word	0x200014e4

08002528 <_Z4loopv>:

void loop(void) {
 8002528:	b598      	push	{r3, r4, r7, lr}
 800252a:	af00      	add	r7, sp, #0
	moveStop();
 800252c:	f000 fc8c 	bl	8002e48 <_Z8moveStopv>
	HAL_Delay(3000);
 8002530:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002534:	f000 fd6a 	bl	800300c <HAL_Delay>

	moveForword();
 8002538:	f000 fca8 	bl	8002e8c <_Z11moveForwordv>
	HAL_Delay(3000);
 800253c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002540:	f000 fd64 	bl	800300c <HAL_Delay>
//	HAL_Delay(3000);

//	str_msg.data = hello;
//	chatter.publish(&str_msg);

	left_encoder_msg.data = left_encoder_count;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <_Z4loopv+0x50>)
 8002546:	e9d3 3400 	ldrd	r3, r4, [r3]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <_Z4loopv+0x54>)
 800254c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	left_encoder_pub.publish(&left_encoder_msg);
 8002550:	490a      	ldr	r1, [pc, #40]	; (800257c <_Z4loopv+0x54>)
 8002552:	480b      	ldr	r0, [pc, #44]	; (8002580 <_Z4loopv+0x58>)
 8002554:	f7ff ff78 	bl	8002448 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	right_encoder_msg.data = right_encoder_count;
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <_Z4loopv+0x5c>)
 800255a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <_Z4loopv+0x60>)
 8002560:	e9c2 3402 	strd	r3, r4, [r2, #8]
	right_encoder_pub.publish(&right_encoder_msg);
 8002564:	4908      	ldr	r1, [pc, #32]	; (8002588 <_Z4loopv+0x60>)
 8002566:	4809      	ldr	r0, [pc, #36]	; (800258c <_Z4loopv+0x64>)
 8002568:	f7ff ff6e 	bl	8002448 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 800256c:	4808      	ldr	r0, [pc, #32]	; (8002590 <_Z4loopv+0x68>)
 800256e:	f7ff fbc7 	bl	8001d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002572:	bf00      	nop
 8002574:	bd98      	pop	{r3, r4, r7, pc}
 8002576:	bf00      	nop
 8002578:	20001500 	.word	0x20001500
 800257c:	200014b0 	.word	0x200014b0
 8002580:	200014d0 	.word	0x200014d0
 8002584:	20001508 	.word	0x20001508
 8002588:	200014c0 	.word	0x200014c0
 800258c:	200014e4 	.word	0x200014e4
 8002590:	20000b74 	.word	0x20000b74

08002594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
  }
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    hardware_.init();
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff59 	bl	8002470 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	dc1e      	bgt.n	8002638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	60da      	str	r2, [r3, #12]
        return true;
 800262c:	2301      	movs	r3, #1
 800262e:	e004      	b.n	800263a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3301      	adds	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e7dd      	b.n	80025f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8002638:	2300      	movs	r3, #0
  }
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <_Z41__static_initialization_and_destruction_0ii>:
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d119      	bne.n	800268c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265e:	4293      	cmp	r3, r2
 8002660:	d114      	bne.n	800268c <_Z41__static_initialization_and_destruction_0ii+0x44>
static ros::NodeHandle nh;
 8002662:	480c      	ldr	r0, [pc, #48]	; (8002694 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002664:	f7ff fa06 	bl	8001a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8002668:	480b      	ldr	r0, [pc, #44]	; (8002698 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800266a:	f7fe fead 	bl	80013c8 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 800266e:	480b      	ldr	r0, [pc, #44]	; (800269c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002670:	f7fe feaa 	bl	80013c8 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8002674:	2300      	movs	r3, #0
 8002676:	4a08      	ldr	r2, [pc, #32]	; (8002698 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002678:	4909      	ldr	r1, [pc, #36]	; (80026a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800267a:	480a      	ldr	r0, [pc, #40]	; (80026a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800267c:	f7fe fd74 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8002680:	2300      	movs	r3, #0
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002684:	4908      	ldr	r1, [pc, #32]	; (80026a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002686:	4809      	ldr	r0, [pc, #36]	; (80026ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002688:	f7fe fd6e 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000b74 	.word	0x20000b74
 8002698:	200014b0 	.word	0x200014b0
 800269c:	200014c0 	.word	0x200014c0
 80026a0:	080069b0 	.word	0x080069b0
 80026a4:	200014d0 	.word	0x200014d0
 80026a8:	080069c0 	.word	0x080069c0
 80026ac:	200014e4 	.word	0x200014e4

080026b0 <_GLOBAL__sub_I_HAL_UART_TxCpltCallback>:
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7ff ffc5 	bl	8002648 <_Z41__static_initialization_and_destruction_0ii>
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_MspInit+0x4c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_MspInit+0x4c>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_MspInit+0x4c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_I2C_MspInit+0x84>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d12b      	bne.n	800278a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_I2C_MspInit+0x88>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002752:	2312      	movs	r3, #18
 8002754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002756:	2301      	movs	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800275e:	2304      	movs	r3, #4
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4619      	mov	r1, r3
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <HAL_I2C_MspInit+0x8c>)
 800276a:	f001 f913 	bl	8003994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40005400 	.word	0x40005400
 8002798:	40023800 	.word	0x40023800
 800279c:	40020400 	.word	0x40020400

080027a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_TIM_Base_MspInit+0x3c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10d      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_TIM_Base_MspInit+0x40>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_TIM_Base_MspInit+0x40>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_TIM_Base_MspInit+0x40>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40023800 	.word	0x40023800

080027e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_TIM_MspPostInit+0x68>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11d      	bne.n	8002842 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_TIM_MspPostInit+0x6c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_TIM_MspPostInit+0x6c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_TIM_MspPostInit+0x6c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002832:	2302      	movs	r3, #2
 8002834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <HAL_TIM_MspPostInit+0x70>)
 800283e:	f001 f8a9 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002842:	bf00      	nop
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40000400 	.word	0x40000400
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000

08002858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a4c      	ldr	r2, [pc, #304]	; (80029a8 <HAL_UART_MspInit+0x150>)
 8002876:	4293      	cmp	r3, r2
 8002878:	f040 8091 	bne.w	800299e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_UART_MspInit+0x154>)
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	4a49      	ldr	r2, [pc, #292]	; (80029ac <HAL_UART_MspInit+0x154>)
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	6453      	str	r3, [r2, #68]	; 0x44
 800288c:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_UART_MspInit+0x154>)
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_UART_MspInit+0x154>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4a42      	ldr	r2, [pc, #264]	; (80029ac <HAL_UART_MspInit+0x154>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6313      	str	r3, [r2, #48]	; 0x30
 80028a8:	4b40      	ldr	r3, [pc, #256]	; (80029ac <HAL_UART_MspInit+0x154>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028c6:	2307      	movs	r3, #7
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4837      	ldr	r0, [pc, #220]	; (80029b0 <HAL_UART_MspInit+0x158>)
 80028d2:	f001 f85f 	bl	8003994 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 80028d8:	4a37      	ldr	r2, [pc, #220]	; (80029b8 <HAL_UART_MspInit+0x160>)
 80028da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80028dc:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 80028de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e4:	4b33      	ldr	r3, [pc, #204]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028f0:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 80028f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028f8:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002904:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002916:	4827      	ldr	r0, [pc, #156]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 8002918:	f000 fcac 	bl	8003274 <HAL_DMA_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002922:	f7ff f84d 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 800292a:	635a      	str	r2, [r3, #52]	; 0x34
 800292c:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <HAL_UART_MspInit+0x15c>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002932:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002934:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_UART_MspInit+0x168>)
 8002936:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_UART_MspInit+0x164>)
 800293a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800293e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002940:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_UART_MspInit+0x164>)
 800294e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002952:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002956:	2200      	movs	r2, #0
 8002958:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_UART_MspInit+0x164>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_UART_MspInit+0x164>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002972:	4812      	ldr	r0, [pc, #72]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002974:	f000 fc7e 	bl	8003274 <HAL_DMA_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800297e:	f7ff f81f 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_UART_MspInit+0x164>)
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
 8002988:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_UART_MspInit+0x164>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2025      	movs	r0, #37	; 0x25
 8002994:	f000 fc37 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002998:	2025      	movs	r0, #37	; 0x25
 800299a:	f000 fc50 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	; 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40011000 	.word	0x40011000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	20000ab4 	.word	0x20000ab4
 80029b8:	40026440 	.word	0x40026440
 80029bc:	20000b14 	.word	0x20000b14
 80029c0:	400264b8 	.word	0x400264b8

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <MemManage_Handler+0x4>

080029de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <BusFault_Handler+0x4>

080029e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <UsageFault_Handler+0x4>

080029ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a18:	f000 fad8 	bl	8002fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f001 f981 	bl	8003d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a32:	2002      	movs	r0, #2
 8002a34:	f001 f97a 	bl	8003d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a40:	2004      	movs	r0, #4
 8002a42:	f001 f973 	bl	8003d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002a4e:	2008      	movs	r0, #8
 8002a50:	f001 f96c 	bl	8003d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == MOTOR_LEFT_ENCODER1_Pin) {
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d11e      	bne.n	8002aa8 <HAL_GPIO_EXTI_Callback+0x50>
	  uint16_t left_encoder_pulse =  HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_LEFT_ENCODER2_Pin);
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4821      	ldr	r0, [pc, #132]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002a6e:	f001 f92b 	bl	8003cc8 <HAL_GPIO_ReadPin>
 8002a72:	4603      	mov	r3, r0
 8002a74:	81bb      	strh	r3, [r7, #12]
	  left_encoder_count -= left_encoder_pulse ? -1 : 1;
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002a78:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002a7c:	89bb      	ldrh	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_GPIO_EXTI_Callback+0x34>
 8002a82:	f04f 3bff 	mov.w	fp, #4294967295
 8002a86:	f04f 3cff 	mov.w	ip, #4294967295
 8002a8a:	e003      	b.n	8002a94 <HAL_GPIO_EXTI_Callback+0x3c>
 8002a8c:	f04f 0b01 	mov.w	fp, #1
 8002a90:	f04f 0c00 	mov.w	ip, #0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4614      	mov	r4, r2
 8002a98:	ebb3 030b 	subs.w	r3, r3, fp
 8002a9c:	eb64 040c 	sbc.w	r4, r4, ip
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002aa2:	e9c2 3400 	strd	r3, r4, [r2]
  } else if (GPIO_Pin == MOTOR_RIGHT_ENCODER1_Pin) {
	  uint16_t right_encoder_pulse =  HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_LEFT_ENCODER2_Pin);
	  right_encoder_count -= right_encoder_pulse ? -1 : 1;
  }
}
 8002aa6:	e020      	b.n	8002aea <HAL_GPIO_EXTI_Callback+0x92>
  } else if (GPIO_Pin == MOTOR_RIGHT_ENCODER1_Pin) {
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d11d      	bne.n	8002aea <HAL_GPIO_EXTI_Callback+0x92>
	  uint16_t right_encoder_pulse =  HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_LEFT_ENCODER2_Pin);
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4810      	ldr	r0, [pc, #64]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002ab2:	f001 f909 	bl	8003cc8 <HAL_GPIO_ReadPin>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	81fb      	strh	r3, [r7, #14]
	  right_encoder_count -= right_encoder_pulse ? -1 : 1;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_GPIO_EXTI_Callback+0xa4>)
 8002abc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002ac0:	89fb      	ldrh	r3, [r7, #14]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_GPIO_EXTI_Callback+0x78>
 8002ac6:	f04f 3bff 	mov.w	fp, #4294967295
 8002aca:	f04f 3cff 	mov.w	ip, #4294967295
 8002ace:	e003      	b.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x80>
 8002ad0:	f04f 0b01 	mov.w	fp, #1
 8002ad4:	f04f 0c00 	mov.w	ip, #0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4614      	mov	r4, r2
 8002adc:	ebb3 030b 	subs.w	r3, r3, fp
 8002ae0:	eb64 040c 	sbc.w	r4, r4, ip
 8002ae4:	4a05      	ldr	r2, [pc, #20]	; (8002afc <HAL_GPIO_EXTI_Callback+0xa4>)
 8002ae6:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002af4:	40020800 	.word	0x40020800
 8002af8:	20001500 	.word	0x20001500
 8002afc:	20001508 	.word	0x20001508

08002b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <USART1_IRQHandler+0x10>)
 8002b06:	f002 fda5 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000a74 	.word	0x20000a74

08002b14 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <DMA2_Stream2_IRQHandler+0x10>)
 8002b1a:	f000 fcd3 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000ab4 	.word	0x20000ab4

08002b28 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DMA2_Stream7_IRQHandler+0x10>)
 8002b2e:	f000 fcc9 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000b14 	.word	0x20000b14

08002b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
	return 1;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_kill>:

int _kill(int pid, int sig)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b56:	f003 fc59 	bl	800640c <__errno>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	2316      	movs	r3, #22
 8002b5e:	6013      	str	r3, [r2, #0]
	return -1;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_exit>:

void _exit (int status)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffe7 	bl	8002b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b7e:	e7fe      	b.n	8002b7e <_exit+0x12>

08002b80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <_sbrk+0x50>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_sbrk+0x16>
		heap_end = &end;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <_sbrk+0x50>)
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <_sbrk+0x54>)
 8002b94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <_sbrk+0x50>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <_sbrk+0x50>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	466a      	mov	r2, sp
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d907      	bls.n	8002bba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002baa:	f003 fc2f 	bl	800640c <__errno>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb8:	e006      	b.n	8002bc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <_sbrk+0x50>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <_sbrk+0x50>)
 8002bc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200014f8 	.word	0x200014f8
 8002bd4:	20001560 	.word	0x20001560

08002bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <SystemInit+0x28>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <SystemInit+0x28>)
 8002be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <SystemInit+0x28>)
 8002bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <_Z11encoderInitv>:
#include "wheel_encoder.h"

volatile long long left_encoder_count;
volatile long long right_encoder_count;

void encoderInit() {
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
	/*Configure GPIO pins : PC0 PC1 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = MOTOR_LEFT_ENCODER2_Pin | MOTOR_RIGHT_ENCODER2_Pin;
 8002c18:	230a      	movs	r3, #10
 8002c1a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MOTOR_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4817      	ldr	r0, [pc, #92]	; (8002c8c <_Z11encoderInitv+0x88>)
 8002c2e:	f000 feb1 	bl	8003994 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = MOTOR_LEFT_ENCODER1_Pin | MOTOR_RIGHT_ENCODER1_Pin;
 8002c32:	2305      	movs	r3, #5
 8002c34:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <_Z11encoderInitv+0x8c>)
 8002c38:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(MOTOR_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4812      	ldr	r0, [pc, #72]	; (8002c8c <_Z11encoderInitv+0x88>)
 8002c44:	f000 fea6 	bl	8003994 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	2006      	movs	r0, #6
 8002c4e:	f000 fada 	bl	8003206 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c52:	2006      	movs	r0, #6
 8002c54:	f000 faf3 	bl	800323e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2008      	movs	r0, #8
 8002c5e:	f000 fad2 	bl	8003206 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c62:	2008      	movs	r0, #8
 8002c64:	f000 faeb 	bl	800323e <HAL_NVIC_EnableIRQ>

	left_encoder_count = 10;
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <_Z11encoderInitv+0x90>)
 8002c6a:	f04f 030a 	mov.w	r3, #10
 8002c6e:	f04f 0400 	mov.w	r4, #0
 8002c72:	e9c2 3400 	strd	r3, r4, [r2]
	right_encoder_count = 10;
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <_Z11encoderInitv+0x94>)
 8002c78:	f04f 030a 	mov.w	r3, #10
 8002c7c:	f04f 0400 	mov.w	r4, #0
 8002c80:	e9c2 3400 	strd	r3, r4, [r2]

}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	10110000 	.word	0x10110000
 8002c94:	20001500 	.word	0x20001500
 8002c98:	20001508 	.word	0x20001508

08002c9c <_Z12wheelDirInitv>:
 */
#include "wheel_motor.h"

extern TIM_HandleTypeDef htim3;

void wheelDirInit() {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cbc:	f043 0310 	orr.w	r3, r3, #16
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <_Z12wheelDirInitv+0xb4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8002d22:	2200      	movs	r2, #0
 8002d24:	213c      	movs	r1, #60	; 0x3c
 8002d26:	480b      	ldr	r0, [pc, #44]	; (8002d54 <_Z12wheelDirInitv+0xb8>)
 8002d28:	f000 ffe6 	bl	8003cf8 <HAL_GPIO_WritePin>
			MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin | MOTOR_RIGHT_DIR1_Pin
					| MOTOR_RIGHT_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin
 8002d2c:	233c      	movs	r3, #60	; 0x3c
 8002d2e:	617b      	str	r3, [r7, #20]
			| MOTOR_RIGHT_DIR1_Pin | MOTOR_RIGHT_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d30:	2301      	movs	r3, #1
 8002d32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	4804      	ldr	r0, [pc, #16]	; (8002d54 <_Z12wheelDirInitv+0xb8>)
 8002d44:	f000 fe26 	bl	8003994 <HAL_GPIO_Init>

}
 8002d48:	bf00      	nop
 8002d4a:	3728      	adds	r7, #40	; 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40021000 	.word	0x40021000

08002d58 <_Z12wheelPWMInitv>:

void wheelPWMInit() {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d6c:	f107 0320 	add.w	r3, r7, #32
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
 8002d84:	615a      	str	r2, [r3, #20]
 8002d86:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002d8a:	4a2e      	ldr	r2, [pc, #184]	; (8002e44 <_Z12wheelPWMInitv+0xec>)
 8002d8c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2 - 1;
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 42000 - 1;
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002d9c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002da0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002dae:	4824      	ldr	r0, [pc, #144]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002db0:	f001 fd6e 	bl	8004890 <HAL_TIM_Base_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	481e      	ldr	r0, [pc, #120]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002dc6:	f001 fec7 	bl	8004b58 <HAL_TIM_ConfigClockSource>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002dce:	481c      	ldr	r0, [pc, #112]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002dd0:	f001 fd89 	bl	80048e6 <HAL_TIM_PWM_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	4619      	mov	r1, r3
 8002de6:	4816      	ldr	r0, [pc, #88]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002de8:	f002 fa7e 	bl	80052e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dec:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002dee:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df0:	2360      	movs	r3, #96	; 0x60
 8002df2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	480e      	ldr	r0, [pc, #56]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002e08:	f001 fde0 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002e0e:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	2204      	movs	r2, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	480a      	ldr	r0, [pc, #40]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002e18:	f001 fdd8 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 8002e1c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002e1e:	2b00      	cmp	r3, #0
//		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim3);
 8002e20:	4807      	ldr	r0, [pc, #28]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002e22:	f7ff fcdf 	bl	80027e4 <HAL_TIM_MspPostInit>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002e26:	2100      	movs	r1, #0
 8002e28:	4805      	ldr	r0, [pc, #20]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002e2a:	f001 fd91 	bl	8004950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002e2e:	2104      	movs	r1, #4
 8002e30:	4803      	ldr	r0, [pc, #12]	; (8002e40 <_Z12wheelPWMInitv+0xe8>)
 8002e32:	f001 fd8d 	bl	8004950 <HAL_TIM_PWM_Start>
}
 8002e36:	bf00      	nop
 8002e38:	3738      	adds	r7, #56	; 0x38
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20001510 	.word	0x20001510
 8002e44:	40000400 	.word	0x40000400

08002e48 <_Z8moveStopv>:

void moveStop() {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin, GPIO_PIN_RESET);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2104      	movs	r1, #4
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <_Z8moveStopv+0x3c>)
 8002e52:	f000 ff51 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin, GPIO_PIN_RESET);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2108      	movs	r1, #8
 8002e5a:	480a      	ldr	r0, [pc, #40]	; (8002e84 <_Z8moveStopv+0x3c>)
 8002e5c:	f000 ff4c 	bl	8003cf8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin, GPIO_PIN_RESET);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2110      	movs	r1, #16
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <_Z8moveStopv+0x3c>)
 8002e66:	f000 ff47 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin, GPIO_PIN_RESET);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	4805      	ldr	r0, [pc, #20]	; (8002e84 <_Z8moveStopv+0x3c>)
 8002e70:	f000 ff42 	bl	8003cf8 <HAL_GPIO_WritePin>

	TIM3->CCR1 = (uint16_t) 0;
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <_Z8moveStopv+0x40>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 0;
 8002e7a:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <_Z8moveStopv+0x40>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40000400 	.word	0x40000400

08002e8c <_Z11moveForwordv>:

void moveForword() {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2104      	movs	r1, #4
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <_Z11moveForwordv+0x40>)
 8002e96:	f000 ff2f 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin, GPIO_PIN_SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	480b      	ldr	r0, [pc, #44]	; (8002ecc <_Z11moveForwordv+0x40>)
 8002ea0:	f000 ff2a 	bl	8003cf8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	4808      	ldr	r0, [pc, #32]	; (8002ecc <_Z11moveForwordv+0x40>)
 8002eaa:	f000 ff25 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin, GPIO_PIN_SET);
 8002eae:	2201      	movs	r2, #1
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <_Z11moveForwordv+0x40>)
 8002eb4:	f000 ff20 	bl	8003cf8 <HAL_GPIO_WritePin>

	TIM3->CCR1 = (uint16_t) 31000 - 1;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <_Z11moveForwordv+0x44>)
 8002eba:	f647 1217 	movw	r2, #30999	; 0x7917
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 31000 - 1;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_Z11moveForwordv+0x44>)
 8002ec2:	f647 1217 	movw	r2, #30999	; 0x7917
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40000400 	.word	0x40000400

08002ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eda:	e003      	b.n	8002ee4 <LoopCopyDataInit>

08002edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ee2:	3104      	adds	r1, #4

08002ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ee4:	480b      	ldr	r0, [pc, #44]	; (8002f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002eec:	d3f6      	bcc.n	8002edc <CopyDataInit>
  ldr  r2, =_sbss
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ef0:	e002      	b.n	8002ef8 <LoopFillZerobss>

08002ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ef4:	f842 3b04 	str.w	r3, [r2], #4

08002ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002efc:	d3f9      	bcc.n	8002ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002efe:	f7ff fe6b 	bl	8002bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f02:	f003 fa89 	bl	8006418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f06:	f7fe fbeb 	bl	80016e0 <main>
  bx  lr    
 8002f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f10:	08006adc 	.word	0x08006adc
  ldr  r0, =_sdata
 8002f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f18:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002f1c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002f20:	20001560 	.word	0x20001560

08002f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f24:	e7fe      	b.n	8002f24 <ADC_IRQHandler>
	...

08002f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <HAL_Init+0x40>)
 8002f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_Init+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_Init+0x40>)
 8002f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_Init+0x40>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_Init+0x40>)
 8002f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f50:	2003      	movs	r0, #3
 8002f52:	f000 f94d 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f000 f808 	bl	8002f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f5c:	f7ff fbb0 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023c00 	.word	0x40023c00

08002f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_InitTick+0x54>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_InitTick+0x58>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f965 	bl	800325a <HAL_SYSTICK_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00e      	b.n	8002fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d80a      	bhi.n	8002fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f000 f92d 	bl	8003206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fac:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <HAL_InitTick+0x5c>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000008 	.word	0x20000008
 8002fc8:	20000004 	.word	0x20000004

08002fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_IncTick+0x20>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000008 	.word	0x20000008
 8002ff0:	20001558 	.word	0x20001558

08002ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_GetTick+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20001558 	.word	0x20001558

0800300c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff ffee 	bl	8002ff4 <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d005      	beq.n	8003032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_Delay+0x40>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003032:	bf00      	nop
 8003034:	f7ff ffde 	bl	8002ff4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d8f7      	bhi.n	8003034 <HAL_Delay+0x28>
  {
  }
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000008 	.word	0x20000008

08003050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60d3      	str	r3, [r2, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <__NVIC_GetPriorityGrouping+0x18>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 0307 	and.w	r3, r3, #7
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	db0b      	blt.n	80030de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <__NVIC_EnableIRQ+0x38>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2001      	movs	r0, #1
 80030d6:	fa00 f202 	lsl.w	r2, r0, r2
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000e100 	.word	0xe000e100

080030f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	2b00      	cmp	r3, #0
 8003102:	db0a      	blt.n	800311a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	490c      	ldr	r1, [pc, #48]	; (800313c <__NVIC_SetPriority+0x4c>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	440b      	add	r3, r1
 8003114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003118:	e00a      	b.n	8003130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4908      	ldr	r1, [pc, #32]	; (8003140 <__NVIC_SetPriority+0x50>)
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	3b04      	subs	r3, #4
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	440b      	add	r3, r1
 800312e:	761a      	strb	r2, [r3, #24]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000e100 	.word	0xe000e100
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f1c3 0307 	rsb	r3, r3, #7
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf28      	it	cs
 8003162:	2304      	movcs	r3, #4
 8003164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3304      	adds	r3, #4
 800316a:	2b06      	cmp	r3, #6
 800316c:	d902      	bls.n	8003174 <NVIC_EncodePriority+0x30>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3b03      	subs	r3, #3
 8003172:	e000      	b.n	8003176 <NVIC_EncodePriority+0x32>
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	f04f 32ff 	mov.w	r2, #4294967295
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800318c:	f04f 31ff 	mov.w	r1, #4294967295
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	43d9      	mvns	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	4313      	orrs	r3, r2
         );
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	; 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031bc:	d301      	bcc.n	80031c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031be:	2301      	movs	r3, #1
 80031c0:	e00f      	b.n	80031e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <SysTick_Config+0x40>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ca:	210f      	movs	r1, #15
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	f7ff ff8e 	bl	80030f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <SysTick_Config+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <SysTick_Config+0x40>)
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff29 	bl	8003050 <__NVIC_SetPriorityGrouping>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff3e 	bl	8003098 <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff8e 	bl	8003144 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5d 	bl	80030f0 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff31 	bl	80030b4 <__NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffa2 	bl	80031ac <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7ff feb8 	bl	8002ff4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e099      	b.n	80033c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b0:	e00f      	b.n	80032d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b2:	f7ff fe9f 	bl	8002ff4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d908      	bls.n	80032d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e078      	b.n	80033c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e8      	bne.n	80032b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <HAL_DMA_Init+0x158>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	2b04      	cmp	r3, #4
 800332a:	d107      	bne.n	800333c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	4313      	orrs	r3, r2
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f023 0307 	bic.w	r3, r3, #7
 8003352:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b04      	cmp	r3, #4
 8003364:	d117      	bne.n	8003396 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa91 	bl	80038a0 <DMA_CheckFifoParam>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003392:	2301      	movs	r3, #1
 8003394:	e016      	b.n	80033c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fa48 	bl	8003834 <DMA_CalcBaseAndBitshift>
 80033a4:	4603      	mov	r3, r0
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	223f      	movs	r2, #63	; 0x3f
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	f010803f 	.word	0xf010803f

080033d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_DMA_Start_IT+0x26>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e040      	b.n	8003478 <HAL_DMA_Start_IT+0xa8>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d12f      	bne.n	800346a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f9da 	bl	80037d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	223f      	movs	r2, #63	; 0x3f
 800342a:	409a      	lsls	r2, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0216 	orr.w	r2, r2, #22
 800343e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0208 	orr.w	r2, r2, #8
 8003456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e005      	b.n	8003476 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003472:	2302      	movs	r3, #2
 8003474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003476:	7dfb      	ldrb	r3, [r7, #23]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d004      	beq.n	800349e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00c      	b.n	80034b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2205      	movs	r2, #5
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_DMA_IRQHandler+0x258>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a92      	ldr	r2, [pc, #584]	; (8003720 <HAL_DMA_IRQHandler+0x25c>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2208      	movs	r2, #8
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01a      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	2208      	movs	r2, #8
 800351e:	409a      	lsls	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2201      	movs	r2, #1
 8003554:	409a      	lsls	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	2204      	movs	r2, #4
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2204      	movs	r2, #4
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2210      	movs	r2, #16
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d043      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03c      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	2210      	movs	r2, #16
 80035c0:	409a      	lsls	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d018      	beq.n	8003606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d024      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
 80035f2:	e01f      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e016      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0208 	bic.w	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2220      	movs	r2, #32
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 808e 	beq.w	8003762 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8086 	beq.w	8003762 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2220      	movs	r2, #32
 800365c:	409a      	lsls	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b05      	cmp	r3, #5
 800366c:	d136      	bne.n	80036dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0216 	bic.w	r2, r2, #22
 800367c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_DMA_IRQHandler+0x1da>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0208 	bic.w	r2, r2, #8
 80036ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	223f      	movs	r2, #63	; 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07d      	beq.n	80037ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
        }
        return;
 80036da:	e078      	b.n	80037ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01c      	beq.n	8003724 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d108      	bne.n	800370a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d030      	beq.n	8003762 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
 8003708:	e02b      	b.n	8003762 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d027      	beq.n	8003762 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
 800371a:	e022      	b.n	8003762 <HAL_DMA_IRQHandler+0x29e>
 800371c:	20000000 	.word	0x20000000
 8003720:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0210 	bic.w	r2, r2, #16
 8003740:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	2b00      	cmp	r3, #0
 8003768:	d032      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d022      	beq.n	80037bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2205      	movs	r2, #5
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	429a      	cmp	r2, r3
 8003798:	d307      	bcc.n	80037aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f2      	bne.n	800378e <HAL_DMA_IRQHandler+0x2ca>
 80037a8:	e000      	b.n	80037ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037ce:	bf00      	nop
    }
  }
}
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop

080037d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d108      	bne.n	8003818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003816:	e007      	b.n	8003828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3b10      	subs	r3, #16
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <DMA_CalcBaseAndBitshift+0x64>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <DMA_CalcBaseAndBitshift+0x68>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d909      	bls.n	8003876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	659a      	str	r2, [r3, #88]	; 0x58
 8003874:	e007      	b.n	8003886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	aaaaaaab 	.word	0xaaaaaaab
 800389c:	08006abc 	.word	0x08006abc

080038a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11f      	bne.n	80038fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d855      	bhi.n	800396c <DMA_CheckFifoParam+0xcc>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x28>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038eb 	.word	0x080038eb
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	0800396d 	.word	0x0800396d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d045      	beq.n	8003970 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e042      	b.n	8003970 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f2:	d13f      	bne.n	8003974 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e03c      	b.n	8003974 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d121      	bne.n	8003948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d836      	bhi.n	8003978 <DMA_CheckFifoParam+0xd8>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <DMA_CheckFifoParam+0x70>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003921 	.word	0x08003921
 8003914:	08003927 	.word	0x08003927
 8003918:	08003921 	.word	0x08003921
 800391c:	08003939 	.word	0x08003939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e02f      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d024      	beq.n	800397c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e021      	b.n	800397c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003940:	d11e      	bne.n	8003980 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003946:	e01b      	b.n	8003980 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <DMA_CheckFifoParam+0xb4>
 800394e:	2b03      	cmp	r3, #3
 8003950:	d003      	beq.n	800395a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003952:	e018      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e015      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
      break;
 800396a:	e00b      	b.n	8003984 <DMA_CheckFifoParam+0xe4>
      break;
 800396c:	bf00      	nop
 800396e:	e00a      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003970:	bf00      	nop
 8003972:	e008      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003974:	bf00      	nop
 8003976:	e006      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003978:	bf00      	nop
 800397a:	e004      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 800397c:	bf00      	nop
 800397e:	e002      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;   
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 8003984:	bf00      	nop
    }
  } 
  
  return status; 
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	e16b      	b.n	8003c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b0:	2201      	movs	r2, #1
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f040 815a 	bne.w	8003c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d00b      	beq.n	80039ee <HAL_GPIO_Init+0x5a>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d007      	beq.n	80039ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039e2:	2b11      	cmp	r3, #17
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b12      	cmp	r3, #18
 80039ec:	d130      	bne.n	8003a50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a24:	2201      	movs	r2, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 0201 	and.w	r2, r3, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0xfc>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b12      	cmp	r3, #18
 8003a8e:	d123      	bne.n	8003ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	08da      	lsrs	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3208      	adds	r2, #8
 8003a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	08da      	lsrs	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3208      	adds	r2, #8
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80b4 	beq.w	8003c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	; (8003c9c <HAL_GPIO_Init+0x308>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	4a5e      	ldr	r2, [pc, #376]	; (8003c9c <HAL_GPIO_Init+0x308>)
 8003b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b28:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2a:	4b5c      	ldr	r3, [pc, #368]	; (8003c9c <HAL_GPIO_Init+0x308>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b36:	4a5a      	ldr	r2, [pc, #360]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <HAL_GPIO_Init+0x310>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02b      	beq.n	8003bba <HAL_GPIO_Init+0x226>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a50      	ldr	r2, [pc, #320]	; (8003ca8 <HAL_GPIO_Init+0x314>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d025      	beq.n	8003bb6 <HAL_GPIO_Init+0x222>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a4f      	ldr	r2, [pc, #316]	; (8003cac <HAL_GPIO_Init+0x318>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01f      	beq.n	8003bb2 <HAL_GPIO_Init+0x21e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4e      	ldr	r2, [pc, #312]	; (8003cb0 <HAL_GPIO_Init+0x31c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x21a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4d      	ldr	r2, [pc, #308]	; (8003cb4 <HAL_GPIO_Init+0x320>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x216>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4c      	ldr	r2, [pc, #304]	; (8003cb8 <HAL_GPIO_Init+0x324>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x212>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	; (8003cbc <HAL_GPIO_Init+0x328>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x20e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_GPIO_Init+0x32c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x20a>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00e      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	e00c      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00a      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bcc:	4934      	ldr	r1, [pc, #208]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bfe:	4a31      	ldr	r2, [pc, #196]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c04:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c7c:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	f67f ae90 	bls.w	80039b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	3724      	adds	r7, #36	; 0x24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40020800 	.word	0x40020800
 8003cb0:	40020c00 	.word	0x40020c00
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40021400 	.word	0x40021400
 8003cbc:	40021800 	.word	0x40021800
 8003cc0:	40021c00 	.word	0x40021c00
 8003cc4:	40013c00 	.word	0x40013c00

08003cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	887b      	ldrh	r3, [r7, #2]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e001      	b.n	8003cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
 8003d04:	4613      	mov	r3, r2
 8003d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d08:	787b      	ldrb	r3, [r7, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d14:	e003      	b.n	8003d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	041a      	lsls	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	619a      	str	r2, [r3, #24]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d42:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fe84 	bl	8002a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40013c00 	.word	0x40013c00

08003d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e11f      	b.n	8003fae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fe fcc4 	bl	8002710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f000 fd3e 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4a7b      	ldr	r2, [pc, #492]	; (8003fb8 <HAL_I2C_Init+0x25c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d807      	bhi.n	8003de0 <HAL_I2C_Init+0x84>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a7a      	ldr	r2, [pc, #488]	; (8003fbc <HAL_I2C_Init+0x260>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	bf94      	ite	ls
 8003dd8:	2301      	movls	r3, #1
 8003dda:	2300      	movhi	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e006      	b.n	8003dee <HAL_I2C_Init+0x92>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a77      	ldr	r2, [pc, #476]	; (8003fc0 <HAL_I2C_Init+0x264>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bf94      	ite	ls
 8003de8:	2301      	movls	r3, #1
 8003dea:	2300      	movhi	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0db      	b.n	8003fae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a72      	ldr	r2, [pc, #456]	; (8003fc4 <HAL_I2C_Init+0x268>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	0c9b      	lsrs	r3, r3, #18
 8003e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a64      	ldr	r2, [pc, #400]	; (8003fb8 <HAL_I2C_Init+0x25c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d802      	bhi.n	8003e30 <HAL_I2C_Init+0xd4>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	e009      	b.n	8003e44 <HAL_I2C_Init+0xe8>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	4a63      	ldr	r2, [pc, #396]	; (8003fc8 <HAL_I2C_Init+0x26c>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	3301      	adds	r3, #1
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4956      	ldr	r1, [pc, #344]	; (8003fb8 <HAL_I2C_Init+0x25c>)
 8003e60:	428b      	cmp	r3, r1
 8003e62:	d80d      	bhi.n	8003e80 <HAL_I2C_Init+0x124>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1e59      	subs	r1, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	bf38      	it	cc
 8003e7c:	2304      	movcc	r3, #4
 8003e7e:	e04f      	b.n	8003f20 <HAL_I2C_Init+0x1c4>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d111      	bne.n	8003eac <HAL_I2C_Init+0x150>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e58      	subs	r0, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e012      	b.n	8003ed2 <HAL_I2C_Init+0x176>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1e58      	subs	r0, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	0099      	lsls	r1, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Init+0x17e>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e022      	b.n	8003f20 <HAL_I2C_Init+0x1c4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10e      	bne.n	8003f00 <HAL_I2C_Init+0x1a4>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1e58      	subs	r0, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	440b      	add	r3, r1
 8003ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efe:	e00f      	b.n	8003f20 <HAL_I2C_Init+0x1c4>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e58      	subs	r0, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	0099      	lsls	r1, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	6809      	ldr	r1, [r1, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6911      	ldr	r1, [r2, #16]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68d2      	ldr	r2, [r2, #12]
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	000186a0 	.word	0x000186a0
 8003fbc:	001e847f 	.word	0x001e847f
 8003fc0:	003d08ff 	.word	0x003d08ff
 8003fc4:	431bde83 	.word	0x431bde83
 8003fc8:	10624dd3 	.word	0x10624dd3

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e25b      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d075      	beq.n	80040d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fea:	4ba3      	ldr	r3, [pc, #652]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4ba0      	ldr	r3, [pc, #640]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b9d      	ldr	r3, [pc, #628]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400e:	d10b      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4b99      	ldr	r3, [pc, #612]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d05b      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d157      	bne.n	80040d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e236      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x74>
 8004032:	4b91      	ldr	r3, [pc, #580]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a90      	ldr	r2, [pc, #576]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e01d      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x98>
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a8a      	ldr	r2, [pc, #552]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a87      	ldr	r2, [pc, #540]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004064:	4b84      	ldr	r3, [pc, #528]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a83      	ldr	r2, [pc, #524]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b81      	ldr	r3, [pc, #516]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a80      	ldr	r2, [pc, #512]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d013      	beq.n	80040ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe ffb6 	bl	8002ff4 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe ffb2 	bl	8002ff4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e1fb      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0xc0>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe ffa2 	bl	8002ff4 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fe ff9e 	bl	8002ff4 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e1e7      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	4b6c      	ldr	r3, [pc, #432]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0xe8>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d11c      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1bb      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b56      	ldr	r3, [pc, #344]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4952      	ldr	r1, [pc, #328]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	e03a      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413c:	4b4f      	ldr	r3, [pc, #316]	; (800427c <HAL_RCC_OscConfig+0x2b0>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe ff57 	bl	8002ff4 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414a:	f7fe ff53 	bl	8002ff4 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e19c      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	4b46      	ldr	r3, [pc, #280]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4940      	ldr	r1, [pc, #256]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
 800417c:	e015      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_OscConfig+0x2b0>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe ff36 	bl	8002ff4 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418c:	f7fe ff32 	bl	8002ff4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e17b      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d030      	beq.n	8004218 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_RCC_OscConfig+0x2b4>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe ff16 	bl	8002ff4 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe ff12 	bl	8002ff4 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e15b      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	4b26      	ldr	r3, [pc, #152]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x200>
 80041ea:	e015      	b.n	8004218 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_OscConfig+0x2b4>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f2:	f7fe feff 	bl	8002ff4 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fe fefb 	bl	8002ff4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e144      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a0 	beq.w	8004366 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d121      	bne.n	80042a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a07      	ldr	r2, [pc, #28]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fe fec1 	bl	8002ff4 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e011      	b.n	800429a <HAL_RCC_OscConfig+0x2ce>
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
 8004284:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004288:	f7fe feb4 	bl	8002ff4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0fd      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b81      	ldr	r3, [pc, #516]	; (80044a0 <HAL_RCC_OscConfig+0x4d4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x2f0>
 80042ae:	4b7d      	ldr	r3, [pc, #500]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a7c      	ldr	r2, [pc, #496]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ba:	e01c      	b.n	80042f6 <HAL_RCC_OscConfig+0x32a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b05      	cmp	r3, #5
 80042c2:	d10c      	bne.n	80042de <HAL_RCC_OscConfig+0x312>
 80042c4:	4b77      	ldr	r3, [pc, #476]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a76      	ldr	r2, [pc, #472]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042ca:	f043 0304 	orr.w	r3, r3, #4
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
 80042d0:	4b74      	ldr	r3, [pc, #464]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4a73      	ldr	r2, [pc, #460]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	; 0x70
 80042dc:	e00b      	b.n	80042f6 <HAL_RCC_OscConfig+0x32a>
 80042de:	4b71      	ldr	r3, [pc, #452]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a70      	ldr	r2, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ea:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a6d      	ldr	r2, [pc, #436]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d015      	beq.n	800432a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fe fe79 	bl	8002ff4 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fe fe75 	bl	8002ff4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	; 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0bc      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ee      	beq.n	8004306 <HAL_RCC_OscConfig+0x33a>
 8004328:	e014      	b.n	8004354 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432a:	f7fe fe63 	bl	8002ff4 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fe fe5f 	bl	8002ff4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0a6      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004348:	4b56      	ldr	r3, [pc, #344]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ee      	bne.n	8004332 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435a:	4b52      	ldr	r3, [pc, #328]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a51      	ldr	r2, [pc, #324]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8092 	beq.w	8004494 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004370:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d05c      	beq.n	8004436 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d141      	bne.n	8004408 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004384:	4b48      	ldr	r3, [pc, #288]	; (80044a8 <HAL_RCC_OscConfig+0x4dc>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fe fe33 	bl	8002ff4 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004392:	f7fe fe2f 	bl	8002ff4 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e078      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a4:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	019b      	lsls	r3, r3, #6
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	4933      	ldr	r1, [pc, #204]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043da:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <HAL_RCC_OscConfig+0x4dc>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe fe08 	bl	8002ff4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fe fe04 	bl	8002ff4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e04d      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x41c>
 8004406:	e045      	b.n	8004494 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x4dc>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fe fdf1 	bl	8002ff4 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fe fded 	bl	8002ff4 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e036      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x44a>
 8004434:	e02e      	b.n	8004494 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e029      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004442:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <HAL_RCC_OscConfig+0x4d8>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	429a      	cmp	r2, r3
 8004454:	d11c      	bne.n	8004490 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d115      	bne.n	8004490 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004470:	4293      	cmp	r3, r2
 8004472:	d10d      	bne.n	8004490 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40007000 	.word	0x40007000
 80044a4:	40023800 	.word	0x40023800
 80044a8:	42470060 	.word	0x42470060

080044ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0cc      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b68      	ldr	r3, [pc, #416]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90c      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b8      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b59      	ldr	r3, [pc, #356]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a58      	ldr	r2, [pc, #352]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b50      	ldr	r3, [pc, #320]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494d      	ldr	r1, [pc, #308]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d044      	beq.n	80045cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d119      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d003      	beq.n	800456a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	2b03      	cmp	r3, #3
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e06f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e067      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4934      	ldr	r1, [pc, #208]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459c:	f7fe fd2a 	bl	8002ff4 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fe fd26 	bl	8002ff4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e04f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d20c      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b22      	ldr	r3, [pc, #136]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e032      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4916      	ldr	r1, [pc, #88]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490e      	ldr	r1, [pc, #56]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f821 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004636:	4601      	mov	r1, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	4a0a      	ldr	r2, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
 8004646:	fa21 f303 	lsr.w	r3, r1, r3
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fc8a 	bl	8002f6c <HAL_InitTick>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023c00 	.word	0x40023c00
 8004668:	40023800 	.word	0x40023800
 800466c:	08006aa4 	.word	0x08006aa4
 8004670:	20000000 	.word	0x20000000
 8004674:	20000004 	.word	0x20000004

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800468e:	4b63      	ldr	r3, [pc, #396]	; (800481c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b04      	cmp	r3, #4
 8004698:	d007      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x32>
 800469a:	2b08      	cmp	r3, #8
 800469c:	d008      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x38>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 80b4 	bne.w	800480c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b5e      	ldr	r3, [pc, #376]	; (8004820 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046a6:	60bb      	str	r3, [r7, #8]
       break;
 80046a8:	e0b3      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046aa:	4b5e      	ldr	r3, [pc, #376]	; (8004824 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80046ac:	60bb      	str	r3, [r7, #8]
      break;
 80046ae:	e0b0      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b0:	4b5a      	ldr	r3, [pc, #360]	; (800481c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ba:	4b58      	ldr	r3, [pc, #352]	; (800481c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d04a      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c6:	4b55      	ldr	r3, [pc, #340]	; (800481c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	099b      	lsrs	r3, r3, #6
 80046cc:	f04f 0400 	mov.w	r4, #0
 80046d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	ea03 0501 	and.w	r5, r3, r1
 80046dc:	ea04 0602 	and.w	r6, r4, r2
 80046e0:	4629      	mov	r1, r5
 80046e2:	4632      	mov	r2, r6
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	f04f 0400 	mov.w	r4, #0
 80046ec:	0154      	lsls	r4, r2, #5
 80046ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046f2:	014b      	lsls	r3, r1, #5
 80046f4:	4619      	mov	r1, r3
 80046f6:	4622      	mov	r2, r4
 80046f8:	1b49      	subs	r1, r1, r5
 80046fa:	eb62 0206 	sbc.w	r2, r2, r6
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	f04f 0400 	mov.w	r4, #0
 8004706:	0194      	lsls	r4, r2, #6
 8004708:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800470c:	018b      	lsls	r3, r1, #6
 800470e:	1a5b      	subs	r3, r3, r1
 8004710:	eb64 0402 	sbc.w	r4, r4, r2
 8004714:	f04f 0100 	mov.w	r1, #0
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	00e2      	lsls	r2, r4, #3
 800471e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004722:	00d9      	lsls	r1, r3, #3
 8004724:	460b      	mov	r3, r1
 8004726:	4614      	mov	r4, r2
 8004728:	195b      	adds	r3, r3, r5
 800472a:	eb44 0406 	adc.w	r4, r4, r6
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	0262      	lsls	r2, r4, #9
 8004738:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800473c:	0259      	lsls	r1, r3, #9
 800473e:	460b      	mov	r3, r1
 8004740:	4614      	mov	r4, r2
 8004742:	4618      	mov	r0, r3
 8004744:	4621      	mov	r1, r4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	461a      	mov	r2, r3
 800474e:	4623      	mov	r3, r4
 8004750:	f7fb fd42 	bl	80001d8 <__aeabi_uldivmod>
 8004754:	4603      	mov	r3, r0
 8004756:	460c      	mov	r4, r1
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e049      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475c:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	f240 11ff 	movw	r1, #511	; 0x1ff
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	ea03 0501 	and.w	r5, r3, r1
 8004772:	ea04 0602 	and.w	r6, r4, r2
 8004776:	4629      	mov	r1, r5
 8004778:	4632      	mov	r2, r6
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	f04f 0400 	mov.w	r4, #0
 8004782:	0154      	lsls	r4, r2, #5
 8004784:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004788:	014b      	lsls	r3, r1, #5
 800478a:	4619      	mov	r1, r3
 800478c:	4622      	mov	r2, r4
 800478e:	1b49      	subs	r1, r1, r5
 8004790:	eb62 0206 	sbc.w	r2, r2, r6
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f04f 0400 	mov.w	r4, #0
 800479c:	0194      	lsls	r4, r2, #6
 800479e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047a2:	018b      	lsls	r3, r1, #6
 80047a4:	1a5b      	subs	r3, r3, r1
 80047a6:	eb64 0402 	sbc.w	r4, r4, r2
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	00e2      	lsls	r2, r4, #3
 80047b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047b8:	00d9      	lsls	r1, r3, #3
 80047ba:	460b      	mov	r3, r1
 80047bc:	4614      	mov	r4, r2
 80047be:	195b      	adds	r3, r3, r5
 80047c0:	eb44 0406 	adc.w	r4, r4, r6
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	02a2      	lsls	r2, r4, #10
 80047ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047d2:	0299      	lsls	r1, r3, #10
 80047d4:	460b      	mov	r3, r1
 80047d6:	4614      	mov	r4, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	4621      	mov	r1, r4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f04f 0400 	mov.w	r4, #0
 80047e2:	461a      	mov	r2, r3
 80047e4:	4623      	mov	r3, r4
 80047e6:	f7fb fcf7 	bl	80001d8 <__aeabi_uldivmod>
 80047ea:	4603      	mov	r3, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	3301      	adds	r3, #1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800480e:	60bb      	str	r3, [r7, #8]
      break;
 8004810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004812:	68bb      	ldr	r3, [r7, #8]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	00f42400 	.word	0x00f42400
 8004824:	007a1200 	.word	0x007a1200

08004828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4601      	mov	r1, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a9b      	lsrs	r3, r3, #10
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4a03      	ldr	r2, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5cd3      	ldrb	r3, [r2, r3]
 8004858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	08006ab4 	.word	0x08006ab4

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800486c:	f7ff ffdc 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004870:	4601      	mov	r1, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0b5b      	lsrs	r3, r3, #13
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4a03      	ldr	r2, [pc, #12]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5cd3      	ldrb	r3, [r2, r3]
 8004880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	08006ab4 	.word	0x08006ab4

08004890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e01d      	b.n	80048de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd ff72 	bl	80027a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 f9fa 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e01d      	b.n	8004934 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f815 	bl	800493c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3304      	adds	r3, #4
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 f9cf 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fc9a 	bl	800529c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <HAL_TIM_PWM_Start+0x74>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_TIM_PWM_Start+0x2c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <HAL_TIM_PWM_Start+0x78>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_TIM_PWM_Start+0x30>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_TIM_PWM_Start+0x32>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40010400 	.word	0x40010400

080049cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e0b4      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x184>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	f200 809f 	bhi.w	8004b3c <HAL_TIM_PWM_ConfigChannel+0x170>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004b3d 	.word	0x08004b3d
 8004a0c:	08004b3d 	.word	0x08004b3d
 8004a10:	08004b3d 	.word	0x08004b3d
 8004a14:	08004a79 	.word	0x08004a79
 8004a18:	08004b3d 	.word	0x08004b3d
 8004a1c:	08004b3d 	.word	0x08004b3d
 8004a20:	08004b3d 	.word	0x08004b3d
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004b3d 	.word	0x08004b3d
 8004a2c:	08004b3d 	.word	0x08004b3d
 8004a30:	08004b3d 	.word	0x08004b3d
 8004a34:	08004afb 	.word	0x08004afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f9e2 	bl	8004e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	619a      	str	r2, [r3, #24]
      break;
 8004a76:	e062      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fa32 	bl	8004ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	619a      	str	r2, [r3, #24]
      break;
 8004ab8:	e041      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fa87 	bl	8004fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0208 	orr.w	r2, r2, #8
 8004ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0204 	bic.w	r2, r2, #4
 8004ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69d9      	ldr	r1, [r3, #28]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	61da      	str	r2, [r3, #28]
      break;
 8004af8:	e021      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fadb 	bl	80050bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	021a      	lsls	r2, r3, #8
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	61da      	str	r2, [r3, #28]
      break;
 8004b3a:	e000      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004b3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_ConfigClockSource+0x18>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e0a6      	b.n	8004cbe <HAL_TIM_ConfigClockSource+0x166>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d067      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x120>
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d80b      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x6c>
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d073      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0x140>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d802      	bhi.n	8004bba <HAL_TIM_ConfigClockSource+0x62>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d06f      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004bb8:	e078      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d06c      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0x140>
 8004bbe:	2b30      	cmp	r3, #48	; 0x30
 8004bc0:	d06a      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004bc2:	e073      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d00d      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0x8c>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d804      	bhi.n	8004bd6 <HAL_TIM_ConfigClockSource+0x7e>
 8004bcc:	2b50      	cmp	r3, #80	; 0x50
 8004bce:	d033      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0xe0>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d041      	beq.n	8004c58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004bd4:	e06a      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	d066      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x152>
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d017      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004be2:	e063      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f000 fb32 	bl	800525c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
      break;
 8004c10:	e04c      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f000 fb1b 	bl	800525c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c34:	609a      	str	r2, [r3, #8]
      break;
 8004c36:	e039      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f000 fa8f 	bl	8005168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2150      	movs	r1, #80	; 0x50
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fae8 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004c56:	e029      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	461a      	mov	r2, r3
 8004c66:	f000 faae 	bl	80051c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2160      	movs	r1, #96	; 0x60
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fad8 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004c76:	e019      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6859      	ldr	r1, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f000 fa6f 	bl	8005168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2140      	movs	r1, #64	; 0x40
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fac8 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e009      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f000 fabf 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e000      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a40      	ldr	r2, [pc, #256]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d00f      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d108      	bne.n	8004d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2f      	ldr	r2, [pc, #188]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d027      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d023      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a29      	ldr	r2, [pc, #164]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <TIM_Base_SetConfig+0x128>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <TIM_Base_SetConfig+0x130>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <TIM_Base_SetConfig+0x134>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <TIM_Base_SetConfig+0x138>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <TIM_Base_SetConfig+0x13c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800
 8004dfc:	40001800 	.word	0x40001800
 8004e00:	40001c00 	.word	0x40001c00
 8004e04:	40002000 	.word	0x40002000

08004e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0201 	bic.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 0302 	bic.w	r3, r3, #2
 8004e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <TIM_OC1_SetConfig+0xd8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC1_SetConfig+0x64>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <TIM_OC1_SetConfig+0xdc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d10c      	bne.n	8004e86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0308 	bic.w	r3, r3, #8
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 0304 	bic.w	r3, r3, #4
 8004e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <TIM_OC1_SetConfig+0xd8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC1_SetConfig+0x8e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <TIM_OC1_SetConfig+0xdc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d111      	bne.n	8004eba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	621a      	str	r2, [r3, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0210 	bic.w	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0320 	bic.w	r3, r3, #32
 8004f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <TIM_OC2_SetConfig+0xe4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC2_SetConfig+0x68>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a21      	ldr	r2, [pc, #132]	; (8004fd0 <TIM_OC2_SetConfig+0xe8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10d      	bne.n	8004f6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <TIM_OC2_SetConfig+0xe4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC2_SetConfig+0x94>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <TIM_OC2_SetConfig+0xe8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d113      	bne.n	8004fa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800501c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <TIM_OC3_SetConfig+0xe0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC3_SetConfig+0x66>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a20      	ldr	r2, [pc, #128]	; (80050b8 <TIM_OC3_SetConfig+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10d      	bne.n	8005056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <TIM_OC3_SetConfig+0xe0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC3_SetConfig+0x92>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <TIM_OC3_SetConfig+0xe4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d113      	bne.n	800508e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800506c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40010400 	.word	0x40010400

080050bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a12      	ldr	r2, [pc, #72]	; (8005160 <TIM_OC4_SetConfig+0xa4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC4_SetConfig+0x68>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a11      	ldr	r2, [pc, #68]	; (8005164 <TIM_OC4_SetConfig+0xa8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d109      	bne.n	8005138 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800512a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000
 8005164:	40010400 	.word	0x40010400

08005168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0201 	bic.w	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 030a 	bic.w	r3, r3, #10
 80051a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0210 	bic.w	r2, r3, #16
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	f043 0307 	orr.w	r3, r3, #7
 8005248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	609a      	str	r2, [r3, #8]
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	431a      	orrs	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	609a      	str	r2, [r3, #8]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2201      	movs	r2, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1a      	ldr	r2, [r3, #32]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e05a      	b.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a21      	ldr	r2, [pc, #132]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d022      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d01d      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1a      	ldr	r2, [pc, #104]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a15      	ldr	r2, [pc, #84]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10c      	bne.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	4313      	orrs	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40001800 	.word	0x40001800

080053e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e03f      	b.n	8005472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd fa26 	bl	8002858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fc2d 	bl	8005c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b20      	cmp	r3, #32
 8005494:	d153      	bne.n	800553e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_UART_Transmit_DMA+0x26>
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e04c      	b.n	8005540 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_UART_Transmit_DMA+0x38>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e045      	b.n	8005540 <HAL_UART_Transmit_DMA+0xc4>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2221      	movs	r2, #33	; 0x21
 80054d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	4a19      	ldr	r2, [pc, #100]	; (8005548 <HAL_UART_Transmit_DMA+0xcc>)
 80054e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	4a18      	ldr	r2, [pc, #96]	; (800554c <HAL_UART_Transmit_DMA+0xd0>)
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	4a17      	ldr	r2, [pc, #92]	; (8005550 <HAL_UART_Transmit_DMA+0xd4>)
 80054f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	2200      	movs	r2, #0
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3304      	adds	r3, #4
 8005510:	461a      	mov	r2, r3
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	f7fd ff5c 	bl	80033d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005520:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005538:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	08005891 	.word	0x08005891
 800554c:	080058e3 	.word	0x080058e3
 8005550:	08005983 	.word	0x08005983

08005554 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b20      	cmp	r3, #32
 800556c:	d166      	bne.n	800563c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_UART_Receive_DMA+0x26>
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e05f      	b.n	800563e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_UART_Receive_DMA+0x38>
 8005588:	2302      	movs	r3, #2
 800558a:	e058      	b.n	800563e <HAL_UART_Receive_DMA+0xea>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	88fa      	ldrh	r2, [r7, #6]
 800559e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2222      	movs	r2, #34	; 0x22
 80055aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	4a25      	ldr	r2, [pc, #148]	; (8005648 <HAL_UART_Receive_DMA+0xf4>)
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	4a24      	ldr	r2, [pc, #144]	; (800564c <HAL_UART_Receive_DMA+0xf8>)
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	4a23      	ldr	r2, [pc, #140]	; (8005650 <HAL_UART_Receive_DMA+0xfc>)
 80055c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	2200      	movs	r2, #0
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	f7fd fef3 	bl	80033d0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005616:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005636:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	080058ff 	.word	0x080058ff
 800564c:	08005967 	.word	0x08005967
 8005650:	08005983 	.word	0x08005983

08005654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10d      	bne.n	80056a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_UART_IRQHandler+0x52>
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa6f 	bl	8005b82 <UART_Receive_IT>
      return;
 80056a4:	e0d1      	b.n	800584a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80b0 	beq.w	800580e <HAL_UART_IRQHandler+0x1ba>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <HAL_UART_IRQHandler+0x70>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80a5 	beq.w	800580e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_UART_IRQHandler+0x90>
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	f043 0201 	orr.w	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_UART_IRQHandler+0xb0>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	f043 0202 	orr.w	r2, r3, #2
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_UART_IRQHandler+0xd0>
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	f043 0204 	orr.w	r2, r3, #4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <HAL_UART_IRQHandler+0xfa>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <HAL_UART_IRQHandler+0xee>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	f043 0208 	orr.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d078      	beq.n	8005848 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <HAL_UART_IRQHandler+0x11c>
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa09 	bl	8005b82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <HAL_UART_IRQHandler+0x144>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d031      	beq.n	80057fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f952 	bl	8005a42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d123      	bne.n	80057f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c8:	4a21      	ldr	r2, [pc, #132]	; (8005850 <HAL_UART_IRQHandler+0x1fc>)
 80057ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fd fe55 	bl	8003480 <HAL_DMA_Abort_IT>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d016      	beq.n	800580a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057e6:	4610      	mov	r0, r2
 80057e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ea:	e00e      	b.n	800580a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f845 	bl	800587c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f2:	e00a      	b.n	800580a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f841 	bl	800587c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fa:	e006      	b.n	800580a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f83d 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005808:	e01e      	b.n	8005848 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580a:	bf00      	nop
    return;
 800580c:	e01c      	b.n	8005848 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_UART_IRQHandler+0x1d6>
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f93f 	bl	8005aa6 <UART_Transmit_IT>
    return;
 8005828:	e00f      	b.n	800584a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_UART_IRQHandler+0x1f6>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f987 	bl	8005b52 <UART_EndTransmit_IT>
    return;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005848:	bf00      	nop
  }
}
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	08005a7f 	.word	0x08005a7f

08005854 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058c0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058d2:	e002      	b.n	80058da <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7fc fde7 	bl	80024a8 <HAL_UART_TxCpltCallback>
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff ffaf 	bl	8005854 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d11e      	bne.n	8005958 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800592e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7fc fdb7 	bl	80024cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff ff77 	bl	8005868 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b21      	cmp	r3, #33	; 0x21
 80059b4:	d108      	bne.n	80059c8 <UART_DMAError+0x46>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80059c2:	68b8      	ldr	r0, [r7, #8]
 80059c4:	f000 f827 	bl	8005a16 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b22      	cmp	r3, #34	; 0x22
 80059e8:	d108      	bne.n	80059fc <UART_DMAError+0x7a>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2200      	movs	r2, #0
 80059f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059f6:	68b8      	ldr	r0, [r7, #8]
 80059f8:	f000 f823 	bl	8005a42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	f043 0210 	orr.w	r2, r3, #16
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a08:	68b8      	ldr	r0, [r7, #8]
 8005a0a:	f7ff ff37 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005a2c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a58:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7ff feef 	bl	800587c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b21      	cmp	r3, #33	; 0x21
 8005ab8:	d144      	bne.n	8005b44 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	d11a      	bne.n	8005afa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d105      	bne.n	8005aee <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	1c9a      	adds	r2, r3, #2
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	621a      	str	r2, [r3, #32]
 8005aec:	e00e      	b.n	8005b0c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	621a      	str	r2, [r3, #32]
 8005af8:	e008      	b.n	8005b0c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6211      	str	r1, [r2, #32]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10f      	bne.n	8005b40 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fc fc98 	bl	80024a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b22      	cmp	r3, #34	; 0x22
 8005b94:	d171      	bne.n	8005c7a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	d123      	bne.n	8005be8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10e      	bne.n	8005bcc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	629a      	str	r2, [r3, #40]	; 0x28
 8005bca:	e029      	b.n	8005c20 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	629a      	str	r2, [r3, #40]	; 0x28
 8005be6:	e01b      	b.n	8005c20 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6858      	ldr	r0, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6291      	str	r1, [r2, #40]	; 0x28
 8005c00:	b2c2      	uxtb	r2, r0
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e00c      	b.n	8005c20 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	1c58      	adds	r0, r3, #1
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	6288      	str	r0, [r1, #40]	; 0x28
 8005c18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d120      	bne.n	8005c76 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0220 	bic.w	r2, r2, #32
 8005c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fc fc2d 	bl	80024cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e002      	b.n	8005c7c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cc6:	f023 030c 	bic.w	r3, r3, #12
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf2:	f040 818b 	bne.w	800600c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4ac1      	ldr	r2, [pc, #772]	; (8006000 <UART_SetConfig+0x37c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d005      	beq.n	8005d0c <UART_SetConfig+0x88>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4abf      	ldr	r2, [pc, #764]	; (8006004 <UART_SetConfig+0x380>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	f040 80bd 	bne.w	8005e86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d0c:	f7fe fdac 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8005d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	461d      	mov	r5, r3
 8005d16:	f04f 0600 	mov.w	r6, #0
 8005d1a:	46a8      	mov	r8, r5
 8005d1c:	46b1      	mov	r9, r6
 8005d1e:	eb18 0308 	adds.w	r3, r8, r8
 8005d22:	eb49 0409 	adc.w	r4, r9, r9
 8005d26:	4698      	mov	r8, r3
 8005d28:	46a1      	mov	r9, r4
 8005d2a:	eb18 0805 	adds.w	r8, r8, r5
 8005d2e:	eb49 0906 	adc.w	r9, r9, r6
 8005d32:	f04f 0100 	mov.w	r1, #0
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d46:	4688      	mov	r8, r1
 8005d48:	4691      	mov	r9, r2
 8005d4a:	eb18 0005 	adds.w	r0, r8, r5
 8005d4e:	eb49 0106 	adc.w	r1, r9, r6
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	461d      	mov	r5, r3
 8005d58:	f04f 0600 	mov.w	r6, #0
 8005d5c:	196b      	adds	r3, r5, r5
 8005d5e:	eb46 0406 	adc.w	r4, r6, r6
 8005d62:	461a      	mov	r2, r3
 8005d64:	4623      	mov	r3, r4
 8005d66:	f7fa fa37 	bl	80001d8 <__aeabi_uldivmod>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	461a      	mov	r2, r3
 8005d70:	4ba5      	ldr	r3, [pc, #660]	; (8006008 <UART_SetConfig+0x384>)
 8005d72:	fba3 2302 	umull	r2, r3, r3, r2
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	461d      	mov	r5, r3
 8005d80:	f04f 0600 	mov.w	r6, #0
 8005d84:	46a9      	mov	r9, r5
 8005d86:	46b2      	mov	sl, r6
 8005d88:	eb19 0309 	adds.w	r3, r9, r9
 8005d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d90:	4699      	mov	r9, r3
 8005d92:	46a2      	mov	sl, r4
 8005d94:	eb19 0905 	adds.w	r9, r9, r5
 8005d98:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d9c:	f04f 0100 	mov.w	r1, #0
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db0:	4689      	mov	r9, r1
 8005db2:	4692      	mov	sl, r2
 8005db4:	eb19 0005 	adds.w	r0, r9, r5
 8005db8:	eb4a 0106 	adc.w	r1, sl, r6
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	f04f 0600 	mov.w	r6, #0
 8005dc6:	196b      	adds	r3, r5, r5
 8005dc8:	eb46 0406 	adc.w	r4, r6, r6
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	f7fa fa02 	bl	80001d8 <__aeabi_uldivmod>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b8b      	ldr	r3, [pc, #556]	; (8006008 <UART_SetConfig+0x384>)
 8005ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	2164      	movs	r1, #100	; 0x64
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	3332      	adds	r3, #50	; 0x32
 8005dee:	4a86      	ldr	r2, [pc, #536]	; (8006008 <UART_SetConfig+0x384>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dfc:	4498      	add	r8, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	461d      	mov	r5, r3
 8005e02:	f04f 0600 	mov.w	r6, #0
 8005e06:	46a9      	mov	r9, r5
 8005e08:	46b2      	mov	sl, r6
 8005e0a:	eb19 0309 	adds.w	r3, r9, r9
 8005e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e12:	4699      	mov	r9, r3
 8005e14:	46a2      	mov	sl, r4
 8005e16:	eb19 0905 	adds.w	r9, r9, r5
 8005e1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e32:	4689      	mov	r9, r1
 8005e34:	4692      	mov	sl, r2
 8005e36:	eb19 0005 	adds.w	r0, r9, r5
 8005e3a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	461d      	mov	r5, r3
 8005e44:	f04f 0600 	mov.w	r6, #0
 8005e48:	196b      	adds	r3, r5, r5
 8005e4a:	eb46 0406 	adc.w	r4, r6, r6
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4623      	mov	r3, r4
 8005e52:	f7fa f9c1 	bl	80001d8 <__aeabi_uldivmod>
 8005e56:	4603      	mov	r3, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <UART_SetConfig+0x384>)
 8005e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2164      	movs	r1, #100	; 0x64
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	3332      	adds	r3, #50	; 0x32
 8005e70:	4a65      	ldr	r2, [pc, #404]	; (8006008 <UART_SetConfig+0x384>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	f003 0207 	and.w	r2, r3, #7
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4442      	add	r2, r8
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	e26f      	b.n	8006366 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e86:	f7fe fcdb 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8005e8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	461d      	mov	r5, r3
 8005e90:	f04f 0600 	mov.w	r6, #0
 8005e94:	46a8      	mov	r8, r5
 8005e96:	46b1      	mov	r9, r6
 8005e98:	eb18 0308 	adds.w	r3, r8, r8
 8005e9c:	eb49 0409 	adc.w	r4, r9, r9
 8005ea0:	4698      	mov	r8, r3
 8005ea2:	46a1      	mov	r9, r4
 8005ea4:	eb18 0805 	adds.w	r8, r8, r5
 8005ea8:	eb49 0906 	adc.w	r9, r9, r6
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005eb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ebc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ec0:	4688      	mov	r8, r1
 8005ec2:	4691      	mov	r9, r2
 8005ec4:	eb18 0005 	adds.w	r0, r8, r5
 8005ec8:	eb49 0106 	adc.w	r1, r9, r6
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	461d      	mov	r5, r3
 8005ed2:	f04f 0600 	mov.w	r6, #0
 8005ed6:	196b      	adds	r3, r5, r5
 8005ed8:	eb46 0406 	adc.w	r4, r6, r6
 8005edc:	461a      	mov	r2, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	f7fa f97a 	bl	80001d8 <__aeabi_uldivmod>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b47      	ldr	r3, [pc, #284]	; (8006008 <UART_SetConfig+0x384>)
 8005eec:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	461d      	mov	r5, r3
 8005efa:	f04f 0600 	mov.w	r6, #0
 8005efe:	46a9      	mov	r9, r5
 8005f00:	46b2      	mov	sl, r6
 8005f02:	eb19 0309 	adds.w	r3, r9, r9
 8005f06:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	46a2      	mov	sl, r4
 8005f0e:	eb19 0905 	adds.w	r9, r9, r5
 8005f12:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2a:	4689      	mov	r9, r1
 8005f2c:	4692      	mov	sl, r2
 8005f2e:	eb19 0005 	adds.w	r0, r9, r5
 8005f32:	eb4a 0106 	adc.w	r1, sl, r6
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	f04f 0600 	mov.w	r6, #0
 8005f40:	196b      	adds	r3, r5, r5
 8005f42:	eb46 0406 	adc.w	r4, r6, r6
 8005f46:	461a      	mov	r2, r3
 8005f48:	4623      	mov	r3, r4
 8005f4a:	f7fa f945 	bl	80001d8 <__aeabi_uldivmod>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	460c      	mov	r4, r1
 8005f52:	461a      	mov	r2, r3
 8005f54:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <UART_SetConfig+0x384>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	2164      	movs	r1, #100	; 0x64
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	3332      	adds	r3, #50	; 0x32
 8005f68:	4a27      	ldr	r2, [pc, #156]	; (8006008 <UART_SetConfig+0x384>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f76:	4498      	add	r8, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	f04f 0600 	mov.w	r6, #0
 8005f80:	46a9      	mov	r9, r5
 8005f82:	46b2      	mov	sl, r6
 8005f84:	eb19 0309 	adds.w	r3, r9, r9
 8005f88:	eb4a 040a 	adc.w	r4, sl, sl
 8005f8c:	4699      	mov	r9, r3
 8005f8e:	46a2      	mov	sl, r4
 8005f90:	eb19 0905 	adds.w	r9, r9, r5
 8005f94:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f98:	f04f 0100 	mov.w	r1, #0
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fac:	4689      	mov	r9, r1
 8005fae:	4692      	mov	sl, r2
 8005fb0:	eb19 0005 	adds.w	r0, r9, r5
 8005fb4:	eb4a 0106 	adc.w	r1, sl, r6
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	f04f 0600 	mov.w	r6, #0
 8005fc2:	196b      	adds	r3, r5, r5
 8005fc4:	eb46 0406 	adc.w	r4, r6, r6
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4623      	mov	r3, r4
 8005fcc:	f7fa f904 	bl	80001d8 <__aeabi_uldivmod>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <UART_SetConfig+0x384>)
 8005fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	2164      	movs	r1, #100	; 0x64
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	3332      	adds	r3, #50	; 0x32
 8005fea:	4a07      	ldr	r2, [pc, #28]	; (8006008 <UART_SetConfig+0x384>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f003 0207 	and.w	r2, r3, #7
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4442      	add	r2, r8
 8005ffc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ffe:	e1b2      	b.n	8006366 <UART_SetConfig+0x6e2>
 8006000:	40011000 	.word	0x40011000
 8006004:	40011400 	.word	0x40011400
 8006008:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4ad7      	ldr	r2, [pc, #860]	; (8006370 <UART_SetConfig+0x6ec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d005      	beq.n	8006022 <UART_SetConfig+0x39e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4ad6      	ldr	r2, [pc, #856]	; (8006374 <UART_SetConfig+0x6f0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	f040 80d1 	bne.w	80061c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006022:	f7fe fc21 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8006026:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	469a      	mov	sl, r3
 800602c:	f04f 0b00 	mov.w	fp, #0
 8006030:	46d0      	mov	r8, sl
 8006032:	46d9      	mov	r9, fp
 8006034:	eb18 0308 	adds.w	r3, r8, r8
 8006038:	eb49 0409 	adc.w	r4, r9, r9
 800603c:	4698      	mov	r8, r3
 800603e:	46a1      	mov	r9, r4
 8006040:	eb18 080a 	adds.w	r8, r8, sl
 8006044:	eb49 090b 	adc.w	r9, r9, fp
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006054:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006058:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800605c:	4688      	mov	r8, r1
 800605e:	4691      	mov	r9, r2
 8006060:	eb1a 0508 	adds.w	r5, sl, r8
 8006064:	eb4b 0609 	adc.w	r6, fp, r9
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	f04f 0400 	mov.w	r4, #0
 800607a:	0094      	lsls	r4, r2, #2
 800607c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006080:	008b      	lsls	r3, r1, #2
 8006082:	461a      	mov	r2, r3
 8006084:	4623      	mov	r3, r4
 8006086:	4628      	mov	r0, r5
 8006088:	4631      	mov	r1, r6
 800608a:	f7fa f8a5 	bl	80001d8 <__aeabi_uldivmod>
 800608e:	4603      	mov	r3, r0
 8006090:	460c      	mov	r4, r1
 8006092:	461a      	mov	r2, r3
 8006094:	4bb8      	ldr	r3, [pc, #736]	; (8006378 <UART_SetConfig+0x6f4>)
 8006096:	fba3 2302 	umull	r2, r3, r3, r2
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	469b      	mov	fp, r3
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	46d9      	mov	r9, fp
 80060aa:	46e2      	mov	sl, ip
 80060ac:	eb19 0309 	adds.w	r3, r9, r9
 80060b0:	eb4a 040a 	adc.w	r4, sl, sl
 80060b4:	4699      	mov	r9, r3
 80060b6:	46a2      	mov	sl, r4
 80060b8:	eb19 090b 	adds.w	r9, r9, fp
 80060bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d4:	4689      	mov	r9, r1
 80060d6:	4692      	mov	sl, r2
 80060d8:	eb1b 0509 	adds.w	r5, fp, r9
 80060dc:	eb4c 060a 	adc.w	r6, ip, sl
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4619      	mov	r1, r3
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	f04f 0400 	mov.w	r4, #0
 80060f2:	0094      	lsls	r4, r2, #2
 80060f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060f8:	008b      	lsls	r3, r1, #2
 80060fa:	461a      	mov	r2, r3
 80060fc:	4623      	mov	r3, r4
 80060fe:	4628      	mov	r0, r5
 8006100:	4631      	mov	r1, r6
 8006102:	f7fa f869 	bl	80001d8 <__aeabi_uldivmod>
 8006106:	4603      	mov	r3, r0
 8006108:	460c      	mov	r4, r1
 800610a:	461a      	mov	r2, r3
 800610c:	4b9a      	ldr	r3, [pc, #616]	; (8006378 <UART_SetConfig+0x6f4>)
 800610e:	fba3 1302 	umull	r1, r3, r3, r2
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	2164      	movs	r1, #100	; 0x64
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	3332      	adds	r3, #50	; 0x32
 8006120:	4a95      	ldr	r2, [pc, #596]	; (8006378 <UART_SetConfig+0x6f4>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612c:	4498      	add	r8, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	469b      	mov	fp, r3
 8006132:	f04f 0c00 	mov.w	ip, #0
 8006136:	46d9      	mov	r9, fp
 8006138:	46e2      	mov	sl, ip
 800613a:	eb19 0309 	adds.w	r3, r9, r9
 800613e:	eb4a 040a 	adc.w	r4, sl, sl
 8006142:	4699      	mov	r9, r3
 8006144:	46a2      	mov	sl, r4
 8006146:	eb19 090b 	adds.w	r9, r9, fp
 800614a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800614e:	f04f 0100 	mov.w	r1, #0
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800615e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006162:	4689      	mov	r9, r1
 8006164:	4692      	mov	sl, r2
 8006166:	eb1b 0509 	adds.w	r5, fp, r9
 800616a:	eb4c 060a 	adc.w	r6, ip, sl
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4619      	mov	r1, r3
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	f04f 0400 	mov.w	r4, #0
 8006180:	0094      	lsls	r4, r2, #2
 8006182:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006186:	008b      	lsls	r3, r1, #2
 8006188:	461a      	mov	r2, r3
 800618a:	4623      	mov	r3, r4
 800618c:	4628      	mov	r0, r5
 800618e:	4631      	mov	r1, r6
 8006190:	f7fa f822 	bl	80001d8 <__aeabi_uldivmod>
 8006194:	4603      	mov	r3, r0
 8006196:	460c      	mov	r4, r1
 8006198:	461a      	mov	r2, r3
 800619a:	4b77      	ldr	r3, [pc, #476]	; (8006378 <UART_SetConfig+0x6f4>)
 800619c:	fba3 1302 	umull	r1, r3, r3, r2
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	2164      	movs	r1, #100	; 0x64
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	3332      	adds	r3, #50	; 0x32
 80061ae:	4a72      	ldr	r2, [pc, #456]	; (8006378 <UART_SetConfig+0x6f4>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4442      	add	r2, r8
 80061c0:	609a      	str	r2, [r3, #8]
 80061c2:	e0d0      	b.n	8006366 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fe fb3c 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80061c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	469a      	mov	sl, r3
 80061ce:	f04f 0b00 	mov.w	fp, #0
 80061d2:	46d0      	mov	r8, sl
 80061d4:	46d9      	mov	r9, fp
 80061d6:	eb18 0308 	adds.w	r3, r8, r8
 80061da:	eb49 0409 	adc.w	r4, r9, r9
 80061de:	4698      	mov	r8, r3
 80061e0:	46a1      	mov	r9, r4
 80061e2:	eb18 080a 	adds.w	r8, r8, sl
 80061e6:	eb49 090b 	adc.w	r9, r9, fp
 80061ea:	f04f 0100 	mov.w	r1, #0
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061fe:	4688      	mov	r8, r1
 8006200:	4691      	mov	r9, r2
 8006202:	eb1a 0508 	adds.w	r5, sl, r8
 8006206:	eb4b 0609 	adc.w	r6, fp, r9
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4619      	mov	r1, r3
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	f04f 0400 	mov.w	r4, #0
 800621c:	0094      	lsls	r4, r2, #2
 800621e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	461a      	mov	r2, r3
 8006226:	4623      	mov	r3, r4
 8006228:	4628      	mov	r0, r5
 800622a:	4631      	mov	r1, r6
 800622c:	f7f9 ffd4 	bl	80001d8 <__aeabi_uldivmod>
 8006230:	4603      	mov	r3, r0
 8006232:	460c      	mov	r4, r1
 8006234:	461a      	mov	r2, r3
 8006236:	4b50      	ldr	r3, [pc, #320]	; (8006378 <UART_SetConfig+0x6f4>)
 8006238:	fba3 2302 	umull	r2, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	469b      	mov	fp, r3
 8006246:	f04f 0c00 	mov.w	ip, #0
 800624a:	46d9      	mov	r9, fp
 800624c:	46e2      	mov	sl, ip
 800624e:	eb19 0309 	adds.w	r3, r9, r9
 8006252:	eb4a 040a 	adc.w	r4, sl, sl
 8006256:	4699      	mov	r9, r3
 8006258:	46a2      	mov	sl, r4
 800625a:	eb19 090b 	adds.w	r9, r9, fp
 800625e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006262:	f04f 0100 	mov.w	r1, #0
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800626e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006276:	4689      	mov	r9, r1
 8006278:	4692      	mov	sl, r2
 800627a:	eb1b 0509 	adds.w	r5, fp, r9
 800627e:	eb4c 060a 	adc.w	r6, ip, sl
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4619      	mov	r1, r3
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	f04f 0400 	mov.w	r4, #0
 8006294:	0094      	lsls	r4, r2, #2
 8006296:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800629a:	008b      	lsls	r3, r1, #2
 800629c:	461a      	mov	r2, r3
 800629e:	4623      	mov	r3, r4
 80062a0:	4628      	mov	r0, r5
 80062a2:	4631      	mov	r1, r6
 80062a4:	f7f9 ff98 	bl	80001d8 <__aeabi_uldivmod>
 80062a8:	4603      	mov	r3, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	461a      	mov	r2, r3
 80062ae:	4b32      	ldr	r3, [pc, #200]	; (8006378 <UART_SetConfig+0x6f4>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	; 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	3332      	adds	r3, #50	; 0x32
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <UART_SetConfig+0x6f4>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ce:	4498      	add	r8, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	469b      	mov	fp, r3
 80062d4:	f04f 0c00 	mov.w	ip, #0
 80062d8:	46d9      	mov	r9, fp
 80062da:	46e2      	mov	sl, ip
 80062dc:	eb19 0309 	adds.w	r3, r9, r9
 80062e0:	eb4a 040a 	adc.w	r4, sl, sl
 80062e4:	4699      	mov	r9, r3
 80062e6:	46a2      	mov	sl, r4
 80062e8:	eb19 090b 	adds.w	r9, r9, fp
 80062ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062f0:	f04f 0100 	mov.w	r1, #0
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006304:	4689      	mov	r9, r1
 8006306:	4692      	mov	sl, r2
 8006308:	eb1b 0509 	adds.w	r5, fp, r9
 800630c:	eb4c 060a 	adc.w	r6, ip, sl
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4619      	mov	r1, r3
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	f04f 0400 	mov.w	r4, #0
 8006322:	0094      	lsls	r4, r2, #2
 8006324:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006328:	008b      	lsls	r3, r1, #2
 800632a:	461a      	mov	r2, r3
 800632c:	4623      	mov	r3, r4
 800632e:	4628      	mov	r0, r5
 8006330:	4631      	mov	r1, r6
 8006332:	f7f9 ff51 	bl	80001d8 <__aeabi_uldivmod>
 8006336:	4603      	mov	r3, r0
 8006338:	460c      	mov	r4, r1
 800633a:	461a      	mov	r2, r3
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <UART_SetConfig+0x6f4>)
 800633e:	fba3 1302 	umull	r1, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2164      	movs	r1, #100	; 0x64
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	3332      	adds	r3, #50	; 0x32
 8006350:	4a09      	ldr	r2, [pc, #36]	; (8006378 <UART_SetConfig+0x6f4>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 020f 	and.w	r2, r3, #15
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4442      	add	r2, r8
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	e7ff      	b.n	8006366 <UART_SetConfig+0x6e2>
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	40011000 	.word	0x40011000
 8006374:	40011400 	.word	0x40011400
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	0a5a      	lsrs	r2, r3, #9
 800638c:	490f      	ldr	r1, [pc, #60]	; (80063cc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800638e:	fba1 1202 	umull	r1, r2, r1, r2
 8006392:	09d2      	lsrs	r2, r2, #7
 8006394:	490e      	ldr	r1, [pc, #56]	; (80063d0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006396:	fb01 f202 	mul.w	r2, r1, r2
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	0a5b      	lsrs	r3, r3, #9
 80063a4:	4a09      	ldr	r2, [pc, #36]	; (80063cc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	09db      	lsrs	r3, r3, #7
 80063ac:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	441a      	add	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	00044b83 	.word	0x00044b83
 80063d0:	3b9aca00 	.word	0x3b9aca00

080063d4 <__cxa_pure_virtual>:
 80063d4:	b508      	push	{r3, lr}
 80063d6:	f000 f80d 	bl	80063f4 <_ZSt9terminatev>

080063da <_ZN10__cxxabiv111__terminateEPFvvE>:
 80063da:	b508      	push	{r3, lr}
 80063dc:	4780      	blx	r0
 80063de:	f000 f80e 	bl	80063fe <abort>
	...

080063e4 <_ZSt13get_terminatev>:
 80063e4:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <_ZSt13get_terminatev+0xc>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	f3bf 8f5b 	dmb	ish
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	2000000c 	.word	0x2000000c

080063f4 <_ZSt9terminatev>:
 80063f4:	b508      	push	{r3, lr}
 80063f6:	f7ff fff5 	bl	80063e4 <_ZSt13get_terminatev>
 80063fa:	f7ff ffee 	bl	80063da <_ZN10__cxxabiv111__terminateEPFvvE>

080063fe <abort>:
 80063fe:	b508      	push	{r3, lr}
 8006400:	2006      	movs	r0, #6
 8006402:	f000 f871 	bl	80064e8 <raise>
 8006406:	2001      	movs	r0, #1
 8006408:	f7fc fbb0 	bl	8002b6c <_exit>

0800640c <__errno>:
 800640c:	4b01      	ldr	r3, [pc, #4]	; (8006414 <__errno+0x8>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000010 	.word	0x20000010

08006418 <__libc_init_array>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4e0d      	ldr	r6, [pc, #52]	; (8006450 <__libc_init_array+0x38>)
 800641c:	4c0d      	ldr	r4, [pc, #52]	; (8006454 <__libc_init_array+0x3c>)
 800641e:	1ba4      	subs	r4, r4, r6
 8006420:	10a4      	asrs	r4, r4, #2
 8006422:	2500      	movs	r5, #0
 8006424:	42a5      	cmp	r5, r4
 8006426:	d109      	bne.n	800643c <__libc_init_array+0x24>
 8006428:	4e0b      	ldr	r6, [pc, #44]	; (8006458 <__libc_init_array+0x40>)
 800642a:	4c0c      	ldr	r4, [pc, #48]	; (800645c <__libc_init_array+0x44>)
 800642c:	f000 f960 	bl	80066f0 <_init>
 8006430:	1ba4      	subs	r4, r4, r6
 8006432:	10a4      	asrs	r4, r4, #2
 8006434:	2500      	movs	r5, #0
 8006436:	42a5      	cmp	r5, r4
 8006438:	d105      	bne.n	8006446 <__libc_init_array+0x2e>
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006440:	4798      	blx	r3
 8006442:	3501      	adds	r5, #1
 8006444:	e7ee      	b.n	8006424 <__libc_init_array+0xc>
 8006446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800644a:	4798      	blx	r3
 800644c:	3501      	adds	r5, #1
 800644e:	e7f2      	b.n	8006436 <__libc_init_array+0x1e>
 8006450:	08006acc 	.word	0x08006acc
 8006454:	08006acc 	.word	0x08006acc
 8006458:	08006acc 	.word	0x08006acc
 800645c:	08006ad8 	.word	0x08006ad8

08006460 <memcpy>:
 8006460:	b510      	push	{r4, lr}
 8006462:	1e43      	subs	r3, r0, #1
 8006464:	440a      	add	r2, r1
 8006466:	4291      	cmp	r1, r2
 8006468:	d100      	bne.n	800646c <memcpy+0xc>
 800646a:	bd10      	pop	{r4, pc}
 800646c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006474:	e7f7      	b.n	8006466 <memcpy+0x6>

08006476 <memset>:
 8006476:	4402      	add	r2, r0
 8006478:	4603      	mov	r3, r0
 800647a:	4293      	cmp	r3, r2
 800647c:	d100      	bne.n	8006480 <memset+0xa>
 800647e:	4770      	bx	lr
 8006480:	f803 1b01 	strb.w	r1, [r3], #1
 8006484:	e7f9      	b.n	800647a <memset+0x4>
	...

08006488 <realloc>:
 8006488:	4b02      	ldr	r3, [pc, #8]	; (8006494 <realloc+0xc>)
 800648a:	460a      	mov	r2, r1
 800648c:	4601      	mov	r1, r0
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	f000 b8a0 	b.w	80065d4 <_realloc_r>
 8006494:	20000010 	.word	0x20000010

08006498 <_raise_r>:
 8006498:	291f      	cmp	r1, #31
 800649a:	b538      	push	{r3, r4, r5, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	460d      	mov	r5, r1
 80064a0:	d904      	bls.n	80064ac <_raise_r+0x14>
 80064a2:	2316      	movs	r3, #22
 80064a4:	6003      	str	r3, [r0, #0]
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064ae:	b112      	cbz	r2, 80064b6 <_raise_r+0x1e>
 80064b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064b4:	b94b      	cbnz	r3, 80064ca <_raise_r+0x32>
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f830 	bl	800651c <_getpid_r>
 80064bc:	462a      	mov	r2, r5
 80064be:	4601      	mov	r1, r0
 80064c0:	4620      	mov	r0, r4
 80064c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064c6:	f000 b817 	b.w	80064f8 <_kill_r>
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d00a      	beq.n	80064e4 <_raise_r+0x4c>
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	d103      	bne.n	80064da <_raise_r+0x42>
 80064d2:	2316      	movs	r3, #22
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	2001      	movs	r0, #1
 80064d8:	e7e7      	b.n	80064aa <_raise_r+0x12>
 80064da:	2400      	movs	r4, #0
 80064dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064e0:	4628      	mov	r0, r5
 80064e2:	4798      	blx	r3
 80064e4:	2000      	movs	r0, #0
 80064e6:	e7e0      	b.n	80064aa <_raise_r+0x12>

080064e8 <raise>:
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <raise+0xc>)
 80064ea:	4601      	mov	r1, r0
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	f7ff bfd3 	b.w	8006498 <_raise_r>
 80064f2:	bf00      	nop
 80064f4:	20000010 	.word	0x20000010

080064f8 <_kill_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4c07      	ldr	r4, [pc, #28]	; (8006518 <_kill_r+0x20>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4605      	mov	r5, r0
 8006500:	4608      	mov	r0, r1
 8006502:	4611      	mov	r1, r2
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	f7fc fb21 	bl	8002b4c <_kill>
 800650a:	1c43      	adds	r3, r0, #1
 800650c:	d102      	bne.n	8006514 <_kill_r+0x1c>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	b103      	cbz	r3, 8006514 <_kill_r+0x1c>
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	bd38      	pop	{r3, r4, r5, pc}
 8006516:	bf00      	nop
 8006518:	2000155c 	.word	0x2000155c

0800651c <_getpid_r>:
 800651c:	f7fc bb0e 	b.w	8002b3c <_getpid>

08006520 <_malloc_r>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	1ccd      	adds	r5, r1, #3
 8006524:	f025 0503 	bic.w	r5, r5, #3
 8006528:	3508      	adds	r5, #8
 800652a:	2d0c      	cmp	r5, #12
 800652c:	bf38      	it	cc
 800652e:	250c      	movcc	r5, #12
 8006530:	2d00      	cmp	r5, #0
 8006532:	4606      	mov	r6, r0
 8006534:	db01      	blt.n	800653a <_malloc_r+0x1a>
 8006536:	42a9      	cmp	r1, r5
 8006538:	d903      	bls.n	8006542 <_malloc_r+0x22>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	2000      	movs	r0, #0
 8006540:	bd70      	pop	{r4, r5, r6, pc}
 8006542:	f000 f87d 	bl	8006640 <__malloc_lock>
 8006546:	4a21      	ldr	r2, [pc, #132]	; (80065cc <_malloc_r+0xac>)
 8006548:	6814      	ldr	r4, [r2, #0]
 800654a:	4621      	mov	r1, r4
 800654c:	b991      	cbnz	r1, 8006574 <_malloc_r+0x54>
 800654e:	4c20      	ldr	r4, [pc, #128]	; (80065d0 <_malloc_r+0xb0>)
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	b91b      	cbnz	r3, 800655c <_malloc_r+0x3c>
 8006554:	4630      	mov	r0, r6
 8006556:	f000 f863 	bl	8006620 <_sbrk_r>
 800655a:	6020      	str	r0, [r4, #0]
 800655c:	4629      	mov	r1, r5
 800655e:	4630      	mov	r0, r6
 8006560:	f000 f85e 	bl	8006620 <_sbrk_r>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d124      	bne.n	80065b2 <_malloc_r+0x92>
 8006568:	230c      	movs	r3, #12
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	4630      	mov	r0, r6
 800656e:	f000 f868 	bl	8006642 <__malloc_unlock>
 8006572:	e7e4      	b.n	800653e <_malloc_r+0x1e>
 8006574:	680b      	ldr	r3, [r1, #0]
 8006576:	1b5b      	subs	r3, r3, r5
 8006578:	d418      	bmi.n	80065ac <_malloc_r+0x8c>
 800657a:	2b0b      	cmp	r3, #11
 800657c:	d90f      	bls.n	800659e <_malloc_r+0x7e>
 800657e:	600b      	str	r3, [r1, #0]
 8006580:	50cd      	str	r5, [r1, r3]
 8006582:	18cc      	adds	r4, r1, r3
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f85c 	bl	8006642 <__malloc_unlock>
 800658a:	f104 000b 	add.w	r0, r4, #11
 800658e:	1d23      	adds	r3, r4, #4
 8006590:	f020 0007 	bic.w	r0, r0, #7
 8006594:	1ac3      	subs	r3, r0, r3
 8006596:	d0d3      	beq.n	8006540 <_malloc_r+0x20>
 8006598:	425a      	negs	r2, r3
 800659a:	50e2      	str	r2, [r4, r3]
 800659c:	e7d0      	b.n	8006540 <_malloc_r+0x20>
 800659e:	428c      	cmp	r4, r1
 80065a0:	684b      	ldr	r3, [r1, #4]
 80065a2:	bf16      	itet	ne
 80065a4:	6063      	strne	r3, [r4, #4]
 80065a6:	6013      	streq	r3, [r2, #0]
 80065a8:	460c      	movne	r4, r1
 80065aa:	e7eb      	b.n	8006584 <_malloc_r+0x64>
 80065ac:	460c      	mov	r4, r1
 80065ae:	6849      	ldr	r1, [r1, #4]
 80065b0:	e7cc      	b.n	800654c <_malloc_r+0x2c>
 80065b2:	1cc4      	adds	r4, r0, #3
 80065b4:	f024 0403 	bic.w	r4, r4, #3
 80065b8:	42a0      	cmp	r0, r4
 80065ba:	d005      	beq.n	80065c8 <_malloc_r+0xa8>
 80065bc:	1a21      	subs	r1, r4, r0
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 f82e 	bl	8006620 <_sbrk_r>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d0cf      	beq.n	8006568 <_malloc_r+0x48>
 80065c8:	6025      	str	r5, [r4, #0]
 80065ca:	e7db      	b.n	8006584 <_malloc_r+0x64>
 80065cc:	20001550 	.word	0x20001550
 80065d0:	20001554 	.word	0x20001554

080065d4 <_realloc_r>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	4607      	mov	r7, r0
 80065d8:	4614      	mov	r4, r2
 80065da:	460e      	mov	r6, r1
 80065dc:	b921      	cbnz	r1, 80065e8 <_realloc_r+0x14>
 80065de:	4611      	mov	r1, r2
 80065e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065e4:	f7ff bf9c 	b.w	8006520 <_malloc_r>
 80065e8:	b922      	cbnz	r2, 80065f4 <_realloc_r+0x20>
 80065ea:	f000 f82b 	bl	8006644 <_free_r>
 80065ee:	4625      	mov	r5, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f4:	f000 f874 	bl	80066e0 <_malloc_usable_size_r>
 80065f8:	42a0      	cmp	r0, r4
 80065fa:	d20f      	bcs.n	800661c <_realloc_r+0x48>
 80065fc:	4621      	mov	r1, r4
 80065fe:	4638      	mov	r0, r7
 8006600:	f7ff ff8e 	bl	8006520 <_malloc_r>
 8006604:	4605      	mov	r5, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	d0f2      	beq.n	80065f0 <_realloc_r+0x1c>
 800660a:	4631      	mov	r1, r6
 800660c:	4622      	mov	r2, r4
 800660e:	f7ff ff27 	bl	8006460 <memcpy>
 8006612:	4631      	mov	r1, r6
 8006614:	4638      	mov	r0, r7
 8006616:	f000 f815 	bl	8006644 <_free_r>
 800661a:	e7e9      	b.n	80065f0 <_realloc_r+0x1c>
 800661c:	4635      	mov	r5, r6
 800661e:	e7e7      	b.n	80065f0 <_realloc_r+0x1c>

08006620 <_sbrk_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4c06      	ldr	r4, [pc, #24]	; (800663c <_sbrk_r+0x1c>)
 8006624:	2300      	movs	r3, #0
 8006626:	4605      	mov	r5, r0
 8006628:	4608      	mov	r0, r1
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	f7fc faa8 	bl	8002b80 <_sbrk>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d102      	bne.n	800663a <_sbrk_r+0x1a>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	b103      	cbz	r3, 800663a <_sbrk_r+0x1a>
 8006638:	602b      	str	r3, [r5, #0]
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	2000155c 	.word	0x2000155c

08006640 <__malloc_lock>:
 8006640:	4770      	bx	lr

08006642 <__malloc_unlock>:
 8006642:	4770      	bx	lr

08006644 <_free_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4605      	mov	r5, r0
 8006648:	2900      	cmp	r1, #0
 800664a:	d045      	beq.n	80066d8 <_free_r+0x94>
 800664c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006650:	1f0c      	subs	r4, r1, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	bfb8      	it	lt
 8006656:	18e4      	addlt	r4, r4, r3
 8006658:	f7ff fff2 	bl	8006640 <__malloc_lock>
 800665c:	4a1f      	ldr	r2, [pc, #124]	; (80066dc <_free_r+0x98>)
 800665e:	6813      	ldr	r3, [r2, #0]
 8006660:	4610      	mov	r0, r2
 8006662:	b933      	cbnz	r3, 8006672 <_free_r+0x2e>
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	6014      	str	r4, [r2, #0]
 8006668:	4628      	mov	r0, r5
 800666a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800666e:	f7ff bfe8 	b.w	8006642 <__malloc_unlock>
 8006672:	42a3      	cmp	r3, r4
 8006674:	d90c      	bls.n	8006690 <_free_r+0x4c>
 8006676:	6821      	ldr	r1, [r4, #0]
 8006678:	1862      	adds	r2, r4, r1
 800667a:	4293      	cmp	r3, r2
 800667c:	bf04      	itt	eq
 800667e:	681a      	ldreq	r2, [r3, #0]
 8006680:	685b      	ldreq	r3, [r3, #4]
 8006682:	6063      	str	r3, [r4, #4]
 8006684:	bf04      	itt	eq
 8006686:	1852      	addeq	r2, r2, r1
 8006688:	6022      	streq	r2, [r4, #0]
 800668a:	6004      	str	r4, [r0, #0]
 800668c:	e7ec      	b.n	8006668 <_free_r+0x24>
 800668e:	4613      	mov	r3, r2
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	b10a      	cbz	r2, 8006698 <_free_r+0x54>
 8006694:	42a2      	cmp	r2, r4
 8006696:	d9fa      	bls.n	800668e <_free_r+0x4a>
 8006698:	6819      	ldr	r1, [r3, #0]
 800669a:	1858      	adds	r0, r3, r1
 800669c:	42a0      	cmp	r0, r4
 800669e:	d10b      	bne.n	80066b8 <_free_r+0x74>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	4401      	add	r1, r0
 80066a4:	1858      	adds	r0, r3, r1
 80066a6:	4282      	cmp	r2, r0
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	d1dd      	bne.n	8006668 <_free_r+0x24>
 80066ac:	6810      	ldr	r0, [r2, #0]
 80066ae:	6852      	ldr	r2, [r2, #4]
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	4401      	add	r1, r0
 80066b4:	6019      	str	r1, [r3, #0]
 80066b6:	e7d7      	b.n	8006668 <_free_r+0x24>
 80066b8:	d902      	bls.n	80066c0 <_free_r+0x7c>
 80066ba:	230c      	movs	r3, #12
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	e7d3      	b.n	8006668 <_free_r+0x24>
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	1821      	adds	r1, r4, r0
 80066c4:	428a      	cmp	r2, r1
 80066c6:	bf04      	itt	eq
 80066c8:	6811      	ldreq	r1, [r2, #0]
 80066ca:	6852      	ldreq	r2, [r2, #4]
 80066cc:	6062      	str	r2, [r4, #4]
 80066ce:	bf04      	itt	eq
 80066d0:	1809      	addeq	r1, r1, r0
 80066d2:	6021      	streq	r1, [r4, #0]
 80066d4:	605c      	str	r4, [r3, #4]
 80066d6:	e7c7      	b.n	8006668 <_free_r+0x24>
 80066d8:	bd38      	pop	{r3, r4, r5, pc}
 80066da:	bf00      	nop
 80066dc:	20001550 	.word	0x20001550

080066e0 <_malloc_usable_size_r>:
 80066e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e4:	1f18      	subs	r0, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bfbc      	itt	lt
 80066ea:	580b      	ldrlt	r3, [r1, r0]
 80066ec:	18c0      	addlt	r0, r0, r3
 80066ee:	4770      	bx	lr

080066f0 <_init>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr

080066fc <_fini>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr
