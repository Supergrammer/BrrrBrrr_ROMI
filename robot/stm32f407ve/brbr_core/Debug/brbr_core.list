
brbr_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c194  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012a4  0800c31c  0800c31c  0001c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5c0  0800d5c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5c0  0800d5c0  0001d5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5c8  0800d5c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0800d5c8  0800d5c8  0001d5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5e4  0800d5e4  0001d5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004574  20000078  0800d65c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200045ec  0800d65c  000245ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000345c0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005254  00000000  00000000  00054664  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f08  00000000  00000000  000598b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e60  00000000  00000000  0005b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257ae  00000000  00000000  0005d620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015c62  00000000  00000000  00082dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d46ba  00000000  00000000  00098a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d0ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ec4  00000000  00000000  0016d168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c304 	.word	0x0800c304

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800c304 	.word	0x0800c304

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <_ZN3ros3MsgC1Ev+0x1c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	0800d458 	.word	0x0800d458

0800051c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
      data()
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ffe8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffce 	bl	80004d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	0800d440 	.word	0x0800d440

0800054c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6859      	ldr	r1, [r3, #4]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	4413      	add	r3, r2
 8000564:	b2ca      	uxtb	r2, r1
 8000566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	0a19      	lsrs	r1, r3, #8
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	4413      	add	r3, r2
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0c19      	lsrs	r1, r3, #16
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3302      	adds	r3, #2
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0e19      	lsrs	r1, r3, #24
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3303      	adds	r3, #3
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	4413      	add	r3, r2
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3304      	adds	r3, #4
 80005a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	0a19      	lsrs	r1, r3, #8
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	0c19      	lsrs	r1, r3, #16
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3302      	adds	r3, #2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	0e19      	lsrs	r1, r3, #24
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3303      	adds	r3, #3
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3304      	adds	r3, #4
 80005ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80005ee:	68fb      	ldr	r3, [r7, #12]
    }
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	440b      	add	r3, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3302      	adds	r3, #2
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	440b      	add	r3, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	041b      	lsls	r3, r3, #16
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3303      	adds	r3, #3
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	440b      	add	r3, r1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3304      	adds	r3, #4
 800065e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	440b      	add	r3, r1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3302      	adds	r3, #2
 800068c:	6839      	ldr	r1, [r7, #0]
 800068e:	440b      	add	r3, r1
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3303      	adds	r3, #3
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	440b      	add	r3, r1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	061b      	lsls	r3, r3, #24
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3304      	adds	r3, #4
 80006b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80006b6:	68fb      	ldr	r3, [r7, #12]
    }
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	0800c31c 	.word	0x0800c31c

080006e0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	0800c32c 	.word	0x0800c32c

080006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	809a      	strh	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
    {
    }
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	0800d428 	.word	0x0800d428
 8000740:	0800c350 	.word	0x0800c350

08000744 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8899      	ldrh	r1, [r3, #4]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	b2ca      	uxtb	r2, r1
 800075e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	b299      	uxth	r1, r3
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	b2ca      	uxtb	r2, r1
 8000772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3302      	adds	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd22 	bl	80001c8 <strlen>
 8000784:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	69b9      	ldr	r1, [r7, #24]
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fc74 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	3304      	adds	r3, #4
 8000798:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	18d0      	adds	r0, r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	4619      	mov	r1, r3
 80007a8:	f00b fc64 	bl	800c074 <memcpy>
      offset += length_topic_name;
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	4413      	add	r3, r2
 80007b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd05 	bl	80001c8 <strlen>
 80007be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	6979      	ldr	r1, [r7, #20]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fc57 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	18d0      	adds	r0, r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f00b fc47 	bl	800c074 <memcpy>
      offset += length_message_type;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fce8 	bl	80001c8 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	6939      	ldr	r1, [r7, #16]
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fc3a 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3304      	adds	r3, #4
 800080c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	18d0      	adds	r0, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4619      	mov	r1, r3
 800081c:	f00b fc2a 	bl	800c074 <memcpy>
      offset += length_md5sum;
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4413      	add	r3, r2
 8000826:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800082e:	68f9      	ldr	r1, [r7, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	0a19      	lsrs	r1, r3, #8
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3301      	adds	r3, #1
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	0c19      	lsrs	r1, r3, #16
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3302      	adds	r3, #2
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	b2ca      	uxtb	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	0e19      	lsrs	r1, r3, #24
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3303      	adds	r3, #3
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000870:	69fb      	ldr	r3, [r7, #28]
    }
 8000872:	4618      	mov	r0, r3
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800087a:	b580      	push	{r7, lr}
 800087c:	b08a      	sub	sp, #40	; 0x28
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	b21a      	sxth	r2, r3
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	3301      	adds	r3, #1
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3302      	adds	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	441a      	add	r2, r3
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fbf6 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	3304      	adds	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	d20c      	bcs.n	80008fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	441a      	add	r2, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	440b      	add	r3, r1
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	3301      	adds	r3, #1
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
 80008fa:	e7ec      	b.n	80008d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	3b01      	subs	r3, #1
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	3b01      	subs	r3, #1
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	441a      	add	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	4413      	add	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	441a      	add	r2, r3
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fbc3 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	3304      	adds	r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4413      	add	r3, r2
 8000942:	6a3a      	ldr	r2, [r7, #32]
 8000944:	429a      	cmp	r2, r3
 8000946:	d20c      	bcs.n	8000962 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	441a      	add	r2, r3
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3b01      	subs	r3, #1
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	440b      	add	r3, r1
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	3301      	adds	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	e7ec      	b.n	800093c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	3b01      	subs	r3, #1
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	3b01      	subs	r3, #1
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	441a      	add	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4413      	add	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	441a      	add	r2, r3
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fb90 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	3304      	adds	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d20c      	bcs.n	80009c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	441a      	add	r2, r3
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	440b      	add	r3, r1
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	e7ec      	b.n	80009a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	3b01      	subs	r3, #1
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	3b01      	subs	r3, #1
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	441a      	add	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	440a      	add	r2, r1
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3301      	adds	r3, #1
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	440b      	add	r3, r1
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	3302      	adds	r3, #2
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	440b      	add	r3, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	3303      	adds	r3, #3
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a40:	69bb      	ldr	r3, [r7, #24]
    }
 8000a42:	4618      	mov	r0, r3
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	0800c354 	.word	0x0800c354

08000a68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	0800c370 	.word	0x0800c370

08000a84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd34 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	711a      	strb	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000aa4:	609a      	str	r2, [r3, #8]
    {
    }
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	0800d410 	.word	0x0800d410
 8000ab4:	0800c350 	.word	0x0800c350

08000ab8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7912      	ldrb	r2, [r2, #4]
 8000ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb73 	bl	80001c8 <strlen>
 8000ae2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fac5 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	18d0      	adds	r0, r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f00b fab5 	bl	800c074 <memcpy>
      offset += length_msg;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b12:	68fb      	ldr	r3, [r7, #12]
    }
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fab5 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3304      	adds	r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20c      	bcs.n	8000b7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	441a      	add	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e7ec      	b.n	8000b58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	3b01      	subs	r3, #1
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	441a      	add	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
     return offset;
 8000ba2:	693b      	ldr	r3, [r7, #16]
    }
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	0800c394 	.word	0x0800c394

08000bc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	0800c3a8 	.word	0x0800c3a8

08000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc84 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	0800d3f8 	.word	0x0800d3f8

08000c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0c19      	lsrs	r1, r3, #16
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3302      	adds	r3, #2
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0e19      	lsrs	r1, r3, #24
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3303      	adds	r3, #3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3304      	adds	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d22b      	bcs.n	8000cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	0a19      	lsrs	r1, r3, #8
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	0e19      	lsrs	r1, r3, #24
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3304      	adds	r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	e7ce      	b.n	8000c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6919      	ldr	r1, [r3, #16]
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	0a19      	lsrs	r1, r3, #8
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	0c19      	lsrs	r1, r3, #16
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	3302      	adds	r3, #2
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	0e19      	lsrs	r1, r3, #24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3303      	adds	r3, #3
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3304      	adds	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d22b      	bcs.n	8000d9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	b2ca      	uxtb	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	0a19      	lsrs	r1, r3, #8
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	3301      	adds	r3, #1
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	0c19      	lsrs	r1, r3, #16
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3302      	adds	r3, #2
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2ca      	uxtb	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	0e19      	lsrs	r1, r3, #24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	3303      	adds	r3, #3
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3304      	adds	r3, #4
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e7ce      	b.n	8000d38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69d9      	ldr	r1, [r3, #28]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	b2ca      	uxtb	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	0a19      	lsrs	r1, r3, #8
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	0c19      	lsrs	r1, r3, #16
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	0e19      	lsrs	r1, r3, #24
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	3304      	adds	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d228      	bcs.n	8000e44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e2 	bl	80001c8 <strlen>
 8000e04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	6979      	ldr	r1, [r7, #20]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 f934 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	3304      	adds	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	18d0      	adds	r0, r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f00b f920 	bl	800c074 <memcpy>
      offset += length_stringsi;
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	e7d1      	b.n	8000de8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e46:	4618      	mov	r0, r3
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b08e      	sub	sp, #56	; 0x38
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	6a3a      	ldr	r2, [r7, #32]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	061b      	lsls	r3, r3, #24
 8000e96:	6a3a      	ldr	r2, [r7, #32]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d90a      	bls.n	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f00b f998 	bl	800c1ec <realloc>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a3a      	ldr	r2, [r7, #32]
 8000ec6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d236      	bcs.n	8000f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	440a      	add	r2, r1
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	3301      	adds	r3, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	3302      	adds	r3, #2
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	3303      	adds	r3, #3
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	440b      	add	r3, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	3304      	adds	r3, #4
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3e:	3301      	adds	r3, #1
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
 8000f42:	e7c3      	b.n	8000ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3301      	adds	r3, #1
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	3302      	adds	r3, #2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f74:	3303      	adds	r3, #3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f86:	3304      	adds	r3, #4
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d90a      	bls.n	8000faa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f00b f924 	bl	800c1ec <realloc>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d236      	bcs.n	800102c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	440a      	add	r2, r1
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	440b      	add	r3, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	440b      	add	r3, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3304      	adds	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	3214      	adds	r2, #20
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800102a:	e7c3      	b.n	8000fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	3301      	adds	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	3302      	adds	r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	3303      	adds	r3, #3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	3304      	adds	r3, #4
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	d90a      	bls.n	8001092 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f00b f8b0 	bl	800c1ec <realloc>
 800108c:	4602      	mov	r2, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d23f      	bcs.n	8001126 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	441a      	add	r2, r3
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 f800 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	3304      	adds	r3, #4
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d20c      	bcs.n	80010e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	441a      	add	r2, r3
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	440b      	add	r3, r1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3301      	adds	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e7ec      	b.n	80010c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	3b01      	subs	r3, #1
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	3b01      	subs	r3, #1
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	441a      	add	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	3220      	adds	r2, #32
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	3301      	adds	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
 8001124:	e7ba      	b.n	800109c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001128:	4618      	mov	r0, r3
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	0800d2d4 	.word	0x0800d2d4

0800114c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	0800c3cc 	.word	0x0800c3cc

08001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	425b      	negs	r3, r3
 80011c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <_ZN13STM32HardwareC1Ev+0x34>)
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	200016b8 	.word	0x200016b8

0800120c <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffc4 	bl	80011ae <_ZN13STM32Hardware10getRdmaIndEv>
 8001226:	4603      	mov	r3, r0
 8001228:	429c      	cmp	r4, r3
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d012      	beq.n	800125c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800125c:	68fb      	ldr	r3, [r7, #12]
    }
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
	...

08001268 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b20      	cmp	r3, #32
 800127c:	d108      	bne.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <_ZN13STM32Hardware5flushEv+0x2a>
 8001290:	2300      	movs	r3, #0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03f      	beq.n	8001316 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d031      	beq.n	8001310 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d20a      	bcs.n	80012d2 <_ZN13STM32Hardware5flushEv+0x6a>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	e006      	b.n	80012e0 <_ZN13STM32Hardware5flushEv+0x78>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80012de:	b29b      	uxth	r3, r3
 80012e0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f009 feca 	bl	800b090 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4413      	add	r3, r2
 8001306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
      }
    }
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000094 	.word	0x20000094

08001324 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133a:	bfa8      	it	ge
 800133c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001340:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001348:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	4293      	cmp	r3, r2
 8001350:	bf28      	it	cs
 8001352:	4613      	movcs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800135c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	4618      	mov	r0, r3
 800136a:	f00a fe83 	bl	800c074 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00b      	beq.n	80013a2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	18d1      	adds	r1, r2, r3
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	461a      	mov	r2, r3
 800139e:	f00a fe69 	bl	800c074 <memcpy>
      }

      flush();
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ff60 	bl	8001268 <_ZN13STM32Hardware5flushEv>
    }
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	f007 fb5c 	bl	8008a74 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
      data("")
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f892 	bl	80004fc <_ZN3ros3MsgC1Ev>
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80013e2:	605a      	str	r2, [r3, #4]
    {
    }
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	0800d3cc 	.word	0x0800d3cc
 80013f4:	0800c350 	.word	0x0800c350

080013f8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fedc 	bl	80001c8 <strlen>
 8001410:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fe2e 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	18d0      	adds	r0, r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	4619      	mov	r1, r3
 8001434:	f00a fe1e 	bl	800c074 <memcpy>
      offset += length_data;
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001440:	68fb      	ldr	r3, [r7, #12]
    }
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	441a      	add	r2, r3
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fe27 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	3304      	adds	r3, #4
 800146e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	d20c      	bcs.n	800149a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	441a      	add	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3b01      	subs	r3, #1
 800148a:	6839      	ldr	r1, [r7, #0]
 800148c:	440b      	add	r3, r1
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e7ec      	b.n	8001474 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	3b01      	subs	r3, #1
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	441a      	add	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
     return offset;
 80014be:	693b      	ldr	r3, [r7, #16]
    }
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	0800c3f0 	.word	0x0800c3f0

080014e4 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	0800c400 	.word	0x0800c400

08001500 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
      data(0)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fff6 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	e9c2 3402 	strd	r3, r4, [r2, #8]
    {
    }
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	0800d3b4 	.word	0x0800d3b4

08001534 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001534:	b490      	push	{r4, r7}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001548:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800154c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	440a      	add	r2, r1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800155a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	f04f 0400 	mov.w	r4, #0
 8001566:	0a0b      	lsrs	r3, r1, #8
 8001568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800156c:	0a14      	lsrs	r4, r2, #8
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	3201      	adds	r2, #1
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	440a      	add	r2, r1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800157a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f04f 0400 	mov.w	r4, #0
 8001586:	0c0b      	lsrs	r3, r1, #16
 8001588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800158c:	0c14      	lsrs	r4, r2, #16
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	3202      	adds	r2, #2
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	440a      	add	r2, r1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800159a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	0e0b      	lsrs	r3, r1, #24
 80015a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ac:	0e14      	lsrs	r4, r2, #24
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	3203      	adds	r2, #3
 80015b2:	6839      	ldr	r1, [r7, #0]
 80015b4:	440a      	add	r2, r1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80015ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	f04f 0400 	mov.w	r4, #0
 80015c6:	0013      	movs	r3, r2
 80015c8:	2400      	movs	r4, #0
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	3204      	adds	r2, #4
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440a      	add	r2, r1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80015d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	f04f 0400 	mov.w	r4, #0
 80015e2:	0a13      	lsrs	r3, r2, #8
 80015e4:	2400      	movs	r4, #0
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	3205      	adds	r2, #5
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440a      	add	r2, r1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80015f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	f04f 0400 	mov.w	r4, #0
 80015fe:	0c13      	lsrs	r3, r2, #16
 8001600:	2400      	movs	r4, #0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	3206      	adds	r2, #6
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	440a      	add	r2, r1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800160e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	f04f 0400 	mov.w	r4, #0
 800161a:	0e13      	lsrs	r3, r2, #24
 800161c:	2400      	movs	r4, #0
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	3207      	adds	r2, #7
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	440a      	add	r2, r1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->data);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3308      	adds	r3, #8
 800162e:	617b      	str	r3, [r7, #20]
      return offset;
 8001630:	697b      	ldr	r3, [r7, #20]
    }
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bc90      	pop	{r4, r7}
 800163a:	4770      	bx	lr

0800163c <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800163c:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8001640:	b087      	sub	sp, #28
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f04f 0400 	mov.w	r4, #0
 8001654:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001658:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	4403      	add	r3, r0
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	fa5f f883 	uxtb.w	r8, r3
 8001668:	f04f 0900 	mov.w	r9, #0
 800166c:	ea48 0301 	orr.w	r3, r8, r1
 8001670:	ea49 0402 	orr.w	r4, r9, r2
 8001674:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001678:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0b00 	mov.w	fp, #0
 8001690:	f04f 0c00 	mov.w	ip, #0
 8001694:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001698:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800169c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80016a0:	ea4b 0308 	orr.w	r3, fp, r8
 80016a4:	ea4c 0409 	orr.w	r4, ip, r9
 80016a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3302      	adds	r3, #2
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2d9      	uxtb	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0b00 	mov.w	fp, #0
 80016c4:	f04f 0c00 	mov.w	ip, #0
 80016c8:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80016cc:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80016d0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80016d4:	ea4b 0308 	orr.w	r3, fp, r8
 80016d8:	ea4c 0409 	orr.w	r4, ip, r9
 80016dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3303      	adds	r3, #3
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	4403      	add	r3, r0
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	0a1e      	lsrs	r6, r3, #8
 80016f6:	061d      	lsls	r5, r3, #24
 80016f8:	ea41 0305 	orr.w	r3, r1, r5
 80016fc:	ea42 0406 	orr.w	r4, r2, r6
 8001700:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3304      	adds	r3, #4
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	4403      	add	r3, r0
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2dd      	uxtb	r5, r3
 8001714:	f04f 0600 	mov.w	r6, #0
 8001718:	f04f 0800 	mov.w	r8, #0
 800171c:	f04f 0900 	mov.w	r9, #0
 8001720:	46a9      	mov	r9, r5
 8001722:	f04f 0800 	mov.w	r8, #0
 8001726:	ea48 0301 	orr.w	r3, r8, r1
 800172a:	ea49 0402 	orr.w	r4, r9, r2
 800172e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001732:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3305      	adds	r3, #5
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	4403      	add	r3, r0
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2dd      	uxtb	r5, r3
 8001742:	f04f 0600 	mov.w	r6, #0
 8001746:	f04f 0800 	mov.w	r8, #0
 800174a:	f04f 0900 	mov.w	r9, #0
 800174e:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8001752:	f04f 0800 	mov.w	r8, #0
 8001756:	ea48 0301 	orr.w	r3, r8, r1
 800175a:	ea49 0402 	orr.w	r4, r9, r2
 800175e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001762:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3306      	adds	r3, #6
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	4403      	add	r3, r0
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2dd      	uxtb	r5, r3
 8001772:	f04f 0600 	mov.w	r6, #0
 8001776:	f04f 0800 	mov.w	r8, #0
 800177a:	f04f 0900 	mov.w	r9, #0
 800177e:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8001782:	f04f 0800 	mov.w	r8, #0
 8001786:	ea48 0301 	orr.w	r3, r8, r1
 800178a:	ea49 0402 	orr.w	r4, r9, r2
 800178e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001792:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3307      	adds	r3, #7
 800179a:	6838      	ldr	r0, [r7, #0]
 800179c:	4403      	add	r3, r0
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2dd      	uxtb	r5, r3
 80017a2:	f04f 0600 	mov.w	r6, #0
 80017a6:	f04f 0800 	mov.w	r8, #0
 80017aa:	f04f 0900 	mov.w	r9, #0
 80017ae:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80017b2:	f04f 0800 	mov.w	r8, #0
 80017b6:	ea48 0301 	orr.w	r3, r8, r1
 80017ba:	ea49 0402 	orr.w	r4, r9, r2
 80017be:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->data = u_data.real;
 80017c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->data);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3308      	adds	r3, #8
 80017d0:	617b      	str	r3, [r7, #20]
     return offset;
 80017d2:	697b      	ldr	r3, [r7, #20]
    }
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80017de:	4770      	bx	lr

080017e0 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	0800c424 	.word	0x0800c424

080017fc <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	0800c434 	.word	0x0800c434

08001818 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe6a 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8001828:	4a09      	ldr	r2, [pc, #36]	; (8001850 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3308      	adds	r3, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe4d 	bl	80004d8 <_ZN3ros4TimeC1Ev>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8001842:	611a      	str	r2, [r3, #16]
    {
    }
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	0800d39c 	.word	0x0800d39c
 8001854:	0800c350 	.word	0x0800c350

08001858 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6859      	ldr	r1, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	b2ca      	uxtb	r2, r1
 8001872:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0a19      	lsrs	r1, r3, #8
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	b2ca      	uxtb	r2, r1
 8001884:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	0c19      	lsrs	r1, r3, #16
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3302      	adds	r3, #2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	0e19      	lsrs	r1, r3, #24
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3303      	adds	r3, #3
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3304      	adds	r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0a19      	lsrs	r1, r3, #8
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	0c19      	lsrs	r1, r3, #16
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3302      	adds	r3, #2
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0e19      	lsrs	r1, r3, #24
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3303      	adds	r3, #3
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3304      	adds	r3, #4
 80018f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a19      	lsrs	r1, r3, #8
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	0c19      	lsrs	r1, r3, #16
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	3302      	adds	r3, #2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	4413      	add	r3, r2
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0e19      	lsrs	r1, r3, #24
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3303      	adds	r3, #3
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc3d 	bl	80001c8 <strlen>
 800194e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	4413      	add	r3, r2
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fb8f 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	18d0      	adds	r0, r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4619      	mov	r1, r3
 8001972:	f00a fb7f 	bl	800c074 <memcpy>
      offset += length_frame_id;
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
      return offset;
 800197e:	68fb      	ldr	r3, [r7, #12]
    }
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	3301      	adds	r3, #1
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	440b      	add	r3, r1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	3302      	adds	r3, #2
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	440b      	add	r3, r1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3303      	adds	r3, #3
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	061b      	lsls	r3, r3, #24
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3304      	adds	r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	3301      	adds	r3, #1
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	440b      	add	r3, r1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	3302      	adds	r3, #2
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	440b      	add	r3, r1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	3301      	adds	r3, #1
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	440b      	add	r3, r1
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	440b      	add	r3, r1
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	3303      	adds	r3, #3
 8001a84:	6839      	ldr	r1, [r7, #0]
 8001a86:	440b      	add	r3, r1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	3304      	adds	r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fb07 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	3304      	adds	r3, #4
 8001aae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d20c      	bcs.n	8001ada <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	440b      	add	r3, r1
 8001ace:	7812      	ldrb	r2, [r2, #0]
 8001ad0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e7ec      	b.n	8001ab4 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	441a      	add	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
     return offset;
 8001afe:	693b      	ldr	r3, [r7, #16]
    }
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	0800c458 	.word	0x0800c458

08001b24 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	0800c468 	.word	0x0800c468

08001b40 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcd6 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	f04f 0400 	mov.w	r4, #0
 8001b60:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	f04f 0400 	mov.w	r4, #0
 8001b6e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	f04f 0400 	mov.w	r4, #0
 8001b7c:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f04f 0400 	mov.w	r4, #0
 8001b8a:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	0800d384 	.word	0x0800d384

08001b9c <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b9c:	b490      	push	{r4, r7}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001bb0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001bb4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	440a      	add	r2, r1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001bc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	f04f 0400 	mov.w	r4, #0
 8001bce:	0a0b      	lsrs	r3, r1, #8
 8001bd0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bd4:	0a14      	lsrs	r4, r2, #8
 8001bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd8:	3201      	adds	r2, #1
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	440a      	add	r2, r1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001be2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	f04f 0400 	mov.w	r4, #0
 8001bee:	0c0b      	lsrs	r3, r1, #16
 8001bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bf4:	0c14      	lsrs	r4, r2, #16
 8001bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf8:	3202      	adds	r2, #2
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	440a      	add	r2, r1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001c02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	f04f 0400 	mov.w	r4, #0
 8001c0e:	0e0b      	lsrs	r3, r1, #24
 8001c10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c14:	0e14      	lsrs	r4, r2, #24
 8001c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c18:	3203      	adds	r2, #3
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001c22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	f04f 0400 	mov.w	r4, #0
 8001c2e:	0013      	movs	r3, r2
 8001c30:	2400      	movs	r4, #0
 8001c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c34:	3204      	adds	r2, #4
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	440a      	add	r2, r1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001c3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f04f 0400 	mov.w	r4, #0
 8001c4a:	0a13      	lsrs	r3, r2, #8
 8001c4c:	2400      	movs	r4, #0
 8001c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c50:	3205      	adds	r2, #5
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	440a      	add	r2, r1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001c5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	f04f 0400 	mov.w	r4, #0
 8001c66:	0c13      	lsrs	r3, r2, #16
 8001c68:	2400      	movs	r4, #0
 8001c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6c:	3206      	adds	r2, #6
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	440a      	add	r2, r1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001c76:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	f04f 0400 	mov.w	r4, #0
 8001c82:	0e13      	lsrs	r3, r2, #24
 8001c84:	2400      	movs	r4, #0
 8001c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c88:	3207      	adds	r2, #7
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	440a      	add	r2, r1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	3308      	adds	r3, #8
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001c9e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001ca2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	440a      	add	r2, r1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001cb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	f04f 0400 	mov.w	r4, #0
 8001cbc:	0a0b      	lsrs	r3, r1, #8
 8001cbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cc2:	0a14      	lsrs	r4, r2, #8
 8001cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc6:	3201      	adds	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	440a      	add	r2, r1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001cd0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	f04f 0400 	mov.w	r4, #0
 8001cdc:	0c0b      	lsrs	r3, r1, #16
 8001cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ce2:	0c14      	lsrs	r4, r2, #16
 8001ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ce6:	3202      	adds	r2, #2
 8001ce8:	6839      	ldr	r1, [r7, #0]
 8001cea:	440a      	add	r2, r1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001cf0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f04f 0400 	mov.w	r4, #0
 8001cfc:	0e0b      	lsrs	r3, r1, #24
 8001cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d02:	0e14      	lsrs	r4, r2, #24
 8001d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d06:	3203      	adds	r2, #3
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	440a      	add	r2, r1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001d10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	f04f 0400 	mov.w	r4, #0
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	2400      	movs	r4, #0
 8001d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d22:	3204      	adds	r2, #4
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	440a      	add	r2, r1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001d2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	f04f 0400 	mov.w	r4, #0
 8001d38:	0a13      	lsrs	r3, r2, #8
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3e:	3205      	adds	r2, #5
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	440a      	add	r2, r1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001d48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	f04f 0400 	mov.w	r4, #0
 8001d54:	0c13      	lsrs	r3, r2, #16
 8001d56:	2400      	movs	r4, #0
 8001d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d5a:	3206      	adds	r2, #6
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	440a      	add	r2, r1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001d64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	0e13      	lsrs	r3, r2, #24
 8001d72:	2400      	movs	r4, #0
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	3207      	adds	r2, #7
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	440a      	add	r2, r1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8001d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d82:	3308      	adds	r3, #8
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001d8c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001d90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	440a      	add	r2, r1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001d9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	f04f 0400 	mov.w	r4, #0
 8001daa:	0a0b      	lsrs	r3, r1, #8
 8001dac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001db0:	0a14      	lsrs	r4, r2, #8
 8001db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db4:	3201      	adds	r2, #1
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	440a      	add	r2, r1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001dbe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	f04f 0400 	mov.w	r4, #0
 8001dca:	0c0b      	lsrs	r3, r1, #16
 8001dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001dd0:	0c14      	lsrs	r4, r2, #16
 8001dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd4:	3202      	adds	r2, #2
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	440a      	add	r2, r1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001dde:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f04f 0400 	mov.w	r4, #0
 8001dea:	0e0b      	lsrs	r3, r1, #24
 8001dec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001df0:	0e14      	lsrs	r4, r2, #24
 8001df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df4:	3203      	adds	r2, #3
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	440a      	add	r2, r1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001dfe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	f04f 0400 	mov.w	r4, #0
 8001e0a:	0013      	movs	r3, r2
 8001e0c:	2400      	movs	r4, #0
 8001e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e10:	3204      	adds	r2, #4
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	440a      	add	r2, r1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001e1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	f04f 0400 	mov.w	r4, #0
 8001e26:	0a13      	lsrs	r3, r2, #8
 8001e28:	2400      	movs	r4, #0
 8001e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2c:	3205      	adds	r2, #5
 8001e2e:	6839      	ldr	r1, [r7, #0]
 8001e30:	440a      	add	r2, r1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001e36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	f04f 0400 	mov.w	r4, #0
 8001e42:	0c13      	lsrs	r3, r2, #16
 8001e44:	2400      	movs	r4, #0
 8001e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e48:	3206      	adds	r2, #6
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	440a      	add	r2, r1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8001e52:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f04f 0400 	mov.w	r4, #0
 8001e5e:	0e13      	lsrs	r3, r2, #24
 8001e60:	2400      	movs	r4, #0
 8001e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e64:	3207      	adds	r2, #7
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	440a      	add	r2, r1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	3308      	adds	r3, #8
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001e7a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8001e7e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	440a      	add	r2, r1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8001e8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	f04f 0400 	mov.w	r4, #0
 8001e98:	0a0b      	lsrs	r3, r1, #8
 8001e9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e9e:	0a14      	lsrs	r4, r2, #8
 8001ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea2:	3201      	adds	r2, #1
 8001ea4:	6839      	ldr	r1, [r7, #0]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8001eac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f04f 0400 	mov.w	r4, #0
 8001eb8:	0c0b      	lsrs	r3, r1, #16
 8001eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ebe:	0c14      	lsrs	r4, r2, #16
 8001ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec2:	3202      	adds	r2, #2
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	440a      	add	r2, r1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8001ecc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	0e0b      	lsrs	r3, r1, #24
 8001eda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ede:	0e14      	lsrs	r4, r2, #24
 8001ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee2:	3203      	adds	r2, #3
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	440a      	add	r2, r1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8001eec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f04f 0400 	mov.w	r4, #0
 8001ef8:	0013      	movs	r3, r2
 8001efa:	2400      	movs	r4, #0
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	3204      	adds	r2, #4
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	440a      	add	r2, r1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8001f08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	f04f 0400 	mov.w	r4, #0
 8001f14:	0a13      	lsrs	r3, r2, #8
 8001f16:	2400      	movs	r4, #0
 8001f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1a:	3205      	adds	r2, #5
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	440a      	add	r2, r1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8001f24:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	f04f 0400 	mov.w	r4, #0
 8001f30:	0c13      	lsrs	r3, r2, #16
 8001f32:	2400      	movs	r4, #0
 8001f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f36:	3206      	adds	r2, #6
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	440a      	add	r2, r1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8001f40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	f04f 0400 	mov.w	r4, #0
 8001f4c:	0e13      	lsrs	r3, r2, #24
 8001f4e:	2400      	movs	r4, #0
 8001f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f52:	3207      	adds	r2, #7
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	440a      	add	r2, r1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	3308      	adds	r3, #8
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001f64:	4618      	mov	r0, r3
 8001f66:	3730      	adds	r7, #48	; 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc90      	pop	{r4, r7}
 8001f6c:	4770      	bx	lr

08001f6e <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f6e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f72:	b092      	sub	sp, #72	; 0x48
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	61f8      	str	r0, [r7, #28]
 8001f78:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f04f 0400 	mov.w	r4, #0
 8001f86:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f90:	69b8      	ldr	r0, [r7, #24]
 8001f92:	4403      	add	r3, r0
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2dd      	uxtb	r5, r3
 8001f98:	f04f 0600 	mov.w	r6, #0
 8001f9c:	ea45 0301 	orr.w	r3, r5, r1
 8001fa0:	ea46 0402 	orr.w	r4, r6, r2
 8001fa4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fa8:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8001fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fae:	3301      	adds	r3, #1
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2d9      	uxtb	r1, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001fc8:	0213      	lsls	r3, r2, #8
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	020b      	lsls	r3, r1, #8
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fdc:	ea43 0305 	orr.w	r3, r3, r5
 8001fe0:	ea44 0406 	orr.w	r4, r4, r6
 8001fe4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fe8:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	3302      	adds	r3, #2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2d9      	uxtb	r1, r3
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f04f 0400 	mov.w	r4, #0
 8002004:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002008:	0413      	lsls	r3, r2, #16
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	040b      	lsls	r3, r1, #16
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800201c:	ea43 0305 	orr.w	r3, r3, r5
 8002020:	ea44 0406 	orr.w	r4, r4, r6
 8002024:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002028:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202e:	3303      	adds	r3, #3
 8002030:	69b8      	ldr	r0, [r7, #24]
 8002032:	4403      	add	r3, r0
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f04f 0400 	mov.w	r4, #0
 800203c:	0a18      	lsrs	r0, r3, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002048:	ea43 0301 	orr.w	r3, r3, r1
 800204c:	ea44 0402 	orr.w	r4, r4, r2
 8002050:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002054:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205a:	3304      	adds	r3, #4
 800205c:	69b8      	ldr	r0, [r7, #24]
 800205e:	4403      	add	r3, r0
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b2dd      	uxtb	r5, r3
 8002064:	f04f 0600 	mov.w	r6, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f04f 0400 	mov.w	r4, #0
 8002070:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002074:	002b      	movs	r3, r5
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002080:	ea43 0301 	orr.w	r3, r3, r1
 8002084:	ea44 0402 	orr.w	r4, r4, r2
 8002088:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800208c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002092:	3305      	adds	r3, #5
 8002094:	69b8      	ldr	r0, [r7, #24]
 8002096:	4403      	add	r3, r0
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2dd      	uxtb	r5, r3
 800209c:	f04f 0600 	mov.w	r6, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	f04f 0400 	mov.w	r4, #0
 80020a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80020ac:	022b      	lsls	r3, r5, #8
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020b8:	ea43 0301 	orr.w	r3, r3, r1
 80020bc:	ea44 0402 	orr.w	r4, r4, r2
 80020c0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80020c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80020c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ca:	3306      	adds	r3, #6
 80020cc:	69b8      	ldr	r0, [r7, #24]
 80020ce:	4403      	add	r3, r0
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b2dd      	uxtb	r5, r3
 80020d4:	f04f 0600 	mov.w	r6, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	f04f 0400 	mov.w	r4, #0
 80020e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80020e4:	042b      	lsls	r3, r5, #16
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020f0:	ea43 0301 	orr.w	r3, r3, r1
 80020f4:	ea44 0402 	orr.w	r4, r4, r2
 80020f8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80020fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002102:	3307      	adds	r3, #7
 8002104:	69b8      	ldr	r0, [r7, #24]
 8002106:	4403      	add	r3, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2dd      	uxtb	r5, r3
 800210c:	f04f 0600 	mov.w	r6, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	f04f 0400 	mov.w	r4, #0
 8002118:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800211c:	062b      	lsls	r3, r5, #24
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002128:	ea43 0301 	orr.w	r3, r3, r1
 800212c:	ea44 0402 	orr.w	r4, r4, r2
 8002130:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 8002134:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 800213e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002140:	3308      	adds	r3, #8
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	f04f 0400 	mov.w	r4, #0
 800214c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002150:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002156:	69b8      	ldr	r0, [r7, #24]
 8002158:	4403      	add	r3, r0
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b2dd      	uxtb	r5, r3
 800215e:	f04f 0600 	mov.w	r6, #0
 8002162:	ea45 0301 	orr.w	r3, r5, r1
 8002166:	ea46 0402 	orr.w	r4, r6, r2
 800216a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800216e:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8002172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002174:	3301      	adds	r3, #1
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2d9      	uxtb	r1, r3
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	f04f 0400 	mov.w	r4, #0
 800218a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800218e:	0213      	lsls	r3, r2, #8
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	020b      	lsls	r3, r1, #8
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021a2:	ea43 0305 	orr.w	r3, r3, r5
 80021a6:	ea44 0406 	orr.w	r4, r4, r6
 80021aa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021ae:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80021b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b4:	3302      	adds	r3, #2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b2d9      	uxtb	r1, r3
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	f04f 0400 	mov.w	r4, #0
 80021ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80021ce:	0413      	lsls	r3, r2, #16
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	040b      	lsls	r3, r1, #16
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021e2:	ea43 0305 	orr.w	r3, r3, r5
 80021e6:	ea44 0406 	orr.w	r4, r4, r6
 80021ea:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80021f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f4:	3303      	adds	r3, #3
 80021f6:	69b8      	ldr	r0, [r7, #24]
 80021f8:	4403      	add	r3, r0
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f04f 0400 	mov.w	r4, #0
 8002202:	0a18      	lsrs	r0, r3, #8
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	061b      	lsls	r3, r3, #24
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800220e:	ea43 0301 	orr.w	r3, r3, r1
 8002212:	ea44 0402 	orr.w	r4, r4, r2
 8002216:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800221a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800221e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002220:	3304      	adds	r3, #4
 8002222:	69b8      	ldr	r0, [r7, #24]
 8002224:	4403      	add	r3, r0
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2dd      	uxtb	r5, r3
 800222a:	f04f 0600 	mov.w	r6, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f04f 0400 	mov.w	r4, #0
 8002236:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800223a:	002b      	movs	r3, r5
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002246:	ea43 0301 	orr.w	r3, r3, r1
 800224a:	ea44 0402 	orr.w	r4, r4, r2
 800224e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002252:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002258:	3305      	adds	r3, #5
 800225a:	69b8      	ldr	r0, [r7, #24]
 800225c:	4403      	add	r3, r0
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2dd      	uxtb	r5, r3
 8002262:	f04f 0600 	mov.w	r6, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	f04f 0400 	mov.w	r4, #0
 800226e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002272:	022b      	lsls	r3, r5, #8
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800227e:	ea43 0301 	orr.w	r3, r3, r1
 8002282:	ea44 0402 	orr.w	r4, r4, r2
 8002286:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800228a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800228e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002290:	3306      	adds	r3, #6
 8002292:	69b8      	ldr	r0, [r7, #24]
 8002294:	4403      	add	r3, r0
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b2dd      	uxtb	r5, r3
 800229a:	f04f 0600 	mov.w	r6, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	f04f 0400 	mov.w	r4, #0
 80022a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80022aa:	042b      	lsls	r3, r5, #16
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022b6:	ea43 0301 	orr.w	r3, r3, r1
 80022ba:	ea44 0402 	orr.w	r4, r4, r2
 80022be:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80022c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80022c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c8:	3307      	adds	r3, #7
 80022ca:	69b8      	ldr	r0, [r7, #24]
 80022cc:	4403      	add	r3, r0
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b2dd      	uxtb	r5, r3
 80022d2:	f04f 0600 	mov.w	r6, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	f04f 0400 	mov.w	r4, #0
 80022de:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80022e2:	062b      	lsls	r3, r5, #24
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022ee:	ea43 0301 	orr.w	r3, r3, r1
 80022f2:	ea44 0402 	orr.w	r4, r4, r2
 80022f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 80022fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8002304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002306:	3308      	adds	r3, #8
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002316:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800231a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231c:	69b8      	ldr	r0, [r7, #24]
 800231e:	4403      	add	r3, r0
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2dd      	uxtb	r5, r3
 8002324:	f04f 0600 	mov.w	r6, #0
 8002328:	ea45 0301 	orr.w	r3, r5, r1
 800232c:	ea46 0402 	orr.w	r4, r6, r2
 8002330:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002334:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233a:	3301      	adds	r3, #1
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b2d9      	uxtb	r1, r3
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002354:	0213      	lsls	r3, r2, #8
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	020b      	lsls	r3, r1, #8
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002368:	ea43 0305 	orr.w	r3, r3, r5
 800236c:	ea44 0406 	orr.w	r4, r4, r6
 8002370:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002374:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8002378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237a:	3302      	adds	r3, #2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4413      	add	r3, r2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2d9      	uxtb	r1, r3
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	f04f 0400 	mov.w	r4, #0
 8002390:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002394:	0413      	lsls	r3, r2, #16
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	040b      	lsls	r3, r1, #16
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80023a8:	ea43 0305 	orr.w	r3, r3, r5
 80023ac:	ea44 0406 	orr.w	r4, r4, r6
 80023b0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80023b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ba:	3303      	adds	r3, #3
 80023bc:	69b8      	ldr	r0, [r7, #24]
 80023be:	4403      	add	r3, r0
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f04f 0400 	mov.w	r4, #0
 80023c8:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80023cc:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80023d0:	ea41 030a 	orr.w	r3, r1, sl
 80023d4:	ea42 040b 	orr.w	r4, r2, fp
 80023d8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80023dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	3304      	adds	r3, #4
 80023e4:	69b8      	ldr	r0, [r7, #24]
 80023e6:	4403      	add	r3, r0
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b2dd      	uxtb	r5, r3
 80023ec:	f04f 0600 	mov.w	r6, #0
 80023f0:	f04f 0a00 	mov.w	sl, #0
 80023f4:	f04f 0b00 	mov.w	fp, #0
 80023f8:	46ab      	mov	fp, r5
 80023fa:	f04f 0a00 	mov.w	sl, #0
 80023fe:	ea4a 0301 	orr.w	r3, sl, r1
 8002402:	ea4b 0402 	orr.w	r4, fp, r2
 8002406:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800240a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800240e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002410:	3305      	adds	r3, #5
 8002412:	69b8      	ldr	r0, [r7, #24]
 8002414:	4403      	add	r3, r0
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2dd      	uxtb	r5, r3
 800241a:	f04f 0600 	mov.w	r6, #0
 800241e:	f04f 0a00 	mov.w	sl, #0
 8002422:	f04f 0b00 	mov.w	fp, #0
 8002426:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 800242a:	f04f 0a00 	mov.w	sl, #0
 800242e:	ea4a 0301 	orr.w	r3, sl, r1
 8002432:	ea4b 0402 	orr.w	r4, fp, r2
 8002436:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800243a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800243e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002440:	3306      	adds	r3, #6
 8002442:	69b8      	ldr	r0, [r7, #24]
 8002444:	4403      	add	r3, r0
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2dd      	uxtb	r5, r3
 800244a:	f04f 0600 	mov.w	r6, #0
 800244e:	f04f 0a00 	mov.w	sl, #0
 8002452:	f04f 0b00 	mov.w	fp, #0
 8002456:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 800245a:	f04f 0a00 	mov.w	sl, #0
 800245e:	ea4a 0301 	orr.w	r3, sl, r1
 8002462:	ea4b 0402 	orr.w	r4, fp, r2
 8002466:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800246a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	3307      	adds	r3, #7
 8002472:	69b8      	ldr	r0, [r7, #24]
 8002474:	4403      	add	r3, r0
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b2dd      	uxtb	r5, r3
 800247a:	f04f 0600 	mov.w	r6, #0
 800247e:	f04f 0a00 	mov.w	sl, #0
 8002482:	f04f 0b00 	mov.w	fp, #0
 8002486:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 800248a:	f04f 0a00 	mov.w	sl, #0
 800248e:	ea4a 0301 	orr.w	r3, sl, r1
 8002492:	ea4b 0402 	orr.w	r4, fp, r2
 8002496:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 800249a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 80024a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a6:	3308      	adds	r3, #8
 80024a8:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	f04f 0400 	mov.w	r4, #0
 80024b2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80024ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024bc:	69b8      	ldr	r0, [r7, #24]
 80024be:	4403      	add	r3, r0
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b2dd      	uxtb	r5, r3
 80024c4:	f04f 0600 	mov.w	r6, #0
 80024c8:	ea45 0301 	orr.w	r3, r5, r1
 80024cc:	ea46 0402 	orr.w	r4, r6, r2
 80024d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024d4:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80024d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024da:	3301      	adds	r3, #1
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b2d9      	uxtb	r1, r3
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0a00 	mov.w	sl, #0
 80024ec:	f04f 0b00 	mov.w	fp, #0
 80024f0:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 80024f4:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 80024f8:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 80024fc:	ea4a 0305 	orr.w	r3, sl, r5
 8002500:	ea4b 0406 	orr.w	r4, fp, r6
 8002504:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002508:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250e:	3302      	adds	r3, #2
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2d9      	uxtb	r1, r3
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0a00 	mov.w	sl, #0
 8002520:	f04f 0b00 	mov.w	fp, #0
 8002524:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8002528:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 800252c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8002530:	ea4a 0305 	orr.w	r3, sl, r5
 8002534:	ea4b 0406 	orr.w	r4, fp, r6
 8002538:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800253c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002542:	3303      	adds	r3, #3
 8002544:	69b8      	ldr	r0, [r7, #24]
 8002546:	4403      	add	r3, r0
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f04f 0400 	mov.w	r4, #0
 8002550:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8002554:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8002558:	ea41 0308 	orr.w	r3, r1, r8
 800255c:	ea42 0409 	orr.w	r4, r2, r9
 8002560:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002564:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256a:	3304      	adds	r3, #4
 800256c:	69b8      	ldr	r0, [r7, #24]
 800256e:	4403      	add	r3, r0
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b2dd      	uxtb	r5, r3
 8002574:	f04f 0600 	mov.w	r6, #0
 8002578:	f04f 0800 	mov.w	r8, #0
 800257c:	f04f 0900 	mov.w	r9, #0
 8002580:	46a9      	mov	r9, r5
 8002582:	f04f 0800 	mov.w	r8, #0
 8002586:	ea48 0301 	orr.w	r3, r8, r1
 800258a:	ea49 0402 	orr.w	r4, r9, r2
 800258e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002592:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	3305      	adds	r3, #5
 800259a:	69b8      	ldr	r0, [r7, #24]
 800259c:	4403      	add	r3, r0
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2dd      	uxtb	r5, r3
 80025a2:	f04f 0600 	mov.w	r6, #0
 80025a6:	f04f 0800 	mov.w	r8, #0
 80025aa:	f04f 0900 	mov.w	r9, #0
 80025ae:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80025b2:	f04f 0800 	mov.w	r8, #0
 80025b6:	ea48 0301 	orr.w	r3, r8, r1
 80025ba:	ea49 0402 	orr.w	r4, r9, r2
 80025be:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80025c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80025c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c8:	3306      	adds	r3, #6
 80025ca:	69b8      	ldr	r0, [r7, #24]
 80025cc:	4403      	add	r3, r0
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2dd      	uxtb	r5, r3
 80025d2:	f04f 0600 	mov.w	r6, #0
 80025d6:	f04f 0800 	mov.w	r8, #0
 80025da:	f04f 0900 	mov.w	r9, #0
 80025de:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80025e2:	f04f 0800 	mov.w	r8, #0
 80025e6:	ea48 0301 	orr.w	r3, r8, r1
 80025ea:	ea49 0402 	orr.w	r4, r9, r2
 80025ee:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80025f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80025f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f8:	3307      	adds	r3, #7
 80025fa:	69b8      	ldr	r0, [r7, #24]
 80025fc:	4403      	add	r3, r0
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2dd      	uxtb	r5, r3
 8002602:	f04f 0600 	mov.w	r6, #0
 8002606:	f04f 0800 	mov.w	r8, #0
 800260a:	f04f 0900 	mov.w	r9, #0
 800260e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8002612:	f04f 0800 	mov.w	r8, #0
 8002616:	ea48 0301 	orr.w	r3, r8, r1
 800261a:	ea49 0402 	orr.w	r4, r9, r2
 800261e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 8002622:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->w);
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	3308      	adds	r3, #8
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 8002632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8002634:	4618      	mov	r0, r3
 8002636:	3748      	adds	r7, #72	; 0x48
 8002638:	46bd      	mov	sp, r7
 800263a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800263e:	4770      	bx	lr

08002640 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0800c48c 	.word	0x0800c48c

0800265c <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	0800c4a8 	.word	0x0800c4a8

08002678 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff3a 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	f04f 0400 	mov.w	r4, #0
 80026a6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f04f 0400 	mov.w	r4, #0
 80026b4:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	0800d36c 	.word	0x0800d36c

080026c8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026c8:	b490      	push	{r4, r7}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80026dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80026e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80026e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e6:	6839      	ldr	r1, [r7, #0]
 80026e8:	440a      	add	r2, r1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80026ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f04f 0400 	mov.w	r4, #0
 80026fa:	0a0b      	lsrs	r3, r1, #8
 80026fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002700:	0a14      	lsrs	r4, r2, #8
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	3201      	adds	r2, #1
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	440a      	add	r2, r1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800270e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	f04f 0400 	mov.w	r4, #0
 800271a:	0c0b      	lsrs	r3, r1, #16
 800271c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002720:	0c14      	lsrs	r4, r2, #16
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	3202      	adds	r2, #2
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	440a      	add	r2, r1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800272e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	f04f 0400 	mov.w	r4, #0
 800273a:	0e0b      	lsrs	r3, r1, #24
 800273c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002740:	0e14      	lsrs	r4, r2, #24
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	3203      	adds	r2, #3
 8002746:	6839      	ldr	r1, [r7, #0]
 8002748:	440a      	add	r2, r1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800274e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	0013      	movs	r3, r2
 800275c:	2400      	movs	r4, #0
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	3204      	adds	r2, #4
 8002762:	6839      	ldr	r1, [r7, #0]
 8002764:	440a      	add	r2, r1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800276a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	f04f 0400 	mov.w	r4, #0
 8002776:	0a13      	lsrs	r3, r2, #8
 8002778:	2400      	movs	r4, #0
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	3205      	adds	r2, #5
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	440a      	add	r2, r1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002786:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	0c13      	lsrs	r3, r2, #16
 8002794:	2400      	movs	r4, #0
 8002796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002798:	3206      	adds	r2, #6
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	440a      	add	r2, r1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80027a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	f04f 0400 	mov.w	r4, #0
 80027ae:	0e13      	lsrs	r3, r2, #24
 80027b0:	2400      	movs	r4, #0
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	3207      	adds	r2, #7
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	440a      	add	r2, r1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	3308      	adds	r3, #8
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80027ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80027ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	440a      	add	r2, r1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80027dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	f04f 0400 	mov.w	r4, #0
 80027e8:	0a0b      	lsrs	r3, r1, #8
 80027ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027ee:	0a14      	lsrs	r4, r2, #8
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	3201      	adds	r2, #1
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	440a      	add	r2, r1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80027fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	f04f 0400 	mov.w	r4, #0
 8002808:	0c0b      	lsrs	r3, r1, #16
 800280a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800280e:	0c14      	lsrs	r4, r2, #16
 8002810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002812:	3202      	adds	r2, #2
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	440a      	add	r2, r1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800281c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0e0b      	lsrs	r3, r1, #24
 800282a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800282e:	0e14      	lsrs	r4, r2, #24
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	3203      	adds	r2, #3
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	440a      	add	r2, r1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800283c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	f04f 0400 	mov.w	r4, #0
 8002848:	0013      	movs	r3, r2
 800284a:	2400      	movs	r4, #0
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	3204      	adds	r2, #4
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	440a      	add	r2, r1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002858:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	0a13      	lsrs	r3, r2, #8
 8002866:	2400      	movs	r4, #0
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	3205      	adds	r2, #5
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	440a      	add	r2, r1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002874:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	f04f 0400 	mov.w	r4, #0
 8002880:	0c13      	lsrs	r3, r2, #16
 8002882:	2400      	movs	r4, #0
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	3206      	adds	r2, #6
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	440a      	add	r2, r1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002890:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	0e13      	lsrs	r3, r2, #24
 800289e:	2400      	movs	r4, #0
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	3207      	adds	r2, #7
 80028a4:	6839      	ldr	r1, [r7, #0]
 80028a6:	440a      	add	r2, r1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	3308      	adds	r3, #8
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80028b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80028bc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80028c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	440a      	add	r2, r1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80028ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	f04f 0400 	mov.w	r4, #0
 80028d6:	0a0b      	lsrs	r3, r1, #8
 80028d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028dc:	0a14      	lsrs	r4, r2, #8
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	3201      	adds	r2, #1
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	440a      	add	r2, r1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80028ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	f04f 0400 	mov.w	r4, #0
 80028f6:	0c0b      	lsrs	r3, r1, #16
 80028f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028fc:	0c14      	lsrs	r4, r2, #16
 80028fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002900:	3202      	adds	r2, #2
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	440a      	add	r2, r1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800290a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	0e0b      	lsrs	r3, r1, #24
 8002918:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800291c:	0e14      	lsrs	r4, r2, #24
 800291e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002920:	3203      	adds	r2, #3
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	440a      	add	r2, r1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800292a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	f04f 0400 	mov.w	r4, #0
 8002936:	0013      	movs	r3, r2
 8002938:	2400      	movs	r4, #0
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	3204      	adds	r2, #4
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	440a      	add	r2, r1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002946:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f04f 0400 	mov.w	r4, #0
 8002952:	0a13      	lsrs	r3, r2, #8
 8002954:	2400      	movs	r4, #0
 8002956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002958:	3205      	adds	r2, #5
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	440a      	add	r2, r1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002962:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f04f 0400 	mov.w	r4, #0
 800296e:	0c13      	lsrs	r3, r2, #16
 8002970:	2400      	movs	r4, #0
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	3206      	adds	r2, #6
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	440a      	add	r2, r1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800297e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	0e13      	lsrs	r3, r2, #24
 800298c:	2400      	movs	r4, #0
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	3207      	adds	r2, #7
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	440a      	add	r2, r1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	3308      	adds	r3, #8
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029a2:	4618      	mov	r0, r3
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc90      	pop	{r4, r7}
 80029aa:	4770      	bx	lr

080029ac <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029ac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029b0:	b08c      	sub	sp, #48	; 0x30
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f04f 0400 	mov.w	r4, #0
 80029c4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	68b8      	ldr	r0, [r7, #8]
 80029d0:	4403      	add	r3, r0
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461c      	mov	r4, r3
 80029d6:	b2e4      	uxtb	r4, r4
 80029d8:	f04f 0500 	mov.w	r5, #0
 80029dc:	4623      	mov	r3, r4
 80029de:	462c      	mov	r4, r5
 80029e0:	ea43 0301 	orr.w	r3, r3, r1
 80029e4:	ea44 0402 	orr.w	r4, r4, r2
 80029e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80029f0:	461d      	mov	r5, r3
 80029f2:	4626      	mov	r6, r4
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	3301      	adds	r3, #1
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2d9      	uxtb	r1, r3
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	f04f 0400 	mov.w	r4, #0
 8002a0c:	0214      	lsls	r4, r2, #8
 8002a0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a12:	020b      	lsls	r3, r1, #8
 8002a14:	4629      	mov	r1, r5
 8002a16:	4632      	mov	r2, r6
 8002a18:	ea41 0103 	orr.w	r1, r1, r3
 8002a1c:	ea42 0204 	orr.w	r2, r2, r4
 8002a20:	460b      	mov	r3, r1
 8002a22:	4614      	mov	r4, r2
 8002a24:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a28:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002a2c:	461d      	mov	r5, r3
 8002a2e:	4626      	mov	r6, r4
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	3302      	adds	r3, #2
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	4413      	add	r3, r2
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2d9      	uxtb	r1, r3
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f04f 0400 	mov.w	r4, #0
 8002a48:	0414      	lsls	r4, r2, #16
 8002a4a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8002a4e:	040b      	lsls	r3, r1, #16
 8002a50:	4629      	mov	r1, r5
 8002a52:	4632      	mov	r2, r6
 8002a54:	ea41 0103 	orr.w	r1, r1, r3
 8002a58:	ea42 0204 	orr.w	r2, r2, r4
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4614      	mov	r4, r2
 8002a60:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a64:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	3303      	adds	r3, #3
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	4403      	add	r3, r0
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f04f 0400 	mov.w	r4, #0
 8002a78:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002a7c:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8002a80:	ea41 030a 	orr.w	r3, r1, sl
 8002a84:	ea42 040b 	orr.w	r4, r2, fp
 8002a88:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	3304      	adds	r3, #4
 8002a94:	68b8      	ldr	r0, [r7, #8]
 8002a96:	4403      	add	r3, r0
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	fa5f fa83 	uxtb.w	sl, r3
 8002a9e:	f04f 0b00 	mov.w	fp, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	4625      	mov	r5, r4
 8002aac:	461c      	mov	r4, r3
 8002aae:	4653      	mov	r3, sl
 8002ab0:	461d      	mov	r5, r3
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	461c      	mov	r4, r3
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	462c      	mov	r4, r5
 8002aba:	ea43 0301 	orr.w	r3, r3, r1
 8002abe:	ea44 0402 	orr.w	r4, r4, r2
 8002ac2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ac6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	3305      	adds	r3, #5
 8002ace:	68b8      	ldr	r0, [r7, #8]
 8002ad0:	4403      	add	r3, r0
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	fa5f fa83 	uxtb.w	sl, r3
 8002ad8:	f04f 0b00 	mov.w	fp, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	f04f 0400 	mov.w	r4, #0
 8002ae4:	4625      	mov	r5, r4
 8002ae6:	461c      	mov	r4, r3
 8002ae8:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8002aec:	461d      	mov	r5, r3
 8002aee:	2300      	movs	r3, #0
 8002af0:	461c      	mov	r4, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	462c      	mov	r4, r5
 8002af6:	ea43 0301 	orr.w	r3, r3, r1
 8002afa:	ea44 0402 	orr.w	r4, r4, r2
 8002afe:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	3306      	adds	r3, #6
 8002b0a:	68b8      	ldr	r0, [r7, #8]
 8002b0c:	4403      	add	r3, r0
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	fa5f fa83 	uxtb.w	sl, r3
 8002b14:	f04f 0b00 	mov.w	fp, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f04f 0400 	mov.w	r4, #0
 8002b20:	4625      	mov	r5, r4
 8002b22:	461c      	mov	r4, r3
 8002b24:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002b28:	461d      	mov	r5, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	461c      	mov	r4, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	462c      	mov	r4, r5
 8002b32:	ea43 0301 	orr.w	r3, r3, r1
 8002b36:	ea44 0402 	orr.w	r4, r4, r2
 8002b3a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	3307      	adds	r3, #7
 8002b46:	68b8      	ldr	r0, [r7, #8]
 8002b48:	4403      	add	r3, r0
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	fa5f fa83 	uxtb.w	sl, r3
 8002b50:	f04f 0b00 	mov.w	fp, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	f04f 0400 	mov.w	r4, #0
 8002b5c:	4625      	mov	r5, r4
 8002b5e:	461c      	mov	r4, r3
 8002b60:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8002b64:	461d      	mov	r5, r3
 8002b66:	2300      	movs	r3, #0
 8002b68:	461c      	mov	r4, r3
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	462c      	mov	r4, r5
 8002b6e:	ea43 0301 	orr.w	r3, r3, r1
 8002b72:	ea44 0402 	orr.w	r4, r4, r2
 8002b76:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8002b7a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	3308      	adds	r3, #8
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	f04f 0400 	mov.w	r4, #0
 8002b92:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	68b8      	ldr	r0, [r7, #8]
 8002b9e:	4403      	add	r3, r0
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	fa5f fa83 	uxtb.w	sl, r3
 8002ba6:	f04f 0b00 	mov.w	fp, #0
 8002baa:	ea4a 0301 	orr.w	r3, sl, r1
 8002bae:	ea4b 0402 	orr.w	r4, fp, r2
 8002bb2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b2d9      	uxtb	r1, r3
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f04f 0400 	mov.w	r4, #0
 8002bd2:	4625      	mov	r5, r4
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	0213      	lsls	r3, r2, #8
 8002bd8:	461d      	mov	r5, r3
 8002bda:	462b      	mov	r3, r5
 8002bdc:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002be0:	461d      	mov	r5, r3
 8002be2:	020b      	lsls	r3, r1, #8
 8002be4:	461c      	mov	r4, r3
 8002be6:	4623      	mov	r3, r4
 8002be8:	462c      	mov	r4, r5
 8002bea:	ea43 030a 	orr.w	r3, r3, sl
 8002bee:	ea44 040b 	orr.w	r4, r4, fp
 8002bf2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bf6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4413      	add	r3, r2
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2d9      	uxtb	r1, r3
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	f04f 0400 	mov.w	r4, #0
 8002c12:	4625      	mov	r5, r4
 8002c14:	461c      	mov	r4, r3
 8002c16:	0413      	lsls	r3, r2, #16
 8002c18:	461d      	mov	r5, r3
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002c20:	461d      	mov	r5, r3
 8002c22:	040b      	lsls	r3, r1, #16
 8002c24:	461c      	mov	r4, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	462c      	mov	r4, r5
 8002c2a:	ea43 030a 	orr.w	r3, r3, sl
 8002c2e:	ea44 040b 	orr.w	r4, r4, fp
 8002c32:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c36:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	3303      	adds	r3, #3
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	4403      	add	r3, r0
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f04f 0400 	mov.w	r4, #0
 8002c4a:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8002c4e:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8002c52:	ea41 0308 	orr.w	r3, r1, r8
 8002c56:	ea42 0409 	orr.w	r4, r2, r9
 8002c5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	3304      	adds	r3, #4
 8002c66:	68b8      	ldr	r0, [r7, #8]
 8002c68:	4403      	add	r3, r0
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	fa5f f883 	uxtb.w	r8, r3
 8002c70:	f04f 0900 	mov.w	r9, #0
 8002c74:	f04f 0a00 	mov.w	sl, #0
 8002c78:	f04f 0b00 	mov.w	fp, #0
 8002c7c:	46c3      	mov	fp, r8
 8002c7e:	f04f 0a00 	mov.w	sl, #0
 8002c82:	ea4a 0301 	orr.w	r3, sl, r1
 8002c86:	ea4b 0402 	orr.w	r4, fp, r2
 8002c8a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	3305      	adds	r3, #5
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	4403      	add	r3, r0
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	fa5f f883 	uxtb.w	r8, r3
 8002ca0:	f04f 0900 	mov.w	r9, #0
 8002ca4:	f04f 0a00 	mov.w	sl, #0
 8002ca8:	f04f 0b00 	mov.w	fp, #0
 8002cac:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8002cb0:	f04f 0a00 	mov.w	sl, #0
 8002cb4:	ea4a 0301 	orr.w	r3, sl, r1
 8002cb8:	ea4b 0402 	orr.w	r4, fp, r2
 8002cbc:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002cc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	3306      	adds	r3, #6
 8002cc8:	68b8      	ldr	r0, [r7, #8]
 8002cca:	4403      	add	r3, r0
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	fa5f f883 	uxtb.w	r8, r3
 8002cd2:	f04f 0900 	mov.w	r9, #0
 8002cd6:	f04f 0a00 	mov.w	sl, #0
 8002cda:	f04f 0b00 	mov.w	fp, #0
 8002cde:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8002ce2:	f04f 0a00 	mov.w	sl, #0
 8002ce6:	ea4a 0301 	orr.w	r3, sl, r1
 8002cea:	ea4b 0402 	orr.w	r4, fp, r2
 8002cee:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002cf2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	3307      	adds	r3, #7
 8002cfa:	68b8      	ldr	r0, [r7, #8]
 8002cfc:	4403      	add	r3, r0
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	fa5f f883 	uxtb.w	r8, r3
 8002d04:	f04f 0900 	mov.w	r9, #0
 8002d08:	f04f 0a00 	mov.w	sl, #0
 8002d0c:	f04f 0b00 	mov.w	fp, #0
 8002d10:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8002d14:	f04f 0a00 	mov.w	sl, #0
 8002d18:	ea4a 0301 	orr.w	r3, sl, r1
 8002d1c:	ea4b 0402 	orr.w	r4, fp, r2
 8002d20:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8002d24:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	3308      	adds	r3, #8
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	f04f 0400 	mov.w	r4, #0
 8002d3c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	68b8      	ldr	r0, [r7, #8]
 8002d48:	4403      	add	r3, r0
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	fa5f f883 	uxtb.w	r8, r3
 8002d50:	f04f 0900 	mov.w	r9, #0
 8002d54:	ea48 0301 	orr.w	r3, r8, r1
 8002d58:	ea49 0402 	orr.w	r4, r9, r2
 8002d5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d60:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	3301      	adds	r3, #1
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2d9      	uxtb	r1, r3
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0a00 	mov.w	sl, #0
 8002d78:	f04f 0b00 	mov.w	fp, #0
 8002d7c:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8002d80:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8002d84:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8002d88:	ea4a 0308 	orr.w	r3, sl, r8
 8002d8c:	ea4b 0409 	orr.w	r4, fp, r9
 8002d90:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d94:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2d9      	uxtb	r1, r3
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0a00 	mov.w	sl, #0
 8002dac:	f04f 0b00 	mov.w	fp, #0
 8002db0:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8002db4:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8002db8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8002dbc:	ea4a 0308 	orr.w	r3, sl, r8
 8002dc0:	ea4b 0409 	orr.w	r4, fp, r9
 8002dc4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	3303      	adds	r3, #3
 8002dd0:	68b8      	ldr	r0, [r7, #8]
 8002dd2:	4403      	add	r3, r0
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	0a18      	lsrs	r0, r3, #8
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002de8:	ea43 0301 	orr.w	r3, r3, r1
 8002dec:	ea44 0402 	orr.w	r4, r4, r2
 8002df0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002df4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	68b8      	ldr	r0, [r7, #8]
 8002dfe:	4403      	add	r3, r0
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b2dd      	uxtb	r5, r3
 8002e04:	f04f 0600 	mov.w	r6, #0
 8002e08:	f04f 0800 	mov.w	r8, #0
 8002e0c:	f04f 0900 	mov.w	r9, #0
 8002e10:	46a9      	mov	r9, r5
 8002e12:	f04f 0800 	mov.w	r8, #0
 8002e16:	ea48 0301 	orr.w	r3, r8, r1
 8002e1a:	ea49 0402 	orr.w	r4, r9, r2
 8002e1e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	3305      	adds	r3, #5
 8002e2a:	68b8      	ldr	r0, [r7, #8]
 8002e2c:	4403      	add	r3, r0
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2dd      	uxtb	r5, r3
 8002e32:	f04f 0600 	mov.w	r6, #0
 8002e36:	f04f 0800 	mov.w	r8, #0
 8002e3a:	f04f 0900 	mov.w	r9, #0
 8002e3e:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8002e42:	f04f 0800 	mov.w	r8, #0
 8002e46:	ea48 0301 	orr.w	r3, r8, r1
 8002e4a:	ea49 0402 	orr.w	r4, r9, r2
 8002e4e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e52:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	3306      	adds	r3, #6
 8002e5a:	68b8      	ldr	r0, [r7, #8]
 8002e5c:	4403      	add	r3, r0
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2dd      	uxtb	r5, r3
 8002e62:	f04f 0600 	mov.w	r6, #0
 8002e66:	f04f 0800 	mov.w	r8, #0
 8002e6a:	f04f 0900 	mov.w	r9, #0
 8002e6e:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8002e72:	f04f 0800 	mov.w	r8, #0
 8002e76:	ea48 0301 	orr.w	r3, r8, r1
 8002e7a:	ea49 0402 	orr.w	r4, r9, r2
 8002e7e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	3307      	adds	r3, #7
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	4403      	add	r3, r0
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2dd      	uxtb	r5, r3
 8002e92:	f04f 0600 	mov.w	r6, #0
 8002e96:	f04f 0800 	mov.w	r8, #0
 8002e9a:	f04f 0900 	mov.w	r9, #0
 8002e9e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8002ea2:	f04f 0800 	mov.w	r8, #0
 8002ea6:	ea48 0301 	orr.w	r3, r8, r1
 8002eaa:	ea49 0402 	orr.w	r4, r9, r2
 8002eae:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8002eb2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3730      	adds	r7, #48	; 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ece:	4770      	bx	lr

08002ed0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	0800c4cc 	.word	0x0800c4cc

08002eec <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	0800c4e4 	.word	0x0800c4e4

08002f08 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd faf2 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8002f18:	4a24      	ldr	r2, [pc, #144]	; (8002fac <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fc78 	bl	8001818 <_ZN8std_msgs6HeaderC1Ev>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fe07 	bl	8001b40 <_ZN13geometry_msgs10QuaternionC1Ev>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002f38:	2308      	movs	r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db08      	blt.n	8002f50 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	e9c2 0100 	strd	r0, r1, [r2]
 8002f4a:	3208      	adds	r2, #8
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	e7f4      	b.n	8002f3a <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3388      	adds	r3, #136	; 0x88
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fb8f 	bl	8002678 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8002f60:	2308      	movs	r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db08      	blt.n	8002f78 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8002f66:	f04f 0000 	mov.w	r0, #0
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	e9c2 0100 	strd	r0, r1, [r2]
 8002f72:	3208      	adds	r2, #8
 8002f74:	3b01      	subs	r3, #1
 8002f76:	e7f4      	b.n	8002f62 <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	33f0      	adds	r3, #240	; 0xf0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fb7b 	bl	8002678 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8002f88:	2308      	movs	r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db08      	blt.n	8002fa0 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 8002f8e:	f04f 0000 	mov.w	r0, #0
 8002f92:	f04f 0100 	mov.w	r1, #0
 8002f96:	e9c2 0100 	strd	r0, r1, [r2]
 8002f9a:	3208      	adds	r2, #8
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	e7f4      	b.n	8002f8a <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	0800d354 	.word	0x0800d354

08002fb0 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b08d      	sub	sp, #52	; 0x34
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	1d18      	adds	r0, r3, #4
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f7fe fc45 	bl	8001858 <_ZNK8std_msgs6Header9serializeEPh>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	4413      	add	r3, r2
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f103 0018 	add.w	r0, r3, #24
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fe fdda 	bl	8001b9c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	4413      	add	r3, r2
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d87e      	bhi.n	80030f8 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	3308      	adds	r3, #8
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003008:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 800300c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	440a      	add	r2, r1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 800301a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	f04f 0400 	mov.w	r4, #0
 8003026:	0a0b      	lsrs	r3, r1, #8
 8003028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800302c:	0a14      	lsrs	r4, r2, #8
 800302e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003030:	3201      	adds	r2, #1
 8003032:	6839      	ldr	r1, [r7, #0]
 8003034:	440a      	add	r2, r1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 800303a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	0c0b      	lsrs	r3, r1, #16
 8003048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800304c:	0c14      	lsrs	r4, r2, #16
 800304e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003050:	3202      	adds	r2, #2
 8003052:	6839      	ldr	r1, [r7, #0]
 8003054:	440a      	add	r2, r1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 800305a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	f04f 0400 	mov.w	r4, #0
 8003066:	0e0b      	lsrs	r3, r1, #24
 8003068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800306c:	0e14      	lsrs	r4, r2, #24
 800306e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003070:	3203      	adds	r2, #3
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	440a      	add	r2, r1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800307a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	f04f 0400 	mov.w	r4, #0
 8003086:	0013      	movs	r3, r2
 8003088:	2400      	movs	r4, #0
 800308a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308c:	3204      	adds	r2, #4
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	440a      	add	r2, r1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8003096:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	f04f 0400 	mov.w	r4, #0
 80030a2:	0a13      	lsrs	r3, r2, #8
 80030a4:	2400      	movs	r4, #0
 80030a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a8:	3205      	adds	r2, #5
 80030aa:	6839      	ldr	r1, [r7, #0]
 80030ac:	440a      	add	r2, r1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80030b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f04f 0400 	mov.w	r4, #0
 80030be:	0c13      	lsrs	r3, r2, #16
 80030c0:	2400      	movs	r4, #0
 80030c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c4:	3206      	adds	r2, #6
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	440a      	add	r2, r1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 80030ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f04f 0400 	mov.w	r4, #0
 80030da:	0e13      	lsrs	r3, r2, #24
 80030dc:	2400      	movs	r4, #0
 80030de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e0:	3207      	adds	r2, #7
 80030e2:	6839      	ldr	r1, [r7, #0]
 80030e4:	440a      	add	r2, r1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	3308      	adds	r3, #8
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	3301      	adds	r3, #1
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f6:	e77d      	b.n	8002ff4 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4413      	add	r3, r2
 8003104:	4619      	mov	r1, r3
 8003106:	f7ff fadf 	bl	80026c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800310a:	4602      	mov	r2, r0
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	4413      	add	r3, r2
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	2b08      	cmp	r3, #8
 800311a:	d87e      	bhi.n	800321a <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	3315      	adds	r3, #21
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	e9d3 3400 	ldrd	r3, r4, [r3]
 800312a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 800312e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	440a      	add	r2, r1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 800313c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	f04f 0400 	mov.w	r4, #0
 8003148:	0a0b      	lsrs	r3, r1, #8
 800314a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800314e:	0a14      	lsrs	r4, r2, #8
 8003150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003152:	3201      	adds	r2, #1
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	440a      	add	r2, r1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 800315c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	0c0b      	lsrs	r3, r1, #16
 800316a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800316e:	0c14      	lsrs	r4, r2, #16
 8003170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003172:	3202      	adds	r2, #2
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	440a      	add	r2, r1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 800317c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f04f 0400 	mov.w	r4, #0
 8003188:	0e0b      	lsrs	r3, r1, #24
 800318a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800318e:	0e14      	lsrs	r4, r2, #24
 8003190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003192:	3203      	adds	r2, #3
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	440a      	add	r2, r1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 800319c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	f04f 0400 	mov.w	r4, #0
 80031a8:	0013      	movs	r3, r2
 80031aa:	2400      	movs	r4, #0
 80031ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ae:	3204      	adds	r2, #4
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	440a      	add	r2, r1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 80031b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	0a13      	lsrs	r3, r2, #8
 80031c6:	2400      	movs	r4, #0
 80031c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ca:	3205      	adds	r2, #5
 80031cc:	6839      	ldr	r1, [r7, #0]
 80031ce:	440a      	add	r2, r1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 80031d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	f04f 0400 	mov.w	r4, #0
 80031e0:	0c13      	lsrs	r3, r2, #16
 80031e2:	2400      	movs	r4, #0
 80031e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e6:	3206      	adds	r2, #6
 80031e8:	6839      	ldr	r1, [r7, #0]
 80031ea:	440a      	add	r2, r1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 80031f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	f04f 0400 	mov.w	r4, #0
 80031fc:	0e13      	lsrs	r3, r2, #24
 80031fe:	2400      	movs	r4, #0
 8003200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003202:	3207      	adds	r2, #7
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	440a      	add	r2, r1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	3308      	adds	r3, #8
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	3301      	adds	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e77d      	b.n	8003116 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	4413      	add	r3, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7ff fa4e 	bl	80026c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800322c:	4602      	mov	r2, r0
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	4413      	add	r3, r2
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2b08      	cmp	r3, #8
 800323c:	d87e      	bhi.n	800333c <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	3322      	adds	r3, #34	; 0x22
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	e9d3 3400 	ldrd	r3, r4, [r3]
 800324c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8003250:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	440a      	add	r2, r1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 800325e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f04f 0400 	mov.w	r4, #0
 800326a:	0a0b      	lsrs	r3, r1, #8
 800326c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003270:	0a14      	lsrs	r4, r2, #8
 8003272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003274:	3201      	adds	r2, #1
 8003276:	6839      	ldr	r1, [r7, #0]
 8003278:	440a      	add	r2, r1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 800327e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f04f 0400 	mov.w	r4, #0
 800328a:	0c0b      	lsrs	r3, r1, #16
 800328c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003290:	0c14      	lsrs	r4, r2, #16
 8003292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003294:	3202      	adds	r2, #2
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	440a      	add	r2, r1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 800329e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	f04f 0400 	mov.w	r4, #0
 80032aa:	0e0b      	lsrs	r3, r1, #24
 80032ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032b0:	0e14      	lsrs	r4, r2, #24
 80032b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b4:	3203      	adds	r2, #3
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	440a      	add	r2, r1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 80032be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	0013      	movs	r3, r2
 80032cc:	2400      	movs	r4, #0
 80032ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d0:	3204      	adds	r2, #4
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	440a      	add	r2, r1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 80032da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f04f 0400 	mov.w	r4, #0
 80032e6:	0a13      	lsrs	r3, r2, #8
 80032e8:	2400      	movs	r4, #0
 80032ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ec:	3205      	adds	r2, #5
 80032ee:	6839      	ldr	r1, [r7, #0]
 80032f0:	440a      	add	r2, r1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 80032f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	f04f 0400 	mov.w	r4, #0
 8003302:	0c13      	lsrs	r3, r2, #16
 8003304:	2400      	movs	r4, #0
 8003306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003308:	3206      	adds	r2, #6
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	440a      	add	r2, r1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8003312:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	f04f 0400 	mov.w	r4, #0
 800331e:	0e13      	lsrs	r3, r2, #24
 8003320:	2400      	movs	r4, #0
 8003322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003324:	3207      	adds	r2, #7
 8003326:	6839      	ldr	r1, [r7, #0]
 8003328:	440a      	add	r2, r1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	3308      	adds	r3, #8
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	3301      	adds	r3, #1
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	e77d      	b.n	8003238 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800333e:	4618      	mov	r0, r3
 8003340:	3734      	adds	r7, #52	; 0x34
 8003342:	46bd      	mov	sp, r7
 8003344:	bd90      	pop	{r4, r7, pc}

08003346 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334a:	b091      	sub	sp, #68	; 0x44
 800334c:	af00      	add	r7, sp, #0
 800334e:	6178      	str	r0, [r7, #20]
 8003350:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->header.deserialize(inbuffer + offset);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1d18      	adds	r0, r3, #4
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f7fe fb11 	bl	8001988 <_ZN8std_msgs6Header11deserializeEPh>
 8003366:	4602      	mov	r2, r0
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	4413      	add	r3, r2
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->orientation.deserialize(inbuffer + offset);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f103 0018 	add.w	r0, r3, #24
 8003374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fe fdf7 	bl	8001f6e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003380:	4602      	mov	r2, r0
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	4413      	add	r3, r2
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003388:	2300      	movs	r3, #0
 800338a:	63bb      	str	r3, [r7, #56]	; 0x38
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	2b08      	cmp	r3, #8
 8003390:	f200 80dd 	bhi.w	800354e <_ZN11sensor_msgs3Imu11deserializeEPh+0x208>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	f04f 0400 	mov.w	r4, #0
 800339c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80033a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a6:	6938      	ldr	r0, [r7, #16]
 80033a8:	4403      	add	r3, r0
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2dd      	uxtb	r5, r3
 80033ae:	f04f 0600 	mov.w	r6, #0
 80033b2:	ea45 0301 	orr.w	r3, r5, r1
 80033b6:	ea46 0402 	orr.w	r4, r6, r2
 80033ba:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033be:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80033c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c4:	3301      	adds	r3, #1
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2d9      	uxtb	r1, r3
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0214      	lsls	r4, r2, #8
 80033dc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80033e0:	020b      	lsls	r3, r1, #8
 80033e2:	ea45 0503 	orr.w	r5, r5, r3
 80033e6:	ea46 0604 	orr.w	r6, r6, r4
 80033ea:	462b      	mov	r3, r5
 80033ec:	4634      	mov	r4, r6
 80033ee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033f2:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	3302      	adds	r3, #2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b2d9      	uxtb	r1, r3
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	f04f 0400 	mov.w	r4, #0
 800340e:	0414      	lsls	r4, r2, #16
 8003410:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8003414:	040b      	lsls	r3, r1, #16
 8003416:	ea45 0503 	orr.w	r5, r5, r3
 800341a:	ea46 0604 	orr.w	r6, r6, r4
 800341e:	462b      	mov	r3, r5
 8003420:	4634      	mov	r4, r6
 8003422:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003426:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342c:	3303      	adds	r3, #3
 800342e:	6938      	ldr	r0, [r7, #16]
 8003430:	4403      	add	r3, r0
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f04f 0400 	mov.w	r4, #0
 800343a:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 800343e:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8003442:	ea41 030a 	orr.w	r3, r1, sl
 8003446:	ea42 040b 	orr.w	r4, r2, fp
 800344a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800344e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	3304      	adds	r3, #4
 8003456:	6938      	ldr	r0, [r7, #16]
 8003458:	4403      	add	r3, r0
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461c      	mov	r4, r3
 800345e:	b2e4      	uxtb	r4, r4
 8003460:	f04f 0500 	mov.w	r5, #0
 8003464:	f04f 0800 	mov.w	r8, #0
 8003468:	f04f 0900 	mov.w	r9, #0
 800346c:	4623      	mov	r3, r4
 800346e:	001b      	movs	r3, r3
 8003470:	4699      	mov	r9, r3
 8003472:	2300      	movs	r3, #0
 8003474:	4698      	mov	r8, r3
 8003476:	4643      	mov	r3, r8
 8003478:	464c      	mov	r4, r9
 800347a:	ea43 0301 	orr.w	r3, r3, r1
 800347e:	ea44 0402 	orr.w	r4, r4, r2
 8003482:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003486:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348c:	3305      	adds	r3, #5
 800348e:	6938      	ldr	r0, [r7, #16]
 8003490:	4403      	add	r3, r0
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461c      	mov	r4, r3
 8003496:	b2e4      	uxtb	r4, r4
 8003498:	f04f 0500 	mov.w	r5, #0
 800349c:	f04f 0800 	mov.w	r8, #0
 80034a0:	f04f 0900 	mov.w	r9, #0
 80034a4:	4623      	mov	r3, r4
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	4699      	mov	r9, r3
 80034aa:	2300      	movs	r3, #0
 80034ac:	4698      	mov	r8, r3
 80034ae:	4643      	mov	r3, r8
 80034b0:	464c      	mov	r4, r9
 80034b2:	ea43 0301 	orr.w	r3, r3, r1
 80034b6:	ea44 0402 	orr.w	r4, r4, r2
 80034ba:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c4:	3306      	adds	r3, #6
 80034c6:	6938      	ldr	r0, [r7, #16]
 80034c8:	4403      	add	r3, r0
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461c      	mov	r4, r3
 80034ce:	b2e4      	uxtb	r4, r4
 80034d0:	f04f 0500 	mov.w	r5, #0
 80034d4:	f04f 0800 	mov.w	r8, #0
 80034d8:	f04f 0900 	mov.w	r9, #0
 80034dc:	4623      	mov	r3, r4
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	4699      	mov	r9, r3
 80034e2:	2300      	movs	r3, #0
 80034e4:	4698      	mov	r8, r3
 80034e6:	4643      	mov	r3, r8
 80034e8:	464c      	mov	r4, r9
 80034ea:	ea43 0301 	orr.w	r3, r3, r1
 80034ee:	ea44 0402 	orr.w	r4, r4, r2
 80034f2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80034f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	3307      	adds	r3, #7
 80034fe:	6938      	ldr	r0, [r7, #16]
 8003500:	4403      	add	r3, r0
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461c      	mov	r4, r3
 8003506:	b2e4      	uxtb	r4, r4
 8003508:	f04f 0500 	mov.w	r5, #0
 800350c:	f04f 0800 	mov.w	r8, #0
 8003510:	f04f 0900 	mov.w	r9, #0
 8003514:	4623      	mov	r3, r4
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	4699      	mov	r9, r3
 800351a:	2300      	movs	r3, #0
 800351c:	4698      	mov	r8, r3
 800351e:	4643      	mov	r3, r8
 8003520:	464c      	mov	r4, r9
 8003522:	ea43 0301 	orr.w	r3, r3, r1
 8003526:	ea44 0402 	orr.w	r4, r4, r2
 800352a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 800352e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003532:	6979      	ldr	r1, [r7, #20]
 8003534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003536:	3208      	adds	r2, #8
 8003538:	00d2      	lsls	r2, r2, #3
 800353a:	440a      	add	r2, r1
 800353c:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->orientation_covariance[i]);
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003542:	3308      	adds	r3, #8
 8003544:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	3301      	adds	r3, #1
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
 800354c:	e71e      	b.n	800338c <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f7ff fa26 	bl	80029ac <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003560:	4602      	mov	r2, r0
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003564:	4413      	add	r3, r2
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	2b08      	cmp	r3, #8
 8003570:	f200 80ca 	bhi.w	8003708 <_ZN11sensor_msgs3Imu11deserializeEPh+0x3c2>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003580:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	6938      	ldr	r0, [r7, #16]
 8003588:	4403      	add	r3, r0
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b2dd      	uxtb	r5, r3
 800358e:	f04f 0600 	mov.w	r6, #0
 8003592:	ea45 0301 	orr.w	r3, r5, r1
 8003596:	ea46 0402 	orr.w	r4, r6, r2
 800359a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800359e:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80035a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a4:	3301      	adds	r3, #1
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2d9      	uxtb	r1, r3
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0500 	mov.w	r5, #0
 80035b6:	f04f 0600 	mov.w	r6, #0
 80035ba:	0216      	lsls	r6, r2, #8
 80035bc:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 80035c0:	020d      	lsls	r5, r1, #8
 80035c2:	ea45 030a 	orr.w	r3, r5, sl
 80035c6:	ea46 040b 	orr.w	r4, r6, fp
 80035ca:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035ce:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d4:	3302      	adds	r3, #2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2d9      	uxtb	r1, r3
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0500 	mov.w	r5, #0
 80035e6:	f04f 0600 	mov.w	r6, #0
 80035ea:	0416      	lsls	r6, r2, #16
 80035ec:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80035f0:	040d      	lsls	r5, r1, #16
 80035f2:	ea45 030a 	orr.w	r3, r5, sl
 80035f6:	ea46 040b 	orr.w	r4, r6, fp
 80035fa:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003604:	3303      	adds	r3, #3
 8003606:	6938      	ldr	r0, [r7, #16]
 8003608:	4403      	add	r3, r0
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f04f 0400 	mov.w	r4, #0
 8003612:	0a18      	lsrs	r0, r3, #8
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800361e:	ea43 0301 	orr.w	r3, r3, r1
 8003622:	ea44 0402 	orr.w	r4, r4, r2
 8003626:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800362a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003630:	3304      	adds	r3, #4
 8003632:	6938      	ldr	r0, [r7, #16]
 8003634:	4403      	add	r3, r0
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	fa5f fa83 	uxtb.w	sl, r3
 800363c:	f04f 0b00 	mov.w	fp, #0
 8003640:	f04f 0500 	mov.w	r5, #0
 8003644:	f04f 0600 	mov.w	r6, #0
 8003648:	4656      	mov	r6, sl
 800364a:	2500      	movs	r5, #0
 800364c:	ea45 0301 	orr.w	r3, r5, r1
 8003650:	ea46 0402 	orr.w	r4, r6, r2
 8003654:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003658:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	3305      	adds	r3, #5
 8003660:	6938      	ldr	r0, [r7, #16]
 8003662:	4403      	add	r3, r0
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	fa5f fa83 	uxtb.w	sl, r3
 800366a:	f04f 0b00 	mov.w	fp, #0
 800366e:	f04f 0500 	mov.w	r5, #0
 8003672:	f04f 0600 	mov.w	r6, #0
 8003676:	ea4f 260a 	mov.w	r6, sl, lsl #8
 800367a:	2500      	movs	r5, #0
 800367c:	ea45 0301 	orr.w	r3, r5, r1
 8003680:	ea46 0402 	orr.w	r4, r6, r2
 8003684:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003688:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	3306      	adds	r3, #6
 8003690:	6938      	ldr	r0, [r7, #16]
 8003692:	4403      	add	r3, r0
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	fa5f fa83 	uxtb.w	sl, r3
 800369a:	f04f 0b00 	mov.w	fp, #0
 800369e:	f04f 0500 	mov.w	r5, #0
 80036a2:	f04f 0600 	mov.w	r6, #0
 80036a6:	ea4f 460a 	mov.w	r6, sl, lsl #16
 80036aa:	2500      	movs	r5, #0
 80036ac:	ea45 0301 	orr.w	r3, r5, r1
 80036b0:	ea46 0402 	orr.w	r4, r6, r2
 80036b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80036b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	3307      	adds	r3, #7
 80036c0:	6938      	ldr	r0, [r7, #16]
 80036c2:	4403      	add	r3, r0
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	fa5f fa83 	uxtb.w	sl, r3
 80036ca:	f04f 0b00 	mov.w	fp, #0
 80036ce:	f04f 0500 	mov.w	r5, #0
 80036d2:	f04f 0600 	mov.w	r6, #0
 80036d6:	ea4f 660a 	mov.w	r6, sl, lsl #24
 80036da:	2500      	movs	r5, #0
 80036dc:	ea45 0301 	orr.w	r3, r5, r1
 80036e0:	ea46 0402 	orr.w	r4, r6, r2
 80036e4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 80036e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80036ec:	6979      	ldr	r1, [r7, #20]
 80036ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f0:	3215      	adds	r2, #21
 80036f2:	00d2      	lsls	r2, r2, #3
 80036f4:	440a      	add	r2, r1
 80036f6:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fc:	3308      	adds	r3, #8
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	3301      	adds	r3, #1
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
 8003706:	e731      	b.n	800356c <_ZN11sensor_msgs3Imu11deserializeEPh+0x226>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	4619      	mov	r1, r3
 8003716:	f7ff f949 	bl	80029ac <_ZN13geometry_msgs7Vector311deserializeEPh>
 800371a:	4602      	mov	r2, r0
 800371c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371e:	4413      	add	r3, r2
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8003722:	2300      	movs	r3, #0
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2b08      	cmp	r3, #8
 800372a:	f200 80ca 	bhi.w	80038c2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x57c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	f04f 0400 	mov.w	r4, #0
 8003736:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800373a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	6938      	ldr	r0, [r7, #16]
 8003742:	4403      	add	r3, r0
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b2dd      	uxtb	r5, r3
 8003748:	f04f 0600 	mov.w	r6, #0
 800374c:	ea45 0301 	orr.w	r3, r5, r1
 8003750:	ea46 0402 	orr.w	r4, r6, r2
 8003754:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003758:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800375c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375e:	3301      	adds	r3, #1
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2d9      	uxtb	r1, r3
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0500 	mov.w	r5, #0
 8003770:	f04f 0600 	mov.w	r6, #0
 8003774:	0216      	lsls	r6, r2, #8
 8003776:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 800377a:	020d      	lsls	r5, r1, #8
 800377c:	ea45 0308 	orr.w	r3, r5, r8
 8003780:	ea46 0409 	orr.w	r4, r6, r9
 8003784:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003788:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800378c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378e:	3302      	adds	r3, #2
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b2d9      	uxtb	r1, r3
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0500 	mov.w	r5, #0
 80037a0:	f04f 0600 	mov.w	r6, #0
 80037a4:	0416      	lsls	r6, r2, #16
 80037a6:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80037aa:	040d      	lsls	r5, r1, #16
 80037ac:	ea45 0308 	orr.w	r3, r5, r8
 80037b0:	ea46 0409 	orr.w	r4, r6, r9
 80037b4:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037be:	3303      	adds	r3, #3
 80037c0:	6938      	ldr	r0, [r7, #16]
 80037c2:	4403      	add	r3, r0
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f04f 0400 	mov.w	r4, #0
 80037cc:	0a18      	lsrs	r0, r3, #8
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037d8:	ea43 0301 	orr.w	r3, r3, r1
 80037dc:	ea44 0402 	orr.w	r4, r4, r2
 80037e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80037e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	3304      	adds	r3, #4
 80037ec:	6938      	ldr	r0, [r7, #16]
 80037ee:	4403      	add	r3, r0
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	fa5f f883 	uxtb.w	r8, r3
 80037f6:	f04f 0900 	mov.w	r9, #0
 80037fa:	f04f 0500 	mov.w	r5, #0
 80037fe:	f04f 0600 	mov.w	r6, #0
 8003802:	4646      	mov	r6, r8
 8003804:	2500      	movs	r5, #0
 8003806:	ea45 0301 	orr.w	r3, r5, r1
 800380a:	ea46 0402 	orr.w	r4, r6, r2
 800380e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003812:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003818:	3305      	adds	r3, #5
 800381a:	6938      	ldr	r0, [r7, #16]
 800381c:	4403      	add	r3, r0
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	fa5f f883 	uxtb.w	r8, r3
 8003824:	f04f 0900 	mov.w	r9, #0
 8003828:	f04f 0500 	mov.w	r5, #0
 800382c:	f04f 0600 	mov.w	r6, #0
 8003830:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8003834:	2500      	movs	r5, #0
 8003836:	ea45 0301 	orr.w	r3, r5, r1
 800383a:	ea46 0402 	orr.w	r4, r6, r2
 800383e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003842:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003848:	3306      	adds	r3, #6
 800384a:	6938      	ldr	r0, [r7, #16]
 800384c:	4403      	add	r3, r0
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	fa5f f883 	uxtb.w	r8, r3
 8003854:	f04f 0900 	mov.w	r9, #0
 8003858:	f04f 0500 	mov.w	r5, #0
 800385c:	f04f 0600 	mov.w	r6, #0
 8003860:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8003864:	2500      	movs	r5, #0
 8003866:	ea45 0301 	orr.w	r3, r5, r1
 800386a:	ea46 0402 	orr.w	r4, r6, r2
 800386e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003872:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003878:	3307      	adds	r3, #7
 800387a:	6938      	ldr	r0, [r7, #16]
 800387c:	4403      	add	r3, r0
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	fa5f f883 	uxtb.w	r8, r3
 8003884:	f04f 0900 	mov.w	r9, #0
 8003888:	f04f 0500 	mov.w	r5, #0
 800388c:	f04f 0600 	mov.w	r6, #0
 8003890:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8003894:	2500      	movs	r5, #0
 8003896:	ea45 0301 	orr.w	r3, r5, r1
 800389a:	ea46 0402 	orr.w	r4, r6, r2
 800389e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 80038a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80038a6:	6979      	ldr	r1, [r7, #20]
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	3222      	adds	r2, #34	; 0x22
 80038ac:	00d2      	lsls	r2, r2, #3
 80038ae:	440a      	add	r2, r1
 80038b0:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b6:	3308      	adds	r3, #8
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	3301      	adds	r3, #1
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
 80038c0:	e731      	b.n	8003726 <_ZN11sensor_msgs3Imu11deserializeEPh+0x3e0>
      }
     return offset;
 80038c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80038c4:	4618      	mov	r0, r3
 80038c6:	3744      	adds	r7, #68	; 0x44
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080038d0 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	0800c508 	.word	0x0800c508

080038ec <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	0800c518 	.word	0x0800c518

08003908 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fdf2 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8003918:	4a08      	ldr	r2, [pc, #32]	; (800393c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	60da      	str	r2, [r3, #12]
    {
    }
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	0800d328 	.word	0x0800d328
 8003940:	0800c350 	.word	0x0800c350

08003944 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fc36 	bl	80001c8 <strlen>
 800395c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	4413      	add	r3, r2
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fb88 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3304      	adds	r3, #4
 8003970:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	18d0      	adds	r0, r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4619      	mov	r1, r3
 8003980:	f008 fb78 	bl	800c074 <memcpy>
      offset += length_label;
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4413      	add	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6899      	ldr	r1, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	4413      	add	r3, r2
 8003996:	b2ca      	uxtb	r2, r1
 8003998:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a19      	lsrs	r1, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	b2ca      	uxtb	r2, r1
 80039aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	0c19      	lsrs	r1, r3, #16
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3302      	adds	r3, #2
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	b2ca      	uxtb	r2, r1
 80039bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0e19      	lsrs	r1, r3, #24
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3303      	adds	r3, #3
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	b2ca      	uxtb	r2, r1
 80039ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3304      	adds	r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68d9      	ldr	r1, [r3, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	b2ca      	uxtb	r2, r1
 80039e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	0a19      	lsrs	r1, r3, #8
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3301      	adds	r3, #1
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	b2ca      	uxtb	r2, r1
 80039f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	0c19      	lsrs	r1, r3, #16
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3302      	adds	r3, #2
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	b2ca      	uxtb	r2, r1
 8003a06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0e19      	lsrs	r1, r3, #24
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3303      	adds	r3, #3
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	4413      	add	r3, r2
 8003a16:	b2ca      	uxtb	r2, r1
 8003a18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a20:	68fb      	ldr	r3, [r7, #12]
    }
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fb37 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d20c      	bcs.n	8003a7a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	441a      	add	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	6839      	ldr	r1, [r7, #0]
 8003a6c:	440b      	add	r3, r1
 8003a6e:	7812      	ldrb	r2, [r2, #0]
 8003a70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e7ec      	b.n	8003a54 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b01      	subs	r3, #1
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	441a      	add	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	6839      	ldr	r1, [r7, #0]
 8003ab6:	440b      	add	r3, r1
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	440b      	add	r3, r1
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	3303      	adds	r3, #3
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	440b      	add	r3, r1
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3304      	adds	r3, #4
 8003af2:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	6839      	ldr	r1, [r7, #0]
 8003b0c:	440b      	add	r3, r1
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	3302      	adds	r3, #2
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	440b      	add	r3, r1
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	3303      	adds	r3, #3
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	440b      	add	r3, r1
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	3304      	adds	r3, #4
 8003b48:	613b      	str	r3, [r7, #16]
     return offset;
 8003b4a:	693b      	ldr	r3, [r7, #16]
    }
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	0800c53c 	.word	0x0800c53c

08003b70 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	0800c55c 	.word	0x0800c55c

08003b8c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc fcb0 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3308      	adds	r3, #8
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff feab 	bl	8003908 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	619a      	str	r2, [r3, #24]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
    {
    }
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	0800d310 	.word	0x0800d310

08003bcc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6859      	ldr	r1, [r3, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	b2ca      	uxtb	r2, r1
 8003be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	0a19      	lsrs	r1, r3, #8
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b2ca      	uxtb	r2, r1
 8003bf8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	0c19      	lsrs	r1, r3, #16
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3302      	adds	r3, #2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	b2ca      	uxtb	r2, r1
 8003c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	0e19      	lsrs	r1, r3, #24
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3303      	adds	r3, #3
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	b2ca      	uxtb	r2, r1
 8003c1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3304      	adds	r3, #4
 8003c22:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003c24:	2300      	movs	r3, #0
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d218      	bcs.n	8003c64 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	18d0      	adds	r0, r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	4413      	add	r3, r2
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	440a      	add	r2, r1
 8003c50:	4611      	mov	r1, r2
 8003c52:	4798      	blx	r3
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	e7e1      	b.n	8003c28 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69d9      	ldr	r1, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b2ca      	uxtb	r2, r1
 8003c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	0a19      	lsrs	r1, r3, #8
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	b2ca      	uxtb	r2, r1
 8003c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	0c19      	lsrs	r1, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	b2ca      	uxtb	r2, r1
 8003c94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	0e19      	lsrs	r1, r3, #24
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3303      	adds	r3, #3
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b2ca      	uxtb	r2, r1
 8003ca6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3304      	adds	r3, #4
 8003cac:	60fb      	str	r3, [r7, #12]
      return offset;
 8003cae:	68fb      	ldr	r3, [r7, #12]
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3303      	adds	r3, #3
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d90a      	bls.n	8003d2c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f008 fa63 	bl	800c1ec <realloc>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d21b      	bcs.n	8003d78 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f103 0008 	add.w	r0, r3, #8
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7ff fe6c 	bl	8003a2a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8003d52:	4602      	mov	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4413      	add	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	18d0      	adds	r0, r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3308      	adds	r3, #8
 8003d68:	2210      	movs	r2, #16
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f008 f982 	bl	800c074 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	3301      	adds	r3, #1
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e7de      	b.n	8003d36 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	440b      	add	r3, r1
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	3302      	adds	r3, #2
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	440b      	add	r3, r1
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3303      	adds	r3, #3
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	440b      	add	r3, r1
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]
     return offset;
 8003dce:	697b      	ldr	r3, [r7, #20]
    }
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	0800c580 	.word	0x0800c580

08003df4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	0800c59c 	.word	0x0800c59c

08003e10 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fb6e 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8003e20:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x38>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff feae 	bl	8003b8c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	0800d2f8 	.word	0x0800d2f8

08003e4c <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	1d18      	adds	r0, r3, #4
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7ff feb1 	bl	8003bcc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	4413      	add	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b2ca      	uxtb	r2, r1
 8003e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	0a19      	lsrs	r1, r3, #8
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	b2ca      	uxtb	r2, r1
 8003e90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	0c19      	lsrs	r1, r3, #16
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b2ca      	uxtb	r2, r1
 8003ea2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	0e19      	lsrs	r1, r3, #24
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3303      	adds	r3, #3
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	b2ca      	uxtb	r2, r1
 8003eb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d22b      	bcs.n	8003f22 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xd6>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003ed8:	68f9      	ldr	r1, [r7, #12]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	b2ca      	uxtb	r2, r1
 8003ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0a19      	lsrs	r1, r3, #8
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	b2ca      	uxtb	r2, r1
 8003ef2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	0c19      	lsrs	r1, r3, #16
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	3302      	adds	r3, #2
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	b2ca      	uxtb	r2, r1
 8003f02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0e19      	lsrs	r1, r3, #24
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3303      	adds	r3, #3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	4413      	add	r3, r2
 8003f10:	b2ca      	uxtb	r2, r1
 8003f12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3304      	adds	r3, #4
 8003f18:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	e7ce      	b.n	8003ec0 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x74>
      }
      return offset;
 8003f22:	697b      	ldr	r3, [r7, #20]
    }
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	1d18      	adds	r0, r3, #4
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7ff feb7 	bl	8003cb8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4413      	add	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	4413      	add	r3, r2
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	4413      	add	r3, r2
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3302      	adds	r3, #2
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3303      	adds	r3, #3
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	061b      	lsls	r3, r3, #24
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3304      	adds	r3, #4
 8003f96:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d90a      	bls.n	8003fb8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f008 f91d 	bl	800c1ec <realloc>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d236      	bcs.n	800403a <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x10e>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	6839      	ldr	r1, [r7, #0]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	7812      	ldrb	r2, [r2, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	440b      	add	r3, r1
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	440b      	add	r3, r1
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3303      	adds	r3, #3
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	440b      	add	r3, r1
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	4313      	orrs	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3304      	adds	r3, #4
 800401e:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	3228      	adds	r2, #40	; 0x28
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3301      	adds	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e7c3      	b.n	8003fc2 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x96>
      }
     return offset;
 800403a:	697b      	ldr	r3, [r7, #20]
    }
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	0800c5c0 	.word	0x0800c5c0

08004060 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	0800c5dc 	.word	0x0800c5dc

0800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d80d      	bhi.n	80040ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	fa22 f103 	lsr.w	r1, r2, r3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	b2ca      	uxtb	r2, r1
 80040a2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e7ee      	b.n	800408a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d811      	bhi.n	80040f6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	440a      	add	r2, r1
 80040dc:	7812      	ldrb	r2, [r2, #0]
 80040de:	4611      	mov	r1, r2
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	00d2      	lsls	r2, r2, #3
 80040e4:	fa01 f202 	lsl.w	r2, r1, r2
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e7ea      	b.n	80040cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	0800d3e4 	.word	0x0800d3e4

08004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ffe8 	bl	8004104 <_ZN3ros15NodeHandleBase_C1Ev>
 8004134:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd f848 	bl	80011d4 <_ZN13STM32HardwareC1Ev>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004152:	4618      	mov	r0, r3
 8004154:	f7fc fd46 	bl	8000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b18      	cmp	r3, #24
 8004160:	d80b      	bhi.n	800417a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	2200      	movs	r2, #0
 8004170:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3301      	adds	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e7f0      	b.n	800415c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b18      	cmp	r3, #24
 8004182:	d80a      	bhi.n	800419a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	f202 2222 	addw	r2, r2, #546	; 0x222
 800418c:	2100      	movs	r1, #0
 800418e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	e7f1      	b.n	800417e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d20a      	bcs.n	80041bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3301      	adds	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e7f0      	b.n	800419e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c6:	d20a      	bcs.n	80041de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	e7f0      	b.n	80041c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	0800d340 	.word	0x0800d340

08004224 <_Z41__static_initialization_and_destruction_0ii>:
	imu_msg.orientation_covariance[4] = 0.0025;
	imu_msg.orientation_covariance[5] = 0;
	imu_msg.orientation_covariance[6] = 0;
	imu_msg.orientation_covariance[7] = 0;
	imu_msg.orientation_covariance[8] = 0.0025;
}
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d14f      	bne.n	80042d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800423a:	4293      	cmp	r3, r2
 800423c:	d14a      	bne.n	80042d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>

extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

// ROS node handler
static ros::NodeHandle nh;
 800423e:	4827      	ldr	r0, [pc, #156]	; (80042dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004240:	f7ff ff70 	bl	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>

// ROS message struct
static std_msgs::String debug_msg;
 8004244:	4826      	ldr	r0, [pc, #152]	; (80042e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004246:	f7fd f8bf 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 800424a:	4826      	ldr	r0, [pc, #152]	; (80042e4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800424c:	f7fd f958 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8004250:	4825      	ldr	r0, [pc, #148]	; (80042e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004252:	f7fd f955 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>

static std_msgs::Int64 dddddsec_msg;
 8004256:	4825      	ldr	r0, [pc, #148]	; (80042ec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004258:	f7fd f952 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddnsec_msg;
 800425c:	4824      	ldr	r0, [pc, #144]	; (80042f0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800425e:	f7fd f94f 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>

// ROS message publisher handler
static ros::Publisher debug_pub("debug", &debug_msg);
 8004262:	2300      	movs	r3, #0
 8004264:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004266:	4923      	ldr	r1, [pc, #140]	; (80042f4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004268:	4823      	ldr	r0, [pc, #140]	; (80042f8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800426a:	f7fc ff7d 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 800426e:	2300      	movs	r3, #0
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004272:	4922      	ldr	r1, [pc, #136]	; (80042fc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8004274:	4822      	ldr	r0, [pc, #136]	; (8004300 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004276:	f7fc ff77 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 800427a:	2300      	movs	r3, #0
 800427c:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800427e:	4921      	ldr	r1, [pc, #132]	; (8004304 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004280:	4821      	ldr	r0, [pc, #132]	; (8004308 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8004282:	f7fc ff71 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

static ros::Publisher sec_pub("ddddd_sec", &dddddsec_msg);
 8004286:	2300      	movs	r3, #0
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800428a:	4920      	ldr	r1, [pc, #128]	; (800430c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800428c:	4820      	ldr	r0, [pc, #128]	; (8004310 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800428e:	f7fc ff6b 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("ddddd_nsec", &dddddnsec_msg);
 8004292:	2300      	movs	r3, #0
 8004294:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004296:	491f      	ldr	r1, [pc, #124]	; (8004314 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8004298:	481f      	ldr	r0, [pc, #124]	; (8004318 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800429a:	f7fc ff65 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::Imu imu_msg;
 800429e:	481f      	ldr	r0, [pc, #124]	; (800431c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80042a0:	f7fe fe32 	bl	8002f08 <_ZN11sensor_msgs3ImuC1Ev>
std_msgs::Float32MultiArray rpy_msg;
 80042a4:	481e      	ldr	r0, [pc, #120]	; (8004320 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80042a6:	f7ff fdb3 	bl	8003e10 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray quat_msg;
 80042aa:	481e      	ldr	r0, [pc, #120]	; (8004324 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80042ac:	f7ff fdb0 	bl	8003e10 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher imu_pub("imu", &imu_msg);
 80042b0:	2300      	movs	r3, #0
 80042b2:	4a1a      	ldr	r2, [pc, #104]	; (800431c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80042b4:	491c      	ldr	r1, [pc, #112]	; (8004328 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80042b6:	481d      	ldr	r0, [pc, #116]	; (800432c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80042b8:	f7fc ff56 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpy_pub("rpy", &rpy_msg);
 80042bc:	2300      	movs	r3, #0
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80042c0:	491b      	ldr	r1, [pc, #108]	; (8004330 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80042c2:	481c      	ldr	r0, [pc, #112]	; (8004334 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80042c4:	f7fc ff50 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher quat_pub("quat", &quat_msg);
 80042c8:	2300      	movs	r3, #0
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80042cc:	491a      	ldr	r1, [pc, #104]	; (8004338 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80042ce:	481b      	ldr	r0, [pc, #108]	; (800433c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80042d0:	f7fc ff4a 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000098 	.word	0x20000098
 80042e0:	200009d4 	.word	0x200009d4
 80042e4:	200009e0 	.word	0x200009e0
 80042e8:	200009f0 	.word	0x200009f0
 80042ec:	20000a00 	.word	0x20000a00
 80042f0:	20000a10 	.word	0x20000a10
 80042f4:	0800c60c 	.word	0x0800c60c
 80042f8:	20000a20 	.word	0x20000a20
 80042fc:	0800c614 	.word	0x0800c614
 8004300:	20000a34 	.word	0x20000a34
 8004304:	0800c624 	.word	0x0800c624
 8004308:	20000a48 	.word	0x20000a48
 800430c:	0800c634 	.word	0x0800c634
 8004310:	20000a5c 	.word	0x20000a5c
 8004314:	0800c640 	.word	0x0800c640
 8004318:	20000a70 	.word	0x20000a70
 800431c:	20000a88 	.word	0x20000a88
 8004320:	20000be0 	.word	0x20000be0
 8004324:	20000c10 	.word	0x20000c10
 8004328:	0800c64c 	.word	0x0800c64c
 800432c:	20000c40 	.word	0x20000c40
 8004330:	0800c650 	.word	0x0800c650
 8004334:	20000c54 	.word	0x20000c54
 8004338:	0800c654 	.word	0x0800c654
 800433c:	20000c68 	.word	0x20000c68

08004340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b63      	cmp	r3, #99	; 0x63
 8004350:	dd09      	ble.n	8004366 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004358:	f083 0301 	eor.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004362:	2300      	movs	r3, #0
 8004364:	e077      	b.n	8004456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004372:	3207      	adds	r2, #7
 8004374:	4611      	mov	r1, r2
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
 800437a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	22fe      	movs	r2, #254	; 0xfe
 8004388:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	b29b      	uxth	r3, r3
 800439a:	121b      	asrs	r3, r3, #8
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80043b0:	4413      	add	r3, r2
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	b21b      	sxth	r3, r3
 80043cc:	121b      	asrs	r3, r3, #8
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043da:	2305      	movs	r3, #5
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3307      	adds	r3, #7
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	da0d      	bge.n	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4413      	add	r3, r2
 80043ee:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	3301      	adds	r3, #1
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e7ec      	b.n	80043de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	3307      	adds	r3, #7
 8004408:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	425a      	negs	r2, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	bf58      	it	pl
 8004414:	4253      	negpl	r3, r2
 8004416:	b2da      	uxtb	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	1c59      	adds	r1, r3, #1
 800441c:	6179      	str	r1, [r7, #20]
 800441e:	43d2      	mvns	r2, r2
 8004420:	b2d1      	uxtb	r1, r2
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	460a      	mov	r2, r1
 8004428:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004432:	dc0a      	bgt.n	800444a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1d18      	adds	r0, r3, #4
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4619      	mov	r1, r3
 8004442:	f7fc ff6f 	bl	8001324 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	e005      	b.n	8004456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800444a:	4905      	ldr	r1, [pc, #20]	; (8004460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f9f2 	bl	8004836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	0800c65c 	.word	0x0800c65c

08004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc ff9d 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8004476:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004486:	4293      	cmp	r3, r2
 8004488:	d903      	bls.n	8004492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d903      	bls.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d014      	beq.n	80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc ff76 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad2      	subs	r2, r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80044d0:	429a      	cmp	r2, r3
 80044d2:	bf8c      	ite	hi
 80044d4:	2301      	movhi	r3, #1
 80044d6:	2300      	movls	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80044de:	f06f 0301 	mvn.w	r3, #1
 80044e2:	e197      	b.n	8004814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc fe8f 	bl	800120c <_ZN13STM32Hardware4readEv>
 80044ee:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f2c0 8177 	blt.w	80047e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800450e:	2b07      	cmp	r3, #7
 8004510:	d11e      	bne.n	8004550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004518:	1c59      	adds	r1, r3, #1
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	b2d1      	uxtb	r1, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	460a      	mov	r2, r1
 800452a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004534:	1e5a      	subs	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1b4      	bne.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2208      	movs	r2, #8
 800454a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800454e:	e7af      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004556:	2b00      	cmp	r3, #0
 8004558:	d128      	bne.n	80045ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2bff      	cmp	r3, #255	; 0xff
 800455e:	d10d      	bne.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f103 0214 	add.w	r2, r3, #20
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800457a:	e799      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f7fc ff15 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8004586:	4602      	mov	r2, r0
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	bf8c      	ite	hi
 8004594:	2301      	movhi	r3, #1
 8004596:	2300      	movls	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d088      	beq.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80045a6:	f06f 0301 	mvn.w	r3, #1
 80045aa:	e133      	b.n	8004814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d11b      	bne.n	80045ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2bfe      	cmp	r3, #254	; 0xfe
 80045ba:	d107      	bne.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80045ca:	e771      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80045da:	f083 0301 	eor.w	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f43f af65 	beq.w	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f933 	bl	8004852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80045ec:	e760      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d113      	bne.n	8004620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800461e:	e747      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004626:	2b03      	cmp	r3, #3
 8004628:	d110      	bne.n	800464c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800464a:	e731      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004652:	2b04      	cmp	r3, #4
 8004654:	d116      	bne.n	8004684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800465c:	425a      	negs	r2, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	bf58      	it	pl
 8004664:	4253      	negpl	r3, r2
 8004666:	2bff      	cmp	r3, #255	; 0xff
 8004668:	d107      	bne.n	800467a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004678:	e71a      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004682:	e715      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800468a:	2b05      	cmp	r3, #5
 800468c:	d10f      	bne.n	80046ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80046ac:	e700      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d117      	bne.n	80046e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	441a      	add	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2207      	movs	r2, #7
 80046ce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f47f aee9 	bne.w	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2208      	movs	r2, #8
 80046e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80046e6:	e6e3      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	f47f aede 	bne.w	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004702:	425a      	negs	r2, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	bf58      	it	pl
 800470a:	4253      	negpl	r3, r2
 800470c:	2bff      	cmp	r3, #255	; 0xff
 800470e:	f47f aecf 	bne.w	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d110      	bne.n	800473e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f898 	bl	8004852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8b3 	bl	800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
 800473c:	e06a      	b.n	8004814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004744:	2b0a      	cmp	r3, #10
 8004746:	d107      	bne.n	8004758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f97b 	bl	8004a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004756:	e6ab      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800475e:	2b06      	cmp	r3, #6
 8004760:	d10e      	bne.n	8004780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fc fb6c 	bl	8000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800477e:	e697      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004786:	2b0b      	cmp	r3, #11
 8004788:	d104      	bne.n	8004794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004792:	e68d      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800479a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80047a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f43f ae81 	beq.w	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80047b4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f202 2222 	addw	r2, r2, #546	; 0x222
 80047be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80047c8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f202 2222 	addw	r2, r2, #546	; 0x222
 80047d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80047e0:	4611      	mov	r1, r2
 80047e2:	4798      	blx	r3
    while (true)
 80047e4:	e664      	b.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80047e6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00f      	beq.n	8004812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004800:	4293      	cmp	r3, r2
 8004802:	d906      	bls.n	8004812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f824 	bl	8004852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8004812:	2300      	movs	r3, #0
  }
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    return configured_;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	2103      	movs	r1, #3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f94d 	bl	8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fe5c 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f107 020c 	add.w	r2, r7, #12
 800486e:	210a      	movs	r1, #10
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
    rt_time = hardware_.time();
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fc fd99 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004886:	bf00      	nop
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 800488e:	b590      	push	{r4, r7, lr}
 8004890:	b08b      	sub	sp, #44	; 0x2c
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8004896:	f107 030c 	add.w	r3, r7, #12
 800489a:	4618      	mov	r0, r3
 800489c:	f7fb ff2e 	bl	80006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	2b18      	cmp	r3, #24
 80048a8:	dc63      	bgt.n	8004972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d056      	beq.n	800496a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4608      	mov	r0, r1
 800490a:	4798      	blx	r3
 800490c:	4603      	mov	r3, r0
 800490e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4608      	mov	r0, r1
 8004938:	4798      	blx	r3
 800493a:	4603      	mov	r3, r0
 800493c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800493e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004942:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681c      	ldr	r4, [r3, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fc fc1c 	bl	8001196 <_ZN3ros9Publisher15getEndpointTypeEv>
 800495e:	4601      	mov	r1, r0
 8004960:	f107 030c 	add.w	r3, r7, #12
 8004964:	461a      	mov	r2, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	3301      	adds	r3, #1
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
 8004970:	e798      	b.n	80048a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004972:	2300      	movs	r3, #0
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	2b18      	cmp	r3, #24
 800497a:	dc5f      	bgt.n	8004a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004980:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d053      	beq.n	8004a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	b29b      	uxth	r3, r3
 800499c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4608      	mov	r0, r1
 80049ce:	4798      	blx	r3
 80049d0:	4603      	mov	r3, r0
 80049d2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4608      	mov	r0, r1
 80049f4:	4798      	blx	r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80049fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fe:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681c      	ldr	r4, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3304      	adds	r3, #4
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4798      	blx	r3
 8004a28:	4601      	mov	r1, r0
 8004a2a:	f107 030c 	add.w	r3, r7, #12
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	3301      	adds	r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	e79c      	b.n	8004976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004a44:	bf00      	nop
 8004a46:	372c      	adds	r7, #44	; 0x2c
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}

08004a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fb fd5e 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fc fca3 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004a76:	f107 0308 	add.w	r3, r7, #8
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fb fdbd 	bl	80005fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4915      	ldr	r1, [pc, #84]	; (8004adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004a88:	fba1 1303 	umull	r1, r3, r1, r3
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	4413      	add	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004a98:	fba3 0302 	umull	r0, r3, r3, r2
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aa2:	fb00 f303 	mul.w	r3, r0, r3
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	440b      	add	r3, r1
 8004ab0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004ab2:	f107 0308 	add.w	r3, r7, #8
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f82e 	bl	8004b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fc fc73 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8004aca:	4602      	mov	r2, r0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004ad2:	bf00      	nop
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	10624dd3 	.word	0x10624dd3
 8004ae0:	000f4240 	.word	0x000f4240

08004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	460b      	mov	r3, r1
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb ffc4 	bl	8000a84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f107 0214 	add.w	r2, r7, #20
 8004b0e:	2107      	movs	r1, #7
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	4798      	blx	r3
  }
 8004b14:	bf00      	nop
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fc fc40 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8004b30:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4915      	ldr	r1, [pc, #84]	; (8004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004b3a:	fba1 1303 	umull	r1, r3, r1, r3
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	1e5a      	subs	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004b52:	fba3 0302 	umull	r0, r3, r3, r2
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b5c:	fb00 f303 	mul.w	r3, r0, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a0c      	ldr	r2, [pc, #48]	; (8004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	1aca      	subs	r2, r1, r3
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004b6c:	4413      	add	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f007 fa04 	bl	800bf90 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	10624dd3 	.word	0x10624dd3
 8004b94:	000f4240 	.word	0x000f4240
 8004b98:	3b9aca00 	.word	0x3b9aca00

08004b9c <_GLOBAL__sub_I_imu_msg>:
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7ff fb3d 	bl	8004224 <_Z41__static_initialization_and_destruction_0ii>
 8004baa:	bd80      	pop	{r7, pc}

08004bac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004bb0:	f003 fefa 	bl	80089a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004bb4:	f000 f80e 	bl	8004bd4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004bb8:	f000 f90a 	bl	8004dd0 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8004bbc:	f000 f8e0 	bl	8004d80 <_ZL11MX_DMA_Initv>
	MX_I2C1_Init();
 8004bc0:	f000 f87c 	bl	8004cbc <_ZL12MX_I2C1_Initv>

	MX_USART1_UART_Init();
 8004bc4:	f000 f8ae 	bl	8004d24 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	setup();
 8004bc8:	f000 fae2 	bl	8005190 <_Z5setupv>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		loop();
 8004bcc:	f000 fb10 	bl	80051f0 <_Z4loopv>
 8004bd0:	e7fc      	b.n	8004bcc <main+0x20>
	...

08004bd4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b094      	sub	sp, #80	; 0x50
 8004bd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004bda:	f107 0320 	add.w	r3, r7, #32
 8004bde:	2230      	movs	r2, #48	; 0x30
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f007 fa51 	bl	800c08a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004be8:	f107 030c 	add.w	r3, r7, #12
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <_Z18SystemClock_Configv+0xe0>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	4a2c      	ldr	r2, [pc, #176]	; (8004cb4 <_Z18SystemClock_Configv+0xe0>)
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6413      	str	r3, [r2, #64]	; 0x40
 8004c08:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <_Z18SystemClock_Configv+0xe0>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c14:	2300      	movs	r3, #0
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	4b27      	ldr	r3, [pc, #156]	; (8004cb8 <_Z18SystemClock_Configv+0xe4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <_Z18SystemClock_Configv+0xe4>)
 8004c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <_Z18SystemClock_Configv+0xe4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c30:	2302      	movs	r3, #2
 8004c32:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c34:	2301      	movs	r3, #1
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c38:	2310      	movs	r3, #16
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c40:	2300      	movs	r3, #0
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004c44:	2308      	movs	r3, #8
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004c48:	23a8      	movs	r3, #168	; 0xa8
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c50:	2304      	movs	r3, #4
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004c54:	f107 0320 	add.w	r3, r7, #32
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 fef7 	bl	8009a4c <HAL_RCC_OscConfig>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 8004c6e:	f000 f90d 	bl	8004e8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004c72:	230f      	movs	r3, #15
 8004c74:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c76:	2302      	movs	r3, #2
 8004c78:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c82:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c88:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8004c8a:	f107 030c 	add.w	r3, r7, #12
 8004c8e:	2105      	movs	r1, #5
 8004c90:	4618      	mov	r0, r3
 8004c92:	f005 f94b 	bl	8009f2c <HAL_RCC_ClockConfig>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <_Z18SystemClock_Configv+0xd6>
		Error_Handler();
 8004ca6:	f000 f8f1 	bl	8004e8c <Error_Handler>
	}
}
 8004caa:	bf00      	nop
 8004cac:	3750      	adds	r7, #80	; 0x50
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40007000 	.word	0x40007000

08004cbc <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <_ZL12MX_I2C1_Initv+0x60>)
 8004cc4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cc8:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <_ZL12MX_I2C1_Initv+0x64>)
 8004cca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cde:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004cf8:	4807      	ldr	r0, [pc, #28]	; (8004d18 <_ZL12MX_I2C1_Initv+0x5c>)
 8004cfa:	f004 fd6f 	bl	80097dc <HAL_I2C_Init>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 8004d0e:	f000 f8bd 	bl	8004e8c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20001664 	.word	0x20001664
 8004d1c:	40005400 	.word	0x40005400
 8004d20:	000186a0 	.word	0x000186a0

08004d24 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d2a:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <_ZL19MX_USART1_UART_Initv+0x58>)
 8004d2c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d34:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004d42:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d4a:	220c      	movs	r2, #12
 8004d4c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004d5a:	4807      	ldr	r0, [pc, #28]	; (8004d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8004d5c:	f006 f94a 	bl	800aff4 <HAL_UART_Init>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8004d70:	f000 f88c 	bl	8004e8c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	200016b8 	.word	0x200016b8
 8004d7c:	40011000 	.word	0x40011000

08004d80 <_ZL11MX_DMA_Initv>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <_ZL11MX_DMA_Initv+0x4c>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <_ZL11MX_DMA_Initv+0x4c>)
 8004d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <_ZL11MX_DMA_Initv+0x4c>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004da2:	2200      	movs	r2, #0
 8004da4:	2100      	movs	r1, #0
 8004da6:	203a      	movs	r0, #58	; 0x3a
 8004da8:	f003 ff6d 	bl	8008c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004dac:	203a      	movs	r0, #58	; 0x3a
 8004dae:	f003 ff86 	bl	8008cbe <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004db2:	2200      	movs	r2, #0
 8004db4:	2100      	movs	r1, #0
 8004db6:	2046      	movs	r0, #70	; 0x46
 8004db8:	f003 ff65 	bl	8008c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004dbc:	2046      	movs	r0, #70	; 0x46
 8004dbe:	f003 ff7e 	bl	8008cbe <HAL_NVIC_EnableIRQ>

}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004dd6:	f107 0314 	add.w	r3, r7, #20
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	60da      	str	r2, [r3, #12]
 8004de4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004df0:	f043 0310 	orr.w	r3, r3, #16
 8004df4:	6313      	str	r3, [r2, #48]	; 0x30
 8004df6:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e10:	6313      	str	r3, [r2, #48]	; 0x30
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2e:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4a:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <_ZL12MX_GPIO_Initv+0xb4>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8004e56:	2200      	movs	r2, #0
 8004e58:	213c      	movs	r1, #60	; 0x3c
 8004e5a:	480b      	ldr	r0, [pc, #44]	; (8004e88 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e5c:	f004 fc8c 	bl	8009778 <HAL_GPIO_WritePin>
			MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
					| MOTOR_B_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
 8004e60:	233c      	movs	r3, #60	; 0x3c
 8004e62:	617b      	str	r3, [r7, #20]
			| MOTOR_B_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e64:	2301      	movs	r3, #1
 8004e66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	4619      	mov	r1, r3
 8004e76:	4804      	ldr	r0, [pc, #16]	; (8004e88 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e78:	f004 facc 	bl	8009414 <HAL_GPIO_Init>

}
 8004e7c:	bf00      	nop
 8004e7e:	3728      	adds	r7, #40	; 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40021000 	.word	0x40021000

08004e8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004e90:	bf00      	nop
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <_Z41__static_initialization_and_destruction_0ii>:
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d134      	bne.n	8004f16 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d12f      	bne.n	8004f16 <_Z41__static_initialization_and_destruction_0ii+0x7a>
static ros::NodeHandle nh;
 8004eb6:	481a      	ldr	r0, [pc, #104]	; (8004f20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004eb8:	f7ff f934 	bl	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 8004ebc:	4819      	ldr	r0, [pc, #100]	; (8004f24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004ebe:	f7fc fa83 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8004ec2:	4819      	ldr	r0, [pc, #100]	; (8004f28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004ec4:	f7fc fb1c 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8004ec8:	4818      	ldr	r0, [pc, #96]	; (8004f2c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004eca:	f7fc fb19 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddsec_msg;
 8004ece:	4818      	ldr	r0, [pc, #96]	; (8004f30 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004ed0:	f7fc fb16 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddnsec_msg;
 8004ed4:	4817      	ldr	r0, [pc, #92]	; (8004f34 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004ed6:	f7fc fb13 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 8004eda:	2300      	movs	r3, #0
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004ede:	4916      	ldr	r1, [pc, #88]	; (8004f38 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004ee0:	4816      	ldr	r0, [pc, #88]	; (8004f3c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004ee2:	f7fc f941 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004eea:	4915      	ldr	r1, [pc, #84]	; (8004f40 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004eec:	4815      	ldr	r0, [pc, #84]	; (8004f44 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004eee:	f7fc f93b 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004ef6:	4914      	ldr	r1, [pc, #80]	; (8004f48 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004ef8:	4814      	ldr	r0, [pc, #80]	; (8004f4c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004efa:	f7fc f935 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("ddddd_sec", &dddddsec_msg);
 8004efe:	2300      	movs	r3, #0
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004f02:	4913      	ldr	r1, [pc, #76]	; (8004f50 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004f04:	4813      	ldr	r0, [pc, #76]	; (8004f54 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004f06:	f7fc f92f 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("ddddd_nsec", &dddddnsec_msg);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004f0e:	4912      	ldr	r1, [pc, #72]	; (8004f58 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004f10:	4812      	ldr	r0, [pc, #72]	; (8004f5c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004f12:	f7fc f929 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000c7c 	.word	0x20000c7c
 8004f24:	200015b8 	.word	0x200015b8
 8004f28:	200015c0 	.word	0x200015c0
 8004f2c:	200015d0 	.word	0x200015d0
 8004f30:	200015e0 	.word	0x200015e0
 8004f34:	200015f0 	.word	0x200015f0
 8004f38:	0800c7d4 	.word	0x0800c7d4
 8004f3c:	20001600 	.word	0x20001600
 8004f40:	0800c7dc 	.word	0x0800c7dc
 8004f44:	20001614 	.word	0x20001614
 8004f48:	0800c7ec 	.word	0x0800c7ec
 8004f4c:	20001628 	.word	0x20001628
 8004f50:	0800c7fc 	.word	0x0800c7fc
 8004f54:	2000163c 	.word	0x2000163c
 8004f58:	0800c808 	.word	0x0800c808
 8004f5c:	20001650 	.word	0x20001650

08004f60 <_GLOBAL__sub_I_hi2c1>:
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f68:	2001      	movs	r0, #1
 8004f6a:	f7ff ff97 	bl	8004e9c <_Z41__static_initialization_and_destruction_0ii>
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
      data(0)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fb fabe 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8004f80:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	605a      	str	r2, [r3, #4]
    {
    }
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	0800d4a0 	.word	0x0800d4a0

08004f9c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	b2ca      	uxtb	r2, r1
 8004fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	0a19      	lsrs	r1, r3, #8
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	b2ca      	uxtb	r2, r1
 8004fca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	0c19      	lsrs	r1, r3, #16
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	b2ca      	uxtb	r2, r1
 8004fda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	0e19      	lsrs	r1, r3, #24
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3303      	adds	r3, #3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	b2ca      	uxtb	r2, r1
 8004fea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	60fb      	str	r3, [r7, #12]
      return offset;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
    }
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	440a      	add	r2, r1
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	4313      	orrs	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	440b      	add	r3, r1
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	4313      	orrs	r3, r2
 8005030:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3302      	adds	r3, #2
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	440b      	add	r3, r1
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	4313      	orrs	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3303      	adds	r3, #3
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	440b      	add	r3, r1
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	4313      	orrs	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3304      	adds	r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
     return offset;
 8005062:	68fb      	ldr	r3, [r7, #12]
    }
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	4b03      	ldr	r3, [pc, #12]	; (8005088 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	0800c850 	.word	0x0800c850

0800508c <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	0800c864 	.word	0x0800c864

080050a8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68d8      	ldr	r0, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6891      	ldr	r1, [r2, #8]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	4798      	blx	r3
 80050c6:	4603      	mov	r3, r0
  };
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <_ZN13STM32Hardware4initEv>:
    void init(){
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f804 	bl	80050e6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <_ZN13STM32Hardware10reset_rbufEv>:
    void reset_rbuf(void){
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fa:	4619      	mov	r1, r3
 80050fc:	f006 f834 	bl	800b168 <HAL_UART_Receive_DMA>
    }
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_TxCpltCallback>:

TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
char log_msg[200];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8005110:	4805      	ldr	r0, [pc, #20]	; (8005128 <HAL_UART_TxCpltCallback+0x20>)
 8005112:	f000 f8dd 	bl	80052d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005116:	4603      	mov	r3, r0
 8005118:	4618      	mov	r0, r3
 800511a:	f7fc f8a5 	bl	8001268 <_ZN13STM32Hardware5flushEv>
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200017b8 	.word	0x200017b8

0800512c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8005134:	4805      	ldr	r0, [pc, #20]	; (800514c <HAL_UART_RxCpltCallback+0x20>)
 8005136:	f000 f8cb 	bl	80052d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800513a:	4603      	mov	r3, r0
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ffd2 	bl	80050e6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200017b8 	.word	0x200017b8

08005150 <_Z16lwheel_vtargetCBRKN8std_msgs7Float32E>:


void lwheel_vtargetCB(const std_msgs::Float32 &msg) {
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	vel_target[LEFT] = msg.data;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4a03      	ldr	r2, [pc, #12]	; (800516c <_Z16lwheel_vtargetCBRKN8std_msgs7Float32E+0x1c>)
 800515e:	6013      	str	r3, [r2, #0]

}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	200045d4 	.word	0x200045d4

08005170 <_Z16rwheel_vtargetCBRKN8std_msgs7Float32E>:

void rwheel_vtargetCB(const std_msgs::Float32 &msg) {
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	vel_target[RIGHT] = msg.data;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a03      	ldr	r2, [pc, #12]	; (800518c <_Z16rwheel_vtargetCBRKN8std_msgs7Float32E+0x1c>)
 800517e:	6053      	str	r3, [r2, #4]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	200045d4 	.word	0x200045d4

08005190 <_Z5setupv>:

// ROS message subscriber handler
static ros::Subscriber<std_msgs::Float32> lwheel_vtarget_sub("/lwheel_vtarget", lwheel_vtargetCB);
static ros::Subscriber<std_msgs::Float32> rwheel_vtarget_sub("/rwheel_vtarget", rwheel_vtargetCB);

void setup(void) {
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
	wheelDirInit();
 8005194:	f003 f9da 	bl	800854c <_Z12wheelDirInitv>
	wheelPWMInit();
 8005198:	f003 fa0a 	bl	80085b0 <_Z12wheelPWMInitv>

	encoderInit();
 800519c:	f003 f86c 	bl	8008278 <_Z11encoderInitv>

	nh.initNode();
 80051a0:	480d      	ldr	r0, [pc, #52]	; (80051d8 <_Z5setupv+0x48>)
 80051a2:	f000 f8d5 	bl	8005350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_encoder_pub);
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <_Z5setupv+0x4c>)
 80051a8:	480b      	ldr	r0, [pc, #44]	; (80051d8 <_Z5setupv+0x48>)
 80051aa:	f000 f861 	bl	8005270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_encoder_pub);
 80051ae:	490c      	ldr	r1, [pc, #48]	; (80051e0 <_Z5setupv+0x50>)
 80051b0:	4809      	ldr	r0, [pc, #36]	; (80051d8 <_Z5setupv+0x48>)
 80051b2:	f000 f85d 	bl	8005270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(debug_pub);
 80051b6:	490b      	ldr	r1, [pc, #44]	; (80051e4 <_Z5setupv+0x54>)
 80051b8:	4807      	ldr	r0, [pc, #28]	; (80051d8 <_Z5setupv+0x48>)
 80051ba:	f000 f859 	bl	8005270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

//	nh.advertise(sec_pub);
//	nh.advertise(nsec_pub);

	nh.subscribe(lwheel_vtarget_sub);
 80051be:	490a      	ldr	r1, [pc, #40]	; (80051e8 <_Z5setupv+0x58>)
 80051c0:	4805      	ldr	r0, [pc, #20]	; (80051d8 <_Z5setupv+0x48>)
 80051c2:	f000 f8e2 	bl	800538a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(rwheel_vtarget_sub);
 80051c6:	4909      	ldr	r1, [pc, #36]	; (80051ec <_Z5setupv+0x5c>)
 80051c8:	4803      	ldr	r0, [pc, #12]	; (80051d8 <_Z5setupv+0x48>)
 80051ca:	f000 f8de 	bl	800538a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	moveStop();
 80051ce:	f003 fa77 	bl	80086c0 <_Z8moveStopv>
}
 80051d2:	bf00      	nop
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	200017b8 	.word	0x200017b8
 80051dc:	20002154 	.word	0x20002154
 80051e0:	20002168 	.word	0x20002168
 80051e4:	20002140 	.word	0x20002140
 80051e8:	200022ec 	.word	0x200022ec
 80051ec:	20002308 	.word	0x20002308

080051f0 <_Z4loopv>:

void loop(void) {
 80051f0:	b598      	push	{r3, r4, r7, lr}
 80051f2:	af00      	add	r7, sp, #0
//	if (left_encoder_msg.data != left_encoder_count) {
//		strcpy(encoder_log, "left encoder start");
//	}


	left_encoder_msg.data = TIM4->CNT;
 80051f4:	4b14      	ldr	r3, [pc, #80]	; (8005248 <_Z4loopv+0x58>)
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	4a13      	ldr	r2, [pc, #76]	; (800524c <_Z4loopv+0x5c>)
 80051fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
	left_encoder_pub.publish(&left_encoder_msg);
 8005202:	4912      	ldr	r1, [pc, #72]	; (800524c <_Z4loopv+0x5c>)
 8005204:	4812      	ldr	r0, [pc, #72]	; (8005250 <_Z4loopv+0x60>)
 8005206:	f7ff ff4f 	bl	80050a8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	right_encoder_msg.data = TIM5->CNT;
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <_Z4loopv+0x64>)
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f04f 0400 	mov.w	r4, #0
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <_Z4loopv+0x68>)
 8005214:	e9c2 3402 	strd	r3, r4, [r2, #8]
	right_encoder_pub.publish(&right_encoder_msg);
 8005218:	490f      	ldr	r1, [pc, #60]	; (8005258 <_Z4loopv+0x68>)
 800521a:	4810      	ldr	r0, [pc, #64]	; (800525c <_Z4loopv+0x6c>)
 800521c:	f7ff ff44 	bl	80050a8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//	dddddnsec_msg.data = (uint64_t)1;
//
//	sec_pub.publish(&dddddsec_msg);
//	nsec_pub.publish(&dddddnsec_msg);
//
	debug_msg.data = log_msg;
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <_Z4loopv+0x70>)
 8005222:	4a10      	ldr	r2, [pc, #64]	; (8005264 <_Z4loopv+0x74>)
 8005224:	605a      	str	r2, [r3, #4]
	debug_pub.publish(&debug_msg);
 8005226:	490e      	ldr	r1, [pc, #56]	; (8005260 <_Z4loopv+0x70>)
 8005228:	480f      	ldr	r0, [pc, #60]	; (8005268 <_Z4loopv+0x78>)
 800522a:	f7ff ff3d 	bl	80050a8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>


	moveLeftWheel();
 800522e:	f003 fad5 	bl	80087dc <_Z13moveLeftWheelv>
	moveRightWheel();
 8005232:	f003 fb1d 	bl	8008870 <_Z14moveRightWheelv>

	nh.spinOnce();
 8005236:	480d      	ldr	r0, [pc, #52]	; (800526c <_Z4loopv+0x7c>)
 8005238:	f7ff f914 	bl	8004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(1000);
 800523c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005240:	f003 fc24 	bl	8008a8c <HAL_Delay>

}
 8005244:	bf00      	nop
 8005246:	bd98      	pop	{r3, r4, r7, pc}
 8005248:	40000800 	.word	0x40000800
 800524c:	20002100 	.word	0x20002100
 8005250:	20002154 	.word	0x20002154
 8005254:	40000c00 	.word	0x40000c00
 8005258:	20002110 	.word	0x20002110
 800525c:	20002168 	.word	0x20002168
 8005260:	200020f4 	.word	0x200020f4
 8005264:	20002224 	.word	0x20002224
 8005268:	20002140 	.word	0x20002140
 800526c:	200017b8 	.word	0x200017b8

08005270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b18      	cmp	r3, #24
 8005282:	dc1e      	bgt.n	80052c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d111      	bne.n	80052ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	60da      	str	r2, [r3, #12]
        return true;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e004      	b.n	80052c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e7dd      	b.n	800527e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80052c2:	2300      	movs	r3, #0
  }
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
  }
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	0800d488 	.word	0x0800d488

08005308 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ffe5 	bl	80052e8 <_ZN3ros11Subscriber_C1Ev>
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	330c      	adds	r3, #12
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fe21 	bl	8004f70 <_ZN8std_msgs7Float32C1Ev>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	615a      	str	r2, [r3, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
  };
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	0800d470 	.word	0x0800d470

08005350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff feb7 	bl	80050d0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b18      	cmp	r3, #24
 800539c:	dc19      	bgt.n	80053d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10d      	bne.n	80053ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80053b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	605a      	str	r2, [r3, #4]
        return true;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e004      	b.n	80053d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e7e2      	b.n	8005398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
    return false;
 80053d2:	2300      	movs	r3, #0
  }
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <_Z41__static_initialization_and_destruction_0ii>:
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d140      	bne.n	8005472 <_Z41__static_initialization_and_destruction_0ii+0x92>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d13b      	bne.n	8005472 <_Z41__static_initialization_and_destruction_0ii+0x92>
static ros::NodeHandle nh;
 80053fa:	4820      	ldr	r0, [pc, #128]	; (800547c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80053fc:	f7fe fe92 	bl	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 8005400:	481f      	ldr	r0, [pc, #124]	; (8005480 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005402:	f7fb ffe1 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8005406:	481f      	ldr	r0, [pc, #124]	; (8005484 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005408:	f7fc f87a 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 800540c:	481e      	ldr	r0, [pc, #120]	; (8005488 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800540e:	f7fc f877 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddsec_msg;
 8005412:	481e      	ldr	r0, [pc, #120]	; (800548c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005414:	f7fc f874 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddnsec_msg;
 8005418:	481d      	ldr	r0, [pc, #116]	; (8005490 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800541a:	f7fc f871 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 800541e:	2300      	movs	r3, #0
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005422:	491c      	ldr	r1, [pc, #112]	; (8005494 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8005424:	481c      	ldr	r0, [pc, #112]	; (8005498 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005426:	f7fb fe9f 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 800542a:	2300      	movs	r3, #0
 800542c:	4a15      	ldr	r2, [pc, #84]	; (8005484 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800542e:	491b      	ldr	r1, [pc, #108]	; (800549c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005430:	481b      	ldr	r0, [pc, #108]	; (80054a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005432:	f7fb fe99 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8005436:	2300      	movs	r3, #0
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800543a:	491a      	ldr	r1, [pc, #104]	; (80054a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800543c:	481a      	ldr	r0, [pc, #104]	; (80054a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800543e:	f7fb fe93 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("ddddd_sec", &dddddsec_msg);
 8005442:	2300      	movs	r3, #0
 8005444:	4a11      	ldr	r2, [pc, #68]	; (800548c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005446:	4919      	ldr	r1, [pc, #100]	; (80054ac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005448:	4819      	ldr	r0, [pc, #100]	; (80054b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800544a:	f7fb fe8d 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("ddddd_nsec", &dddddnsec_msg);
 800544e:	2300      	movs	r3, #0
 8005450:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005452:	4918      	ldr	r1, [pc, #96]	; (80054b4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8005454:	4818      	ldr	r0, [pc, #96]	; (80054b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8005456:	f7fb fe87 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Subscriber<std_msgs::Float32> lwheel_vtarget_sub("/lwheel_vtarget", lwheel_vtargetCB);
 800545a:	2301      	movs	r3, #1
 800545c:	4a17      	ldr	r2, [pc, #92]	; (80054bc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800545e:	4918      	ldr	r1, [pc, #96]	; (80054c0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8005460:	4818      	ldr	r0, [pc, #96]	; (80054c4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8005462:	f7ff ff51 	bl	8005308 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
static ros::Subscriber<std_msgs::Float32> rwheel_vtarget_sub("/rwheel_vtarget", rwheel_vtargetCB);
 8005466:	2301      	movs	r3, #1
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800546a:	4918      	ldr	r1, [pc, #96]	; (80054cc <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800546c:	4818      	ldr	r0, [pc, #96]	; (80054d0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800546e:	f7ff ff4b 	bl	8005308 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200017b8 	.word	0x200017b8
 8005480:	200020f4 	.word	0x200020f4
 8005484:	20002100 	.word	0x20002100
 8005488:	20002110 	.word	0x20002110
 800548c:	20002120 	.word	0x20002120
 8005490:	20002130 	.word	0x20002130
 8005494:	0800ca00 	.word	0x0800ca00
 8005498:	20002140 	.word	0x20002140
 800549c:	0800ca08 	.word	0x0800ca08
 80054a0:	20002154 	.word	0x20002154
 80054a4:	0800ca18 	.word	0x0800ca18
 80054a8:	20002168 	.word	0x20002168
 80054ac:	0800ca28 	.word	0x0800ca28
 80054b0:	2000217c 	.word	0x2000217c
 80054b4:	0800ca34 	.word	0x0800ca34
 80054b8:	20002190 	.word	0x20002190
 80054bc:	08005151 	.word	0x08005151
 80054c0:	0800ca40 	.word	0x0800ca40
 80054c4:	200022ec 	.word	0x200022ec
 80054c8:	08005171 	.word	0x08005171
 80054cc:	0800ca50 	.word	0x0800ca50
 80054d0:	20002308 	.word	0x20002308

080054d4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	330c      	adds	r3, #12
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fd8b 	bl	8005000 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	320c      	adds	r2, #12
 80054f2:	4610      	mov	r0, r2
 80054f4:	4798      	blx	r3
  }
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
  }
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	330c      	adds	r3, #12
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fda4 	bl	8005070 <_ZN8std_msgs7Float327getTypeEv>
 8005528:	4603      	mov	r3, r0
  }
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	330c      	adds	r3, #12
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fda4 	bl	800508c <_ZN8std_msgs7Float326getMD5Ev>
 8005544:	4603      	mov	r3, r0
  }
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <_GLOBAL__sub_I_htim4>:
 800554e:	b580      	push	{r7, lr}
 8005550:	af00      	add	r7, sp, #0
 8005552:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005556:	2001      	movs	r0, #1
 8005558:	f7ff ff42 	bl	80053e0 <_Z41__static_initialization_and_destruction_0ii>
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4618      	mov	r0, r3
 800556c:	f7fa ffc6 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	f04f 0400 	mov.w	r4, #0
 800558e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd90      	pop	{r4, r7, pc}
 80055aa:	bf00      	nop
 80055ac:	0800d590 	.word	0x0800d590

080055b0 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80055b0:	b490      	push	{r4, r7}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80055c4:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80055c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	440a      	add	r2, r1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80055d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	f04f 0400 	mov.w	r4, #0
 80055e2:	0a0b      	lsrs	r3, r1, #8
 80055e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80055e8:	0a14      	lsrs	r4, r2, #8
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	3201      	adds	r2, #1
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	440a      	add	r2, r1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80055f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	f04f 0400 	mov.w	r4, #0
 8005602:	0c0b      	lsrs	r3, r1, #16
 8005604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005608:	0c14      	lsrs	r4, r2, #16
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	3202      	adds	r2, #2
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	440a      	add	r2, r1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8005616:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	f04f 0400 	mov.w	r4, #0
 8005622:	0e0b      	lsrs	r3, r1, #24
 8005624:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005628:	0e14      	lsrs	r4, r2, #24
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	3203      	adds	r2, #3
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	440a      	add	r2, r1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8005636:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	f04f 0400 	mov.w	r4, #0
 8005642:	0013      	movs	r3, r2
 8005644:	2400      	movs	r4, #0
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	3204      	adds	r2, #4
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	440a      	add	r2, r1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8005652:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	f04f 0400 	mov.w	r4, #0
 800565e:	0a13      	lsrs	r3, r2, #8
 8005660:	2400      	movs	r4, #0
 8005662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005664:	3205      	adds	r2, #5
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	440a      	add	r2, r1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800566e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	f04f 0400 	mov.w	r4, #0
 800567a:	0c13      	lsrs	r3, r2, #16
 800567c:	2400      	movs	r4, #0
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	3206      	adds	r2, #6
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	440a      	add	r2, r1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800568a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	0e13      	lsrs	r3, r2, #24
 8005698:	2400      	movs	r4, #0
 800569a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569c:	3207      	adds	r2, #7
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	440a      	add	r2, r1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	3308      	adds	r3, #8
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80056b2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80056b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80056ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	440a      	add	r2, r1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80056c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	f04f 0400 	mov.w	r4, #0
 80056d0:	0a0b      	lsrs	r3, r1, #8
 80056d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80056d6:	0a14      	lsrs	r4, r2, #8
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	3201      	adds	r2, #1
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	440a      	add	r2, r1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80056e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	f04f 0400 	mov.w	r4, #0
 80056f0:	0c0b      	lsrs	r3, r1, #16
 80056f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056f6:	0c14      	lsrs	r4, r2, #16
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	3202      	adds	r2, #2
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	440a      	add	r2, r1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8005704:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	f04f 0400 	mov.w	r4, #0
 8005710:	0e0b      	lsrs	r3, r1, #24
 8005712:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005716:	0e14      	lsrs	r4, r2, #24
 8005718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571a:	3203      	adds	r2, #3
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	440a      	add	r2, r1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8005724:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	f04f 0400 	mov.w	r4, #0
 8005730:	0013      	movs	r3, r2
 8005732:	2400      	movs	r4, #0
 8005734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005736:	3204      	adds	r2, #4
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	440a      	add	r2, r1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8005740:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	f04f 0400 	mov.w	r4, #0
 800574c:	0a13      	lsrs	r3, r2, #8
 800574e:	2400      	movs	r4, #0
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	3205      	adds	r2, #5
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	440a      	add	r2, r1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800575c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	f04f 0400 	mov.w	r4, #0
 8005768:	0c13      	lsrs	r3, r2, #16
 800576a:	2400      	movs	r4, #0
 800576c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576e:	3206      	adds	r2, #6
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	440a      	add	r2, r1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8005778:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	f04f 0400 	mov.w	r4, #0
 8005784:	0e13      	lsrs	r3, r2, #24
 8005786:	2400      	movs	r4, #0
 8005788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578a:	3207      	adds	r2, #7
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	440a      	add	r2, r1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	3308      	adds	r3, #8
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80057a0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80057a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	440a      	add	r2, r1
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80057b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	f04f 0400 	mov.w	r4, #0
 80057be:	0a0b      	lsrs	r3, r1, #8
 80057c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057c4:	0a14      	lsrs	r4, r2, #8
 80057c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c8:	3201      	adds	r2, #1
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	440a      	add	r2, r1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80057d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	f04f 0400 	mov.w	r4, #0
 80057de:	0c0b      	lsrs	r3, r1, #16
 80057e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057e4:	0c14      	lsrs	r4, r2, #16
 80057e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e8:	3202      	adds	r2, #2
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	440a      	add	r2, r1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80057f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	f04f 0400 	mov.w	r4, #0
 80057fe:	0e0b      	lsrs	r3, r1, #24
 8005800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005804:	0e14      	lsrs	r4, r2, #24
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	3203      	adds	r2, #3
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	440a      	add	r2, r1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8005812:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	f04f 0400 	mov.w	r4, #0
 800581e:	0013      	movs	r3, r2
 8005820:	2400      	movs	r4, #0
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	3204      	adds	r2, #4
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	440a      	add	r2, r1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800582e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	f04f 0400 	mov.w	r4, #0
 800583a:	0a13      	lsrs	r3, r2, #8
 800583c:	2400      	movs	r4, #0
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	3205      	adds	r2, #5
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	440a      	add	r2, r1
 8005846:	b2db      	uxtb	r3, r3
 8005848:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800584a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	f04f 0400 	mov.w	r4, #0
 8005856:	0c13      	lsrs	r3, r2, #16
 8005858:	2400      	movs	r4, #0
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	3206      	adds	r2, #6
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	440a      	add	r2, r1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8005866:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	f04f 0400 	mov.w	r4, #0
 8005872:	0e13      	lsrs	r3, r2, #24
 8005874:	2400      	movs	r4, #0
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	3207      	adds	r2, #7
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	440a      	add	r2, r1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	3308      	adds	r3, #8
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800588a:	4618      	mov	r0, r3
 800588c:	3728      	adds	r7, #40	; 0x28
 800588e:	46bd      	mov	sp, r7
 8005890:	bc90      	pop	{r4, r7}
 8005892:	4770      	bx	lr

08005894 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005894:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005898:	b08c      	sub	sp, #48	; 0x30
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80058b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	68b8      	ldr	r0, [r7, #8]
 80058b8:	4403      	add	r3, r0
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	461c      	mov	r4, r3
 80058be:	b2e4      	uxtb	r4, r4
 80058c0:	f04f 0500 	mov.w	r5, #0
 80058c4:	4623      	mov	r3, r4
 80058c6:	462c      	mov	r4, r5
 80058c8:	ea43 0301 	orr.w	r3, r3, r1
 80058cc:	ea44 0402 	orr.w	r4, r4, r2
 80058d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80058d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80058d8:	461d      	mov	r5, r3
 80058da:	4626      	mov	r6, r4
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	3301      	adds	r3, #1
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	b2d9      	uxtb	r1, r3
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	f04f 0400 	mov.w	r4, #0
 80058f4:	0214      	lsls	r4, r2, #8
 80058f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058fa:	020b      	lsls	r3, r1, #8
 80058fc:	4629      	mov	r1, r5
 80058fe:	4632      	mov	r2, r6
 8005900:	ea41 0103 	orr.w	r1, r1, r3
 8005904:	ea42 0204 	orr.w	r2, r2, r4
 8005908:	460b      	mov	r3, r1
 800590a:	4614      	mov	r4, r2
 800590c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005910:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005914:	461d      	mov	r5, r3
 8005916:	4626      	mov	r6, r4
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	3302      	adds	r3, #2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	4413      	add	r3, r2
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b2d9      	uxtb	r1, r3
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	f04f 0400 	mov.w	r4, #0
 8005930:	0414      	lsls	r4, r2, #16
 8005932:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8005936:	040b      	lsls	r3, r1, #16
 8005938:	4629      	mov	r1, r5
 800593a:	4632      	mov	r2, r6
 800593c:	ea41 0103 	orr.w	r1, r1, r3
 8005940:	ea42 0204 	orr.w	r2, r2, r4
 8005944:	460b      	mov	r3, r1
 8005946:	4614      	mov	r4, r2
 8005948:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800594c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	3303      	adds	r3, #3
 8005954:	68b8      	ldr	r0, [r7, #8]
 8005956:	4403      	add	r3, r0
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f04f 0400 	mov.w	r4, #0
 8005960:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8005964:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8005968:	ea41 030a 	orr.w	r3, r1, sl
 800596c:	ea42 040b 	orr.w	r4, r2, fp
 8005970:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005974:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	3304      	adds	r3, #4
 800597c:	68b8      	ldr	r0, [r7, #8]
 800597e:	4403      	add	r3, r0
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	fa5f fa83 	uxtb.w	sl, r3
 8005986:	f04f 0b00 	mov.w	fp, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	f04f 0400 	mov.w	r4, #0
 8005992:	4625      	mov	r5, r4
 8005994:	461c      	mov	r4, r3
 8005996:	4653      	mov	r3, sl
 8005998:	461d      	mov	r5, r3
 800599a:	2300      	movs	r3, #0
 800599c:	461c      	mov	r4, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	462c      	mov	r4, r5
 80059a2:	ea43 0301 	orr.w	r3, r3, r1
 80059a6:	ea44 0402 	orr.w	r4, r4, r2
 80059aa:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80059ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	3305      	adds	r3, #5
 80059b6:	68b8      	ldr	r0, [r7, #8]
 80059b8:	4403      	add	r3, r0
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	fa5f fa83 	uxtb.w	sl, r3
 80059c0:	f04f 0b00 	mov.w	fp, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	4625      	mov	r5, r4
 80059ce:	461c      	mov	r4, r3
 80059d0:	ea4f 230a 	mov.w	r3, sl, lsl #8
 80059d4:	461d      	mov	r5, r3
 80059d6:	2300      	movs	r3, #0
 80059d8:	461c      	mov	r4, r3
 80059da:	4623      	mov	r3, r4
 80059dc:	462c      	mov	r4, r5
 80059de:	ea43 0301 	orr.w	r3, r3, r1
 80059e2:	ea44 0402 	orr.w	r4, r4, r2
 80059e6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80059ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	3306      	adds	r3, #6
 80059f2:	68b8      	ldr	r0, [r7, #8]
 80059f4:	4403      	add	r3, r0
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	fa5f fa83 	uxtb.w	sl, r3
 80059fc:	f04f 0b00 	mov.w	fp, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	f04f 0400 	mov.w	r4, #0
 8005a08:	4625      	mov	r5, r4
 8005a0a:	461c      	mov	r4, r3
 8005a0c:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8005a10:	461d      	mov	r5, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	461c      	mov	r4, r3
 8005a16:	4623      	mov	r3, r4
 8005a18:	462c      	mov	r4, r5
 8005a1a:	ea43 0301 	orr.w	r3, r3, r1
 8005a1e:	ea44 0402 	orr.w	r4, r4, r2
 8005a22:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005a26:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	4403      	add	r3, r0
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	fa5f fa83 	uxtb.w	sl, r3
 8005a38:	f04f 0b00 	mov.w	fp, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	4625      	mov	r5, r4
 8005a46:	461c      	mov	r4, r3
 8005a48:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8005a4c:	461d      	mov	r5, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	461c      	mov	r4, r3
 8005a52:	4623      	mov	r3, r4
 8005a54:	462c      	mov	r4, r5
 8005a56:	ea43 0301 	orr.w	r3, r3, r1
 8005a5a:	ea44 0402 	orr.w	r4, r4, r2
 8005a5e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8005a62:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	3308      	adds	r3, #8
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	f04f 0400 	mov.w	r4, #0
 8005a7a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005a7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	4403      	add	r3, r0
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	fa5f fa83 	uxtb.w	sl, r3
 8005a8e:	f04f 0b00 	mov.w	fp, #0
 8005a92:	ea4a 0301 	orr.w	r3, sl, r1
 8005a96:	ea4b 0402 	orr.w	r4, fp, r2
 8005a9a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005a9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b2d9      	uxtb	r1, r3
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	f04f 0400 	mov.w	r4, #0
 8005aba:	4625      	mov	r5, r4
 8005abc:	461c      	mov	r4, r3
 8005abe:	0213      	lsls	r3, r2, #8
 8005ac0:	461d      	mov	r5, r3
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8005ac8:	461d      	mov	r5, r3
 8005aca:	020b      	lsls	r3, r1, #8
 8005acc:	461c      	mov	r4, r3
 8005ace:	4623      	mov	r3, r4
 8005ad0:	462c      	mov	r4, r5
 8005ad2:	ea43 030a 	orr.w	r3, r3, sl
 8005ad6:	ea44 040b 	orr.w	r4, r4, fp
 8005ada:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005ade:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4413      	add	r3, r2
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	b2d9      	uxtb	r1, r3
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	4625      	mov	r5, r4
 8005afc:	461c      	mov	r4, r3
 8005afe:	0413      	lsls	r3, r2, #16
 8005b00:	461d      	mov	r5, r3
 8005b02:	462b      	mov	r3, r5
 8005b04:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8005b08:	461d      	mov	r5, r3
 8005b0a:	040b      	lsls	r3, r1, #16
 8005b0c:	461c      	mov	r4, r3
 8005b0e:	4623      	mov	r3, r4
 8005b10:	462c      	mov	r4, r5
 8005b12:	ea43 030a 	orr.w	r3, r3, sl
 8005b16:	ea44 040b 	orr.w	r4, r4, fp
 8005b1a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005b1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	3303      	adds	r3, #3
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	4403      	add	r3, r0
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f04f 0400 	mov.w	r4, #0
 8005b32:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8005b36:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8005b3a:	ea41 0308 	orr.w	r3, r1, r8
 8005b3e:	ea42 0409 	orr.w	r4, r2, r9
 8005b42:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005b46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	68b8      	ldr	r0, [r7, #8]
 8005b50:	4403      	add	r3, r0
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	fa5f f883 	uxtb.w	r8, r3
 8005b58:	f04f 0900 	mov.w	r9, #0
 8005b5c:	f04f 0a00 	mov.w	sl, #0
 8005b60:	f04f 0b00 	mov.w	fp, #0
 8005b64:	46c3      	mov	fp, r8
 8005b66:	f04f 0a00 	mov.w	sl, #0
 8005b6a:	ea4a 0301 	orr.w	r3, sl, r1
 8005b6e:	ea4b 0402 	orr.w	r4, fp, r2
 8005b72:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005b76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	3305      	adds	r3, #5
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	4403      	add	r3, r0
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	fa5f f883 	uxtb.w	r8, r3
 8005b88:	f04f 0900 	mov.w	r9, #0
 8005b8c:	f04f 0a00 	mov.w	sl, #0
 8005b90:	f04f 0b00 	mov.w	fp, #0
 8005b94:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8005b98:	f04f 0a00 	mov.w	sl, #0
 8005b9c:	ea4a 0301 	orr.w	r3, sl, r1
 8005ba0:	ea4b 0402 	orr.w	r4, fp, r2
 8005ba4:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005ba8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	3306      	adds	r3, #6
 8005bb0:	68b8      	ldr	r0, [r7, #8]
 8005bb2:	4403      	add	r3, r0
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	fa5f f883 	uxtb.w	r8, r3
 8005bba:	f04f 0900 	mov.w	r9, #0
 8005bbe:	f04f 0a00 	mov.w	sl, #0
 8005bc2:	f04f 0b00 	mov.w	fp, #0
 8005bc6:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8005bca:	f04f 0a00 	mov.w	sl, #0
 8005bce:	ea4a 0301 	orr.w	r3, sl, r1
 8005bd2:	ea4b 0402 	orr.w	r4, fp, r2
 8005bd6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005bda:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	3307      	adds	r3, #7
 8005be2:	68b8      	ldr	r0, [r7, #8]
 8005be4:	4403      	add	r3, r0
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	fa5f f883 	uxtb.w	r8, r3
 8005bec:	f04f 0900 	mov.w	r9, #0
 8005bf0:	f04f 0a00 	mov.w	sl, #0
 8005bf4:	f04f 0b00 	mov.w	fp, #0
 8005bf8:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8005bfc:	f04f 0a00 	mov.w	sl, #0
 8005c00:	ea4a 0301 	orr.w	r3, sl, r1
 8005c04:	ea4b 0402 	orr.w	r4, fp, r2
 8005c08:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8005c0c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	3308      	adds	r3, #8
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	f04f 0400 	mov.w	r4, #0
 8005c24:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005c28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	68b8      	ldr	r0, [r7, #8]
 8005c30:	4403      	add	r3, r0
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	fa5f f883 	uxtb.w	r8, r3
 8005c38:	f04f 0900 	mov.w	r9, #0
 8005c3c:	ea48 0301 	orr.w	r3, r8, r1
 8005c40:	ea49 0402 	orr.w	r4, r9, r2
 8005c44:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005c48:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	3301      	adds	r3, #1
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	4413      	add	r3, r2
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	b2d9      	uxtb	r1, r3
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0a00 	mov.w	sl, #0
 8005c60:	f04f 0b00 	mov.w	fp, #0
 8005c64:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8005c68:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8005c6c:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8005c70:	ea4a 0308 	orr.w	r3, sl, r8
 8005c74:	ea4b 0409 	orr.w	r4, fp, r9
 8005c78:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c7c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	3302      	adds	r3, #2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b2d9      	uxtb	r1, r3
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0a00 	mov.w	sl, #0
 8005c94:	f04f 0b00 	mov.w	fp, #0
 8005c98:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8005c9c:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8005ca0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8005ca4:	ea4a 0308 	orr.w	r3, sl, r8
 8005ca8:	ea4b 0409 	orr.w	r4, fp, r9
 8005cac:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005cb0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	3303      	adds	r3, #3
 8005cb8:	68b8      	ldr	r0, [r7, #8]
 8005cba:	4403      	add	r3, r0
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f04f 0400 	mov.w	r4, #0
 8005cc4:	0a18      	lsrs	r0, r3, #8
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005cd0:	ea43 0301 	orr.w	r3, r3, r1
 8005cd4:	ea44 0402 	orr.w	r4, r4, r2
 8005cd8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005cdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	68b8      	ldr	r0, [r7, #8]
 8005ce6:	4403      	add	r3, r0
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b2dd      	uxtb	r5, r3
 8005cec:	f04f 0600 	mov.w	r6, #0
 8005cf0:	f04f 0800 	mov.w	r8, #0
 8005cf4:	f04f 0900 	mov.w	r9, #0
 8005cf8:	46a9      	mov	r9, r5
 8005cfa:	f04f 0800 	mov.w	r8, #0
 8005cfe:	ea48 0301 	orr.w	r3, r8, r1
 8005d02:	ea49 0402 	orr.w	r4, r9, r2
 8005d06:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005d0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	3305      	adds	r3, #5
 8005d12:	68b8      	ldr	r0, [r7, #8]
 8005d14:	4403      	add	r3, r0
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	b2dd      	uxtb	r5, r3
 8005d1a:	f04f 0600 	mov.w	r6, #0
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	f04f 0900 	mov.w	r9, #0
 8005d26:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	ea48 0301 	orr.w	r3, r8, r1
 8005d32:	ea49 0402 	orr.w	r4, r9, r2
 8005d36:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005d3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	3306      	adds	r3, #6
 8005d42:	68b8      	ldr	r0, [r7, #8]
 8005d44:	4403      	add	r3, r0
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b2dd      	uxtb	r5, r3
 8005d4a:	f04f 0600 	mov.w	r6, #0
 8005d4e:	f04f 0800 	mov.w	r8, #0
 8005d52:	f04f 0900 	mov.w	r9, #0
 8005d56:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	ea48 0301 	orr.w	r3, r8, r1
 8005d62:	ea49 0402 	orr.w	r4, r9, r2
 8005d66:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005d6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	3307      	adds	r3, #7
 8005d72:	68b8      	ldr	r0, [r7, #8]
 8005d74:	4403      	add	r3, r0
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	b2dd      	uxtb	r5, r3
 8005d7a:	f04f 0600 	mov.w	r6, #0
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	f04f 0900 	mov.w	r9, #0
 8005d86:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8005d8a:	f04f 0800 	mov.w	r8, #0
 8005d8e:	ea48 0301 	orr.w	r3, r8, r1
 8005d92:	ea49 0402 	orr.w	r4, r9, r2
 8005d96:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8005d9a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	3308      	adds	r3, #8
 8005da8:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005dac:	4618      	mov	r0, r3
 8005dae:	3730      	adds	r7, #48	; 0x30
 8005db0:	46bd      	mov	sp, r7
 8005db2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005db6:	4770      	bx	lr

08005db8 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	0800cb68 	.word	0x0800cb68

08005dd4 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	4b03      	ldr	r3, [pc, #12]	; (8005dec <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	0800cb7c 	.word	0x0800cb7c

08005df0 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa fb7e 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8005e00:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff fba8 	bl	8005560 <_ZN13geometry_msgs5PointC1Ev>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3328      	adds	r3, #40	; 0x28
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fb fe93 	bl	8001b40 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	0800d578 	.word	0x0800d578

08005e28 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f103 0008 	add.w	r0, r3, #8
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	4413      	add	r3, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	f7ff fbb4 	bl	80055b0 <_ZNK13geometry_msgs5Point9serializeEPh>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	f7fb fe9d 	bl	8001b9c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8005e62:	4602      	mov	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
      return offset;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
    }
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f103 0008 	add.w	r0, r3, #8
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	f7ff fd00 	bl	8005894 <_ZN13geometry_msgs5Point11deserializeEPh>
 8005e94:	4602      	mov	r2, r0
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fc f860 	bl	8001f6e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
    }
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	4b03      	ldr	r3, [pc, #12]	; (8005ed8 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	0800cbe0 	.word	0x0800cbe0

08005edc <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	0800cbf4 	.word	0x0800cbf4

08005ef8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fa fafa 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8005f08:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3308      	adds	r3, #8
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff ff6c 	bl	8005df0 <_ZN13geometry_msgs4PoseC1Ev>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8005f1e:	2323      	movs	r3, #35	; 0x23
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	db08      	blt.n	8005f36 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3e>
 8005f24:	f04f 0000 	mov.w	r0, #0
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	e9c2 0100 	strd	r0, r1, [r2]
 8005f30:	3208      	adds	r2, #8
 8005f32:	3b01      	subs	r3, #1
 8005f34:	e7f4      	b.n	8005f20 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	0800d560 	.word	0x0800d560

08005f44 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f103 0008 	add.w	r0, r3, #8
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f7ff ff62 	bl	8005e28 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8005f64:	4602      	mov	r2, r0
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4413      	add	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b23      	cmp	r3, #35	; 0x23
 8005f74:	d87e      	bhi.n	8006074 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	330b      	adds	r3, #11
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f84:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8005f88:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	440a      	add	r2, r1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8005f96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	f04f 0400 	mov.w	r4, #0
 8005fa2:	0a0b      	lsrs	r3, r1, #8
 8005fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fa8:	0a14      	lsrs	r4, r2, #8
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	3201      	adds	r2, #1
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8005fb6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	f04f 0400 	mov.w	r4, #0
 8005fc2:	0c0b      	lsrs	r3, r1, #16
 8005fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fc8:	0c14      	lsrs	r4, r2, #16
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	3202      	adds	r2, #2
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8005fd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	f04f 0400 	mov.w	r4, #0
 8005fe2:	0e0b      	lsrs	r3, r1, #24
 8005fe4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fe8:	0e14      	lsrs	r4, r2, #24
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	3203      	adds	r2, #3
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8005ff6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	f04f 0400 	mov.w	r4, #0
 8006002:	0013      	movs	r3, r2
 8006004:	2400      	movs	r4, #0
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	3204      	adds	r2, #4
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	440a      	add	r2, r1
 800600e:	b2db      	uxtb	r3, r3
 8006010:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8006012:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	f04f 0400 	mov.w	r4, #0
 800601e:	0a13      	lsrs	r3, r2, #8
 8006020:	2400      	movs	r4, #0
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	3205      	adds	r2, #5
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	440a      	add	r2, r1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 800602e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	f04f 0400 	mov.w	r4, #0
 800603a:	0c13      	lsrs	r3, r2, #16
 800603c:	2400      	movs	r4, #0
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	3206      	adds	r2, #6
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	440a      	add	r2, r1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 800604a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	f04f 0400 	mov.w	r4, #0
 8006056:	0e13      	lsrs	r3, r2, #24
 8006058:	2400      	movs	r4, #0
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	3207      	adds	r2, #7
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	440a      	add	r2, r1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	3308      	adds	r3, #8
 800606a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	3301      	adds	r3, #1
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	e77d      	b.n	8005f70 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 8006074:	697b      	ldr	r3, [r7, #20]
    }
 8006076:	4618      	mov	r0, r3
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd90      	pop	{r4, r7, pc}

0800607e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800607e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
      offset += this->pose.deserialize(inbuffer + offset);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f103 0008 	add.w	r0, r3, #8
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	4413      	add	r3, r2
 800609a:	4619      	mov	r1, r3
 800609c:	f7ff feea 	bl	8005e74 <_ZN13geometry_msgs4Pose11deserializeEPh>
 80060a0:	4602      	mov	r2, r0
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b23      	cmp	r3, #35	; 0x23
 80060b0:	f200 80cf 	bhi.w	8006252 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	f04f 0400 	mov.w	r4, #0
 80060bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80060c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	6838      	ldr	r0, [r7, #0]
 80060c8:	4403      	add	r3, r0
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	fa5f f883 	uxtb.w	r8, r3
 80060d0:	f04f 0900 	mov.w	r9, #0
 80060d4:	ea48 0301 	orr.w	r3, r8, r1
 80060d8:	ea49 0402 	orr.w	r4, r9, r2
 80060dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80060e0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	3301      	adds	r3, #1
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	4413      	add	r3, r2
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2d9      	uxtb	r1, r3
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0b00 	mov.w	fp, #0
 80060f8:	f04f 0c00 	mov.w	ip, #0
 80060fc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006100:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006104:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006108:	ea4b 0308 	orr.w	r3, fp, r8
 800610c:	ea4c 0409 	orr.w	r4, ip, r9
 8006110:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006114:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3302      	adds	r3, #2
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	b2d9      	uxtb	r1, r3
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0b00 	mov.w	fp, #0
 800612c:	f04f 0c00 	mov.w	ip, #0
 8006130:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8006134:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8006138:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 800613c:	ea4b 0308 	orr.w	r3, fp, r8
 8006140:	ea4c 0409 	orr.w	r4, ip, r9
 8006144:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006148:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	3303      	adds	r3, #3
 8006150:	6838      	ldr	r0, [r7, #0]
 8006152:	4403      	add	r3, r0
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f04f 0400 	mov.w	r4, #0
 800615c:	0a1e      	lsrs	r6, r3, #8
 800615e:	061d      	lsls	r5, r3, #24
 8006160:	ea41 0305 	orr.w	r3, r1, r5
 8006164:	ea42 0406 	orr.w	r4, r2, r6
 8006168:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800616c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3304      	adds	r3, #4
 8006174:	6838      	ldr	r0, [r7, #0]
 8006176:	4403      	add	r3, r0
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	fa5f f883 	uxtb.w	r8, r3
 800617e:	f04f 0900 	mov.w	r9, #0
 8006182:	f04f 0b00 	mov.w	fp, #0
 8006186:	f04f 0c00 	mov.w	ip, #0
 800618a:	46c4      	mov	ip, r8
 800618c:	f04f 0b00 	mov.w	fp, #0
 8006190:	ea4b 0301 	orr.w	r3, fp, r1
 8006194:	ea4c 0402 	orr.w	r4, ip, r2
 8006198:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800619c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3305      	adds	r3, #5
 80061a4:	6838      	ldr	r0, [r7, #0]
 80061a6:	4403      	add	r3, r0
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	fa5f f883 	uxtb.w	r8, r3
 80061ae:	f04f 0900 	mov.w	r9, #0
 80061b2:	f04f 0b00 	mov.w	fp, #0
 80061b6:	f04f 0c00 	mov.w	ip, #0
 80061ba:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 80061be:	f04f 0b00 	mov.w	fp, #0
 80061c2:	ea4b 0301 	orr.w	r3, fp, r1
 80061c6:	ea4c 0402 	orr.w	r4, ip, r2
 80061ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80061ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	3306      	adds	r3, #6
 80061d6:	6838      	ldr	r0, [r7, #0]
 80061d8:	4403      	add	r3, r0
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	fa5f f883 	uxtb.w	r8, r3
 80061e0:	f04f 0900 	mov.w	r9, #0
 80061e4:	f04f 0b00 	mov.w	fp, #0
 80061e8:	f04f 0c00 	mov.w	ip, #0
 80061ec:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 80061f0:	f04f 0b00 	mov.w	fp, #0
 80061f4:	ea4b 0301 	orr.w	r3, fp, r1
 80061f8:	ea4c 0402 	orr.w	r4, ip, r2
 80061fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006200:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	3307      	adds	r3, #7
 8006208:	6838      	ldr	r0, [r7, #0]
 800620a:	4403      	add	r3, r0
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	fa5f f883 	uxtb.w	r8, r3
 8006212:	f04f 0900 	mov.w	r9, #0
 8006216:	f04f 0b00 	mov.w	fp, #0
 800621a:	f04f 0c00 	mov.w	ip, #0
 800621e:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 8006222:	f04f 0b00 	mov.w	fp, #0
 8006226:	ea4b 0301 	orr.w	r3, fp, r1
 800622a:	ea4c 0402 	orr.w	r4, ip, r2
 800622e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 8006232:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	320b      	adds	r2, #11
 800623c:	00d2      	lsls	r2, r2, #3
 800623e:	440a      	add	r2, r1
 8006240:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	3308      	adds	r3, #8
 8006248:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	e72c      	b.n	80060ac <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 8006252:	697b      	ldr	r3, [r7, #20]
    }
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08006260 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	0800cc18 	.word	0x0800cc18

0800627c <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	4b03      	ldr	r3, [pc, #12]	; (8006294 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	0800cc3c 	.word	0x0800cc3c

08006298 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fa f92a 	bl	80004fc <_ZN3ros3MsgC1Ev>
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3308      	adds	r3, #8
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fc f9e0 	bl	8002678 <_ZN13geometry_msgs7Vector3C1Ev>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3328      	adds	r3, #40	; 0x28
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fc f9db 	bl	8002678 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	0800d548 	.word	0x0800d548

080062d0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 0008 	add.w	r0, r3, #8
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	4413      	add	r3, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7fc f9ec 	bl	80026c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	4413      	add	r3, r2
 8006304:	4619      	mov	r1, r3
 8006306:	f7fc f9df 	bl	80026c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800630a:	4602      	mov	r2, r0
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
      return offset;
 8006312:	68fb      	ldr	r3, [r7, #12]
    }
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f103 0008 	add.w	r0, r3, #8
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	4413      	add	r3, r2
 8006336:	4619      	mov	r1, r3
 8006338:	f7fc fb38 	bl	80029ac <_ZN13geometry_msgs7Vector311deserializeEPh>
 800633c:	4602      	mov	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	4413      	add	r3, r2
 8006350:	4619      	mov	r1, r3
 8006352:	f7fc fb2b 	bl	80029ac <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
     return offset;
 800635e:	68fb      	ldr	r3, [r7, #12]
    }
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	4b03      	ldr	r3, [pc, #12]	; (8006380 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	0800cc78 	.word	0x0800cc78

08006384 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	4b03      	ldr	r3, [pc, #12]	; (800639c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	0800cc8c 	.word	0x0800cc8c

080063a0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa f8a6 	bl	80004fc <_ZN3ros3MsgC1Ev>
 80063b0:	4a0d      	ldr	r2, [pc, #52]	; (80063e8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3308      	adds	r3, #8
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff ff6c 	bl	8006298 <_ZN13geometry_msgs5TwistC1Ev>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80063c6:	2323      	movs	r3, #35	; 0x23
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	db08      	blt.n	80063de <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3e>
 80063cc:	f04f 0000 	mov.w	r0, #0
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	e9c2 0100 	strd	r0, r1, [r2]
 80063d8:	3208      	adds	r2, #8
 80063da:	3b01      	subs	r3, #1
 80063dc:	e7f4      	b.n	80063c8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	0800d530 	.word	0x0800d530

080063ec <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80063ec:	b590      	push	{r4, r7, lr}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f103 0008 	add.w	r0, r3, #8
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	4413      	add	r3, r2
 8006406:	4619      	mov	r1, r3
 8006408:	f7ff ff62 	bl	80062d0 <_ZNK13geometry_msgs5Twist9serializeEPh>
 800640c:	4602      	mov	r2, r0
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	4413      	add	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b23      	cmp	r3, #35	; 0x23
 800641c:	d87e      	bhi.n	800651c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	330a      	adds	r3, #10
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800642c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8006430:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	440a      	add	r2, r1
 800643a:	b2db      	uxtb	r3, r3
 800643c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 800643e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	f04f 0400 	mov.w	r4, #0
 800644a:	0a0b      	lsrs	r3, r1, #8
 800644c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006450:	0a14      	lsrs	r4, r2, #8
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	3201      	adds	r2, #1
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	440a      	add	r2, r1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 800645e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	f04f 0400 	mov.w	r4, #0
 800646a:	0c0b      	lsrs	r3, r1, #16
 800646c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006470:	0c14      	lsrs	r4, r2, #16
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	3202      	adds	r2, #2
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	440a      	add	r2, r1
 800647a:	b2db      	uxtb	r3, r3
 800647c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800647e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	f04f 0400 	mov.w	r4, #0
 800648a:	0e0b      	lsrs	r3, r1, #24
 800648c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006490:	0e14      	lsrs	r4, r2, #24
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	3203      	adds	r2, #3
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	440a      	add	r2, r1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 800649e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	f04f 0400 	mov.w	r4, #0
 80064aa:	0013      	movs	r3, r2
 80064ac:	2400      	movs	r4, #0
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	3204      	adds	r2, #4
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	440a      	add	r2, r1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80064ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	f04f 0400 	mov.w	r4, #0
 80064c6:	0a13      	lsrs	r3, r2, #8
 80064c8:	2400      	movs	r4, #0
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	3205      	adds	r2, #5
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	440a      	add	r2, r1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80064d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	f04f 0400 	mov.w	r4, #0
 80064e2:	0c13      	lsrs	r3, r2, #16
 80064e4:	2400      	movs	r4, #0
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	3206      	adds	r2, #6
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	440a      	add	r2, r1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80064f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	f04f 0400 	mov.w	r4, #0
 80064fe:	0e13      	lsrs	r3, r2, #24
 8006500:	2400      	movs	r4, #0
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	3207      	adds	r2, #7
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	440a      	add	r2, r1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	3308      	adds	r3, #8
 8006512:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	3301      	adds	r3, #1
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	e77d      	b.n	8006418 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 800651c:	697b      	ldr	r3, [r7, #20]
    }
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	bd90      	pop	{r4, r7, pc}

08006526 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006526:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
      offset += this->twist.deserialize(inbuffer + offset);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f103 0008 	add.w	r0, r3, #8
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	4413      	add	r3, r2
 8006542:	4619      	mov	r1, r3
 8006544:	f7ff feea 	bl	800631c <_ZN13geometry_msgs5Twist11deserializeEPh>
 8006548:	4602      	mov	r2, r0
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	4413      	add	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b23      	cmp	r3, #35	; 0x23
 8006558:	f200 80cf 	bhi.w	80066fa <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	f04f 0400 	mov.w	r4, #0
 8006564:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006568:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	6838      	ldr	r0, [r7, #0]
 8006570:	4403      	add	r3, r0
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	fa5f f883 	uxtb.w	r8, r3
 8006578:	f04f 0900 	mov.w	r9, #0
 800657c:	ea48 0301 	orr.w	r3, r8, r1
 8006580:	ea49 0402 	orr.w	r4, r9, r2
 8006584:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006588:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	3301      	adds	r3, #1
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	4413      	add	r3, r2
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	b2d9      	uxtb	r1, r3
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0b00 	mov.w	fp, #0
 80065a0:	f04f 0c00 	mov.w	ip, #0
 80065a4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80065a8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80065ac:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80065b0:	ea4b 0308 	orr.w	r3, fp, r8
 80065b4:	ea4c 0409 	orr.w	r4, ip, r9
 80065b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80065bc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3302      	adds	r3, #2
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	4413      	add	r3, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b2d9      	uxtb	r1, r3
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0b00 	mov.w	fp, #0
 80065d4:	f04f 0c00 	mov.w	ip, #0
 80065d8:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80065dc:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80065e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80065e4:	ea4b 0308 	orr.w	r3, fp, r8
 80065e8:	ea4c 0409 	orr.w	r4, ip, r9
 80065ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80065f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3303      	adds	r3, #3
 80065f8:	6838      	ldr	r0, [r7, #0]
 80065fa:	4403      	add	r3, r0
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f04f 0400 	mov.w	r4, #0
 8006604:	0a1e      	lsrs	r6, r3, #8
 8006606:	061d      	lsls	r5, r3, #24
 8006608:	ea41 0305 	orr.w	r3, r1, r5
 800660c:	ea42 0406 	orr.w	r4, r2, r6
 8006610:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006614:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3304      	adds	r3, #4
 800661c:	6838      	ldr	r0, [r7, #0]
 800661e:	4403      	add	r3, r0
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	fa5f f883 	uxtb.w	r8, r3
 8006626:	f04f 0900 	mov.w	r9, #0
 800662a:	f04f 0b00 	mov.w	fp, #0
 800662e:	f04f 0c00 	mov.w	ip, #0
 8006632:	46c4      	mov	ip, r8
 8006634:	f04f 0b00 	mov.w	fp, #0
 8006638:	ea4b 0301 	orr.w	r3, fp, r1
 800663c:	ea4c 0402 	orr.w	r4, ip, r2
 8006640:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006644:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	3305      	adds	r3, #5
 800664c:	6838      	ldr	r0, [r7, #0]
 800664e:	4403      	add	r3, r0
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	fa5f f883 	uxtb.w	r8, r3
 8006656:	f04f 0900 	mov.w	r9, #0
 800665a:	f04f 0b00 	mov.w	fp, #0
 800665e:	f04f 0c00 	mov.w	ip, #0
 8006662:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 8006666:	f04f 0b00 	mov.w	fp, #0
 800666a:	ea4b 0301 	orr.w	r3, fp, r1
 800666e:	ea4c 0402 	orr.w	r4, ip, r2
 8006672:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006676:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	3306      	adds	r3, #6
 800667e:	6838      	ldr	r0, [r7, #0]
 8006680:	4403      	add	r3, r0
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	fa5f f883 	uxtb.w	r8, r3
 8006688:	f04f 0900 	mov.w	r9, #0
 800668c:	f04f 0b00 	mov.w	fp, #0
 8006690:	f04f 0c00 	mov.w	ip, #0
 8006694:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 8006698:	f04f 0b00 	mov.w	fp, #0
 800669c:	ea4b 0301 	orr.w	r3, fp, r1
 80066a0:	ea4c 0402 	orr.w	r4, ip, r2
 80066a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80066a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3307      	adds	r3, #7
 80066b0:	6838      	ldr	r0, [r7, #0]
 80066b2:	4403      	add	r3, r0
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	fa5f f883 	uxtb.w	r8, r3
 80066ba:	f04f 0900 	mov.w	r9, #0
 80066be:	f04f 0b00 	mov.w	fp, #0
 80066c2:	f04f 0c00 	mov.w	ip, #0
 80066c6:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 80066ca:	f04f 0b00 	mov.w	fp, #0
 80066ce:	ea4b 0301 	orr.w	r3, fp, r1
 80066d2:	ea4c 0402 	orr.w	r4, ip, r2
 80066d6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 80066da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	320a      	adds	r2, #10
 80066e4:	00d2      	lsls	r2, r2, #3
 80066e6:	440a      	add	r2, r1
 80066e8:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	3308      	adds	r3, #8
 80066f0:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3301      	adds	r3, #1
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	e72c      	b.n	8006554 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 80066fa:	697b      	ldr	r3, [r7, #20]
    }
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08006708 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	0800ccb0 	.word	0x0800ccb0

08006724 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	4b03      	ldr	r3, [pc, #12]	; (800673c <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	0800ccd4 	.word	0x0800ccd4

08006740 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4618      	mov	r0, r3
 800674c:	f7f9 fed6 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8006750:	4a0d      	ldr	r2, [pc, #52]	; (8006788 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7fb f85c 	bl	8001818 <_ZN8std_msgs6HeaderC1Ev>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a0a      	ldr	r2, [pc, #40]	; (800678c <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8006764:	619a      	str	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3320      	adds	r3, #32
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fbc4 	bl	8005ef8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff fe12 	bl	80063a0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	0800d518 	.word	0x0800d518
 800678c:	0800ca94 	.word	0x0800ca94

08006790 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	1d18      	adds	r0, r3, #4
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	4413      	add	r3, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	f7fb f855 	bl	8001858 <_ZNK8std_msgs6Header9serializeEPh>
 80067ae:	4602      	mov	r2, r0
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7f9 fd04 	bl	80001c8 <strlen>
 80067c0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fd fc56 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3304      	adds	r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	18d0      	adds	r0, r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4619      	mov	r1, r3
 80067e4:	f005 fc46 	bl	800c074 <memcpy>
      offset += length_child_frame_id;
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4413      	add	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f103 0020 	add.w	r0, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	4413      	add	r3, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	f7ff fba1 	bl	8005f44 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8006802:	4602      	mov	r2, r0
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	4413      	add	r3, r2
 8006816:	4619      	mov	r1, r3
 8006818:	f7ff fde8 	bl	80063ec <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 800681c:	4602      	mov	r2, r0
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
      return offset;
 8006824:	68fb      	ldr	r3, [r7, #12]
    }
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	1d18      	adds	r0, r3, #4
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	4413      	add	r3, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f7fb f89e 	bl	8001988 <_ZN8std_msgs6Header11deserializeEPh>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	441a      	add	r2, r3
 800685a:	f107 030c 	add.w	r3, r7, #12
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd fc29 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	3304      	adds	r3, #4
 800686a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	429a      	cmp	r2, r3
 800687a:	d20c      	bcs.n	8006896 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	441a      	add	r2, r3
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	3b01      	subs	r3, #1
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	440b      	add	r3, r1
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	3301      	adds	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e7ec      	b.n	8006870 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	3b01      	subs	r3, #1
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	441a      	add	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f103 0020 	add.w	r0, r3, #32
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	4413      	add	r3, r2
 80068c6:	4619      	mov	r1, r3
 80068c8:	f7ff fbd9 	bl	800607e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	4413      	add	r3, r2
 80068e0:	4619      	mov	r1, r3
 80068e2:	f7ff fe20 	bl	8006526 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80068e6:	4602      	mov	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
     return offset;
 80068ee:	693b      	ldr	r3, [r7, #16]
    }
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	4b03      	ldr	r3, [pc, #12]	; (8006910 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	0800ccf8 	.word	0x0800ccf8

08006914 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	4b03      	ldr	r3, [pc, #12]	; (800692c <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	0800cd0c 	.word	0x0800cd0c

08006930 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), name(NULL),
      position_length(0), position(NULL),
      velocity_length(0), velocity(NULL),
      effort_length(0), effort(NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4618      	mov	r0, r3
 800693c:	f7f9 fdde 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8006940:	4a12      	ldr	r2, [pc, #72]	; (800698c <_ZN11sensor_msgs10JointStateC1Ev+0x5c>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f7fa ff64 	bl	8001818 <_ZN8std_msgs6HeaderC1Ev>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	619a      	str	r2, [r3, #24]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	621a      	str	r2, [r3, #32]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	625a      	str	r2, [r3, #36]	; 0x24
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	631a      	str	r2, [r3, #48]	; 0x30
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	635a      	str	r2, [r3, #52]	; 0x34
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	641a      	str	r2, [r3, #64]	; 0x40
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	645a      	str	r2, [r3, #68]	; 0x44
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	0800d500 	.word	0x0800d500

08006990 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b08f      	sub	sp, #60	; 0x3c
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.serialize(outbuffer + offset);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1d18      	adds	r0, r3, #4
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	4413      	add	r3, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	f7fa ff55 	bl	8001858 <_ZNK8std_msgs6Header9serializeEPh>
 80069ae:	4602      	mov	r2, r0
 80069b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b2:	4413      	add	r3, r2
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6999      	ldr	r1, [r3, #24]
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	4413      	add	r3, r2
 80069c0:	b2ca      	uxtb	r2, r1
 80069c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	0a19      	lsrs	r1, r3, #8
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	3301      	adds	r3, #1
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	b2ca      	uxtb	r2, r1
 80069d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	0c19      	lsrs	r1, r3, #16
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	3302      	adds	r3, #2
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	4413      	add	r3, r2
 80069e4:	b2ca      	uxtb	r2, r1
 80069e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	0e19      	lsrs	r1, r3, #24
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	3303      	adds	r3, #3
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	b2ca      	uxtb	r2, r1
 80069f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 80069fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fc:	3304      	adds	r3, #4
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8006a00:	2300      	movs	r3, #0
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d228      	bcs.n	8006a60 <_ZNK11sensor_msgs10JointState9serializeEPh+0xd0>
      uint32_t length_namei = strlen(this->name[i]);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1a      	ldr	r2, [r3, #32]
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7f9 fbd4 	bl	80001c8 <strlen>
 8006a20:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 8006a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	4413      	add	r3, r2
 8006a28:	6a39      	ldr	r1, [r7, #32]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fd fb26 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8006a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a32:	3304      	adds	r3, #4
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	18d0      	adds	r0, r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f005 fb12 	bl	800c074 <memcpy>
      offset += length_namei;
 8006a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	4413      	add	r3, r2
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5e:	e7d1      	b.n	8006a04 <_ZNK11sensor_msgs10JointState9serializeEPh+0x74>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4413      	add	r3, r2
 8006a6a:	b2ca      	uxtb	r2, r1
 8006a6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	0a19      	lsrs	r1, r3, #8
 8006a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a76:	3301      	adds	r3, #1
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	b2ca      	uxtb	r2, r1
 8006a7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	0c19      	lsrs	r1, r3, #16
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	3302      	adds	r3, #2
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	b2ca      	uxtb	r2, r1
 8006a90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	0e19      	lsrs	r1, r3, #24
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	3303      	adds	r3, #3
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	b2ca      	uxtb	r2, r1
 8006aa2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8006aaa:	2300      	movs	r3, #0
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d27e      	bcs.n	8006bb6 <_ZNK11sensor_msgs10JointState9serializeEPh+0x226>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ac6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 8006aca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 8006ad8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	f04f 0400 	mov.w	r4, #0
 8006ae4:	0a0b      	lsrs	r3, r1, #8
 8006ae6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006aea:	0a14      	lsrs	r4, r2, #8
 8006aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aee:	3201      	adds	r2, #1
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	440a      	add	r2, r1
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 8006af8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	f04f 0400 	mov.w	r4, #0
 8006b04:	0c0b      	lsrs	r3, r1, #16
 8006b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b0a:	0c14      	lsrs	r4, r2, #16
 8006b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0e:	3202      	adds	r2, #2
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	440a      	add	r2, r1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 8006b18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	f04f 0400 	mov.w	r4, #0
 8006b24:	0e0b      	lsrs	r3, r1, #24
 8006b26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006b2a:	0e14      	lsrs	r4, r2, #24
 8006b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b2e:	3203      	adds	r2, #3
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	440a      	add	r2, r1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 8006b38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	f04f 0400 	mov.w	r4, #0
 8006b44:	0013      	movs	r3, r2
 8006b46:	2400      	movs	r4, #0
 8006b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b4a:	3204      	adds	r2, #4
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	440a      	add	r2, r1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 8006b54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	f04f 0400 	mov.w	r4, #0
 8006b60:	0a13      	lsrs	r3, r2, #8
 8006b62:	2400      	movs	r4, #0
 8006b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b66:	3205      	adds	r2, #5
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 8006b70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	f04f 0400 	mov.w	r4, #0
 8006b7c:	0c13      	lsrs	r3, r2, #16
 8006b7e:	2400      	movs	r4, #0
 8006b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b82:	3206      	adds	r2, #6
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	440a      	add	r2, r1
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 8006b8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	f04f 0400 	mov.w	r4, #0
 8006b98:	0e13      	lsrs	r3, r2, #24
 8006b9a:	2400      	movs	r4, #0
 8006b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b9e:	3207      	adds	r2, #7
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->position[i]);
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	3308      	adds	r3, #8
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb4:	e77b      	b.n	8006aae <_ZNK11sensor_msgs10JointState9serializeEPh+0x11e>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	b2ca      	uxtb	r2, r1
 8006bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc8:	0a19      	lsrs	r1, r3, #8
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	3301      	adds	r3, #1
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	b2ca      	uxtb	r2, r1
 8006bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	0c19      	lsrs	r1, r3, #16
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	3302      	adds	r3, #2
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	4413      	add	r3, r2
 8006be4:	b2ca      	uxtb	r2, r1
 8006be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	0e19      	lsrs	r1, r3, #24
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	b2ca      	uxtb	r2, r1
 8006bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8006c00:	2300      	movs	r3, #0
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d27e      	bcs.n	8006d0c <_ZNK11sensor_msgs10JointState9serializeEPh+0x37c>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	4413      	add	r3, r2
 8006c18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c1c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8006c20:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	440a      	add	r2, r1
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8006c2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	f04f 0400 	mov.w	r4, #0
 8006c3a:	0a0b      	lsrs	r3, r1, #8
 8006c3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006c40:	0a14      	lsrs	r4, r2, #8
 8006c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c44:	3201      	adds	r2, #1
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	440a      	add	r2, r1
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8006c4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	f04f 0400 	mov.w	r4, #0
 8006c5a:	0c0b      	lsrs	r3, r1, #16
 8006c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c60:	0c14      	lsrs	r4, r2, #16
 8006c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c64:	3202      	adds	r2, #2
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	440a      	add	r2, r1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8006c6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	f04f 0400 	mov.w	r4, #0
 8006c7a:	0e0b      	lsrs	r3, r1, #24
 8006c7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006c80:	0e14      	lsrs	r4, r2, #24
 8006c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c84:	3203      	adds	r2, #3
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	440a      	add	r2, r1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 8006c8e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	f04f 0400 	mov.w	r4, #0
 8006c9a:	0013      	movs	r3, r2
 8006c9c:	2400      	movs	r4, #0
 8006c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca0:	3204      	adds	r2, #4
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	440a      	add	r2, r1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 8006caa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	f04f 0400 	mov.w	r4, #0
 8006cb6:	0a13      	lsrs	r3, r2, #8
 8006cb8:	2400      	movs	r4, #0
 8006cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cbc:	3205      	adds	r2, #5
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 8006cc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	f04f 0400 	mov.w	r4, #0
 8006cd2:	0c13      	lsrs	r3, r2, #16
 8006cd4:	2400      	movs	r4, #0
 8006cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd8:	3206      	adds	r2, #6
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	440a      	add	r2, r1
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 8006ce2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	f04f 0400 	mov.w	r4, #0
 8006cee:	0e13      	lsrs	r3, r2, #24
 8006cf0:	2400      	movs	r4, #0
 8006cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf4:	3207      	adds	r2, #7
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->velocity[i]);
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d00:	3308      	adds	r3, #8
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	3301      	adds	r3, #1
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0a:	e77b      	b.n	8006c04 <_ZNK11sensor_msgs10JointState9serializeEPh+0x274>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	b2ca      	uxtb	r2, r1
 8006d18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	0a19      	lsrs	r1, r3, #8
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	3301      	adds	r3, #1
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	4413      	add	r3, r2
 8006d28:	b2ca      	uxtb	r2, r1
 8006d2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d30:	0c19      	lsrs	r1, r3, #16
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	3302      	adds	r3, #2
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	b2ca      	uxtb	r2, r1
 8006d3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	0e19      	lsrs	r1, r3, #24
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	3303      	adds	r3, #3
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	b2ca      	uxtb	r2, r1
 8006d4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	3304      	adds	r3, #4
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8006d56:	2300      	movs	r3, #0
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d27e      	bcs.n	8006e62 <_ZNK11sensor_msgs10JointState9serializeEPh+0x4d2>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d72:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 8006d76:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	440a      	add	r2, r1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 8006d84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	f04f 0400 	mov.w	r4, #0
 8006d90:	0a0b      	lsrs	r3, r1, #8
 8006d92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d96:	0a14      	lsrs	r4, r2, #8
 8006d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	440a      	add	r2, r1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 8006da4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	f04f 0400 	mov.w	r4, #0
 8006db0:	0c0b      	lsrs	r3, r1, #16
 8006db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db6:	0c14      	lsrs	r4, r2, #16
 8006db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dba:	3202      	adds	r2, #2
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 8006dc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	f04f 0400 	mov.w	r4, #0
 8006dd0:	0e0b      	lsrs	r3, r1, #24
 8006dd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006dd6:	0e14      	lsrs	r4, r2, #24
 8006dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dda:	3203      	adds	r2, #3
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	440a      	add	r2, r1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 8006de4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	f04f 0400 	mov.w	r4, #0
 8006df0:	0013      	movs	r3, r2
 8006df2:	2400      	movs	r4, #0
 8006df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df6:	3204      	adds	r2, #4
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8006e00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	f04f 0400 	mov.w	r4, #0
 8006e0c:	0a13      	lsrs	r3, r2, #8
 8006e0e:	2400      	movs	r4, #0
 8006e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e12:	3205      	adds	r2, #5
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	440a      	add	r2, r1
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 8006e1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	f04f 0400 	mov.w	r4, #0
 8006e28:	0c13      	lsrs	r3, r2, #16
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2e:	3206      	adds	r2, #6
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	440a      	add	r2, r1
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 8006e38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	f04f 0400 	mov.w	r4, #0
 8006e44:	0e13      	lsrs	r3, r2, #24
 8006e46:	2400      	movs	r4, #0
 8006e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e4a:	3207      	adds	r2, #7
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	440a      	add	r2, r1
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->effort[i]);
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	3308      	adds	r3, #8
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e60:	e77b      	b.n	8006d5a <_ZNK11sensor_msgs10JointState9serializeEPh+0x3ca>
      }
      return offset;
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006e64:	4618      	mov	r0, r3
 8006e66:	373c      	adds	r7, #60	; 0x3c
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd90      	pop	{r4, r7, pc}

08006e6c <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	b099      	sub	sp, #100	; 0x64
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6178      	str	r0, [r7, #20]
 8006e76:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
      offset += this->header.deserialize(inbuffer + offset);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	1d18      	adds	r0, r3, #4
 8006e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4413      	add	r3, r2
 8006e86:	4619      	mov	r1, r3
 8006e88:	f7fa fd7e 	bl	8001988 <_ZN8std_msgs6Header11deserializeEPh>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e90:	4413      	add	r3, r2
 8006e92:	65fb      	str	r3, [r7, #92]	; 0x5c
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4413      	add	r3, r2
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eac:	4313      	orrs	r3, r2
 8006eae:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb2:	3302      	adds	r3, #2
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec4:	3303      	adds	r3, #3
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4413      	add	r3, r2
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	061b      	lsls	r3, r3, #24
 8006ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	647b      	str	r3, [r7, #68]	; 0x44
      offset += sizeof(this->name_length);
 8006ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(name_lengthT > name_length)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d90a      	bls.n	8006efa <_ZN11sensor_msgs10JointState11deserializeEPh+0x8e>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	6a1a      	ldr	r2, [r3, #32]
 8006ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f005 f97c 	bl	800c1ec <realloc>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006efe:	619a      	str	r2, [r3, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8006f00:	2300      	movs	r3, #0
 8006f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d23f      	bcs.n	8006f8e <_ZN11sensor_msgs10JointState11deserializeEPh+0x122>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 8006f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	441a      	add	r2, r3
 8006f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fd f8cc 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f22:	3304      	adds	r3, #4
 8006f24:	65fb      	str	r3, [r7, #92]	; 0x5c
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8006f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f28:	657b      	str	r3, [r7, #84]	; 0x54
 8006f2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	4413      	add	r3, r2
 8006f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d20c      	bcs.n	8006f50 <_ZN11sensor_msgs10JointState11deserializeEPh+0xe4>
          inbuffer[k-1]=inbuffer[k];
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3a:	441a      	add	r2, r3
 8006f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6939      	ldr	r1, [r7, #16]
 8006f42:	440b      	add	r3, r1
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8006f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8006f4e:	e7ec      	b.n	8006f2a <_ZN11sensor_msgs10JointState11deserializeEPh+0xbe>
      }
      inbuffer[offset+length_st_name-1]=0;
 8006f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f54:	4413      	add	r3, r2
 8006f56:	3b01      	subs	r3, #1
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8006f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f62:	3b01      	subs	r3, #1
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	441a      	add	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8006f6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	4413      	add	r3, r2
 8006f72:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	6a1a      	ldr	r2, [r3, #32]
 8006f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	321c      	adds	r2, #28
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < name_length; i++){
 8006f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f88:	3301      	adds	r3, #1
 8006f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f8c:	e7ba      	b.n	8006f04 <_ZN11sensor_msgs10JointState11deserializeEPh+0x98>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fac:	3302      	adds	r3, #2
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	061b      	lsls	r3, r3, #24
 8006fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	643b      	str	r3, [r7, #64]	; 0x40
      offset += sizeof(this->position_length);
 8006fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(position_lengthT > position_length)
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d90a      	bls.n	8006ff4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x188>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f005 f8ff 	bl	800c1ec <realloc>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
      position_length = position_lengthT;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007004:	429a      	cmp	r2, r3
 8007006:	f080 80e4 	bcs.w	80071d2 <_ZN11sensor_msgs10JointState11deserializeEPh+0x366>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	f04f 0400 	mov.w	r4, #0
 8007012:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007016:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800701a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800701c:	6938      	ldr	r0, [r7, #16]
 800701e:	4403      	add	r3, r0
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2dd      	uxtb	r5, r3
 8007024:	f04f 0600 	mov.w	r6, #0
 8007028:	ea45 0301 	orr.w	r3, r5, r1
 800702c:	ea46 0402 	orr.w	r4, r6, r2
 8007030:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007034:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8007038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703a:	3301      	adds	r3, #1
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b2d9      	uxtb	r1, r3
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	f04f 0400 	mov.w	r4, #0
 8007050:	0214      	lsls	r4, r2, #8
 8007052:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007056:	020b      	lsls	r3, r1, #8
 8007058:	ea45 0503 	orr.w	r5, r5, r3
 800705c:	ea46 0604 	orr.w	r6, r6, r4
 8007060:	462b      	mov	r3, r5
 8007062:	4634      	mov	r4, r6
 8007064:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007068:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800706c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800706e:	3302      	adds	r3, #2
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	b2d9      	uxtb	r1, r3
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	f04f 0400 	mov.w	r4, #0
 8007084:	0414      	lsls	r4, r2, #16
 8007086:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800708a:	040b      	lsls	r3, r1, #16
 800708c:	ea45 0503 	orr.w	r5, r5, r3
 8007090:	ea46 0604 	orr.w	r6, r6, r4
 8007094:	462b      	mov	r3, r5
 8007096:	4634      	mov	r4, r6
 8007098:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800709c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80070a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a2:	3303      	adds	r3, #3
 80070a4:	6938      	ldr	r0, [r7, #16]
 80070a6:	4403      	add	r3, r0
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f04f 0400 	mov.w	r4, #0
 80070b0:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80070b4:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80070b8:	ea41 030a 	orr.w	r3, r1, sl
 80070bc:	ea42 040b 	orr.w	r4, r2, fp
 80070c0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80070c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80070c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ca:	3304      	adds	r3, #4
 80070cc:	6938      	ldr	r0, [r7, #16]
 80070ce:	4403      	add	r3, r0
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	461c      	mov	r4, r3
 80070d4:	b2e4      	uxtb	r4, r4
 80070d6:	f04f 0500 	mov.w	r5, #0
 80070da:	f04f 0800 	mov.w	r8, #0
 80070de:	f04f 0900 	mov.w	r9, #0
 80070e2:	4623      	mov	r3, r4
 80070e4:	001b      	movs	r3, r3
 80070e6:	4699      	mov	r9, r3
 80070e8:	2300      	movs	r3, #0
 80070ea:	4698      	mov	r8, r3
 80070ec:	4643      	mov	r3, r8
 80070ee:	464c      	mov	r4, r9
 80070f0:	ea43 0301 	orr.w	r3, r3, r1
 80070f4:	ea44 0402 	orr.w	r4, r4, r2
 80070f8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80070fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007102:	3305      	adds	r3, #5
 8007104:	6938      	ldr	r0, [r7, #16]
 8007106:	4403      	add	r3, r0
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	461c      	mov	r4, r3
 800710c:	b2e4      	uxtb	r4, r4
 800710e:	f04f 0500 	mov.w	r5, #0
 8007112:	f04f 0800 	mov.w	r8, #0
 8007116:	f04f 0900 	mov.w	r9, #0
 800711a:	4623      	mov	r3, r4
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	4699      	mov	r9, r3
 8007120:	2300      	movs	r3, #0
 8007122:	4698      	mov	r8, r3
 8007124:	4643      	mov	r3, r8
 8007126:	464c      	mov	r4, r9
 8007128:	ea43 0301 	orr.w	r3, r3, r1
 800712c:	ea44 0402 	orr.w	r4, r4, r2
 8007130:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007134:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800713a:	3306      	adds	r3, #6
 800713c:	6938      	ldr	r0, [r7, #16]
 800713e:	4403      	add	r3, r0
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	461c      	mov	r4, r3
 8007144:	b2e4      	uxtb	r4, r4
 8007146:	f04f 0500 	mov.w	r5, #0
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	f04f 0900 	mov.w	r9, #0
 8007152:	4623      	mov	r3, r4
 8007154:	041b      	lsls	r3, r3, #16
 8007156:	4699      	mov	r9, r3
 8007158:	2300      	movs	r3, #0
 800715a:	4698      	mov	r8, r3
 800715c:	4643      	mov	r3, r8
 800715e:	464c      	mov	r4, r9
 8007160:	ea43 0301 	orr.w	r3, r3, r1
 8007164:	ea44 0402 	orr.w	r4, r4, r2
 8007168:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800716c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007172:	3307      	adds	r3, #7
 8007174:	6938      	ldr	r0, [r7, #16]
 8007176:	4403      	add	r3, r0
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	461c      	mov	r4, r3
 800717c:	b2e4      	uxtb	r4, r4
 800717e:	f04f 0500 	mov.w	r5, #0
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	f04f 0900 	mov.w	r9, #0
 800718a:	4623      	mov	r3, r4
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	4699      	mov	r9, r3
 8007190:	2300      	movs	r3, #0
 8007192:	4698      	mov	r8, r3
 8007194:	4643      	mov	r3, r8
 8007196:	464c      	mov	r4, r9
 8007198:	ea43 0301 	orr.w	r3, r3, r1
 800719c:	ea44 0402 	orr.w	r4, r4, r2
 80071a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->st_position = u_st_position.real;
 80071a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
      offset += sizeof(this->st_position);
 80071ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b0:	3308      	adds	r3, #8
 80071b2:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	18d0      	adds	r0, r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	3328      	adds	r3, #40	; 0x28
 80071c2:	2208      	movs	r2, #8
 80071c4:	4619      	mov	r1, r3
 80071c6:	f004 ff55 	bl	800c074 <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 80071ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071cc:	3301      	adds	r3, #1
 80071ce:	653b      	str	r3, [r7, #80]	; 0x50
 80071d0:	e715      	b.n	8006ffe <_ZN11sensor_msgs10JointState11deserializeEPh+0x192>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80071d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4413      	add	r3, r2
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80071dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071de:	3301      	adds	r3, #1
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071ea:	4313      	orrs	r3, r2
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80071ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071f0:	3302      	adds	r3, #2
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4413      	add	r3, r2
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	041b      	lsls	r3, r3, #16
 80071fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071fc:	4313      	orrs	r3, r2
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007202:	3303      	adds	r3, #3
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800720e:	4313      	orrs	r3, r2
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += sizeof(this->velocity_length);
 8007212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007214:	3304      	adds	r3, #4
 8007216:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(velocity_lengthT > velocity_length)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800721e:	429a      	cmp	r2, r3
 8007220:	d90a      	bls.n	8007238 <_ZN11sensor_msgs10JointState11deserializeEPh+0x3cc>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f004 ffdd 	bl	800c1ec <realloc>
 8007232:	4602      	mov	r2, r0
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40
      velocity_length = velocity_lengthT;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800723c:	635a      	str	r2, [r3, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800723e:	2300      	movs	r3, #0
 8007240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007248:	429a      	cmp	r2, r3
 800724a:	f080 80d1 	bcs.w	80073f0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x584>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	f04f 0400 	mov.w	r4, #0
 8007256:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800725a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800725e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007260:	6938      	ldr	r0, [r7, #16]
 8007262:	4403      	add	r3, r0
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	b2dd      	uxtb	r5, r3
 8007268:	f04f 0600 	mov.w	r6, #0
 800726c:	ea45 0301 	orr.w	r3, r5, r1
 8007270:	ea46 0402 	orr.w	r4, r6, r2
 8007274:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007278:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800727c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800727e:	3301      	adds	r3, #1
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	b2d9      	uxtb	r1, r3
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0500 	mov.w	r5, #0
 8007290:	f04f 0600 	mov.w	r6, #0
 8007294:	0216      	lsls	r6, r2, #8
 8007296:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 800729a:	020d      	lsls	r5, r1, #8
 800729c:	ea45 030a 	orr.w	r3, r5, sl
 80072a0:	ea46 040b 	orr.w	r4, r6, fp
 80072a4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80072a8:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80072ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ae:	3302      	adds	r3, #2
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4413      	add	r3, r2
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	b2d9      	uxtb	r1, r3
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0500 	mov.w	r5, #0
 80072c0:	f04f 0600 	mov.w	r6, #0
 80072c4:	0416      	lsls	r6, r2, #16
 80072c6:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80072ca:	040d      	lsls	r5, r1, #16
 80072cc:	ea45 030a 	orr.w	r3, r5, sl
 80072d0:	ea46 040b 	orr.w	r4, r6, fp
 80072d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80072d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072de:	3303      	adds	r3, #3
 80072e0:	6938      	ldr	r0, [r7, #16]
 80072e2:	4403      	add	r3, r0
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f04f 0400 	mov.w	r4, #0
 80072ec:	0a18      	lsrs	r0, r3, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	061b      	lsls	r3, r3, #24
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80072f8:	ea43 0301 	orr.w	r3, r3, r1
 80072fc:	ea44 0402 	orr.w	r4, r4, r2
 8007300:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007304:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800730a:	3304      	adds	r3, #4
 800730c:	6938      	ldr	r0, [r7, #16]
 800730e:	4403      	add	r3, r0
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	fa5f fa83 	uxtb.w	sl, r3
 8007316:	f04f 0b00 	mov.w	fp, #0
 800731a:	f04f 0500 	mov.w	r5, #0
 800731e:	f04f 0600 	mov.w	r6, #0
 8007322:	4656      	mov	r6, sl
 8007324:	2500      	movs	r5, #0
 8007326:	ea45 0301 	orr.w	r3, r5, r1
 800732a:	ea46 0402 	orr.w	r4, r6, r2
 800732e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007332:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007338:	3305      	adds	r3, #5
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	4403      	add	r3, r0
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	fa5f fa83 	uxtb.w	sl, r3
 8007344:	f04f 0b00 	mov.w	fp, #0
 8007348:	f04f 0500 	mov.w	r5, #0
 800734c:	f04f 0600 	mov.w	r6, #0
 8007350:	ea4f 260a 	mov.w	r6, sl, lsl #8
 8007354:	2500      	movs	r5, #0
 8007356:	ea45 0301 	orr.w	r3, r5, r1
 800735a:	ea46 0402 	orr.w	r4, r6, r2
 800735e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007362:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007368:	3306      	adds	r3, #6
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	4403      	add	r3, r0
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	fa5f fa83 	uxtb.w	sl, r3
 8007374:	f04f 0b00 	mov.w	fp, #0
 8007378:	f04f 0500 	mov.w	r5, #0
 800737c:	f04f 0600 	mov.w	r6, #0
 8007380:	ea4f 460a 	mov.w	r6, sl, lsl #16
 8007384:	2500      	movs	r5, #0
 8007386:	ea45 0301 	orr.w	r3, r5, r1
 800738a:	ea46 0402 	orr.w	r4, r6, r2
 800738e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007392:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	3307      	adds	r3, #7
 800739a:	6938      	ldr	r0, [r7, #16]
 800739c:	4403      	add	r3, r0
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	fa5f fa83 	uxtb.w	sl, r3
 80073a4:	f04f 0b00 	mov.w	fp, #0
 80073a8:	f04f 0500 	mov.w	r5, #0
 80073ac:	f04f 0600 	mov.w	r6, #0
 80073b0:	ea4f 660a 	mov.w	r6, sl, lsl #24
 80073b4:	2500      	movs	r5, #0
 80073b6:	ea45 0301 	orr.w	r3, r5, r1
 80073ba:	ea46 0402 	orr.w	r4, r6, r2
 80073be:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->st_velocity = u_st_velocity.real;
 80073c2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      offset += sizeof(this->st_velocity);
 80073cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ce:	3308      	adds	r3, #8
 80073d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	18d0      	adds	r0, r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	3338      	adds	r3, #56	; 0x38
 80073e0:	2208      	movs	r2, #8
 80073e2:	4619      	mov	r1, r3
 80073e4:	f004 fe46 	bl	800c074 <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 80073e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ea:	3301      	adds	r3, #1
 80073ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ee:	e728      	b.n	8007242 <_ZN11sensor_msgs10JointState11deserializeEPh+0x3d6>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80073f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80073fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073fc:	3301      	adds	r3, #1
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4413      	add	r3, r2
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007408:	4313      	orrs	r3, r2
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800740c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740e:	3302      	adds	r3, #2
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4413      	add	r3, r2
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800741a:	4313      	orrs	r3, r2
 800741c:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800741e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007420:	3303      	adds	r3, #3
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4413      	add	r3, r2
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	061b      	lsls	r3, r3, #24
 800742a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800742c:	4313      	orrs	r3, r2
 800742e:	63bb      	str	r3, [r7, #56]	; 0x38
      offset += sizeof(this->effort_length);
 8007430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007432:	3304      	adds	r3, #4
 8007434:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(effort_lengthT > effort_length)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743c:	429a      	cmp	r2, r3
 800743e:	d90a      	bls.n	8007456 <_ZN11sensor_msgs10JointState11deserializeEPh+0x5ea>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f004 fece 	bl	800c1ec <realloc>
 8007450:	4602      	mov	r2, r0
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	651a      	str	r2, [r3, #80]	; 0x50
      effort_length = effort_lengthT;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745a:	645a      	str	r2, [r3, #68]	; 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 800745c:	2300      	movs	r3, #0
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007466:	429a      	cmp	r2, r3
 8007468:	f080 80d1 	bcs.w	800760e <_ZN11sensor_msgs10JointState11deserializeEPh+0x7a2>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 800746c:	f04f 0300 	mov.w	r3, #0
 8007470:	f04f 0400 	mov.w	r4, #0
 8007474:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007478:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800747c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800747e:	6938      	ldr	r0, [r7, #16]
 8007480:	4403      	add	r3, r0
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b2dd      	uxtb	r5, r3
 8007486:	f04f 0600 	mov.w	r6, #0
 800748a:	ea45 0301 	orr.w	r3, r5, r1
 800748e:	ea46 0402 	orr.w	r4, r6, r2
 8007492:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007496:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800749a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800749c:	3301      	adds	r3, #1
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4413      	add	r3, r2
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	b2d9      	uxtb	r1, r3
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0500 	mov.w	r5, #0
 80074ae:	f04f 0600 	mov.w	r6, #0
 80074b2:	0216      	lsls	r6, r2, #8
 80074b4:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 80074b8:	020d      	lsls	r5, r1, #8
 80074ba:	ea45 0308 	orr.w	r3, r5, r8
 80074be:	ea46 0409 	orr.w	r4, r6, r9
 80074c2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80074c6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80074ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074cc:	3302      	adds	r3, #2
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4413      	add	r3, r2
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b2d9      	uxtb	r1, r3
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0500 	mov.w	r5, #0
 80074de:	f04f 0600 	mov.w	r6, #0
 80074e2:	0416      	lsls	r6, r2, #16
 80074e4:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80074e8:	040d      	lsls	r5, r1, #16
 80074ea:	ea45 0308 	orr.w	r3, r5, r8
 80074ee:	ea46 0409 	orr.w	r4, r6, r9
 80074f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80074f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80074fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fc:	3303      	adds	r3, #3
 80074fe:	6938      	ldr	r0, [r7, #16]
 8007500:	4403      	add	r3, r0
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f04f 0400 	mov.w	r4, #0
 800750a:	0a18      	lsrs	r0, r3, #8
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	061b      	lsls	r3, r3, #24
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007516:	ea43 0301 	orr.w	r3, r3, r1
 800751a:	ea44 0402 	orr.w	r4, r4, r2
 800751e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007522:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007528:	3304      	adds	r3, #4
 800752a:	6938      	ldr	r0, [r7, #16]
 800752c:	4403      	add	r3, r0
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	fa5f f883 	uxtb.w	r8, r3
 8007534:	f04f 0900 	mov.w	r9, #0
 8007538:	f04f 0500 	mov.w	r5, #0
 800753c:	f04f 0600 	mov.w	r6, #0
 8007540:	4646      	mov	r6, r8
 8007542:	2500      	movs	r5, #0
 8007544:	ea45 0301 	orr.w	r3, r5, r1
 8007548:	ea46 0402 	orr.w	r4, r6, r2
 800754c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007550:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007556:	3305      	adds	r3, #5
 8007558:	6938      	ldr	r0, [r7, #16]
 800755a:	4403      	add	r3, r0
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	fa5f f883 	uxtb.w	r8, r3
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	f04f 0500 	mov.w	r5, #0
 800756a:	f04f 0600 	mov.w	r6, #0
 800756e:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8007572:	2500      	movs	r5, #0
 8007574:	ea45 0301 	orr.w	r3, r5, r1
 8007578:	ea46 0402 	orr.w	r4, r6, r2
 800757c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007580:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007586:	3306      	adds	r3, #6
 8007588:	6938      	ldr	r0, [r7, #16]
 800758a:	4403      	add	r3, r0
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	fa5f f883 	uxtb.w	r8, r3
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	f04f 0500 	mov.w	r5, #0
 800759a:	f04f 0600 	mov.w	r6, #0
 800759e:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80075a2:	2500      	movs	r5, #0
 80075a4:	ea45 0301 	orr.w	r3, r5, r1
 80075a8:	ea46 0402 	orr.w	r4, r6, r2
 80075ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80075b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80075b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b6:	3307      	adds	r3, #7
 80075b8:	6938      	ldr	r0, [r7, #16]
 80075ba:	4403      	add	r3, r0
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	fa5f f883 	uxtb.w	r8, r3
 80075c2:	f04f 0900 	mov.w	r9, #0
 80075c6:	f04f 0500 	mov.w	r5, #0
 80075ca:	f04f 0600 	mov.w	r6, #0
 80075ce:	ea4f 6608 	mov.w	r6, r8, lsl #24
 80075d2:	2500      	movs	r5, #0
 80075d4:	ea45 0301 	orr.w	r3, r5, r1
 80075d8:	ea46 0402 	orr.w	r4, r6, r2
 80075dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->st_effort = u_st_effort.real;
 80075e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
      offset += sizeof(this->st_effort);
 80075ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ec:	3308      	adds	r3, #8
 80075ee:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	18d0      	adds	r0, r2, r3
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	3348      	adds	r3, #72	; 0x48
 80075fe:	2208      	movs	r2, #8
 8007600:	4619      	mov	r1, r3
 8007602:	f004 fd37 	bl	800c074 <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 8007606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007608:	3301      	adds	r3, #1
 800760a:	64bb      	str	r3, [r7, #72]	; 0x48
 800760c:	e728      	b.n	8007460 <_ZN11sensor_msgs10JointState11deserializeEPh+0x5f4>
      }
     return offset;
 800760e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    }
 8007610:	4618      	mov	r0, r3
 8007612:	3764      	adds	r7, #100	; 0x64
 8007614:	46bd      	mov	sp, r7
 8007616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800761c <_ZN11sensor_msgs10JointState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/JointState"; };
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	4b03      	ldr	r3, [pc, #12]	; (8007634 <_ZN11sensor_msgs10JointState7getTypeEv+0x18>)
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	0800cd30 	.word	0x0800cd30

08007638 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	4b03      	ldr	r3, [pc, #12]	; (8007650 <_ZN11sensor_msgs10JointState6getMD5Ev+0x18>)
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	0800cd48 	.word	0x0800cd48

08007654 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4618      	mov	r0, r3
 8007660:	f7f8 ff4c 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8007664:	4a08      	ldr	r2, [pc, #32]	; (8007688 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3308      	adds	r3, #8
 800766e:	4618      	mov	r0, r3
 8007670:	f7fb f802 	bl	8002678 <_ZN13geometry_msgs7Vector3C1Ev>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3328      	adds	r3, #40	; 0x28
 8007678:	4618      	mov	r0, r3
 800767a:	f7fa fa61 	bl	8001b40 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	0800d4e8 	.word	0x0800d4e8

0800768c <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f103 0008 	add.w	r0, r3, #8
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	4619      	mov	r1, r3
 80076a8:	f7fb f80e 	bl	80026c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	4413      	add	r3, r2
 80076c0:	4619      	mov	r1, r3
 80076c2:	f7fa fa6b 	bl	8001b9c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80076c6:	4602      	mov	r2, r0
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
      return offset;
 80076ce:	68fb      	ldr	r3, [r7, #12]
    }
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0008 	add.w	r0, r3, #8
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4413      	add	r3, r2
 80076f2:	4619      	mov	r1, r3
 80076f4:	f7fb f95a 	bl	80029ac <_ZN13geometry_msgs7Vector311deserializeEPh>
 80076f8:	4602      	mov	r2, r0
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	4413      	add	r3, r2
 800770c:	4619      	mov	r1, r3
 800770e:	f7fa fc2e 	bl	8001f6e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8007712:	4602      	mov	r2, r0
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
     return offset;
 800771a:	68fb      	ldr	r3, [r7, #12]
    }
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	4b03      	ldr	r3, [pc, #12]	; (800773c <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	0800cd6c 	.word	0x0800cd6c

08007740 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	4b03      	ldr	r3, [pc, #12]	; (8007758 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	0800cd84 	.word	0x0800cd84

0800775c <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	f7f8 fec8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800776c:	4a0a      	ldr	r2, [pc, #40]	; (8007798 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3304      	adds	r3, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa f84e 	bl	8001818 <_ZN8std_msgs6HeaderC1Ev>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a07      	ldr	r2, [pc, #28]	; (800779c <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8007780:	619a      	str	r2, [r3, #24]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3320      	adds	r3, #32
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff ff64 	bl	8007654 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	0800d4d0 	.word	0x0800d4d0
 800779c:	0800ca94 	.word	0x0800ca94

080077a0 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	1d18      	adds	r0, r3, #4
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	4413      	add	r3, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	f7fa f84d 	bl	8001858 <_ZNK8std_msgs6Header9serializeEPh>
 80077be:	4602      	mov	r2, r0
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7f8 fcfc 	bl	80001c8 <strlen>
 80077d0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	4413      	add	r3, r2
 80077d8:	68b9      	ldr	r1, [r7, #8]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fc fc4e 	bl	800407c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3304      	adds	r3, #4
 80077e4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	18d0      	adds	r0, r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	4619      	mov	r1, r3
 80077f4:	f004 fc3e 	bl	800c074 <memcpy>
      offset += length_child_frame_id;
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f103 0020 	add.w	r0, r3, #32
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	4413      	add	r3, r2
 800780c:	4619      	mov	r1, r3
 800780e:	f7ff ff3d 	bl	800768c <_ZNK13geometry_msgs9Transform9serializeEPh>
 8007812:	4602      	mov	r2, r0
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
      return offset;
 800781a:	68fb      	ldr	r3, [r7, #12]
    }
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	1d18      	adds	r0, r3, #4
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4413      	add	r3, r2
 800783c:	4619      	mov	r1, r3
 800783e:	f7fa f8a3 	bl	8001988 <_ZN8std_msgs6Header11deserializeEPh>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	4413      	add	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	441a      	add	r2, r3
 8007850:	f107 030c 	add.w	r3, r7, #12
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7fc fc2e 	bl	80040b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	3304      	adds	r3, #4
 8007860:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	429a      	cmp	r2, r3
 8007870:	d20c      	bcs.n	800788c <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	441a      	add	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	3b01      	subs	r3, #1
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	440b      	add	r3, r1
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	3301      	adds	r3, #1
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	e7ec      	b.n	8007866 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	3b01      	subs	r3, #1
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	4413      	add	r3, r2
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	3b01      	subs	r3, #1
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	441a      	add	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4413      	add	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f103 0020 	add.w	r0, r3, #32
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	4413      	add	r3, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	f7ff ff0b 	bl	80076d8 <_ZN13geometry_msgs9Transform11deserializeEPh>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	4413      	add	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
     return offset;
 80078ca:	693b      	ldr	r3, [r7, #16]
    }
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	4b03      	ldr	r3, [pc, #12]	; (80078ec <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	0800cda8 	.word	0x0800cda8

080078f0 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	4b03      	ldr	r3, [pc, #12]	; (8007908 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	0800cdc8 	.word	0x0800cdc8

0800790c <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4618      	mov	r0, r3
 8007918:	f7f8 fdf0 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800791c:	4a09      	ldr	r2, [pc, #36]	; (8007944 <_ZN2tf9tfMessageC1Ev+0x38>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	605a      	str	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3308      	adds	r3, #8
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff ff15 	bl	800775c <_ZN13geometry_msgs16TransformStampedC1Ev>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	679a      	str	r2, [r3, #120]	; 0x78
    {
    }
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	0800d4b8 	.word	0x0800d4b8

08007948 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6859      	ldr	r1, [r3, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	4413      	add	r3, r2
 8007960:	b2ca      	uxtb	r2, r1
 8007962:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	0a19      	lsrs	r1, r3, #8
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4413      	add	r3, r2
 8007972:	b2ca      	uxtb	r2, r1
 8007974:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	0c19      	lsrs	r1, r3, #16
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3302      	adds	r3, #2
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	4413      	add	r3, r2
 8007984:	b2ca      	uxtb	r2, r1
 8007986:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	0e19      	lsrs	r1, r3, #24
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3303      	adds	r3, #3
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4413      	add	r3, r2
 8007996:	b2ca      	uxtb	r2, r1
 8007998:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3304      	adds	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80079a0:	2300      	movs	r3, #0
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d223      	bcs.n	80079f6 <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4613      	mov	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	1a9b      	subs	r3, r3, r2
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	18c8      	adds	r0, r1, r3
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4613      	mov	r3, r2
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	440b      	add	r3, r1
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	440a      	add	r2, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	4798      	blx	r3
 80079e6:	4602      	mov	r2, r0
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	3301      	adds	r3, #1
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	e7d6      	b.n	80079a4 <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 80079f6:	68fb      	ldr	r3, [r7, #12]
    }
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	4413      	add	r3, r2
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4413      	add	r3, r2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	4413      	add	r3, r2
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3303      	adds	r3, #3
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	4413      	add	r3, r2
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	061b      	lsls	r3, r3, #24
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	3304      	adds	r3, #4
 8007a52:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d90c      	bls.n	8007a78 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	1a9b      	subs	r3, r3, r2
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f004 fbbd 	bl	800c1ec <realloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	679a      	str	r2, [r3, #120]	; 0x78
      transforms_length = transforms_lengthT;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d21e      	bcs.n	8007aca <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f103 0008 	add.w	r0, r3, #8
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	4413      	add	r3, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f7ff fec3 	bl	8007824 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4613      	mov	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	18c8      	adds	r0, r1, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	2270      	movs	r2, #112	; 0x70
 8007abc:	4619      	mov	r1, r3
 8007abe:	f004 fad9 	bl	800c074 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	e7db      	b.n	8007a82 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8007aca:	697b      	ldr	r3, [r7, #20]
    }
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	4b03      	ldr	r3, [pc, #12]	; (8007aec <_ZN2tf9tfMessage7getTypeEv+0x18>)
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	0800cdec 	.word	0x0800cdec

08007af0 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	0800cdfc 	.word	0x0800cdfc

08007b0c <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fef8 	bl	800790c <_ZN2tf9tfMessageC1Ev>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	2300      	movs	r3, #0
 8007b26:	4904      	ldr	r1, [pc, #16]	; (8007b38 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8007b28:	f7f9 fb1e 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	0800ce20 	.word	0x0800ce20

08007b3c <_Z41__static_initialization_and_destruction_0ii>:
	odom_tf.child_frame_id = "base_footprint";
	odom_tf.transform.translation.x = odom.pose.pose.position.x;
	odom_tf.transform.translation.y = odom.pose.pose.position.y;
	odom_tf.transform.translation.z = odom.pose.pose.position.z;
	odom_tf.transform.rotation = odom.pose.pose.orientation;
}
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d14c      	bne.n	8007be6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d147      	bne.n	8007be6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static ros::NodeHandle nh;
 8007b56:	4826      	ldr	r0, [pc, #152]	; (8007bf0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007b58:	f7fc fae4 	bl	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 8007b5c:	4825      	ldr	r0, [pc, #148]	; (8007bf4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007b5e:	f7f9 fc33 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8007b62:	4825      	ldr	r0, [pc, #148]	; (8007bf8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007b64:	f7f9 fccc 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8007b68:	4824      	ldr	r0, [pc, #144]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007b6a:	f7f9 fcc9 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddsec_msg;
 8007b6e:	4824      	ldr	r0, [pc, #144]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007b70:	f7f9 fcc6 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddnsec_msg;
 8007b74:	4823      	ldr	r0, [pc, #140]	; (8007c04 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8007b76:	f7f9 fcc3 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007b7e:	4922      	ldr	r1, [pc, #136]	; (8007c08 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8007b80:	4822      	ldr	r0, [pc, #136]	; (8007c0c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8007b82:	f7f9 faf1 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8007b86:	2300      	movs	r3, #0
 8007b88:	4a1b      	ldr	r2, [pc, #108]	; (8007bf8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007b8a:	4921      	ldr	r1, [pc, #132]	; (8007c10 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8007b8c:	4821      	ldr	r0, [pc, #132]	; (8007c14 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8007b8e:	f7f9 faeb 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8007b92:	2300      	movs	r3, #0
 8007b94:	4a19      	ldr	r2, [pc, #100]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007b96:	4920      	ldr	r1, [pc, #128]	; (8007c18 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8007b98:	4820      	ldr	r0, [pc, #128]	; (8007c1c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8007b9a:	f7f9 fae5 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("ddddd_sec", &dddddsec_msg);
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007ba2:	491f      	ldr	r1, [pc, #124]	; (8007c20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8007ba4:	481f      	ldr	r0, [pc, #124]	; (8007c24 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8007ba6:	f7f9 fadf 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("ddddd_nsec", &dddddnsec_msg);
 8007baa:	2300      	movs	r3, #0
 8007bac:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8007bae:	491e      	ldr	r1, [pc, #120]	; (8007c28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8007bb0:	481e      	ldr	r0, [pc, #120]	; (8007c2c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8007bb2:	f7f9 fad9 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
nav_msgs::Odometry odom;
 8007bb6:	481e      	ldr	r0, [pc, #120]	; (8007c30 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8007bb8:	f7fe fdc2 	bl	8006740 <_ZN8nav_msgs8OdometryC1Ev>
geometry_msgs::TransformStamped odom_tf;
 8007bbc:	481d      	ldr	r0, [pc, #116]	; (8007c34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8007bbe:	f7ff fdcd 	bl	800775c <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 8007bc2:	481d      	ldr	r0, [pc, #116]	; (8007c38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8007bc4:	f7ff ffa2 	bl	8007b0c <_ZN2tf20TransformBroadcasterC1Ev>
sensor_msgs::JointState joint_states;
 8007bc8:	481c      	ldr	r0, [pc, #112]	; (8007c3c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8007bca:	f7fe feb1 	bl	8006930 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher odom_pub("odom", &odom);
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8007bd2:	491b      	ldr	r1, [pc, #108]	; (8007c40 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8007bd4:	481b      	ldr	r0, [pc, #108]	; (8007c44 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8007bd6:	f7f9 fac7 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher joint_states_pub("joint_states", &joint_states);
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8007bde:	491a      	ldr	r1, [pc, #104]	; (8007c48 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8007be0:	481a      	ldr	r0, [pc, #104]	; (8007c4c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8007be2:	f7f9 fac1 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20002324 	.word	0x20002324
 8007bf4:	20002c60 	.word	0x20002c60
 8007bf8:	20002c68 	.word	0x20002c68
 8007bfc:	20002c78 	.word	0x20002c78
 8007c00:	20002c88 	.word	0x20002c88
 8007c04:	20002c98 	.word	0x20002c98
 8007c08:	0800ced8 	.word	0x0800ced8
 8007c0c:	20002ca8 	.word	0x20002ca8
 8007c10:	0800cee0 	.word	0x0800cee0
 8007c14:	20002cbc 	.word	0x20002cbc
 8007c18:	0800cef0 	.word	0x0800cef0
 8007c1c:	20002cd0 	.word	0x20002cd0
 8007c20:	0800cf00 	.word	0x0800cf00
 8007c24:	20002ce4 	.word	0x20002ce4
 8007c28:	0800cf0c 	.word	0x0800cf0c
 8007c2c:	20002cf8 	.word	0x20002cf8
 8007c30:	20002d10 	.word	0x20002d10
 8007c34:	20003018 	.word	0x20003018
 8007c38:	20003088 	.word	0x20003088
 8007c3c:	20003120 	.word	0x20003120
 8007c40:	0800cec0 	.word	0x0800cec0
 8007c44:	20003178 	.word	0x20003178
 8007c48:	0800cf18 	.word	0x0800cf18
 8007c4c:	2000318c 	.word	0x2000318c

08007c50 <_GLOBAL__sub_I_odom_pose>:
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c58:	2001      	movs	r0, #1
 8007c5a:	f7ff ff6f 	bl	8007b3c <_Z41__static_initialization_and_destruction_0ii>
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	4b10      	ldr	r3, [pc, #64]	; (8007cac <HAL_MspInit+0x4c>)
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	4a0f      	ldr	r2, [pc, #60]	; (8007cac <HAL_MspInit+0x4c>)
 8007c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c74:	6453      	str	r3, [r2, #68]	; 0x44
 8007c76:	4b0d      	ldr	r3, [pc, #52]	; (8007cac <HAL_MspInit+0x4c>)
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7e:	607b      	str	r3, [r7, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c82:	2300      	movs	r3, #0
 8007c84:	603b      	str	r3, [r7, #0]
 8007c86:	4b09      	ldr	r3, [pc, #36]	; (8007cac <HAL_MspInit+0x4c>)
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	4a08      	ldr	r2, [pc, #32]	; (8007cac <HAL_MspInit+0x4c>)
 8007c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c90:	6413      	str	r3, [r2, #64]	; 0x40
 8007c92:	4b06      	ldr	r3, [pc, #24]	; (8007cac <HAL_MspInit+0x4c>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40023800 	.word	0x40023800

08007cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	; 0x28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb8:	f107 0314 	add.w	r3, r7, #20
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	605a      	str	r2, [r3, #4]
 8007cc2:	609a      	str	r2, [r3, #8]
 8007cc4:	60da      	str	r2, [r3, #12]
 8007cc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a19      	ldr	r2, [pc, #100]	; (8007d34 <HAL_I2C_MspInit+0x84>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d12b      	bne.n	8007d2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	613b      	str	r3, [r7, #16]
 8007cd6:	4b18      	ldr	r3, [pc, #96]	; (8007d38 <HAL_I2C_MspInit+0x88>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <HAL_I2C_MspInit+0x88>)
 8007cdc:	f043 0302 	orr.w	r3, r3, #2
 8007ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce2:	4b15      	ldr	r3, [pc, #84]	; (8007d38 <HAL_I2C_MspInit+0x88>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007cee:	23c0      	movs	r3, #192	; 0xc0
 8007cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007cf2:	2312      	movs	r3, #18
 8007cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007cfe:	2304      	movs	r3, #4
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d02:	f107 0314 	add.w	r3, r7, #20
 8007d06:	4619      	mov	r1, r3
 8007d08:	480c      	ldr	r0, [pc, #48]	; (8007d3c <HAL_I2C_MspInit+0x8c>)
 8007d0a:	f001 fb83 	bl	8009414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <HAL_I2C_MspInit+0x88>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <HAL_I2C_MspInit+0x88>)
 8007d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d1e:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <HAL_I2C_MspInit+0x88>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007d2a:	bf00      	nop
 8007d2c:	3728      	adds	r7, #40	; 0x28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40005400 	.word	0x40005400
 8007d38:	40023800 	.word	0x40023800
 8007d3c:	40020400 	.word	0x40020400

08007d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <HAL_TIM_Base_MspInit+0x3c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10d      	bne.n	8007d6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <HAL_TIM_Base_MspInit+0x40>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	4a09      	ldr	r2, [pc, #36]	; (8007d80 <HAL_TIM_Base_MspInit+0x40>)
 8007d5c:	f043 0302 	orr.w	r3, r3, #2
 8007d60:	6413      	str	r3, [r2, #64]	; 0x40
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <HAL_TIM_Base_MspInit+0x40>)
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40000400 	.word	0x40000400
 8007d80:	40023800 	.word	0x40023800

08007d84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08c      	sub	sp, #48	; 0x30
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d8c:	f107 031c 	add.w	r3, r7, #28
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a32      	ldr	r2, [pc, #200]	; (8007e6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d12d      	bne.n	8007e02 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007da6:	2300      	movs	r3, #0
 8007da8:	61bb      	str	r3, [r7, #24]
 8007daa:	4b31      	ldr	r3, [pc, #196]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	4a30      	ldr	r2, [pc, #192]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007db0:	f043 0304 	orr.w	r3, r3, #4
 8007db4:	6413      	str	r3, [r2, #64]	; 0x40
 8007db6:	4b2e      	ldr	r3, [pc, #184]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	61bb      	str	r3, [r7, #24]
 8007dc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	4b2a      	ldr	r3, [pc, #168]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	4a29      	ldr	r2, [pc, #164]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007dcc:	f043 0308 	orr.w	r3, r3, #8
 8007dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dd2:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007dde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007de4:	2302      	movs	r3, #2
 8007de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dec:	2300      	movs	r3, #0
 8007dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007df0:	2302      	movs	r3, #2
 8007df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007df4:	f107 031c 	add.w	r3, r7, #28
 8007df8:	4619      	mov	r1, r3
 8007dfa:	481e      	ldr	r0, [pc, #120]	; (8007e74 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007dfc:	f001 fb0a 	bl	8009414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8007e00:	e030      	b.n	8007e64 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1c      	ldr	r2, [pc, #112]	; (8007e78 <HAL_TIM_Encoder_MspInit+0xf4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d12b      	bne.n	8007e64 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007e16:	f043 0308 	orr.w	r3, r3, #8
 8007e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8007e1c:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	4b10      	ldr	r3, [pc, #64]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	4a0f      	ldr	r2, [pc, #60]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	6313      	str	r3, [r2, #48]	; 0x30
 8007e38:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e44:	2303      	movs	r3, #3
 8007e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e50:	2300      	movs	r3, #0
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007e54:	2302      	movs	r3, #2
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e58:	f107 031c 	add.w	r3, r7, #28
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4807      	ldr	r0, [pc, #28]	; (8007e7c <HAL_TIM_Encoder_MspInit+0xf8>)
 8007e60:	f001 fad8 	bl	8009414 <HAL_GPIO_Init>
}
 8007e64:	bf00      	nop
 8007e66:	3730      	adds	r7, #48	; 0x30
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40023800 	.word	0x40023800
 8007e74:	40020c00 	.word	0x40020c00
 8007e78:	40000c00 	.word	0x40000c00
 8007e7c:	40020000 	.word	0x40020000

08007e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e88:	f107 030c 	add.w	r3, r7, #12
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	609a      	str	r2, [r3, #8]
 8007e94:	60da      	str	r2, [r3, #12]
 8007e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a12      	ldr	r2, [pc, #72]	; (8007ee8 <HAL_TIM_MspPostInit+0x68>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d11d      	bne.n	8007ede <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]
 8007ea6:	4b11      	ldr	r3, [pc, #68]	; (8007eec <HAL_TIM_MspPostInit+0x6c>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	4a10      	ldr	r2, [pc, #64]	; (8007eec <HAL_TIM_MspPostInit+0x6c>)
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <HAL_TIM_MspPostInit+0x6c>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	60bb      	str	r3, [r7, #8]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ebe:	23c0      	movs	r3, #192	; 0xc0
 8007ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ed2:	f107 030c 	add.w	r3, r7, #12
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <HAL_TIM_MspPostInit+0x70>)
 8007eda:	f001 fa9b 	bl	8009414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007ede:	bf00      	nop
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	40020000 	.word	0x40020000

08007ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	605a      	str	r2, [r3, #4]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a4c      	ldr	r2, [pc, #304]	; (8008044 <HAL_UART_MspInit+0x150>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	f040 8091 	bne.w	800803a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	4b4a      	ldr	r3, [pc, #296]	; (8008048 <HAL_UART_MspInit+0x154>)
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	4a49      	ldr	r2, [pc, #292]	; (8008048 <HAL_UART_MspInit+0x154>)
 8007f22:	f043 0310 	orr.w	r3, r3, #16
 8007f26:	6453      	str	r3, [r2, #68]	; 0x44
 8007f28:	4b47      	ldr	r3, [pc, #284]	; (8008048 <HAL_UART_MspInit+0x154>)
 8007f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2c:	f003 0310 	and.w	r3, r3, #16
 8007f30:	613b      	str	r3, [r7, #16]
 8007f32:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	4b43      	ldr	r3, [pc, #268]	; (8008048 <HAL_UART_MspInit+0x154>)
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	4a42      	ldr	r2, [pc, #264]	; (8008048 <HAL_UART_MspInit+0x154>)
 8007f3e:	f043 0301 	orr.w	r3, r3, #1
 8007f42:	6313      	str	r3, [r2, #48]	; 0x30
 8007f44:	4b40      	ldr	r3, [pc, #256]	; (8008048 <HAL_UART_MspInit+0x154>)
 8007f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007f50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f56:	2302      	movs	r3, #2
 8007f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007f62:	2307      	movs	r3, #7
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f66:	f107 0314 	add.w	r3, r7, #20
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4837      	ldr	r0, [pc, #220]	; (800804c <HAL_UART_MspInit+0x158>)
 8007f6e:	f001 fa51 	bl	8009414 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8007f72:	4b37      	ldr	r3, [pc, #220]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007f74:	4a37      	ldr	r2, [pc, #220]	; (8008054 <HAL_UART_MspInit+0x160>)
 8007f76:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8007f78:	4b35      	ldr	r3, [pc, #212]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f80:	4b33      	ldr	r3, [pc, #204]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f86:	4b32      	ldr	r3, [pc, #200]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f8c:	4b30      	ldr	r3, [pc, #192]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f92:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f94:	4b2e      	ldr	r3, [pc, #184]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f9a:	4b2d      	ldr	r3, [pc, #180]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007fa0:	4b2b      	ldr	r3, [pc, #172]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007fac:	4b28      	ldr	r3, [pc, #160]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007fb2:	4827      	ldr	r0, [pc, #156]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007fb4:	f000 fe9e 	bl	8008cf4 <HAL_DMA_Init>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8007fbe:	f7fc ff65 	bl	8004e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a22      	ldr	r2, [pc, #136]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8007fc8:	4a21      	ldr	r2, [pc, #132]	; (8008050 <HAL_UART_MspInit+0x15c>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8007fce:	4b22      	ldr	r3, [pc, #136]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007fd0:	4a22      	ldr	r2, [pc, #136]	; (800805c <HAL_UART_MspInit+0x168>)
 8007fd2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8007fd4:	4b20      	ldr	r3, [pc, #128]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fda:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fdc:	4b1e      	ldr	r3, [pc, #120]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007fde:	2240      	movs	r2, #64	; 0x40
 8007fe0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fe2:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007fe8:	4b1b      	ldr	r3, [pc, #108]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ff0:	4b19      	ldr	r3, [pc, #100]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007ffc:	4b16      	ldr	r3, [pc, #88]	; (8008058 <HAL_UART_MspInit+0x164>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <HAL_UART_MspInit+0x164>)
 8008004:	2200      	movs	r2, #0
 8008006:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008008:	4b13      	ldr	r3, [pc, #76]	; (8008058 <HAL_UART_MspInit+0x164>)
 800800a:	2200      	movs	r2, #0
 800800c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800800e:	4812      	ldr	r0, [pc, #72]	; (8008058 <HAL_UART_MspInit+0x164>)
 8008010:	f000 fe70 	bl	8008cf4 <HAL_DMA_Init>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800801a:	f7fc ff37 	bl	8004e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a0d      	ldr	r2, [pc, #52]	; (8008058 <HAL_UART_MspInit+0x164>)
 8008022:	631a      	str	r2, [r3, #48]	; 0x30
 8008024:	4a0c      	ldr	r2, [pc, #48]	; (8008058 <HAL_UART_MspInit+0x164>)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	2025      	movs	r0, #37	; 0x25
 8008030:	f000 fe29 	bl	8008c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008034:	2025      	movs	r0, #37	; 0x25
 8008036:	f000 fe42 	bl	8008cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800803a:	bf00      	nop
 800803c:	3728      	adds	r7, #40	; 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40011000 	.word	0x40011000
 8008048:	40023800 	.word	0x40023800
 800804c:	40020000 	.word	0x40020000
 8008050:	200016f8 	.word	0x200016f8
 8008054:	40026440 	.word	0x40026440
 8008058:	20001758 	.word	0x20001758
 800805c:	400264b8 	.word	0x400264b8

08008060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008064:	bf00      	nop
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800806e:	b480      	push	{r7}
 8008070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008072:	e7fe      	b.n	8008072 <HardFault_Handler+0x4>

08008074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008078:	e7fe      	b.n	8008078 <MemManage_Handler+0x4>

0800807a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800807a:	b480      	push	{r7}
 800807c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800807e:	e7fe      	b.n	800807e <BusFault_Handler+0x4>

08008080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008084:	e7fe      	b.n	8008084 <UsageFault_Handler+0x4>

08008086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008086:	b480      	push	{r7}
 8008088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800808a:	bf00      	nop
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008098:	bf00      	nop
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080a2:	b480      	push	{r7}
 80080a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080a6:	bf00      	nop
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080b4:	f000 fcca 	bl	8008a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080b8:	bf00      	nop
 80080ba:	bd80      	pop	{r7, pc}

080080bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80080c0:	2001      	movs	r0, #1
 80080c2:	f001 fb73 	bl	80097ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80080c6:	bf00      	nop
 80080c8:	bd80      	pop	{r7, pc}

080080ca <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80080ce:	2002      	movs	r0, #2
 80080d0:	f001 fb6c 	bl	80097ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80080d4:	bf00      	nop
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80080dc:	2004      	movs	r0, #4
 80080de:	f001 fb65 	bl	80097ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80080e2:	bf00      	nop
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80080ea:	2008      	movs	r0, #8
 80080ec:	f001 fb5e 	bl	80097ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80080f0:	bf00      	nop
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80080f8:	4802      	ldr	r0, [pc, #8]	; (8008104 <USART1_IRQHandler+0x10>)
 80080fa:	f003 f8b5 	bl	800b268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80080fe:	bf00      	nop
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	200016b8 	.word	0x200016b8

08008108 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800810c:	4802      	ldr	r0, [pc, #8]	; (8008118 <DMA2_Stream2_IRQHandler+0x10>)
 800810e:	f000 ff19 	bl	8008f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008112:	bf00      	nop
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200016f8 	.word	0x200016f8

0800811c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008120:	4802      	ldr	r0, [pc, #8]	; (800812c <DMA2_Stream7_IRQHandler+0x10>)
 8008122:	f000 ff0f 	bl	8008f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008126:	bf00      	nop
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20001758 	.word	0x20001758

08008130 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008130:	b590      	push	{r4, r7, lr}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
	if (GPIO_Pin == MOTOR_LEFT_ENCODER1_Pin) {
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d115      	bne.n	800816c <HAL_GPIO_EXTI_Callback+0x3c>
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_LEFT_ENCODER2_Pin);
 8008140:	2102      	movs	r1, #2
 8008142:	4818      	ldr	r0, [pc, #96]	; (80081a4 <HAL_GPIO_EXTI_Callback+0x74>)
 8008144:	f001 fb00 	bl	8009748 <HAL_GPIO_ReadPin>
 8008148:	4603      	mov	r3, r0
 800814a:	81bb      	strh	r3, [r7, #12]
		left_encoder_count = s ? -1 : 1;
 800814c:	89bb      	ldrh	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d004      	beq.n	800815c <HAL_GPIO_EXTI_Callback+0x2c>
 8008152:	f04f 33ff 	mov.w	r3, #4294967295
 8008156:	f04f 34ff 	mov.w	r4, #4294967295
 800815a:	e003      	b.n	8008164 <HAL_GPIO_EXTI_Callback+0x34>
 800815c:	f04f 0301 	mov.w	r3, #1
 8008160:	f04f 0400 	mov.w	r4, #0
 8008164:	4a10      	ldr	r2, [pc, #64]	; (80081a8 <HAL_GPIO_EXTI_Callback+0x78>)
 8008166:	e9c2 3400 	strd	r3, r4, [r2]
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_RIGHT_ENCODER2_Pin);
		right_encoder_count = s ? -1 : 1;

	}

}
 800816a:	e017      	b.n	800819c <HAL_GPIO_EXTI_Callback+0x6c>
	} else if (GPIO_Pin == MOTOR_RIGHT_ENCODER1_Pin) {
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	2b04      	cmp	r3, #4
 8008170:	d114      	bne.n	800819c <HAL_GPIO_EXTI_Callback+0x6c>
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_RIGHT_ENCODER2_Pin);
 8008172:	2108      	movs	r1, #8
 8008174:	480b      	ldr	r0, [pc, #44]	; (80081a4 <HAL_GPIO_EXTI_Callback+0x74>)
 8008176:	f001 fae7 	bl	8009748 <HAL_GPIO_ReadPin>
 800817a:	4603      	mov	r3, r0
 800817c:	81fb      	strh	r3, [r7, #14]
		right_encoder_count = s ? -1 : 1;
 800817e:	89fb      	ldrh	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d004      	beq.n	800818e <HAL_GPIO_EXTI_Callback+0x5e>
 8008184:	f04f 33ff 	mov.w	r3, #4294967295
 8008188:	f04f 34ff 	mov.w	r4, #4294967295
 800818c:	e003      	b.n	8008196 <HAL_GPIO_EXTI_Callback+0x66>
 800818e:	f04f 0301 	mov.w	r3, #1
 8008192:	f04f 0400 	mov.w	r4, #0
 8008196:	4a05      	ldr	r2, [pc, #20]	; (80081ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8008198:	e9c2 3400 	strd	r3, r4, [r2]
}
 800819c:	bf00      	nop
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd90      	pop	{r4, r7, pc}
 80081a4:	40020800 	.word	0x40020800
 80081a8:	20003b90 	.word	0x20003b90
 80081ac:	20003b98 	.word	0x20003b98

080081b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
	return 1;
 80081b4:	2301      	movs	r3, #1
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <_kill>:

int _kill(int pid, int sig)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80081ca:	f003 ff29 	bl	800c020 <__errno>
 80081ce:	4602      	mov	r2, r0
 80081d0:	2316      	movs	r3, #22
 80081d2:	6013      	str	r3, [r2, #0]
	return -1;
 80081d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <_exit>:

void _exit (int status)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80081e8:	f04f 31ff 	mov.w	r1, #4294967295
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff ffe7 	bl	80081c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80081f2:	e7fe      	b.n	80081f2 <_exit+0x12>

080081f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <_sbrk+0x50>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <_sbrk+0x16>
		heap_end = &end;
 8008204:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <_sbrk+0x50>)
 8008206:	4a10      	ldr	r2, [pc, #64]	; (8008248 <_sbrk+0x54>)
 8008208:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800820a:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <_sbrk+0x50>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008210:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <_sbrk+0x50>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4413      	add	r3, r2
 8008218:	466a      	mov	r2, sp
 800821a:	4293      	cmp	r3, r2
 800821c:	d907      	bls.n	800822e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800821e:	f003 feff 	bl	800c020 <__errno>
 8008222:	4602      	mov	r2, r0
 8008224:	230c      	movs	r3, #12
 8008226:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008228:	f04f 33ff 	mov.w	r3, #4294967295
 800822c:	e006      	b.n	800823c <_sbrk+0x48>
	}

	heap_end += incr;
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <_sbrk+0x50>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4413      	add	r3, r2
 8008236:	4a03      	ldr	r2, [pc, #12]	; (8008244 <_sbrk+0x50>)
 8008238:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800823a:	68fb      	ldr	r3, [r7, #12]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	200031a0 	.word	0x200031a0
 8008248:	200045f0 	.word	0x200045f0

0800824c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <SystemInit+0x28>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	4a07      	ldr	r2, [pc, #28]	; (8008274 <SystemInit+0x28>)
 8008258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800825c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <SystemInit+0x28>)
 8008262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008266:	609a      	str	r2, [r3, #8]
#endif
}
 8008268:	bf00      	nop
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	e000ed00 	.word	0xe000ed00

08008278 <_Z11encoderInitv>:
uint16_t last_tick[WHEEL_NUM];
double last_rad[WHEEL_NUM];
//double last_vel[WHEEL_NUM];


void encoderInit() {
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	; 0x38
 800827c:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOD_CLK_ENABLE();
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	4b73      	ldr	r3, [pc, #460]	; (8008450 <_Z11encoderInitv+0x1d8>)
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	4a72      	ldr	r2, [pc, #456]	; (8008450 <_Z11encoderInitv+0x1d8>)
 8008288:	f043 0308 	orr.w	r3, r3, #8
 800828c:	6313      	str	r3, [r2, #48]	; 0x30
 800828e:	4b70      	ldr	r3, [pc, #448]	; (8008450 <_Z11encoderInitv+0x1d8>)
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	60bb      	str	r3, [r7, #8]
 8008298:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800829a:	2300      	movs	r3, #0
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	4b6c      	ldr	r3, [pc, #432]	; (8008450 <_Z11encoderInitv+0x1d8>)
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	4a6b      	ldr	r2, [pc, #428]	; (8008450 <_Z11encoderInitv+0x1d8>)
 80082a4:	f043 0301 	orr.w	r3, r3, #1
 80082a8:	6313      	str	r3, [r2, #48]	; 0x30
 80082aa:	4b69      	ldr	r3, [pc, #420]	; (8008450 <_Z11encoderInitv+0x1d8>)
 80082ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	607b      	str	r3, [r7, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80082b6:	2300      	movs	r3, #0
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	4b65      	ldr	r3, [pc, #404]	; (8008450 <_Z11encoderInitv+0x1d8>)
 80082bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082be:	4a64      	ldr	r2, [pc, #400]	; (8008450 <_Z11encoderInitv+0x1d8>)
 80082c0:	f043 0310 	orr.w	r3, r3, #16
 80082c4:	6313      	str	r3, [r2, #48]	; 0x30
 80082c6:	4b62      	ldr	r3, [pc, #392]	; (8008450 <_Z11encoderInitv+0x1d8>)
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	683b      	ldr	r3, [r7, #0]

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80082d2:	f107 0314 	add.w	r3, r7, #20
 80082d6:	2224      	movs	r2, #36	; 0x24
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f003 fed5 	bl	800c08a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80082e0:	f107 030c 	add.w	r3, r7, #12
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 80082ea:	4b5a      	ldr	r3, [pc, #360]	; (8008454 <_Z11encoderInitv+0x1dc>)
 80082ec:	4a5a      	ldr	r2, [pc, #360]	; (8008458 <_Z11encoderInitv+0x1e0>)
 80082ee:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80082f0:	4b58      	ldr	r3, [pc, #352]	; (8008454 <_Z11encoderInitv+0x1dc>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082f6:	4b57      	ldr	r3, [pc, #348]	; (8008454 <_Z11encoderInitv+0x1dc>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80082fc:	4b55      	ldr	r3, [pc, #340]	; (8008454 <_Z11encoderInitv+0x1dc>)
 80082fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008302:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008304:	4b53      	ldr	r3, [pc, #332]	; (8008454 <_Z11encoderInitv+0x1dc>)
 8008306:	2200      	movs	r2, #0
 8008308:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800830a:	4b52      	ldr	r3, [pc, #328]	; (8008454 <_Z11encoderInitv+0x1dc>)
 800830c:	2200      	movs	r2, #0
 800830e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008310:	2303      	movs	r3, #3
 8008312:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008314:	2300      	movs	r3, #0
 8008316:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008318:	2301      	movs	r3, #1
 800831a:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800831c:	2300      	movs	r3, #0
 800831e:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008324:	2300      	movs	r3, #0
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008328:	2301      	movs	r3, #1
 800832a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800832c:	2300      	movs	r3, #0
 800832e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4619      	mov	r1, r3
 800833a:	4846      	ldr	r0, [pc, #280]	; (8008454 <_Z11encoderInitv+0x1dc>)
 800833c:	f002 f886 	bl	800a44c <HAL_TIM_Encoder_Init>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	bf14      	ite	ne
 8008346:	2301      	movne	r3, #1
 8008348:	2300      	moveq	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <_Z11encoderInitv+0xdc>
		Error_Handler();
 8008350:	f7fc fd9c 	bl	8004e8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800835c:	f107 030c 	add.w	r3, r7, #12
 8008360:	4619      	mov	r1, r3
 8008362:	483c      	ldr	r0, [pc, #240]	; (8008454 <_Z11encoderInitv+0x1dc>)
 8008364:	f002 fdca 	bl	800aefc <HAL_TIMEx_MasterConfigSynchronization>
 8008368:	4603      	mov	r3, r0
			!= HAL_OK) {
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf14      	ite	ne
 800836e:	2301      	movne	r3, #1
 8008370:	2300      	moveq	r3, #0
 8008372:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <_Z11encoderInitv+0x104>
		Error_Handler();
 8008378:	f7fc fd88 	bl	8004e8c <Error_Handler>
	}


	sConfig = { 0 };
 800837c:	f107 0314 	add.w	r3, r7, #20
 8008380:	2224      	movs	r2, #36	; 0x24
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f003 fe80 	bl	800c08a <memset>
	sMasterConfig = { 0 };
 800838a:	f107 030c 	add.w	r3, r7, #12
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	605a      	str	r2, [r3, #4]

	htim5.Instance = TIM5;
 8008394:	4b31      	ldr	r3, [pc, #196]	; (800845c <_Z11encoderInitv+0x1e4>)
 8008396:	4a32      	ldr	r2, [pc, #200]	; (8008460 <_Z11encoderInitv+0x1e8>)
 8008398:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800839a:	4b30      	ldr	r3, [pc, #192]	; (800845c <_Z11encoderInitv+0x1e4>)
 800839c:	2200      	movs	r2, #0
 800839e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083a0:	4b2e      	ldr	r3, [pc, #184]	; (800845c <_Z11encoderInitv+0x1e4>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 80083a6:	4b2d      	ldr	r3, [pc, #180]	; (800845c <_Z11encoderInitv+0x1e4>)
 80083a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ac:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <_Z11encoderInitv+0x1e4>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083b4:	4b29      	ldr	r3, [pc, #164]	; (800845c <_Z11encoderInitv+0x1e4>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80083be:	2300      	movs	r3, #0
 80083c0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80083c2:	2301      	movs	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80083c6:	2300      	movs	r3, #0
 80083c8:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80083ce:	2300      	movs	r3, #0
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80083d2:	2301      	movs	r3, #1
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80083d6:	2300      	movs	r3, #0
 80083d8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 80083de:	f107 0314 	add.w	r3, r7, #20
 80083e2:	4619      	mov	r1, r3
 80083e4:	481d      	ldr	r0, [pc, #116]	; (800845c <_Z11encoderInitv+0x1e4>)
 80083e6:	f002 f831 	bl	800a44c <HAL_TIM_Encoder_Init>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bf14      	ite	ne
 80083f0:	2301      	movne	r3, #1
 80083f2:	2300      	moveq	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <_Z11encoderInitv+0x186>
		Error_Handler();
 80083fa:	f7fc fd47 	bl	8004e8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008402:	2300      	movs	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8008406:	f107 030c 	add.w	r3, r7, #12
 800840a:	4619      	mov	r1, r3
 800840c:	4813      	ldr	r0, [pc, #76]	; (800845c <_Z11encoderInitv+0x1e4>)
 800840e:	f002 fd75 	bl	800aefc <HAL_TIMEx_MasterConfigSynchronization>
 8008412:	4603      	mov	r3, r0
			!= HAL_OK) {
 8008414:	2b00      	cmp	r3, #0
 8008416:	bf14      	ite	ne
 8008418:	2301      	movne	r3, #1
 800841a:	2300      	moveq	r3, #0
 800841c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <_Z11encoderInitv+0x1ae>
		Error_Handler();
 8008422:	f7fc fd33 	bl	8004e8c <Error_Handler>
	}


	// Encoder start
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8008426:	213c      	movs	r1, #60	; 0x3c
 8008428:	480a      	ldr	r0, [pc, #40]	; (8008454 <_Z11encoderInitv+0x1dc>)
 800842a:	f002 f8a1 	bl	800a570 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800842e:	213c      	movs	r1, #60	; 0x3c
 8008430:	480a      	ldr	r0, [pc, #40]	; (800845c <_Z11encoderInitv+0x1e4>)
 8008432:	f002 f89d 	bl	800a570 <HAL_TIM_Encoder_Start>

	// parameter initialize
	low_encoder_wrap = UNSIGNED16_MAX * 0.2f;
 8008436:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <_Z11encoderInitv+0x1ec>)
 8008438:	4a0b      	ldr	r2, [pc, #44]	; (8008468 <_Z11encoderInitv+0x1f0>)
 800843a:	601a      	str	r2, [r3, #0]
	high_encoder_wrap = UNSIGNED16_MAX * 0.8f;
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <_Z11encoderInitv+0x1f4>)
 800843e:	4a0c      	ldr	r2, [pc, #48]	; (8008470 <_Z11encoderInitv+0x1f8>)
 8008440:	601a      	str	r2, [r3, #0]
	init_encoder = true;
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <_Z11encoderInitv+0x1fc>)
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
}
 8008448:	bf00      	nop
 800844a:	3738      	adds	r7, #56	; 0x38
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40023800 	.word	0x40023800
 8008454:	200021a4 	.word	0x200021a4
 8008458:	40000800 	.word	0x40000800
 800845c:	200021e4 	.word	0x200021e4
 8008460:	40000c00 	.word	0x40000c00
 8008464:	20003ba0 	.word	0x20003ba0
 8008468:	464ccc00 	.word	0x464ccc00
 800846c:	20003ba4 	.word	0x20003ba4
 8008470:	474ccc00 	.word	0x474ccc00
 8008474:	20003ba8 	.word	0x20003ba8

08008478 <_Z41__static_initialization_and_destruction_0ii>:
			last_diff_tick[idx] = cur_tick[idx] - last_tick[idx];
		}

		last_rad[idx] += TICK2RAD * (double) last_diff_tick[idx];
	}
}
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d134      	bne.n	80084f2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800848e:	4293      	cmp	r3, r2
 8008490:	d12f      	bne.n	80084f2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
static ros::NodeHandle nh;
 8008492:	481a      	ldr	r0, [pc, #104]	; (80084fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008494:	f7fb fe46 	bl	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 8008498:	4819      	ldr	r0, [pc, #100]	; (8008500 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800849a:	f7f8 ff95 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 800849e:	4819      	ldr	r0, [pc, #100]	; (8008504 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80084a0:	f7f9 f82e 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 80084a4:	4818      	ldr	r0, [pc, #96]	; (8008508 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80084a6:	f7f9 f82b 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddsec_msg;
 80084aa:	4818      	ldr	r0, [pc, #96]	; (800850c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80084ac:	f7f9 f828 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddnsec_msg;
 80084b0:	4817      	ldr	r0, [pc, #92]	; (8008510 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80084b2:	f7f9 f825 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 80084b6:	2300      	movs	r3, #0
 80084b8:	4a11      	ldr	r2, [pc, #68]	; (8008500 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80084ba:	4916      	ldr	r1, [pc, #88]	; (8008514 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80084bc:	4816      	ldr	r0, [pc, #88]	; (8008518 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80084be:	f7f8 fe53 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 80084c2:	2300      	movs	r3, #0
 80084c4:	4a0f      	ldr	r2, [pc, #60]	; (8008504 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80084c6:	4915      	ldr	r1, [pc, #84]	; (800851c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80084c8:	4815      	ldr	r0, [pc, #84]	; (8008520 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80084ca:	f7f8 fe4d 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 80084ce:	2300      	movs	r3, #0
 80084d0:	4a0d      	ldr	r2, [pc, #52]	; (8008508 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80084d2:	4914      	ldr	r1, [pc, #80]	; (8008524 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80084d4:	4814      	ldr	r0, [pc, #80]	; (8008528 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80084d6:	f7f8 fe47 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("ddddd_sec", &dddddsec_msg);
 80084da:	2300      	movs	r3, #0
 80084dc:	4a0b      	ldr	r2, [pc, #44]	; (800850c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80084de:	4913      	ldr	r1, [pc, #76]	; (800852c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80084e0:	4813      	ldr	r0, [pc, #76]	; (8008530 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80084e2:	f7f8 fe41 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("ddddd_nsec", &dddddnsec_msg);
 80084e6:	2300      	movs	r3, #0
 80084e8:	4a09      	ldr	r2, [pc, #36]	; (8008510 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80084ea:	4912      	ldr	r1, [pc, #72]	; (8008534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80084ec:	4812      	ldr	r0, [pc, #72]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80084ee:	f7f8 fe3b 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	200031a4 	.word	0x200031a4
 8008500:	20003ae0 	.word	0x20003ae0
 8008504:	20003ae8 	.word	0x20003ae8
 8008508:	20003af8 	.word	0x20003af8
 800850c:	20003b08 	.word	0x20003b08
 8008510:	20003b18 	.word	0x20003b18
 8008514:	0800d0a0 	.word	0x0800d0a0
 8008518:	20003b28 	.word	0x20003b28
 800851c:	0800d0a8 	.word	0x0800d0a8
 8008520:	20003b3c 	.word	0x20003b3c
 8008524:	0800d0b8 	.word	0x0800d0b8
 8008528:	20003b50 	.word	0x20003b50
 800852c:	0800d0c8 	.word	0x0800d0c8
 8008530:	20003b64 	.word	0x20003b64
 8008534:	0800d0d4 	.word	0x0800d0d4
 8008538:	20003b78 	.word	0x20003b78

0800853c <_GLOBAL__sub_I_left_encoder_count>:
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
 8008540:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008544:	2001      	movs	r0, #1
 8008546:	f7ff ff97 	bl	8008478 <_Z41__static_initialization_and_destruction_0ii>
 800854a:	bd80      	pop	{r7, pc}

0800854c <_Z12wheelDirInitv>:

float vel_Kp[WHEEL_NUM];
float vel_Ki[WHEEL_NUM];
float vel_Kd[WHEEL_NUM];

void wheelDirInit() {
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008552:	1d3b      	adds	r3, r7, #4
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	60da      	str	r2, [r3, #12]
 800855e:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8008560:	2300      	movs	r3, #0
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <_Z12wheelDirInitv+0x5c>)
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	4a0f      	ldr	r2, [pc, #60]	; (80085a8 <_Z12wheelDirInitv+0x5c>)
 800856a:	f043 0310 	orr.w	r3, r3, #16
 800856e:	6313      	str	r3, [r2, #48]	; 0x30
 8008570:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <_Z12wheelDirInitv+0x5c>)
 8008572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800857c:	2200      	movs	r2, #0
 800857e:	213c      	movs	r1, #60	; 0x3c
 8008580:	480a      	ldr	r0, [pc, #40]	; (80085ac <_Z12wheelDirInitv+0x60>)
 8008582:	f001 f8f9 	bl	8009778 <HAL_GPIO_WritePin>
			MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin | MOTOR_RIGHT_DIR1_Pin
					| MOTOR_RIGHT_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin
 8008586:	233c      	movs	r3, #60	; 0x3c
 8008588:	607b      	str	r3, [r7, #4]
			| MOTOR_RIGHT_DIR1_Pin | MOTOR_RIGHT_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800858a:	2301      	movs	r3, #1
 800858c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008592:	2300      	movs	r3, #0
 8008594:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008596:	1d3b      	adds	r3, r7, #4
 8008598:	4619      	mov	r1, r3
 800859a:	4804      	ldr	r0, [pc, #16]	; (80085ac <_Z12wheelDirInitv+0x60>)
 800859c:	f000 ff3a 	bl	8009414 <HAL_GPIO_Init>

}
 80085a0:	bf00      	nop
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40023800 	.word	0x40023800
 80085ac:	40021000 	.word	0x40021000

080085b0 <_Z12wheelPWMInitv>:

void wheelPWMInit() {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08e      	sub	sp, #56	; 0x38
 80085b4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80085b6:	2300      	movs	r3, #0
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	4b3e      	ldr	r3, [pc, #248]	; (80086b4 <_Z12wheelPWMInitv+0x104>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	4a3d      	ldr	r2, [pc, #244]	; (80086b4 <_Z12wheelPWMInitv+0x104>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	6313      	str	r3, [r2, #48]	; 0x30
 80085c6:	4b3b      	ldr	r3, [pc, #236]	; (80086b4 <_Z12wheelPWMInitv+0x104>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80085d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	609a      	str	r2, [r3, #8]
 80085de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80085e0:	f107 0320 	add.w	r3, r7, #32
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	609a      	str	r2, [r3, #8]
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	611a      	str	r2, [r3, #16]
 80085f8:	615a      	str	r2, [r3, #20]
 80085fa:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 80085fc:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 80085fe:	4a2f      	ldr	r2, [pc, #188]	; (80086bc <_Z12wheelPWMInitv+0x10c>)
 8008600:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2 - 1;
 8008602:	4b2d      	ldr	r3, [pc, #180]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 8008604:	2201      	movs	r2, #1
 8008606:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008608:	4b2b      	ldr	r3, [pc, #172]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 800860a:	2200      	movs	r2, #0
 800860c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 42000 - 1;
 800860e:	4b2a      	ldr	r3, [pc, #168]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 8008610:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8008614:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008616:	4b28      	ldr	r3, [pc, #160]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 8008618:	2200      	movs	r2, #0
 800861a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800861c:	4b26      	ldr	r3, [pc, #152]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 800861e:	2200      	movs	r2, #0
 8008620:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8008622:	4825      	ldr	r0, [pc, #148]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 8008624:	f001 fe74 	bl	800a310 <HAL_TIM_Base_Init>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800862c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8008632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008636:	4619      	mov	r1, r3
 8008638:	481f      	ldr	r0, [pc, #124]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 800863a:	f002 f897 	bl	800a76c <HAL_TIM_ConfigClockSource>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8008642:	481d      	ldr	r0, [pc, #116]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 8008644:	f001 fe8f 	bl	800a366 <HAL_TIM_PWM_Init>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800864c:	2300      	movs	r3, #0
 800864e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008650:	2300      	movs	r3, #0
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8008654:	f107 0320 	add.w	r3, r7, #32
 8008658:	4619      	mov	r1, r3
 800865a:	4817      	ldr	r0, [pc, #92]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 800865c:	f002 fc4e 	bl	800aefc <HAL_TIMEx_MasterConfigSynchronization>
 8008660:	4603      	mov	r3, r0
			!= HAL_OK) {
 8008662:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008664:	2360      	movs	r3, #96	; 0x60
 8008666:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8008674:	1d3b      	adds	r3, r7, #4
 8008676:	2200      	movs	r2, #0
 8008678:	4619      	mov	r1, r3
 800867a:	480f      	ldr	r0, [pc, #60]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 800867c:	f001 ffb0 	bl	800a5e0 <HAL_TIM_PWM_ConfigChannel>
 8008680:	4603      	mov	r3, r0
			!= HAL_OK) {
 8008682:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	2204      	movs	r2, #4
 8008688:	4619      	mov	r1, r3
 800868a:	480b      	ldr	r0, [pc, #44]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 800868c:	f001 ffa8 	bl	800a5e0 <HAL_TIM_PWM_ConfigChannel>
 8008690:	4603      	mov	r3, r0
			!= HAL_OK) {
 8008692:	2b00      	cmp	r3, #0
//		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim3);
 8008694:	4808      	ldr	r0, [pc, #32]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 8008696:	f7ff fbf3 	bl	8007e80 <HAL_TIM_MspPostInit>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800869a:	2100      	movs	r1, #0
 800869c:	4806      	ldr	r0, [pc, #24]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 800869e:	f001 fe97 	bl	800a3d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80086a2:	2104      	movs	r1, #4
 80086a4:	4804      	ldr	r0, [pc, #16]	; (80086b8 <_Z12wheelPWMInitv+0x108>)
 80086a6:	f001 fe93 	bl	800a3d0 <HAL_TIM_PWM_Start>
}
 80086aa:	bf00      	nop
 80086ac:	3738      	adds	r7, #56	; 0x38
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	40023800 	.word	0x40023800
 80086b8:	20004594 	.word	0x20004594
 80086bc:	40000400 	.word	0x40000400

080086c0 <_Z8moveStopv>:


void moveStop() {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 80086c4:	2200      	movs	r2, #0
 80086c6:	2104      	movs	r1, #4
 80086c8:	480c      	ldr	r0, [pc, #48]	; (80086fc <_Z8moveStopv+0x3c>)
 80086ca:	f001 f855 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 80086ce:	2200      	movs	r2, #0
 80086d0:	2108      	movs	r1, #8
 80086d2:	480a      	ldr	r0, [pc, #40]	; (80086fc <_Z8moveStopv+0x3c>)
 80086d4:	f001 f850 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 80086d8:	2200      	movs	r2, #0
 80086da:	2110      	movs	r1, #16
 80086dc:	4807      	ldr	r0, [pc, #28]	; (80086fc <_Z8moveStopv+0x3c>)
 80086de:	f001 f84b 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 80086e2:	2200      	movs	r2, #0
 80086e4:	2120      	movs	r1, #32
 80086e6:	4805      	ldr	r0, [pc, #20]	; (80086fc <_Z8moveStopv+0x3c>)
 80086e8:	f001 f846 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	TIM3->CCR1 = (uint16_t) 0;
 80086ec:	4b04      	ldr	r3, [pc, #16]	; (8008700 <_Z8moveStopv+0x40>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 0;
 80086f2:	4b03      	ldr	r3, [pc, #12]	; (8008700 <_Z8moveStopv+0x40>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38

}
 80086f8:	bf00      	nop
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40021000 	.word	0x40021000
 8008700:	40000400 	.word	0x40000400

08008704 <_Z11moveForwordv>:

void moveForword() {
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8008708:	2200      	movs	r2, #0
 800870a:	2104      	movs	r1, #4
 800870c:	480d      	ldr	r0, [pc, #52]	; (8008744 <_Z11moveForwordv+0x40>)
 800870e:	f001 f833 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 8008712:	2201      	movs	r2, #1
 8008714:	2108      	movs	r1, #8
 8008716:	480b      	ldr	r0, [pc, #44]	; (8008744 <_Z11moveForwordv+0x40>)
 8008718:	f001 f82e 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 800871c:	2200      	movs	r2, #0
 800871e:	2110      	movs	r1, #16
 8008720:	4808      	ldr	r0, [pc, #32]	; (8008744 <_Z11moveForwordv+0x40>)
 8008722:	f001 f829 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 8008726:	2201      	movs	r2, #1
 8008728:	2120      	movs	r1, #32
 800872a:	4806      	ldr	r0, [pc, #24]	; (8008744 <_Z11moveForwordv+0x40>)
 800872c:	f001 f824 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	TIM3->CCR1 = (uint16_t) 31000 - 1;
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <_Z11moveForwordv+0x44>)
 8008732:	f647 1217 	movw	r2, #30999	; 0x7917
 8008736:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 31000 - 1;
 8008738:	4b03      	ldr	r3, [pc, #12]	; (8008748 <_Z11moveForwordv+0x44>)
 800873a:	f647 1217 	movw	r2, #30999	; 0x7917
 800873e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008740:	bf00      	nop
 8008742:	bd80      	pop	{r7, pc}
 8008744:	40021000 	.word	0x40021000
 8008748:	40000400 	.word	0x40000400

0800874c <_Z8moveLeftv>:

	TIM3->CCR1 = (uint16_t) 21000 - 1;
	TIM3->CCR2 = (uint16_t) 21000 - 1;
}

void moveLeft() {
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8008750:	2201      	movs	r2, #1
 8008752:	2104      	movs	r1, #4
 8008754:	480d      	ldr	r0, [pc, #52]	; (800878c <_Z8moveLeftv+0x40>)
 8008756:	f001 f80f 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 800875a:	2200      	movs	r2, #0
 800875c:	2108      	movs	r1, #8
 800875e:	480b      	ldr	r0, [pc, #44]	; (800878c <_Z8moveLeftv+0x40>)
 8008760:	f001 f80a 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 8008764:	2200      	movs	r2, #0
 8008766:	2110      	movs	r1, #16
 8008768:	4808      	ldr	r0, [pc, #32]	; (800878c <_Z8moveLeftv+0x40>)
 800876a:	f001 f805 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 800876e:	2201      	movs	r2, #1
 8008770:	2120      	movs	r1, #32
 8008772:	4806      	ldr	r0, [pc, #24]	; (800878c <_Z8moveLeftv+0x40>)
 8008774:	f001 f800 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	TIM3->CCR1 = (uint16_t) 21000 - 1;
 8008778:	4b05      	ldr	r3, [pc, #20]	; (8008790 <_Z8moveLeftv+0x44>)
 800877a:	f245 2207 	movw	r2, #20999	; 0x5207
 800877e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 21000 - 1;
 8008780:	4b03      	ldr	r3, [pc, #12]	; (8008790 <_Z8moveLeftv+0x44>)
 8008782:	f245 2207 	movw	r2, #20999	; 0x5207
 8008786:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008788:	bf00      	nop
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40021000 	.word	0x40021000
 8008790:	40000400 	.word	0x40000400

08008794 <_Z9moveRightv>:

void moveRight() {
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8008798:	2200      	movs	r2, #0
 800879a:	2104      	movs	r1, #4
 800879c:	480d      	ldr	r0, [pc, #52]	; (80087d4 <_Z9moveRightv+0x40>)
 800879e:	f000 ffeb 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 80087a2:	2201      	movs	r2, #1
 80087a4:	2108      	movs	r1, #8
 80087a6:	480b      	ldr	r0, [pc, #44]	; (80087d4 <_Z9moveRightv+0x40>)
 80087a8:	f000 ffe6 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 80087ac:	2201      	movs	r2, #1
 80087ae:	2110      	movs	r1, #16
 80087b0:	4808      	ldr	r0, [pc, #32]	; (80087d4 <_Z9moveRightv+0x40>)
 80087b2:	f000 ffe1 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 80087b6:	2200      	movs	r2, #0
 80087b8:	2120      	movs	r1, #32
 80087ba:	4806      	ldr	r0, [pc, #24]	; (80087d4 <_Z9moveRightv+0x40>)
 80087bc:	f000 ffdc 	bl	8009778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	TIM3->CCR1 = (uint16_t) 21000 - 1;
 80087c0:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <_Z9moveRightv+0x44>)
 80087c2:	f245 2207 	movw	r2, #20999	; 0x5207
 80087c6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 21000 - 1;
 80087c8:	4b03      	ldr	r3, [pc, #12]	; (80087d8 <_Z9moveRightv+0x44>)
 80087ca:	f245 2207 	movw	r2, #20999	; 0x5207
 80087ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80087d0:	bf00      	nop
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40021000 	.word	0x40021000
 80087d8:	40000400 	.word	0x40000400

080087dc <_Z13moveLeftWheelv>:
//		wheel_prev[idx] = wheel_latest[idx];
//	}
}


void moveLeftWheel(){
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
	if (vel_target[LEFT] == 1.0f && vel_target[RIGHT] == 0.0f) {
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <_Z13moveLeftWheelv+0x90>)
 80087e2:	edd3 7a00 	vldr	s15, [r3]
 80087e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ea:	eef4 7a47 	vcmp.f32	s15, s14
 80087ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f2:	d10a      	bne.n	800880a <_Z13moveLeftWheelv+0x2e>
 80087f4:	4b1d      	ldr	r3, [pc, #116]	; (800886c <_Z13moveLeftWheelv+0x90>)
 80087f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80087fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	d102      	bne.n	800880a <_Z13moveLeftWheelv+0x2e>
		moveLeft();
 8008804:	f7ff ffa2 	bl	800874c <_Z8moveLeftv>
 8008808:	e02d      	b.n	8008866 <_Z13moveLeftWheelv+0x8a>
	} else if (vel_target[LEFT] == 0.0f && vel_target[RIGHT] == 1.0f) {
 800880a:	4b18      	ldr	r3, [pc, #96]	; (800886c <_Z13moveLeftWheelv+0x90>)
 800880c:	edd3 7a00 	vldr	s15, [r3]
 8008810:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008818:	d10c      	bne.n	8008834 <_Z13moveLeftWheelv+0x58>
 800881a:	4b14      	ldr	r3, [pc, #80]	; (800886c <_Z13moveLeftWheelv+0x90>)
 800881c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008824:	eef4 7a47 	vcmp.f32	s15, s14
 8008828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882c:	d102      	bne.n	8008834 <_Z13moveLeftWheelv+0x58>
		moveRight();
 800882e:	f7ff ffb1 	bl	8008794 <_Z9moveRightv>
 8008832:	e018      	b.n	8008866 <_Z13moveLeftWheelv+0x8a>
	} else if (vel_target[LEFT] == 1.0f && vel_target[RIGHT] == 1.0f) {
 8008834:	4b0d      	ldr	r3, [pc, #52]	; (800886c <_Z13moveLeftWheelv+0x90>)
 8008836:	edd3 7a00 	vldr	s15, [r3]
 800883a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800883e:	eef4 7a47 	vcmp.f32	s15, s14
 8008842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008846:	d10c      	bne.n	8008862 <_Z13moveLeftWheelv+0x86>
 8008848:	4b08      	ldr	r3, [pc, #32]	; (800886c <_Z13moveLeftWheelv+0x90>)
 800884a:	edd3 7a01 	vldr	s15, [r3, #4]
 800884e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008852:	eef4 7a47 	vcmp.f32	s15, s14
 8008856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885a:	d102      	bne.n	8008862 <_Z13moveLeftWheelv+0x86>
		moveForword();
 800885c:	f7ff ff52 	bl	8008704 <_Z11moveForwordv>
 8008860:	e001      	b.n	8008866 <_Z13moveLeftWheelv+0x8a>
	} else {
		moveStop();
 8008862:	f7ff ff2d 	bl	80086c0 <_Z8moveStopv>
	}

}
 8008866:	bf00      	nop
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200045d4 	.word	0x200045d4

08008870 <_Z14moveRightWheelv>:
void moveRightWheel() {
 8008870:	b480      	push	{r7}
 8008872:	af00      	add	r7, sp, #0
//	if (vel_target[RIGHT] == 1.0f) {
//			MoveRight();
//		}

}
 8008874:	bf00      	nop
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <_Z41__static_initialization_and_destruction_0ii>:
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d134      	bne.n	80088fa <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008896:	4293      	cmp	r3, r2
 8008898:	d12f      	bne.n	80088fa <_Z41__static_initialization_and_destruction_0ii+0x7a>
static ros::NodeHandle nh;
 800889a:	481a      	ldr	r0, [pc, #104]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800889c:	f7fb fc42 	bl	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 80088a0:	4819      	ldr	r0, [pc, #100]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80088a2:	f7f8 fd91 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 80088a6:	4819      	ldr	r0, [pc, #100]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80088a8:	f7f8 fe2a 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 80088ac:	4818      	ldr	r0, [pc, #96]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80088ae:	f7f8 fe27 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddsec_msg;
 80088b2:	4818      	ldr	r0, [pc, #96]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80088b4:	f7f8 fe24 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 dddddnsec_msg;
 80088b8:	4817      	ldr	r0, [pc, #92]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80088ba:	f7f8 fe21 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 80088be:	2300      	movs	r3, #0
 80088c0:	4a11      	ldr	r2, [pc, #68]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80088c2:	4916      	ldr	r1, [pc, #88]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80088c4:	4816      	ldr	r0, [pc, #88]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80088c6:	f7f8 fc4f 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 80088ca:	2300      	movs	r3, #0
 80088cc:	4a0f      	ldr	r2, [pc, #60]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80088ce:	4915      	ldr	r1, [pc, #84]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80088d0:	4815      	ldr	r0, [pc, #84]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80088d2:	f7f8 fc49 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 80088d6:	2300      	movs	r3, #0
 80088d8:	4a0d      	ldr	r2, [pc, #52]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80088da:	4914      	ldr	r1, [pc, #80]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80088dc:	4814      	ldr	r0, [pc, #80]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80088de:	f7f8 fc43 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher sec_pub("ddddd_sec", &dddddsec_msg);
 80088e2:	2300      	movs	r3, #0
 80088e4:	4a0b      	ldr	r2, [pc, #44]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80088e6:	4913      	ldr	r1, [pc, #76]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80088e8:	4813      	ldr	r0, [pc, #76]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80088ea:	f7f8 fc3d 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher nsec_pub("ddddd_nsec", &dddddnsec_msg);
 80088ee:	2300      	movs	r3, #0
 80088f0:	4a09      	ldr	r2, [pc, #36]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80088f2:	4912      	ldr	r1, [pc, #72]	; (800893c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80088f4:	4812      	ldr	r0, [pc, #72]	; (8008940 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80088f6:	f7f8 fc37 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20003bac 	.word	0x20003bac
 8008908:	200044e8 	.word	0x200044e8
 800890c:	200044f0 	.word	0x200044f0
 8008910:	20004500 	.word	0x20004500
 8008914:	20004510 	.word	0x20004510
 8008918:	20004520 	.word	0x20004520
 800891c:	0800d258 	.word	0x0800d258
 8008920:	20004530 	.word	0x20004530
 8008924:	0800d260 	.word	0x0800d260
 8008928:	20004544 	.word	0x20004544
 800892c:	0800d270 	.word	0x0800d270
 8008930:	20004558 	.word	0x20004558
 8008934:	0800d280 	.word	0x0800d280
 8008938:	2000456c 	.word	0x2000456c
 800893c:	0800d28c 	.word	0x0800d28c
 8008940:	20004580 	.word	0x20004580

08008944 <_GLOBAL__sub_I_wheel_prev>:
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
 8008948:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800894c:	2001      	movs	r0, #1
 800894e:	f7ff ff97 	bl	8008880 <_Z41__static_initialization_and_destruction_0ii>
 8008952:	bd80      	pop	{r7, pc}

08008954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800898c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800895a:	e003      	b.n	8008964 <LoopCopyDataInit>

0800895c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800895c:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800895e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008962:	3104      	adds	r1, #4

08008964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008964:	480b      	ldr	r0, [pc, #44]	; (8008994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800896a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800896c:	d3f6      	bcc.n	800895c <CopyDataInit>
  ldr  r2, =_sbss
 800896e:	4a0b      	ldr	r2, [pc, #44]	; (800899c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008970:	e002      	b.n	8008978 <LoopFillZerobss>

08008972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008974:	f842 3b04 	str.w	r3, [r2], #4

08008978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008978:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800897a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800897c:	d3f9      	bcc.n	8008972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800897e:	f7ff fc65 	bl	800824c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008982:	f003 fb53 	bl	800c02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008986:	f7fc f911 	bl	8004bac <main>
  bx  lr    
 800898a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800898c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008990:	0800d5e8 	.word	0x0800d5e8
  ldr  r0, =_sdata
 8008994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008998:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800899c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80089a0:	200045ec 	.word	0x200045ec

080089a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80089a4:	e7fe      	b.n	80089a4 <ADC_IRQHandler>
	...

080089a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <HAL_Init+0x40>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a0d      	ldr	r2, [pc, #52]	; (80089e8 <HAL_Init+0x40>)
 80089b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <HAL_Init+0x40>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0a      	ldr	r2, [pc, #40]	; (80089e8 <HAL_Init+0x40>)
 80089be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089c4:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <HAL_Init+0x40>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <HAL_Init+0x40>)
 80089ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089d0:	2003      	movs	r0, #3
 80089d2:	f000 f94d 	bl	8008c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089d6:	2000      	movs	r0, #0
 80089d8:	f000 f808 	bl	80089ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089dc:	f7ff f940 	bl	8007c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40023c00 	.word	0x40023c00

080089ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089f4:	4b12      	ldr	r3, [pc, #72]	; (8008a40 <HAL_InitTick+0x54>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <HAL_InitTick+0x58>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 f965 	bl	8008cda <HAL_SYSTICK_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e00e      	b.n	8008a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b0f      	cmp	r3, #15
 8008a1e:	d80a      	bhi.n	8008a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a20:	2200      	movs	r2, #0
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	f000 f92d 	bl	8008c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a2c:	4a06      	ldr	r2, [pc, #24]	; (8008a48 <HAL_InitTick+0x5c>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	e000      	b.n	8008a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000000 	.word	0x20000000
 8008a44:	20000008 	.word	0x20000008
 8008a48:	20000004 	.word	0x20000004

08008a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a50:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <HAL_IncTick+0x20>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <HAL_IncTick+0x24>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	4a04      	ldr	r2, [pc, #16]	; (8008a70 <HAL_IncTick+0x24>)
 8008a5e:	6013      	str	r3, [r2, #0]
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20000008 	.word	0x20000008
 8008a70:	200045e4 	.word	0x200045e4

08008a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  return uwTick;
 8008a78:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <HAL_GetTick+0x14>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	200045e4 	.word	0x200045e4

08008a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a94:	f7ff ffee 	bl	8008a74 <HAL_GetTick>
 8008a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa4:	d005      	beq.n	8008ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <HAL_Delay+0x40>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ab2:	bf00      	nop
 8008ab4:	f7ff ffde 	bl	8008a74 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d8f7      	bhi.n	8008ab4 <HAL_Delay+0x28>
  {
  }
}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000008 	.word	0x20000008

08008ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <__NVIC_SetPriorityGrouping+0x44>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008aec:	4013      	ands	r3, r2
 8008aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b02:	4a04      	ldr	r2, [pc, #16]	; (8008b14 <__NVIC_SetPriorityGrouping+0x44>)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	60d3      	str	r3, [r2, #12]
}
 8008b08:	bf00      	nop
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	e000ed00 	.word	0xe000ed00

08008b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <__NVIC_GetPriorityGrouping+0x18>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	0a1b      	lsrs	r3, r3, #8
 8008b22:	f003 0307 	and.w	r3, r3, #7
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	e000ed00 	.word	0xe000ed00

08008b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	db0b      	blt.n	8008b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	f003 021f 	and.w	r2, r3, #31
 8008b4c:	4907      	ldr	r1, [pc, #28]	; (8008b6c <__NVIC_EnableIRQ+0x38>)
 8008b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	2001      	movs	r0, #1
 8008b56:	fa00 f202 	lsl.w	r2, r0, r2
 8008b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	e000e100 	.word	0xe000e100

08008b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	6039      	str	r1, [r7, #0]
 8008b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	db0a      	blt.n	8008b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	490c      	ldr	r1, [pc, #48]	; (8008bbc <__NVIC_SetPriority+0x4c>)
 8008b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b8e:	0112      	lsls	r2, r2, #4
 8008b90:	b2d2      	uxtb	r2, r2
 8008b92:	440b      	add	r3, r1
 8008b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008b98:	e00a      	b.n	8008bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	4908      	ldr	r1, [pc, #32]	; (8008bc0 <__NVIC_SetPriority+0x50>)
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	3b04      	subs	r3, #4
 8008ba8:	0112      	lsls	r2, r2, #4
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	440b      	add	r3, r1
 8008bae:	761a      	strb	r2, [r3, #24]
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	e000e100 	.word	0xe000e100
 8008bc0:	e000ed00 	.word	0xe000ed00

08008bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b089      	sub	sp, #36	; 0x24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f1c3 0307 	rsb	r3, r3, #7
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	bf28      	it	cs
 8008be2:	2304      	movcs	r3, #4
 8008be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	3304      	adds	r3, #4
 8008bea:	2b06      	cmp	r3, #6
 8008bec:	d902      	bls.n	8008bf4 <NVIC_EncodePriority+0x30>
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	3b03      	subs	r3, #3
 8008bf2:	e000      	b.n	8008bf6 <NVIC_EncodePriority+0x32>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43da      	mvns	r2, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	401a      	ands	r2, r3
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	fa01 f303 	lsl.w	r3, r1, r3
 8008c16:	43d9      	mvns	r1, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c1c:	4313      	orrs	r3, r2
         );
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3724      	adds	r7, #36	; 0x24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
	...

08008c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c3c:	d301      	bcc.n	8008c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e00f      	b.n	8008c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c42:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <SysTick_Config+0x40>)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c4a:	210f      	movs	r1, #15
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	f7ff ff8e 	bl	8008b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <SysTick_Config+0x40>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c5a:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <SysTick_Config+0x40>)
 8008c5c:	2207      	movs	r2, #7
 8008c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	e000e010 	.word	0xe000e010

08008c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ff29 	bl	8008ad0 <__NVIC_SetPriorityGrouping>
}
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b086      	sub	sp, #24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c98:	f7ff ff3e 	bl	8008b18 <__NVIC_GetPriorityGrouping>
 8008c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	6978      	ldr	r0, [r7, #20]
 8008ca4:	f7ff ff8e 	bl	8008bc4 <NVIC_EncodePriority>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff ff5d 	bl	8008b70 <__NVIC_SetPriority>
}
 8008cb6:	bf00      	nop
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff ff31 	bl	8008b34 <__NVIC_EnableIRQ>
}
 8008cd2:	bf00      	nop
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff ffa2 	bl	8008c2c <SysTick_Config>
 8008ce8:	4603      	mov	r3, r0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008d00:	f7ff feb8 	bl	8008a74 <HAL_GetTick>
 8008d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e099      	b.n	8008e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0201 	bic.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d30:	e00f      	b.n	8008d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d32:	f7ff fe9f 	bl	8008a74 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b05      	cmp	r3, #5
 8008d3e:	d908      	bls.n	8008d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2220      	movs	r2, #32
 8008d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2203      	movs	r2, #3
 8008d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e078      	b.n	8008e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e8      	bne.n	8008d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4b38      	ldr	r3, [pc, #224]	; (8008e4c <HAL_DMA_Init+0x158>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d107      	bne.n	8008dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	4313      	orrs	r3, r2
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 0307 	bic.w	r3, r3, #7
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d117      	bne.n	8008e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00e      	beq.n	8008e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fa91 	bl	8009320 <DMA_CheckFifoParam>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d008      	beq.n	8008e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2240      	movs	r2, #64	; 0x40
 8008e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008e12:	2301      	movs	r3, #1
 8008e14:	e016      	b.n	8008e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa48 	bl	80092b4 <DMA_CalcBaseAndBitshift>
 8008e24:	4603      	mov	r3, r0
 8008e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2c:	223f      	movs	r2, #63	; 0x3f
 8008e2e:	409a      	lsls	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	f010803f 	.word	0xf010803f

08008e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_DMA_Start_IT+0x26>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e040      	b.n	8008ef8 <HAL_DMA_Start_IT+0xa8>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d12f      	bne.n	8008eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 f9da 	bl	8009258 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea8:	223f      	movs	r2, #63	; 0x3f
 8008eaa:	409a      	lsls	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0216 	orr.w	r2, r2, #22
 8008ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0208 	orr.w	r2, r2, #8
 8008ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	e005      	b.n	8008ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d004      	beq.n	8008f1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2280      	movs	r2, #128	; 0x80
 8008f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e00c      	b.n	8008f38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2205      	movs	r2, #5
 8008f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0201 	bic.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008f50:	4b92      	ldr	r3, [pc, #584]	; (800919c <HAL_DMA_IRQHandler+0x258>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a92      	ldr	r2, [pc, #584]	; (80091a0 <HAL_DMA_IRQHandler+0x25c>)
 8008f56:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5a:	0a9b      	lsrs	r3, r3, #10
 8008f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6e:	2208      	movs	r2, #8
 8008f70:	409a      	lsls	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01a      	beq.n	8008fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d013      	beq.n	8008fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0204 	bic.w	r2, r2, #4
 8008f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	409a      	lsls	r2, r3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa8:	f043 0201 	orr.w	r2, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	409a      	lsls	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d012      	beq.n	8008fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	409a      	lsls	r2, r3
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fde:	f043 0202 	orr.w	r2, r3, #2
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	2204      	movs	r2, #4
 8008fec:	409a      	lsls	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d012      	beq.n	800901c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009008:	2204      	movs	r2, #4
 800900a:	409a      	lsls	r2, r3
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009014:	f043 0204 	orr.w	r2, r3, #4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009020:	2210      	movs	r2, #16
 8009022:	409a      	lsls	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d043      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0308 	and.w	r3, r3, #8
 8009036:	2b00      	cmp	r3, #0
 8009038:	d03c      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800903e:	2210      	movs	r2, #16
 8009040:	409a      	lsls	r2, r3
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d018      	beq.n	8009086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d108      	bne.n	8009074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	2b00      	cmp	r3, #0
 8009068:	d024      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
 8009072:	e01f      	b.n	80090b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01b      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	4798      	blx	r3
 8009084:	e016      	b.n	80090b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0208 	bic.w	r2, r2, #8
 80090a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b8:	2220      	movs	r2, #32
 80090ba:	409a      	lsls	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4013      	ands	r3, r2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 808e 	beq.w	80091e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8086 	beq.w	80091e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090da:	2220      	movs	r2, #32
 80090dc:	409a      	lsls	r2, r3
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b05      	cmp	r3, #5
 80090ec:	d136      	bne.n	800915c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0216 	bic.w	r2, r2, #22
 80090fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	695a      	ldr	r2, [r3, #20]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800910c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <HAL_DMA_IRQHandler+0x1da>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0208 	bic.w	r2, r2, #8
 800912c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009132:	223f      	movs	r2, #63	; 0x3f
 8009134:	409a      	lsls	r2, r3
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914e:	2b00      	cmp	r3, #0
 8009150:	d07d      	beq.n	800924e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
        }
        return;
 800915a:	e078      	b.n	800924e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d01c      	beq.n	80091a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d108      	bne.n	800918a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917c:	2b00      	cmp	r3, #0
 800917e:	d030      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
 8009188:	e02b      	b.n	80091e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d027      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	4798      	blx	r3
 800919a:	e022      	b.n	80091e2 <HAL_DMA_IRQHandler+0x29e>
 800919c:	20000000 	.word	0x20000000
 80091a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10f      	bne.n	80091d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 0210 	bic.w	r2, r2, #16
 80091c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d032      	beq.n	8009250 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d022      	beq.n	800923c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2205      	movs	r2, #5
 80091fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0201 	bic.w	r2, r2, #1
 800920c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	3301      	adds	r3, #1
 8009212:	60bb      	str	r3, [r7, #8]
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	429a      	cmp	r2, r3
 8009218:	d307      	bcc.n	800922a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f2      	bne.n	800920e <HAL_DMA_IRQHandler+0x2ca>
 8009228:	e000      	b.n	800922c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800922a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
 800924c:	e000      	b.n	8009250 <HAL_DMA_IRQHandler+0x30c>
        return;
 800924e:	bf00      	nop
    }
  }
}
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009274:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d108      	bne.n	8009298 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009296:	e007      	b.n	80092a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	60da      	str	r2, [r3, #12]
}
 80092a8:	bf00      	nop
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	3b10      	subs	r3, #16
 80092c4:	4a14      	ldr	r2, [pc, #80]	; (8009318 <DMA_CalcBaseAndBitshift+0x64>)
 80092c6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ca:	091b      	lsrs	r3, r3, #4
 80092cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80092ce:	4a13      	ldr	r2, [pc, #76]	; (800931c <DMA_CalcBaseAndBitshift+0x68>)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d909      	bls.n	80092f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80092ea:	f023 0303 	bic.w	r3, r3, #3
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	659a      	str	r2, [r3, #88]	; 0x58
 80092f4:	e007      	b.n	8009306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80092fe:	f023 0303 	bic.w	r3, r3, #3
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	aaaaaaab 	.word	0xaaaaaaab
 800931c:	0800d5b8 	.word	0x0800d5b8

08009320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d11f      	bne.n	800937a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b03      	cmp	r3, #3
 800933e:	d855      	bhi.n	80093ec <DMA_CheckFifoParam+0xcc>
 8009340:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <DMA_CheckFifoParam+0x28>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	08009359 	.word	0x08009359
 800934c:	0800936b 	.word	0x0800936b
 8009350:	08009359 	.word	0x08009359
 8009354:	080093ed 	.word	0x080093ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d045      	beq.n	80093f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009368:	e042      	b.n	80093f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009372:	d13f      	bne.n	80093f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009378:	e03c      	b.n	80093f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009382:	d121      	bne.n	80093c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b03      	cmp	r3, #3
 8009388:	d836      	bhi.n	80093f8 <DMA_CheckFifoParam+0xd8>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <DMA_CheckFifoParam+0x70>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093a1 	.word	0x080093a1
 8009394:	080093a7 	.word	0x080093a7
 8009398:	080093a1 	.word	0x080093a1
 800939c:	080093b9 	.word	0x080093b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	73fb      	strb	r3, [r7, #15]
      break;
 80093a4:	e02f      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d024      	beq.n	80093fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093b6:	e021      	b.n	80093fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80093c0:	d11e      	bne.n	8009400 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80093c6:	e01b      	b.n	8009400 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d902      	bls.n	80093d4 <DMA_CheckFifoParam+0xb4>
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d003      	beq.n	80093da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80093d2:	e018      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	73fb      	strb	r3, [r7, #15]
      break;
 80093d8:	e015      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00e      	beq.n	8009404 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ea:	e00b      	b.n	8009404 <DMA_CheckFifoParam+0xe4>
      break;
 80093ec:	bf00      	nop
 80093ee:	e00a      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      break;
 80093f0:	bf00      	nop
 80093f2:	e008      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      break;
 80093f4:	bf00      	nop
 80093f6:	e006      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      break;
 80093f8:	bf00      	nop
 80093fa:	e004      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      break;
 80093fc:	bf00      	nop
 80093fe:	e002      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      break;   
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <DMA_CheckFifoParam+0xe6>
      break;
 8009404:	bf00      	nop
    }
  } 
  
  return status; 
 8009406:	7bfb      	ldrb	r3, [r7, #15]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009414:	b480      	push	{r7}
 8009416:	b089      	sub	sp, #36	; 0x24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800941e:	2300      	movs	r3, #0
 8009420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009426:	2300      	movs	r3, #0
 8009428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	e16b      	b.n	8009708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009430:	2201      	movs	r2, #1
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	4013      	ands	r3, r2
 8009442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	429a      	cmp	r2, r3
 800944a:	f040 815a 	bne.w	8009702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d00b      	beq.n	800946e <HAL_GPIO_Init+0x5a>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b02      	cmp	r3, #2
 800945c:	d007      	beq.n	800946e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009462:	2b11      	cmp	r3, #17
 8009464:	d003      	beq.n	800946e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2b12      	cmp	r3, #18
 800946c:	d130      	bne.n	80094d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	2203      	movs	r2, #3
 800947a:	fa02 f303 	lsl.w	r3, r2, r3
 800947e:	43db      	mvns	r3, r3
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	4013      	ands	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	4313      	orrs	r3, r2
 8009496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094a4:	2201      	movs	r2, #1
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ac:	43db      	mvns	r3, r3
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	4013      	ands	r3, r2
 80094b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	091b      	lsrs	r3, r3, #4
 80094ba:	f003 0201 	and.w	r2, r3, #1
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	fa02 f303 	lsl.w	r3, r2, r3
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69ba      	ldr	r2, [r7, #24]
 80094ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	2203      	movs	r2, #3
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	43db      	mvns	r3, r3
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	4013      	ands	r3, r2
 80094e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	fa02 f303 	lsl.w	r3, r2, r3
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d003      	beq.n	8009510 <HAL_GPIO_Init+0xfc>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b12      	cmp	r3, #18
 800950e:	d123      	bne.n	8009558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	08da      	lsrs	r2, r3, #3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3208      	adds	r2, #8
 8009518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	220f      	movs	r2, #15
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	43db      	mvns	r3, r3
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	4013      	ands	r3, r2
 8009532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	691a      	ldr	r2, [r3, #16]
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	4313      	orrs	r3, r2
 8009548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	08da      	lsrs	r2, r3, #3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3208      	adds	r2, #8
 8009552:	69b9      	ldr	r1, [r7, #24]
 8009554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	2203      	movs	r2, #3
 8009564:	fa02 f303 	lsl.w	r3, r2, r3
 8009568:	43db      	mvns	r3, r3
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	4013      	ands	r3, r2
 800956e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f003 0203 	and.w	r2, r3, #3
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	fa02 f303 	lsl.w	r3, r2, r3
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	4313      	orrs	r3, r2
 8009584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 80b4 	beq.w	8009702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	4b5f      	ldr	r3, [pc, #380]	; (800971c <HAL_GPIO_Init+0x308>)
 80095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a2:	4a5e      	ldr	r2, [pc, #376]	; (800971c <HAL_GPIO_Init+0x308>)
 80095a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095a8:	6453      	str	r3, [r2, #68]	; 0x44
 80095aa:	4b5c      	ldr	r3, [pc, #368]	; (800971c <HAL_GPIO_Init+0x308>)
 80095ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80095b6:	4a5a      	ldr	r2, [pc, #360]	; (8009720 <HAL_GPIO_Init+0x30c>)
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	089b      	lsrs	r3, r3, #2
 80095bc:	3302      	adds	r3, #2
 80095be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	220f      	movs	r2, #15
 80095ce:	fa02 f303 	lsl.w	r3, r2, r3
 80095d2:	43db      	mvns	r3, r3
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	4013      	ands	r3, r2
 80095d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a51      	ldr	r2, [pc, #324]	; (8009724 <HAL_GPIO_Init+0x310>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d02b      	beq.n	800963a <HAL_GPIO_Init+0x226>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a50      	ldr	r2, [pc, #320]	; (8009728 <HAL_GPIO_Init+0x314>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d025      	beq.n	8009636 <HAL_GPIO_Init+0x222>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a4f      	ldr	r2, [pc, #316]	; (800972c <HAL_GPIO_Init+0x318>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d01f      	beq.n	8009632 <HAL_GPIO_Init+0x21e>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a4e      	ldr	r2, [pc, #312]	; (8009730 <HAL_GPIO_Init+0x31c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d019      	beq.n	800962e <HAL_GPIO_Init+0x21a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a4d      	ldr	r2, [pc, #308]	; (8009734 <HAL_GPIO_Init+0x320>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d013      	beq.n	800962a <HAL_GPIO_Init+0x216>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a4c      	ldr	r2, [pc, #304]	; (8009738 <HAL_GPIO_Init+0x324>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d00d      	beq.n	8009626 <HAL_GPIO_Init+0x212>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a4b      	ldr	r2, [pc, #300]	; (800973c <HAL_GPIO_Init+0x328>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d007      	beq.n	8009622 <HAL_GPIO_Init+0x20e>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a4a      	ldr	r2, [pc, #296]	; (8009740 <HAL_GPIO_Init+0x32c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d101      	bne.n	800961e <HAL_GPIO_Init+0x20a>
 800961a:	2307      	movs	r3, #7
 800961c:	e00e      	b.n	800963c <HAL_GPIO_Init+0x228>
 800961e:	2308      	movs	r3, #8
 8009620:	e00c      	b.n	800963c <HAL_GPIO_Init+0x228>
 8009622:	2306      	movs	r3, #6
 8009624:	e00a      	b.n	800963c <HAL_GPIO_Init+0x228>
 8009626:	2305      	movs	r3, #5
 8009628:	e008      	b.n	800963c <HAL_GPIO_Init+0x228>
 800962a:	2304      	movs	r3, #4
 800962c:	e006      	b.n	800963c <HAL_GPIO_Init+0x228>
 800962e:	2303      	movs	r3, #3
 8009630:	e004      	b.n	800963c <HAL_GPIO_Init+0x228>
 8009632:	2302      	movs	r3, #2
 8009634:	e002      	b.n	800963c <HAL_GPIO_Init+0x228>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <HAL_GPIO_Init+0x228>
 800963a:	2300      	movs	r3, #0
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	f002 0203 	and.w	r2, r2, #3
 8009642:	0092      	lsls	r2, r2, #2
 8009644:	4093      	lsls	r3, r2
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	4313      	orrs	r3, r2
 800964a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800964c:	4934      	ldr	r1, [pc, #208]	; (8009720 <HAL_GPIO_Init+0x30c>)
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	089b      	lsrs	r3, r3, #2
 8009652:	3302      	adds	r3, #2
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800965a:	4b3a      	ldr	r3, [pc, #232]	; (8009744 <HAL_GPIO_Init+0x330>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	43db      	mvns	r3, r3
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	4013      	ands	r3, r2
 8009668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800967e:	4a31      	ldr	r2, [pc, #196]	; (8009744 <HAL_GPIO_Init+0x330>)
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009684:	4b2f      	ldr	r3, [pc, #188]	; (8009744 <HAL_GPIO_Init+0x330>)
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	43db      	mvns	r3, r3
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	4013      	ands	r3, r2
 8009692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80096a8:	4a26      	ldr	r2, [pc, #152]	; (8009744 <HAL_GPIO_Init+0x330>)
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80096ae:	4b25      	ldr	r3, [pc, #148]	; (8009744 <HAL_GPIO_Init+0x330>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	43db      	mvns	r3, r3
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	4013      	ands	r3, r2
 80096bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80096d2:	4a1c      	ldr	r2, [pc, #112]	; (8009744 <HAL_GPIO_Init+0x330>)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80096d8:	4b1a      	ldr	r3, [pc, #104]	; (8009744 <HAL_GPIO_Init+0x330>)
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	4013      	ands	r3, r2
 80096e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80096fc:	4a11      	ldr	r2, [pc, #68]	; (8009744 <HAL_GPIO_Init+0x330>)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	3301      	adds	r3, #1
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	2b0f      	cmp	r3, #15
 800970c:	f67f ae90 	bls.w	8009430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009710:	bf00      	nop
 8009712:	3724      	adds	r7, #36	; 0x24
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	40023800 	.word	0x40023800
 8009720:	40013800 	.word	0x40013800
 8009724:	40020000 	.word	0x40020000
 8009728:	40020400 	.word	0x40020400
 800972c:	40020800 	.word	0x40020800
 8009730:	40020c00 	.word	0x40020c00
 8009734:	40021000 	.word	0x40021000
 8009738:	40021400 	.word	0x40021400
 800973c:	40021800 	.word	0x40021800
 8009740:	40021c00 	.word	0x40021c00
 8009744:	40013c00 	.word	0x40013c00

08009748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	887b      	ldrh	r3, [r7, #2]
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009760:	2301      	movs	r3, #1
 8009762:	73fb      	strb	r3, [r7, #15]
 8009764:	e001      	b.n	800976a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	807b      	strh	r3, [r7, #2]
 8009784:	4613      	mov	r3, r2
 8009786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009788:	787b      	ldrb	r3, [r7, #1]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800978e:	887a      	ldrh	r2, [r7, #2]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009794:	e003      	b.n	800979e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009796:	887b      	ldrh	r3, [r7, #2]
 8009798:	041a      	lsls	r2, r3, #16
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	619a      	str	r2, [r3, #24]
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
	...

080097ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80097b6:	4b08      	ldr	r3, [pc, #32]	; (80097d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80097b8:	695a      	ldr	r2, [r3, #20]
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	4013      	ands	r3, r2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d006      	beq.n	80097d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80097c2:	4a05      	ldr	r2, [pc, #20]	; (80097d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80097c4:	88fb      	ldrh	r3, [r7, #6]
 80097c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80097c8:	88fb      	ldrh	r3, [r7, #6]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fcb0 	bl	8008130 <HAL_GPIO_EXTI_Callback>
  }
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	40013c00 	.word	0x40013c00

080097dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e11f      	b.n	8009a2e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d106      	bne.n	8009808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fe fa54 	bl	8007cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2224      	movs	r2, #36	; 0x24
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f022 0201 	bic.w	r2, r2, #1
 800981e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800982e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800983e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009840:	f000 fd3e 	bl	800a2c0 <HAL_RCC_GetPCLK1Freq>
 8009844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	4a7b      	ldr	r2, [pc, #492]	; (8009a38 <HAL_I2C_Init+0x25c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d807      	bhi.n	8009860 <HAL_I2C_Init+0x84>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4a7a      	ldr	r2, [pc, #488]	; (8009a3c <HAL_I2C_Init+0x260>)
 8009854:	4293      	cmp	r3, r2
 8009856:	bf94      	ite	ls
 8009858:	2301      	movls	r3, #1
 800985a:	2300      	movhi	r3, #0
 800985c:	b2db      	uxtb	r3, r3
 800985e:	e006      	b.n	800986e <HAL_I2C_Init+0x92>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4a77      	ldr	r2, [pc, #476]	; (8009a40 <HAL_I2C_Init+0x264>)
 8009864:	4293      	cmp	r3, r2
 8009866:	bf94      	ite	ls
 8009868:	2301      	movls	r3, #1
 800986a:	2300      	movhi	r3, #0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e0db      	b.n	8009a2e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4a72      	ldr	r2, [pc, #456]	; (8009a44 <HAL_I2C_Init+0x268>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	0c9b      	lsrs	r3, r3, #18
 8009880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	430a      	orrs	r2, r1
 8009894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4a64      	ldr	r2, [pc, #400]	; (8009a38 <HAL_I2C_Init+0x25c>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d802      	bhi.n	80098b0 <HAL_I2C_Init+0xd4>
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	3301      	adds	r3, #1
 80098ae:	e009      	b.n	80098c4 <HAL_I2C_Init+0xe8>
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	4a63      	ldr	r2, [pc, #396]	; (8009a48 <HAL_I2C_Init+0x26c>)
 80098bc:	fba2 2303 	umull	r2, r3, r2, r3
 80098c0:	099b      	lsrs	r3, r3, #6
 80098c2:	3301      	adds	r3, #1
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6812      	ldr	r2, [r2, #0]
 80098c8:	430b      	orrs	r3, r1
 80098ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80098d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	4956      	ldr	r1, [pc, #344]	; (8009a38 <HAL_I2C_Init+0x25c>)
 80098e0:	428b      	cmp	r3, r1
 80098e2:	d80d      	bhi.n	8009900 <HAL_I2C_Init+0x124>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	1e59      	subs	r1, r3, #1
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80098f2:	3301      	adds	r3, #1
 80098f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	bf38      	it	cc
 80098fc:	2304      	movcc	r3, #4
 80098fe:	e04f      	b.n	80099a0 <HAL_I2C_Init+0x1c4>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d111      	bne.n	800992c <HAL_I2C_Init+0x150>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	1e58      	subs	r0, r3, #1
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6859      	ldr	r1, [r3, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	440b      	add	r3, r1
 8009916:	fbb0 f3f3 	udiv	r3, r0, r3
 800991a:	3301      	adds	r3, #1
 800991c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009920:	2b00      	cmp	r3, #0
 8009922:	bf0c      	ite	eq
 8009924:	2301      	moveq	r3, #1
 8009926:	2300      	movne	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	e012      	b.n	8009952 <HAL_I2C_Init+0x176>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	1e58      	subs	r0, r3, #1
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6859      	ldr	r1, [r3, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	0099      	lsls	r1, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009942:	3301      	adds	r3, #1
 8009944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009948:	2b00      	cmp	r3, #0
 800994a:	bf0c      	ite	eq
 800994c:	2301      	moveq	r3, #1
 800994e:	2300      	movne	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <HAL_I2C_Init+0x17e>
 8009956:	2301      	movs	r3, #1
 8009958:	e022      	b.n	80099a0 <HAL_I2C_Init+0x1c4>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10e      	bne.n	8009980 <HAL_I2C_Init+0x1a4>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	1e58      	subs	r0, r3, #1
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6859      	ldr	r1, [r3, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	440b      	add	r3, r1
 8009970:	fbb0 f3f3 	udiv	r3, r0, r3
 8009974:	3301      	adds	r3, #1
 8009976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800997a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800997e:	e00f      	b.n	80099a0 <HAL_I2C_Init+0x1c4>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	1e58      	subs	r0, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6859      	ldr	r1, [r3, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	0099      	lsls	r1, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	fbb0 f3f3 	udiv	r3, r0, r3
 8009996:	3301      	adds	r3, #1
 8009998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800999c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	6809      	ldr	r1, [r1, #0]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	69da      	ldr	r2, [r3, #28]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80099ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	6911      	ldr	r1, [r2, #16]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	68d2      	ldr	r2, [r2, #12]
 80099da:	4311      	orrs	r1, r2
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	430b      	orrs	r3, r1
 80099e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	695a      	ldr	r2, [r3, #20]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0201 	orr.w	r2, r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	000186a0 	.word	0x000186a0
 8009a3c:	001e847f 	.word	0x001e847f
 8009a40:	003d08ff 	.word	0x003d08ff
 8009a44:	431bde83 	.word	0x431bde83
 8009a48:	10624dd3 	.word	0x10624dd3

08009a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e25b      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d075      	beq.n	8009b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a6a:	4ba3      	ldr	r3, [pc, #652]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 030c 	and.w	r3, r3, #12
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d00c      	beq.n	8009a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a76:	4ba0      	ldr	r3, [pc, #640]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a7e:	2b08      	cmp	r3, #8
 8009a80:	d112      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a82:	4b9d      	ldr	r3, [pc, #628]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a8e:	d10b      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a90:	4b99      	ldr	r3, [pc, #612]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d05b      	beq.n	8009b54 <HAL_RCC_OscConfig+0x108>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d157      	bne.n	8009b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e236      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab0:	d106      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x74>
 8009ab2:	4b91      	ldr	r3, [pc, #580]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a90      	ldr	r2, [pc, #576]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	e01d      	b.n	8009afc <HAL_RCC_OscConfig+0xb0>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ac8:	d10c      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x98>
 8009aca:	4b8b      	ldr	r3, [pc, #556]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a8a      	ldr	r2, [pc, #552]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	4b88      	ldr	r3, [pc, #544]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a87      	ldr	r2, [pc, #540]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	e00b      	b.n	8009afc <HAL_RCC_OscConfig+0xb0>
 8009ae4:	4b84      	ldr	r3, [pc, #528]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a83      	ldr	r2, [pc, #524]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	4b81      	ldr	r3, [pc, #516]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a80      	ldr	r2, [pc, #512]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d013      	beq.n	8009b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b04:	f7fe ffb6 	bl	8008a74 <HAL_GetTick>
 8009b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b0c:	f7fe ffb2 	bl	8008a74 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b64      	cmp	r3, #100	; 0x64
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e1fb      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b1e:	4b76      	ldr	r3, [pc, #472]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f0      	beq.n	8009b0c <HAL_RCC_OscConfig+0xc0>
 8009b2a:	e014      	b.n	8009b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b2c:	f7fe ffa2 	bl	8008a74 <HAL_GetTick>
 8009b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b32:	e008      	b.n	8009b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b34:	f7fe ff9e 	bl	8008a74 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	2b64      	cmp	r3, #100	; 0x64
 8009b40:	d901      	bls.n	8009b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e1e7      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b46:	4b6c      	ldr	r3, [pc, #432]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1f0      	bne.n	8009b34 <HAL_RCC_OscConfig+0xe8>
 8009b52:	e000      	b.n	8009b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d063      	beq.n	8009c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b62:	4b65      	ldr	r3, [pc, #404]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f003 030c 	and.w	r3, r3, #12
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00b      	beq.n	8009b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b6e:	4b62      	ldr	r3, [pc, #392]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b76:	2b08      	cmp	r3, #8
 8009b78:	d11c      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b7a:	4b5f      	ldr	r3, [pc, #380]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d116      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b86:	4b5c      	ldr	r3, [pc, #368]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d005      	beq.n	8009b9e <HAL_RCC_OscConfig+0x152>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d001      	beq.n	8009b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e1bb      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b9e:	4b56      	ldr	r3, [pc, #344]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	4952      	ldr	r1, [pc, #328]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bb2:	e03a      	b.n	8009c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d020      	beq.n	8009bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bbc:	4b4f      	ldr	r3, [pc, #316]	; (8009cfc <HAL_RCC_OscConfig+0x2b0>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc2:	f7fe ff57 	bl	8008a74 <HAL_GetTick>
 8009bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bc8:	e008      	b.n	8009bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bca:	f7fe ff53 	bl	8008a74 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e19c      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bdc:	4b46      	ldr	r3, [pc, #280]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0f0      	beq.n	8009bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be8:	4b43      	ldr	r3, [pc, #268]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	4940      	ldr	r1, [pc, #256]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	600b      	str	r3, [r1, #0]
 8009bfc:	e015      	b.n	8009c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bfe:	4b3f      	ldr	r3, [pc, #252]	; (8009cfc <HAL_RCC_OscConfig+0x2b0>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c04:	f7fe ff36 	bl	8008a74 <HAL_GetTick>
 8009c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c0c:	f7fe ff32 	bl	8008a74 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e17b      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c1e:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f0      	bne.n	8009c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d030      	beq.n	8009c98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d016      	beq.n	8009c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c3e:	4b30      	ldr	r3, [pc, #192]	; (8009d00 <HAL_RCC_OscConfig+0x2b4>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c44:	f7fe ff16 	bl	8008a74 <HAL_GetTick>
 8009c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c4a:	e008      	b.n	8009c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c4c:	f7fe ff12 	bl	8008a74 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d901      	bls.n	8009c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e15b      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c5e:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0f0      	beq.n	8009c4c <HAL_RCC_OscConfig+0x200>
 8009c6a:	e015      	b.n	8009c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c6c:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <HAL_RCC_OscConfig+0x2b4>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c72:	f7fe feff 	bl	8008a74 <HAL_GetTick>
 8009c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c78:	e008      	b.n	8009c8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c7a:	f7fe fefb 	bl	8008a74 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d901      	bls.n	8009c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e144      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c8c:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1f0      	bne.n	8009c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80a0 	beq.w	8009de6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10f      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60bb      	str	r3, [r7, #8]
 8009cba:	4b0f      	ldr	r3, [pc, #60]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	4a0e      	ldr	r2, [pc, #56]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8009cc6:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <HAL_RCC_OscConfig+0x2ac>)
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cce:	60bb      	str	r3, [r7, #8]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <HAL_RCC_OscConfig+0x2b8>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d121      	bne.n	8009d26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ce2:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <HAL_RCC_OscConfig+0x2b8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a07      	ldr	r2, [pc, #28]	; (8009d04 <HAL_RCC_OscConfig+0x2b8>)
 8009ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cee:	f7fe fec1 	bl	8008a74 <HAL_GetTick>
 8009cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cf4:	e011      	b.n	8009d1a <HAL_RCC_OscConfig+0x2ce>
 8009cf6:	bf00      	nop
 8009cf8:	40023800 	.word	0x40023800
 8009cfc:	42470000 	.word	0x42470000
 8009d00:	42470e80 	.word	0x42470e80
 8009d04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d08:	f7fe feb4 	bl	8008a74 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d901      	bls.n	8009d1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e0fd      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d1a:	4b81      	ldr	r3, [pc, #516]	; (8009f20 <HAL_RCC_OscConfig+0x4d4>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0f0      	beq.n	8009d08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d106      	bne.n	8009d3c <HAL_RCC_OscConfig+0x2f0>
 8009d2e:	4b7d      	ldr	r3, [pc, #500]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d32:	4a7c      	ldr	r2, [pc, #496]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d34:	f043 0301 	orr.w	r3, r3, #1
 8009d38:	6713      	str	r3, [r2, #112]	; 0x70
 8009d3a:	e01c      	b.n	8009d76 <HAL_RCC_OscConfig+0x32a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b05      	cmp	r3, #5
 8009d42:	d10c      	bne.n	8009d5e <HAL_RCC_OscConfig+0x312>
 8009d44:	4b77      	ldr	r3, [pc, #476]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d48:	4a76      	ldr	r2, [pc, #472]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d4a:	f043 0304 	orr.w	r3, r3, #4
 8009d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d50:	4b74      	ldr	r3, [pc, #464]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d54:	4a73      	ldr	r2, [pc, #460]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d56:	f043 0301 	orr.w	r3, r3, #1
 8009d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d5c:	e00b      	b.n	8009d76 <HAL_RCC_OscConfig+0x32a>
 8009d5e:	4b71      	ldr	r3, [pc, #452]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d62:	4a70      	ldr	r2, [pc, #448]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d64:	f023 0301 	bic.w	r3, r3, #1
 8009d68:	6713      	str	r3, [r2, #112]	; 0x70
 8009d6a:	4b6e      	ldr	r3, [pc, #440]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6e:	4a6d      	ldr	r2, [pc, #436]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d70:	f023 0304 	bic.w	r3, r3, #4
 8009d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d015      	beq.n	8009daa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d7e:	f7fe fe79 	bl	8008a74 <HAL_GetTick>
 8009d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d84:	e00a      	b.n	8009d9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d86:	f7fe fe75 	bl	8008a74 <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e0bc      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d9c:	4b61      	ldr	r3, [pc, #388]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0ee      	beq.n	8009d86 <HAL_RCC_OscConfig+0x33a>
 8009da8:	e014      	b.n	8009dd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009daa:	f7fe fe63 	bl	8008a74 <HAL_GetTick>
 8009dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009db0:	e00a      	b.n	8009dc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009db2:	f7fe fe5f 	bl	8008a74 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d901      	bls.n	8009dc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e0a6      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dc8:	4b56      	ldr	r3, [pc, #344]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1ee      	bne.n	8009db2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d105      	bne.n	8009de6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dda:	4b52      	ldr	r3, [pc, #328]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	4a51      	ldr	r2, [pc, #324]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8092 	beq.w	8009f14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009df0:	4b4c      	ldr	r3, [pc, #304]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f003 030c 	and.w	r3, r3, #12
 8009df8:	2b08      	cmp	r3, #8
 8009dfa:	d05c      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d141      	bne.n	8009e88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e04:	4b48      	ldr	r3, [pc, #288]	; (8009f28 <HAL_RCC_OscConfig+0x4dc>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e0a:	f7fe fe33 	bl	8008a74 <HAL_GetTick>
 8009e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e10:	e008      	b.n	8009e24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e12:	f7fe fe2f 	bl	8008a74 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d901      	bls.n	8009e24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e078      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e24:	4b3f      	ldr	r3, [pc, #252]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1f0      	bne.n	8009e12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	019b      	lsls	r3, r3, #6
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	085b      	lsrs	r3, r3, #1
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	041b      	lsls	r3, r3, #16
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	061b      	lsls	r3, r3, #24
 8009e54:	4933      	ldr	r1, [pc, #204]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e5a:	4b33      	ldr	r3, [pc, #204]	; (8009f28 <HAL_RCC_OscConfig+0x4dc>)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e60:	f7fe fe08 	bl	8008a74 <HAL_GetTick>
 8009e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e66:	e008      	b.n	8009e7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e68:	f7fe fe04 	bl	8008a74 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e04d      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e7a:	4b2a      	ldr	r3, [pc, #168]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0f0      	beq.n	8009e68 <HAL_RCC_OscConfig+0x41c>
 8009e86:	e045      	b.n	8009f14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e88:	4b27      	ldr	r3, [pc, #156]	; (8009f28 <HAL_RCC_OscConfig+0x4dc>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e8e:	f7fe fdf1 	bl	8008a74 <HAL_GetTick>
 8009e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e94:	e008      	b.n	8009ea8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e96:	f7fe fded 	bl	8008a74 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d901      	bls.n	8009ea8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e036      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ea8:	4b1e      	ldr	r3, [pc, #120]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1f0      	bne.n	8009e96 <HAL_RCC_OscConfig+0x44a>
 8009eb4:	e02e      	b.n	8009f14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d101      	bne.n	8009ec2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e029      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ec2:	4b18      	ldr	r3, [pc, #96]	; (8009f24 <HAL_RCC_OscConfig+0x4d8>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d11c      	bne.n	8009f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d115      	bne.n	8009f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009eea:	4013      	ands	r3, r2
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d10d      	bne.n	8009f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d106      	bne.n	8009f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d001      	beq.n	8009f14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e000      	b.n	8009f16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	40007000 	.word	0x40007000
 8009f24:	40023800 	.word	0x40023800
 8009f28:	42470060 	.word	0x42470060

08009f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e0cc      	b.n	800a0da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f40:	4b68      	ldr	r3, [pc, #416]	; (800a0e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 030f 	and.w	r3, r3, #15
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d90c      	bls.n	8009f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f4e:	4b65      	ldr	r3, [pc, #404]	; (800a0e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f56:	4b63      	ldr	r3, [pc, #396]	; (800a0e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d001      	beq.n	8009f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e0b8      	b.n	800a0da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d020      	beq.n	8009fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f80:	4b59      	ldr	r3, [pc, #356]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	4a58      	ldr	r2, [pc, #352]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f98:	4b53      	ldr	r3, [pc, #332]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	4a52      	ldr	r2, [pc, #328]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fa4:	4b50      	ldr	r3, [pc, #320]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	494d      	ldr	r1, [pc, #308]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d044      	beq.n	800a04c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d107      	bne.n	8009fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fca:	4b47      	ldr	r3, [pc, #284]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d119      	bne.n	800a00a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e07f      	b.n	800a0da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d003      	beq.n	8009fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d107      	bne.n	8009ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fea:	4b3f      	ldr	r3, [pc, #252]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d109      	bne.n	800a00a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e06f      	b.n	800a0da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ffa:	4b3b      	ldr	r3, [pc, #236]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e067      	b.n	800a0da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a00a:	4b37      	ldr	r3, [pc, #220]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f023 0203 	bic.w	r2, r3, #3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	4934      	ldr	r1, [pc, #208]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a01c:	f7fe fd2a 	bl	8008a74 <HAL_GetTick>
 800a020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a022:	e00a      	b.n	800a03a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a024:	f7fe fd26 	bl	8008a74 <HAL_GetTick>
 800a028:	4602      	mov	r2, r0
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a032:	4293      	cmp	r3, r2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e04f      	b.n	800a0da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a03a:	4b2b      	ldr	r3, [pc, #172]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f003 020c 	and.w	r2, r3, #12
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	429a      	cmp	r2, r3
 800a04a:	d1eb      	bne.n	800a024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a04c:	4b25      	ldr	r3, [pc, #148]	; (800a0e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 030f 	and.w	r3, r3, #15
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d20c      	bcs.n	800a074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a05a:	4b22      	ldr	r3, [pc, #136]	; (800a0e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a062:	4b20      	ldr	r3, [pc, #128]	; (800a0e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d001      	beq.n	800a074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e032      	b.n	800a0da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d008      	beq.n	800a092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a080:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	4916      	ldr	r1, [pc, #88]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0308 	and.w	r3, r3, #8
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d009      	beq.n	800a0b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a09e:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	490e      	ldr	r1, [pc, #56]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a0b2:	f000 f821 	bl	800a0f8 <HAL_RCC_GetSysClockFreq>
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	4b0b      	ldr	r3, [pc, #44]	; (800a0e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	091b      	lsrs	r3, r3, #4
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	4a0a      	ldr	r2, [pc, #40]	; (800a0ec <HAL_RCC_ClockConfig+0x1c0>)
 800a0c4:	5cd3      	ldrb	r3, [r2, r3]
 800a0c6:	fa21 f303 	lsr.w	r3, r1, r3
 800a0ca:	4a09      	ldr	r2, [pc, #36]	; (800a0f0 <HAL_RCC_ClockConfig+0x1c4>)
 800a0cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a0ce:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c8>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe fc8a 	bl	80089ec <HAL_InitTick>

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	40023c00 	.word	0x40023c00
 800a0e8:	40023800 	.word	0x40023800
 800a0ec:	0800d5a0 	.word	0x0800d5a0
 800a0f0:	20000000 	.word	0x20000000
 800a0f4:	20000004 	.word	0x20000004

0800a0f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	2300      	movs	r3, #0
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	2300      	movs	r3, #0
 800a108:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a10e:	4b63      	ldr	r3, [pc, #396]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f003 030c 	and.w	r3, r3, #12
 800a116:	2b04      	cmp	r3, #4
 800a118:	d007      	beq.n	800a12a <HAL_RCC_GetSysClockFreq+0x32>
 800a11a:	2b08      	cmp	r3, #8
 800a11c:	d008      	beq.n	800a130 <HAL_RCC_GetSysClockFreq+0x38>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f040 80b4 	bne.w	800a28c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a124:	4b5e      	ldr	r3, [pc, #376]	; (800a2a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a126:	60bb      	str	r3, [r7, #8]
       break;
 800a128:	e0b3      	b.n	800a292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a12a:	4b5e      	ldr	r3, [pc, #376]	; (800a2a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a12c:	60bb      	str	r3, [r7, #8]
      break;
 800a12e:	e0b0      	b.n	800a292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a130:	4b5a      	ldr	r3, [pc, #360]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a138:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a13a:	4b58      	ldr	r3, [pc, #352]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d04a      	beq.n	800a1dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a146:	4b55      	ldr	r3, [pc, #340]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	099b      	lsrs	r3, r3, #6
 800a14c:	f04f 0400 	mov.w	r4, #0
 800a150:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	ea03 0501 	and.w	r5, r3, r1
 800a15c:	ea04 0602 	and.w	r6, r4, r2
 800a160:	4629      	mov	r1, r5
 800a162:	4632      	mov	r2, r6
 800a164:	f04f 0300 	mov.w	r3, #0
 800a168:	f04f 0400 	mov.w	r4, #0
 800a16c:	0154      	lsls	r4, r2, #5
 800a16e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a172:	014b      	lsls	r3, r1, #5
 800a174:	4619      	mov	r1, r3
 800a176:	4622      	mov	r2, r4
 800a178:	1b49      	subs	r1, r1, r5
 800a17a:	eb62 0206 	sbc.w	r2, r2, r6
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	f04f 0400 	mov.w	r4, #0
 800a186:	0194      	lsls	r4, r2, #6
 800a188:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a18c:	018b      	lsls	r3, r1, #6
 800a18e:	1a5b      	subs	r3, r3, r1
 800a190:	eb64 0402 	sbc.w	r4, r4, r2
 800a194:	f04f 0100 	mov.w	r1, #0
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	00e2      	lsls	r2, r4, #3
 800a19e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a1a2:	00d9      	lsls	r1, r3, #3
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	195b      	adds	r3, r3, r5
 800a1aa:	eb44 0406 	adc.w	r4, r4, r6
 800a1ae:	f04f 0100 	mov.w	r1, #0
 800a1b2:	f04f 0200 	mov.w	r2, #0
 800a1b6:	0262      	lsls	r2, r4, #9
 800a1b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a1bc:	0259      	lsls	r1, r3, #9
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f04f 0400 	mov.w	r4, #0
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	4623      	mov	r3, r4
 800a1d0:	f7f6 f802 	bl	80001d8 <__aeabi_uldivmod>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	60fb      	str	r3, [r7, #12]
 800a1da:	e049      	b.n	800a270 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1dc:	4b2f      	ldr	r3, [pc, #188]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	099b      	lsrs	r3, r3, #6
 800a1e2:	f04f 0400 	mov.w	r4, #0
 800a1e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a1ea:	f04f 0200 	mov.w	r2, #0
 800a1ee:	ea03 0501 	and.w	r5, r3, r1
 800a1f2:	ea04 0602 	and.w	r6, r4, r2
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	f04f 0300 	mov.w	r3, #0
 800a1fe:	f04f 0400 	mov.w	r4, #0
 800a202:	0154      	lsls	r4, r2, #5
 800a204:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a208:	014b      	lsls	r3, r1, #5
 800a20a:	4619      	mov	r1, r3
 800a20c:	4622      	mov	r2, r4
 800a20e:	1b49      	subs	r1, r1, r5
 800a210:	eb62 0206 	sbc.w	r2, r2, r6
 800a214:	f04f 0300 	mov.w	r3, #0
 800a218:	f04f 0400 	mov.w	r4, #0
 800a21c:	0194      	lsls	r4, r2, #6
 800a21e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a222:	018b      	lsls	r3, r1, #6
 800a224:	1a5b      	subs	r3, r3, r1
 800a226:	eb64 0402 	sbc.w	r4, r4, r2
 800a22a:	f04f 0100 	mov.w	r1, #0
 800a22e:	f04f 0200 	mov.w	r2, #0
 800a232:	00e2      	lsls	r2, r4, #3
 800a234:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a238:	00d9      	lsls	r1, r3, #3
 800a23a:	460b      	mov	r3, r1
 800a23c:	4614      	mov	r4, r2
 800a23e:	195b      	adds	r3, r3, r5
 800a240:	eb44 0406 	adc.w	r4, r4, r6
 800a244:	f04f 0100 	mov.w	r1, #0
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	02a2      	lsls	r2, r4, #10
 800a24e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a252:	0299      	lsls	r1, r3, #10
 800a254:	460b      	mov	r3, r1
 800a256:	4614      	mov	r4, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	4621      	mov	r1, r4
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f04f 0400 	mov.w	r4, #0
 800a262:	461a      	mov	r2, r3
 800a264:	4623      	mov	r3, r4
 800a266:	f7f5 ffb7 	bl	80001d8 <__aeabi_uldivmod>
 800a26a:	4603      	mov	r3, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a270:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	0c1b      	lsrs	r3, r3, #16
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	3301      	adds	r3, #1
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	fbb2 f3f3 	udiv	r3, r2, r3
 800a288:	60bb      	str	r3, [r7, #8]
      break;
 800a28a:	e002      	b.n	800a292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a28c:	4b04      	ldr	r3, [pc, #16]	; (800a2a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a28e:	60bb      	str	r3, [r7, #8]
      break;
 800a290:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a292:	68bb      	ldr	r3, [r7, #8]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a29c:	40023800 	.word	0x40023800
 800a2a0:	00f42400 	.word	0x00f42400
 800a2a4:	007a1200 	.word	0x007a1200

0800a2a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <HAL_RCC_GetHCLKFreq+0x14>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000000 	.word	0x20000000

0800a2c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a2c4:	f7ff fff0 	bl	800a2a8 <HAL_RCC_GetHCLKFreq>
 800a2c8:	4601      	mov	r1, r0
 800a2ca:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	0a9b      	lsrs	r3, r3, #10
 800a2d0:	f003 0307 	and.w	r3, r3, #7
 800a2d4:	4a03      	ldr	r2, [pc, #12]	; (800a2e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2d6:	5cd3      	ldrb	r3, [r2, r3]
 800a2d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	40023800 	.word	0x40023800
 800a2e4:	0800d5b0 	.word	0x0800d5b0

0800a2e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a2ec:	f7ff ffdc 	bl	800a2a8 <HAL_RCC_GetHCLKFreq>
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	0b5b      	lsrs	r3, r3, #13
 800a2f8:	f003 0307 	and.w	r3, r3, #7
 800a2fc:	4a03      	ldr	r2, [pc, #12]	; (800a30c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2fe:	5cd3      	ldrb	r3, [r2, r3]
 800a300:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a304:	4618      	mov	r0, r3
 800a306:	bd80      	pop	{r7, pc}
 800a308:	40023800 	.word	0x40023800
 800a30c:	0800d5b0 	.word	0x0800d5b0

0800a310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e01d      	b.n	800a35e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d106      	bne.n	800a33c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fd fd02 	bl	8007d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3304      	adds	r3, #4
 800a34c:	4619      	mov	r1, r3
 800a34e:	4610      	mov	r0, r2
 800a350:	f000 fac4 	bl	800a8dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e01d      	b.n	800a3b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f815 	bl	800a3bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2202      	movs	r2, #2
 800a396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f000 fa99 	bl	800a8dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fd64 	bl	800aeb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a15      	ldr	r2, [pc, #84]	; (800a444 <HAL_TIM_PWM_Start+0x74>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d004      	beq.n	800a3fc <HAL_TIM_PWM_Start+0x2c>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a14      	ldr	r2, [pc, #80]	; (800a448 <HAL_TIM_PWM_Start+0x78>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d101      	bne.n	800a400 <HAL_TIM_PWM_Start+0x30>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e000      	b.n	800a402 <HAL_TIM_PWM_Start+0x32>
 800a400:	2300      	movs	r3, #0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d007      	beq.n	800a416 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a414:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f003 0307 	and.w	r3, r3, #7
 800a420:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2b06      	cmp	r3, #6
 800a426:	d007      	beq.n	800a438 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	40010000 	.word	0x40010000
 800a448:	40010400 	.word	0x40010400

0800a44c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e083      	b.n	800a568 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d106      	bne.n	800a47a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7fd fc85 	bl	8007d84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2202      	movs	r2, #2
 800a47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6812      	ldr	r2, [r2, #0]
 800a48c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a490:	f023 0307 	bic.w	r3, r3, #7
 800a494:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f000 fa1b 	bl	800a8dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ce:	f023 0303 	bic.w	r3, r3, #3
 800a4d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a4ec:	f023 030c 	bic.w	r3, r3, #12
 800a4f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	68da      	ldr	r2, [r3, #12]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	021b      	lsls	r3, r3, #8
 800a508:	4313      	orrs	r3, r2
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	011a      	lsls	r2, r3, #4
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	031b      	lsls	r3, r3, #12
 800a51c:	4313      	orrs	r3, r2
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	4313      	orrs	r3, r2
 800a522:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a52a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a532:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	011b      	lsls	r3, r3, #4
 800a53e:	4313      	orrs	r3, r2
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <HAL_TIM_Encoder_Start+0x16>
 800a580:	2b04      	cmp	r3, #4
 800a582:	d008      	beq.n	800a596 <HAL_TIM_Encoder_Start+0x26>
 800a584:	e00f      	b.n	800a5a6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2201      	movs	r2, #1
 800a58c:	2100      	movs	r1, #0
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fc8e 	bl	800aeb0 <TIM_CCxChannelCmd>
      break;
 800a594:	e016      	b.n	800a5c4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2201      	movs	r2, #1
 800a59c:	2104      	movs	r1, #4
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fc86 	bl	800aeb0 <TIM_CCxChannelCmd>
      break;
 800a5a4:	e00e      	b.n	800a5c4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 fc7e 	bl	800aeb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	2104      	movs	r1, #4
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 fc77 	bl	800aeb0 <TIM_CCxChannelCmd>
      break;
 800a5c2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d101      	bne.n	800a5fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	e0b4      	b.n	800a764 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2202      	movs	r2, #2
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b0c      	cmp	r3, #12
 800a60e:	f200 809f 	bhi.w	800a750 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a64d 	.word	0x0800a64d
 800a61c:	0800a751 	.word	0x0800a751
 800a620:	0800a751 	.word	0x0800a751
 800a624:	0800a751 	.word	0x0800a751
 800a628:	0800a68d 	.word	0x0800a68d
 800a62c:	0800a751 	.word	0x0800a751
 800a630:	0800a751 	.word	0x0800a751
 800a634:	0800a751 	.word	0x0800a751
 800a638:	0800a6cf 	.word	0x0800a6cf
 800a63c:	0800a751 	.word	0x0800a751
 800a640:	0800a751 	.word	0x0800a751
 800a644:	0800a751 	.word	0x0800a751
 800a648:	0800a70f 	.word	0x0800a70f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f9e2 	bl	800aa1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0208 	orr.w	r2, r2, #8
 800a666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699a      	ldr	r2, [r3, #24]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0204 	bic.w	r2, r2, #4
 800a676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6999      	ldr	r1, [r3, #24]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	619a      	str	r2, [r3, #24]
      break;
 800a68a:	e062      	b.n	800a752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fa32 	bl	800aafc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6999      	ldr	r1, [r3, #24]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	021a      	lsls	r2, r3, #8
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	619a      	str	r2, [r3, #24]
      break;
 800a6cc:	e041      	b.n	800a752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fa87 	bl	800abe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0208 	orr.w	r2, r2, #8
 800a6e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0204 	bic.w	r2, r2, #4
 800a6f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	69d9      	ldr	r1, [r3, #28]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	691a      	ldr	r2, [r3, #16]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	61da      	str	r2, [r3, #28]
      break;
 800a70c:	e021      	b.n	800a752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68b9      	ldr	r1, [r7, #8]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fadb 	bl	800acd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69da      	ldr	r2, [r3, #28]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69da      	ldr	r2, [r3, #28]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69d9      	ldr	r1, [r3, #28]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	021a      	lsls	r2, r3, #8
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	61da      	str	r2, [r3, #28]
      break;
 800a74e:	e000      	b.n	800a752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a750:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_TIM_ConfigClockSource+0x18>
 800a780:	2302      	movs	r3, #2
 800a782:	e0a6      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x166>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a7a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b40      	cmp	r3, #64	; 0x40
 800a7ba:	d067      	beq.n	800a88c <HAL_TIM_ConfigClockSource+0x120>
 800a7bc:	2b40      	cmp	r3, #64	; 0x40
 800a7be:	d80b      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x6c>
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d073      	beq.n	800a8ac <HAL_TIM_ConfigClockSource+0x140>
 800a7c4:	2b10      	cmp	r3, #16
 800a7c6:	d802      	bhi.n	800a7ce <HAL_TIM_ConfigClockSource+0x62>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d06f      	beq.n	800a8ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a7cc:	e078      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	d06c      	beq.n	800a8ac <HAL_TIM_ConfigClockSource+0x140>
 800a7d2:	2b30      	cmp	r3, #48	; 0x30
 800a7d4:	d06a      	beq.n	800a8ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a7d6:	e073      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a7d8:	2b70      	cmp	r3, #112	; 0x70
 800a7da:	d00d      	beq.n	800a7f8 <HAL_TIM_ConfigClockSource+0x8c>
 800a7dc:	2b70      	cmp	r3, #112	; 0x70
 800a7de:	d804      	bhi.n	800a7ea <HAL_TIM_ConfigClockSource+0x7e>
 800a7e0:	2b50      	cmp	r3, #80	; 0x50
 800a7e2:	d033      	beq.n	800a84c <HAL_TIM_ConfigClockSource+0xe0>
 800a7e4:	2b60      	cmp	r3, #96	; 0x60
 800a7e6:	d041      	beq.n	800a86c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a7e8:	e06a      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ee:	d066      	beq.n	800a8be <HAL_TIM_ConfigClockSource+0x152>
 800a7f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7f4:	d017      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a7f6:	e063      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	6899      	ldr	r1, [r3, #8]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	f000 fb32 	bl	800ae70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a81a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	609a      	str	r2, [r3, #8]
      break;
 800a824:	e04c      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	6899      	ldr	r1, [r3, #8]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f000 fb1b 	bl	800ae70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a848:	609a      	str	r2, [r3, #8]
      break;
 800a84a:	e039      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6818      	ldr	r0, [r3, #0]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	6859      	ldr	r1, [r3, #4]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	461a      	mov	r2, r3
 800a85a:	f000 fa8f 	bl	800ad7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2150      	movs	r1, #80	; 0x50
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fae8 	bl	800ae3a <TIM_ITRx_SetConfig>
      break;
 800a86a:	e029      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6859      	ldr	r1, [r3, #4]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	461a      	mov	r2, r3
 800a87a:	f000 faae 	bl	800adda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2160      	movs	r1, #96	; 0x60
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fad8 	bl	800ae3a <TIM_ITRx_SetConfig>
      break;
 800a88a:	e019      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	6859      	ldr	r1, [r3, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	461a      	mov	r2, r3
 800a89a:	f000 fa6f 	bl	800ad7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2140      	movs	r1, #64	; 0x40
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fac8 	bl	800ae3a <TIM_ITRx_SetConfig>
      break;
 800a8aa:	e009      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	f000 fabf 	bl	800ae3a <TIM_ITRx_SetConfig>
      break;
 800a8bc:	e000      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a8be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a40      	ldr	r2, [pc, #256]	; (800a9f0 <TIM_Base_SetConfig+0x114>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d013      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fa:	d00f      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a3d      	ldr	r2, [pc, #244]	; (800a9f4 <TIM_Base_SetConfig+0x118>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d00b      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a3c      	ldr	r2, [pc, #240]	; (800a9f8 <TIM_Base_SetConfig+0x11c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d007      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a3b      	ldr	r2, [pc, #236]	; (800a9fc <TIM_Base_SetConfig+0x120>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d003      	beq.n	800a91c <TIM_Base_SetConfig+0x40>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a3a      	ldr	r2, [pc, #232]	; (800aa00 <TIM_Base_SetConfig+0x124>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d108      	bne.n	800a92e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a2f      	ldr	r2, [pc, #188]	; (800a9f0 <TIM_Base_SetConfig+0x114>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d02b      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a93c:	d027      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2c      	ldr	r2, [pc, #176]	; (800a9f4 <TIM_Base_SetConfig+0x118>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d023      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2b      	ldr	r2, [pc, #172]	; (800a9f8 <TIM_Base_SetConfig+0x11c>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d01f      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a2a      	ldr	r2, [pc, #168]	; (800a9fc <TIM_Base_SetConfig+0x120>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d01b      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a29      	ldr	r2, [pc, #164]	; (800aa00 <TIM_Base_SetConfig+0x124>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d017      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a28      	ldr	r2, [pc, #160]	; (800aa04 <TIM_Base_SetConfig+0x128>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d013      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a27      	ldr	r2, [pc, #156]	; (800aa08 <TIM_Base_SetConfig+0x12c>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00f      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a26      	ldr	r2, [pc, #152]	; (800aa0c <TIM_Base_SetConfig+0x130>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d00b      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a25      	ldr	r2, [pc, #148]	; (800aa10 <TIM_Base_SetConfig+0x134>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d007      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a24      	ldr	r2, [pc, #144]	; (800aa14 <TIM_Base_SetConfig+0x138>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d003      	beq.n	800a98e <TIM_Base_SetConfig+0xb2>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a23      	ldr	r2, [pc, #140]	; (800aa18 <TIM_Base_SetConfig+0x13c>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d108      	bne.n	800a9a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a0a      	ldr	r2, [pc, #40]	; (800a9f0 <TIM_Base_SetConfig+0x114>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d003      	beq.n	800a9d4 <TIM_Base_SetConfig+0xf8>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a0c      	ldr	r2, [pc, #48]	; (800aa00 <TIM_Base_SetConfig+0x124>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d103      	bne.n	800a9dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	691a      	ldr	r2, [r3, #16]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	615a      	str	r2, [r3, #20]
}
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40000400 	.word	0x40000400
 800a9f8:	40000800 	.word	0x40000800
 800a9fc:	40000c00 	.word	0x40000c00
 800aa00:	40010400 	.word	0x40010400
 800aa04:	40014000 	.word	0x40014000
 800aa08:	40014400 	.word	0x40014400
 800aa0c:	40014800 	.word	0x40014800
 800aa10:	40001800 	.word	0x40001800
 800aa14:	40001c00 	.word	0x40001c00
 800aa18:	40002000 	.word	0x40002000

0800aa1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	f023 0201 	bic.w	r2, r3, #1
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f023 0302 	bic.w	r3, r3, #2
 800aa64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a20      	ldr	r2, [pc, #128]	; (800aaf4 <TIM_OC1_SetConfig+0xd8>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d003      	beq.n	800aa80 <TIM_OC1_SetConfig+0x64>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a1f      	ldr	r2, [pc, #124]	; (800aaf8 <TIM_OC1_SetConfig+0xdc>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10c      	bne.n	800aa9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f023 0308 	bic.w	r3, r3, #8
 800aa86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f023 0304 	bic.w	r3, r3, #4
 800aa98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a15      	ldr	r2, [pc, #84]	; (800aaf4 <TIM_OC1_SetConfig+0xd8>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d003      	beq.n	800aaaa <TIM_OC1_SetConfig+0x8e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a14      	ldr	r2, [pc, #80]	; (800aaf8 <TIM_OC1_SetConfig+0xdc>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d111      	bne.n	800aace <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	621a      	str	r2, [r3, #32]
}
 800aae8:	bf00      	nop
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	40010000 	.word	0x40010000
 800aaf8:	40010400 	.word	0x40010400

0800aafc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	f023 0210 	bic.w	r2, r3, #16
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	021b      	lsls	r3, r3, #8
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f023 0320 	bic.w	r3, r3, #32
 800ab46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	011b      	lsls	r3, r3, #4
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a22      	ldr	r2, [pc, #136]	; (800abe0 <TIM_OC2_SetConfig+0xe4>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d003      	beq.n	800ab64 <TIM_OC2_SetConfig+0x68>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a21      	ldr	r2, [pc, #132]	; (800abe4 <TIM_OC2_SetConfig+0xe8>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d10d      	bne.n	800ab80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a17      	ldr	r2, [pc, #92]	; (800abe0 <TIM_OC2_SetConfig+0xe4>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d003      	beq.n	800ab90 <TIM_OC2_SetConfig+0x94>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a16      	ldr	r2, [pc, #88]	; (800abe4 <TIM_OC2_SetConfig+0xe8>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d113      	bne.n	800abb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	40010000 	.word	0x40010000
 800abe4:	40010400 	.word	0x40010400

0800abe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	021b      	lsls	r3, r3, #8
 800ac38:	697a      	ldr	r2, [r7, #20]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a21      	ldr	r2, [pc, #132]	; (800acc8 <TIM_OC3_SetConfig+0xe0>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d003      	beq.n	800ac4e <TIM_OC3_SetConfig+0x66>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a20      	ldr	r2, [pc, #128]	; (800accc <TIM_OC3_SetConfig+0xe4>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d10d      	bne.n	800ac6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a16      	ldr	r2, [pc, #88]	; (800acc8 <TIM_OC3_SetConfig+0xe0>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d003      	beq.n	800ac7a <TIM_OC3_SetConfig+0x92>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a15      	ldr	r2, [pc, #84]	; (800accc <TIM_OC3_SetConfig+0xe4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d113      	bne.n	800aca2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	685a      	ldr	r2, [r3, #4]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	621a      	str	r2, [r3, #32]
}
 800acbc:	bf00      	nop
 800acbe:	371c      	adds	r7, #28
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	40010000 	.word	0x40010000
 800accc:	40010400 	.word	0x40010400

0800acd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	021b      	lsls	r3, r3, #8
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	031b      	lsls	r3, r3, #12
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a12      	ldr	r2, [pc, #72]	; (800ad74 <TIM_OC4_SetConfig+0xa4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d003      	beq.n	800ad38 <TIM_OC4_SetConfig+0x68>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a11      	ldr	r2, [pc, #68]	; (800ad78 <TIM_OC4_SetConfig+0xa8>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d109      	bne.n	800ad4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	019b      	lsls	r3, r3, #6
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	40010000 	.word	0x40010000
 800ad78:	40010400 	.word	0x40010400

0800ad7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	f023 0201 	bic.w	r2, r3, #1
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ada6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f023 030a 	bic.w	r3, r3, #10
 800adb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	621a      	str	r2, [r3, #32]
}
 800adce:	bf00      	nop
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adda:	b480      	push	{r7}
 800addc:	b087      	sub	sp, #28
 800adde:	af00      	add	r7, sp, #0
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	f023 0210 	bic.w	r2, r3, #16
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	031b      	lsls	r3, r3, #12
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	011b      	lsls	r3, r3, #4
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	621a      	str	r2, [r3, #32]
}
 800ae2e:	bf00      	nop
 800ae30:	371c      	adds	r7, #28
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	f043 0307 	orr.w	r3, r3, #7
 800ae5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	609a      	str	r2, [r3, #8]
}
 800ae64:	bf00      	nop
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	021a      	lsls	r2, r3, #8
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	609a      	str	r2, [r3, #8]
}
 800aea4:	bf00      	nop
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	f003 031f 	and.w	r3, r3, #31
 800aec2:	2201      	movs	r2, #1
 800aec4:	fa02 f303 	lsl.w	r3, r2, r3
 800aec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1a      	ldr	r2, [r3, #32]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	43db      	mvns	r3, r3
 800aed2:	401a      	ands	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6a1a      	ldr	r2, [r3, #32]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f003 031f 	and.w	r3, r3, #31
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	fa01 f303 	lsl.w	r3, r1, r3
 800aee8:	431a      	orrs	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	621a      	str	r2, [r3, #32]
}
 800aeee:	bf00      	nop
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
	...

0800aefc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af10:	2302      	movs	r3, #2
 800af12:	e05a      	b.n	800afca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4313      	orrs	r3, r2
 800af44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a21      	ldr	r2, [pc, #132]	; (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d022      	beq.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af60:	d01d      	beq.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a1d      	ldr	r2, [pc, #116]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d018      	beq.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a1b      	ldr	r2, [pc, #108]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d013      	beq.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a1a      	ldr	r2, [pc, #104]	; (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d00e      	beq.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a18      	ldr	r2, [pc, #96]	; (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d009      	beq.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a17      	ldr	r2, [pc, #92]	; (800afec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d004      	beq.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a15      	ldr	r2, [pc, #84]	; (800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d10c      	bne.n	800afb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	4313      	orrs	r3, r2
 800afae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	40010000 	.word	0x40010000
 800afdc:	40000400 	.word	0x40000400
 800afe0:	40000800 	.word	0x40000800
 800afe4:	40000c00 	.word	0x40000c00
 800afe8:	40010400 	.word	0x40010400
 800afec:	40014000 	.word	0x40014000
 800aff0:	40001800 	.word	0x40001800

0800aff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e03f      	b.n	800b086 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d106      	bne.n	800b020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7fc ff6a 	bl	8007ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2224      	movs	r2, #36	; 0x24
 800b024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fc2d 	bl	800b898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	691a      	ldr	r2, [r3, #16]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b04c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	695a      	ldr	r2, [r3, #20]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b05c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68da      	ldr	r2, [r3, #12]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b06c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2220      	movs	r2, #32
 800b078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2220      	movs	r2, #32
 800b080:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	d153      	bne.n	800b152 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <HAL_UART_Transmit_DMA+0x26>
 800b0b0:	88fb      	ldrh	r3, [r7, #6]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e04c      	b.n	800b154 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d101      	bne.n	800b0c8 <HAL_UART_Transmit_DMA+0x38>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e045      	b.n	800b154 <HAL_UART_Transmit_DMA+0xc4>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	88fa      	ldrh	r2, [r7, #6]
 800b0da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	88fa      	ldrh	r2, [r7, #6]
 800b0e0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2221      	movs	r2, #33	; 0x21
 800b0ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	4a19      	ldr	r2, [pc, #100]	; (800b15c <HAL_UART_Transmit_DMA+0xcc>)
 800b0f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fc:	4a18      	ldr	r2, [pc, #96]	; (800b160 <HAL_UART_Transmit_DMA+0xd0>)
 800b0fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b104:	4a17      	ldr	r2, [pc, #92]	; (800b164 <HAL_UART_Transmit_DMA+0xd4>)
 800b106:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10c:	2200      	movs	r2, #0
 800b10e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800b110:	f107 0308 	add.w	r3, r7, #8
 800b114:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	6819      	ldr	r1, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3304      	adds	r3, #4
 800b124:	461a      	mov	r2, r3
 800b126:	88fb      	ldrh	r3, [r7, #6]
 800b128:	f7fd fe92 	bl	8008e50 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b134:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	695a      	ldr	r2, [r3, #20]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b14c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	e000      	b.n	800b154 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b152:	2302      	movs	r3, #2
  }
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	0800b4a5 	.word	0x0800b4a5
 800b160:	0800b4f7 	.word	0x0800b4f7
 800b164:	0800b597 	.word	0x0800b597

0800b168 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	4613      	mov	r3, r2
 800b174:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b20      	cmp	r3, #32
 800b180:	d166      	bne.n	800b250 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <HAL_UART_Receive_DMA+0x26>
 800b188:	88fb      	ldrh	r3, [r7, #6]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e05f      	b.n	800b252 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d101      	bne.n	800b1a0 <HAL_UART_Receive_DMA+0x38>
 800b19c:	2302      	movs	r3, #2
 800b19e:	e058      	b.n	800b252 <HAL_UART_Receive_DMA+0xea>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2222      	movs	r2, #34	; 0x22
 800b1be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c6:	4a25      	ldr	r2, [pc, #148]	; (800b25c <HAL_UART_Receive_DMA+0xf4>)
 800b1c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ce:	4a24      	ldr	r2, [pc, #144]	; (800b260 <HAL_UART_Receive_DMA+0xf8>)
 800b1d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	4a23      	ldr	r2, [pc, #140]	; (800b264 <HAL_UART_Receive_DMA+0xfc>)
 800b1d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1de:	2200      	movs	r2, #0
 800b1e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800b1e2:	f107 0308 	add.w	r3, r7, #8
 800b1e6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	88fb      	ldrh	r3, [r7, #6]
 800b1fa:	f7fd fe29 	bl	8008e50 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b1fe:	2300      	movs	r3, #0
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	613b      	str	r3, [r7, #16]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	613b      	str	r3, [r7, #16]
 800b212:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b22a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	695a      	ldr	r2, [r3, #20]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695a      	ldr	r2, [r3, #20]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b24a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e000      	b.n	800b252 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b250:	2302      	movs	r3, #2
  }
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	0800b513 	.word	0x0800b513
 800b260:	0800b57b 	.word	0x0800b57b
 800b264:	0800b597 	.word	0x0800b597

0800b268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b288:	2300      	movs	r3, #0
 800b28a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10d      	bne.n	800b2ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	f003 0320 	and.w	r3, r3, #32
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d008      	beq.n	800b2ba <HAL_UART_IRQHandler+0x52>
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fa6f 	bl	800b796 <UART_Receive_IT>
      return;
 800b2b8:	e0d1      	b.n	800b45e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 80b0 	beq.w	800b422 <HAL_UART_IRQHandler+0x1ba>
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d105      	bne.n	800b2d8 <HAL_UART_IRQHandler+0x70>
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80a5 	beq.w	800b422 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <HAL_UART_IRQHandler+0x90>
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d005      	beq.n	800b2f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f0:	f043 0201 	orr.w	r2, r3, #1
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	f003 0304 	and.w	r3, r3, #4
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <HAL_UART_IRQHandler+0xb0>
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d005      	beq.n	800b318 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b310:	f043 0202 	orr.w	r2, r3, #2
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	f003 0302 	and.w	r3, r3, #2
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00a      	beq.n	800b338 <HAL_UART_IRQHandler+0xd0>
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b330:	f043 0204 	orr.w	r2, r3, #4
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	f003 0308 	and.w	r3, r3, #8
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00f      	beq.n	800b362 <HAL_UART_IRQHandler+0xfa>
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d104      	bne.n	800b356 <HAL_UART_IRQHandler+0xee>
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d005      	beq.n	800b362 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b35a:	f043 0208 	orr.w	r2, r3, #8
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d078      	beq.n	800b45c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	f003 0320 	and.w	r3, r3, #32
 800b370:	2b00      	cmp	r3, #0
 800b372:	d007      	beq.n	800b384 <HAL_UART_IRQHandler+0x11c>
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	f003 0320 	and.w	r3, r3, #32
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fa09 	bl	800b796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38e:	2b40      	cmp	r3, #64	; 0x40
 800b390:	bf0c      	ite	eq
 800b392:	2301      	moveq	r3, #1
 800b394:	2300      	movne	r3, #0
 800b396:	b2db      	uxtb	r3, r3
 800b398:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b39e:	f003 0308 	and.w	r3, r3, #8
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d102      	bne.n	800b3ac <HAL_UART_IRQHandler+0x144>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d031      	beq.n	800b410 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f952 	bl	800b656 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3bc:	2b40      	cmp	r3, #64	; 0x40
 800b3be:	d123      	bne.n	800b408 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	695a      	ldr	r2, [r3, #20]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d013      	beq.n	800b400 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3dc:	4a21      	ldr	r2, [pc, #132]	; (800b464 <HAL_UART_IRQHandler+0x1fc>)
 800b3de:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fd fd8b 	bl	8008f00 <HAL_DMA_Abort_IT>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d016      	beq.n	800b41e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3fe:	e00e      	b.n	800b41e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f845 	bl	800b490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b406:	e00a      	b.n	800b41e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f841 	bl	800b490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b40e:	e006      	b.n	800b41e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f83d 	bl	800b490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b41c:	e01e      	b.n	800b45c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b41e:	bf00      	nop
    return;
 800b420:	e01c      	b.n	800b45c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d008      	beq.n	800b43e <HAL_UART_IRQHandler+0x1d6>
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b432:	2b00      	cmp	r3, #0
 800b434:	d003      	beq.n	800b43e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f93f 	bl	800b6ba <UART_Transmit_IT>
    return;
 800b43c:	e00f      	b.n	800b45e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00a      	beq.n	800b45e <HAL_UART_IRQHandler+0x1f6>
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d005      	beq.n	800b45e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f987 	bl	800b766 <UART_EndTransmit_IT>
    return;
 800b458:	bf00      	nop
 800b45a:	e000      	b.n	800b45e <HAL_UART_IRQHandler+0x1f6>
    return;
 800b45c:	bf00      	nop
  }
}
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	0800b693 	.word	0x0800b693

0800b468 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d113      	bne.n	800b4e8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	695a      	ldr	r2, [r3, #20]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68da      	ldr	r2, [r3, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4e4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4e6:	e002      	b.n	800b4ee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7f9 fe0d 	bl	8005108 <HAL_UART_TxCpltCallback>
}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b502:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7ff ffaf 	bl	800b468 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d11e      	bne.n	800b56c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68da      	ldr	r2, [r3, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b542:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	695a      	ldr	r2, [r3, #20]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f022 0201 	bic.w	r2, r2, #1
 800b552:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	695a      	ldr	r2, [r3, #20]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b562:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2220      	movs	r2, #32
 800b568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7f9 fddd 	bl	800512c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b586:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff ff77 	bl	800b47c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b58e:	bf00      	nop
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b2:	2b80      	cmp	r3, #128	; 0x80
 800b5b4:	bf0c      	ite	eq
 800b5b6:	2301      	moveq	r3, #1
 800b5b8:	2300      	movne	r3, #0
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b21      	cmp	r3, #33	; 0x21
 800b5c8:	d108      	bne.n	800b5dc <UART_DMAError+0x46>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d005      	beq.n	800b5dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b5d6:	68b8      	ldr	r0, [r7, #8]
 800b5d8:	f000 f827 	bl	800b62a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e6:	2b40      	cmp	r3, #64	; 0x40
 800b5e8:	bf0c      	ite	eq
 800b5ea:	2301      	moveq	r3, #1
 800b5ec:	2300      	movne	r3, #0
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b22      	cmp	r3, #34	; 0x22
 800b5fc:	d108      	bne.n	800b610 <UART_DMAError+0x7a>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2200      	movs	r2, #0
 800b608:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b60a:	68b8      	ldr	r0, [r7, #8]
 800b60c:	f000 f823 	bl	800b656 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b614:	f043 0210 	orr.w	r2, r3, #16
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b61c:	68b8      	ldr	r0, [r7, #8]
 800b61e:	f7ff ff37 	bl	800b490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b622:	bf00      	nop
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b640:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2220      	movs	r2, #32
 800b646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b64a:	bf00      	nop
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68da      	ldr	r2, [r3, #12]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b66c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	695a      	ldr	r2, [r3, #20]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f022 0201 	bic.w	r2, r2, #1
 800b67c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2220      	movs	r2, #32
 800b682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f7ff feef 	bl	800b490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6b2:	bf00      	nop
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b21      	cmp	r3, #33	; 0x21
 800b6cc:	d144      	bne.n	800b758 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d6:	d11a      	bne.n	800b70e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6ec:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d105      	bne.n	800b702 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a1b      	ldr	r3, [r3, #32]
 800b6fa:	1c9a      	adds	r2, r3, #2
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	621a      	str	r2, [r3, #32]
 800b700:	e00e      	b.n	800b720 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	621a      	str	r2, [r3, #32]
 800b70c:	e008      	b.n	800b720 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	1c59      	adds	r1, r3, #1
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	6211      	str	r1, [r2, #32]
 800b718:	781a      	ldrb	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b724:	b29b      	uxth	r3, r3
 800b726:	3b01      	subs	r3, #1
 800b728:	b29b      	uxth	r3, r3
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	4619      	mov	r1, r3
 800b72e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10f      	bne.n	800b754 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68da      	ldr	r2, [r3, #12]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68da      	ldr	r2, [r3, #12]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	e000      	b.n	800b75a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b758:	2302      	movs	r3, #2
  }
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68da      	ldr	r2, [r3, #12]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b77c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2220      	movs	r2, #32
 800b782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7f9 fcbe 	bl	8005108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b084      	sub	sp, #16
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b22      	cmp	r3, #34	; 0x22
 800b7a8:	d171      	bne.n	800b88e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b2:	d123      	bne.n	800b7fc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10e      	bne.n	800b7e0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d8:	1c9a      	adds	r2, r3, #2
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	629a      	str	r2, [r3, #40]	; 0x28
 800b7de:	e029      	b.n	800b834 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	629a      	str	r2, [r3, #40]	; 0x28
 800b7fa:	e01b      	b.n	800b834 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6858      	ldr	r0, [r3, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	1c59      	adds	r1, r3, #1
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	6291      	str	r1, [r2, #40]	; 0x28
 800b814:	b2c2      	uxtb	r2, r0
 800b816:	701a      	strb	r2, [r3, #0]
 800b818:	e00c      	b.n	800b834 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	b2da      	uxtb	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b826:	1c58      	adds	r0, r3, #1
 800b828:	6879      	ldr	r1, [r7, #4]
 800b82a:	6288      	str	r0, [r1, #40]	; 0x28
 800b82c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b830:	b2d2      	uxtb	r2, r2
 800b832:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b838:	b29b      	uxth	r3, r3
 800b83a:	3b01      	subs	r3, #1
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	4619      	mov	r1, r3
 800b842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b844:	2b00      	cmp	r3, #0
 800b846:	d120      	bne.n	800b88a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f022 0220 	bic.w	r2, r2, #32
 800b856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68da      	ldr	r2, [r3, #12]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	695a      	ldr	r2, [r3, #20]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f022 0201 	bic.w	r2, r2, #1
 800b876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2220      	movs	r2, #32
 800b87c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7f9 fc53 	bl	800512c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	e002      	b.n	800b890 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e000      	b.n	800b890 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b88e:	2302      	movs	r3, #2
  }
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	b085      	sub	sp, #20
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	430a      	orrs	r2, r1
 800b8b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689a      	ldr	r2, [r3, #8]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	431a      	orrs	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	69db      	ldr	r3, [r3, #28]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b8da:	f023 030c 	bic.w	r3, r3, #12
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	699a      	ldr	r2, [r3, #24]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	69db      	ldr	r3, [r3, #28]
 800b902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b906:	f040 818b 	bne.w	800bc20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4ac1      	ldr	r2, [pc, #772]	; (800bc14 <UART_SetConfig+0x37c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d005      	beq.n	800b920 <UART_SetConfig+0x88>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4abf      	ldr	r2, [pc, #764]	; (800bc18 <UART_SetConfig+0x380>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	f040 80bd 	bne.w	800ba9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b920:	f7fe fce2 	bl	800a2e8 <HAL_RCC_GetPCLK2Freq>
 800b924:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	461d      	mov	r5, r3
 800b92a:	f04f 0600 	mov.w	r6, #0
 800b92e:	46a8      	mov	r8, r5
 800b930:	46b1      	mov	r9, r6
 800b932:	eb18 0308 	adds.w	r3, r8, r8
 800b936:	eb49 0409 	adc.w	r4, r9, r9
 800b93a:	4698      	mov	r8, r3
 800b93c:	46a1      	mov	r9, r4
 800b93e:	eb18 0805 	adds.w	r8, r8, r5
 800b942:	eb49 0906 	adc.w	r9, r9, r6
 800b946:	f04f 0100 	mov.w	r1, #0
 800b94a:	f04f 0200 	mov.w	r2, #0
 800b94e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b952:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b956:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b95a:	4688      	mov	r8, r1
 800b95c:	4691      	mov	r9, r2
 800b95e:	eb18 0005 	adds.w	r0, r8, r5
 800b962:	eb49 0106 	adc.w	r1, r9, r6
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	461d      	mov	r5, r3
 800b96c:	f04f 0600 	mov.w	r6, #0
 800b970:	196b      	adds	r3, r5, r5
 800b972:	eb46 0406 	adc.w	r4, r6, r6
 800b976:	461a      	mov	r2, r3
 800b978:	4623      	mov	r3, r4
 800b97a:	f7f4 fc2d 	bl	80001d8 <__aeabi_uldivmod>
 800b97e:	4603      	mov	r3, r0
 800b980:	460c      	mov	r4, r1
 800b982:	461a      	mov	r2, r3
 800b984:	4ba5      	ldr	r3, [pc, #660]	; (800bc1c <UART_SetConfig+0x384>)
 800b986:	fba3 2302 	umull	r2, r3, r3, r2
 800b98a:	095b      	lsrs	r3, r3, #5
 800b98c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	461d      	mov	r5, r3
 800b994:	f04f 0600 	mov.w	r6, #0
 800b998:	46a9      	mov	r9, r5
 800b99a:	46b2      	mov	sl, r6
 800b99c:	eb19 0309 	adds.w	r3, r9, r9
 800b9a0:	eb4a 040a 	adc.w	r4, sl, sl
 800b9a4:	4699      	mov	r9, r3
 800b9a6:	46a2      	mov	sl, r4
 800b9a8:	eb19 0905 	adds.w	r9, r9, r5
 800b9ac:	eb4a 0a06 	adc.w	sl, sl, r6
 800b9b0:	f04f 0100 	mov.w	r1, #0
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b9c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b9c4:	4689      	mov	r9, r1
 800b9c6:	4692      	mov	sl, r2
 800b9c8:	eb19 0005 	adds.w	r0, r9, r5
 800b9cc:	eb4a 0106 	adc.w	r1, sl, r6
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	461d      	mov	r5, r3
 800b9d6:	f04f 0600 	mov.w	r6, #0
 800b9da:	196b      	adds	r3, r5, r5
 800b9dc:	eb46 0406 	adc.w	r4, r6, r6
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	f7f4 fbf8 	bl	80001d8 <__aeabi_uldivmod>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	4b8b      	ldr	r3, [pc, #556]	; (800bc1c <UART_SetConfig+0x384>)
 800b9f0:	fba3 1302 	umull	r1, r3, r3, r2
 800b9f4:	095b      	lsrs	r3, r3, #5
 800b9f6:	2164      	movs	r1, #100	; 0x64
 800b9f8:	fb01 f303 	mul.w	r3, r1, r3
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	3332      	adds	r3, #50	; 0x32
 800ba02:	4a86      	ldr	r2, [pc, #536]	; (800bc1c <UART_SetConfig+0x384>)
 800ba04:	fba2 2303 	umull	r2, r3, r2, r3
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba10:	4498      	add	r8, r3
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	461d      	mov	r5, r3
 800ba16:	f04f 0600 	mov.w	r6, #0
 800ba1a:	46a9      	mov	r9, r5
 800ba1c:	46b2      	mov	sl, r6
 800ba1e:	eb19 0309 	adds.w	r3, r9, r9
 800ba22:	eb4a 040a 	adc.w	r4, sl, sl
 800ba26:	4699      	mov	r9, r3
 800ba28:	46a2      	mov	sl, r4
 800ba2a:	eb19 0905 	adds.w	r9, r9, r5
 800ba2e:	eb4a 0a06 	adc.w	sl, sl, r6
 800ba32:	f04f 0100 	mov.w	r1, #0
 800ba36:	f04f 0200 	mov.w	r2, #0
 800ba3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba46:	4689      	mov	r9, r1
 800ba48:	4692      	mov	sl, r2
 800ba4a:	eb19 0005 	adds.w	r0, r9, r5
 800ba4e:	eb4a 0106 	adc.w	r1, sl, r6
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	461d      	mov	r5, r3
 800ba58:	f04f 0600 	mov.w	r6, #0
 800ba5c:	196b      	adds	r3, r5, r5
 800ba5e:	eb46 0406 	adc.w	r4, r6, r6
 800ba62:	461a      	mov	r2, r3
 800ba64:	4623      	mov	r3, r4
 800ba66:	f7f4 fbb7 	bl	80001d8 <__aeabi_uldivmod>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	461a      	mov	r2, r3
 800ba70:	4b6a      	ldr	r3, [pc, #424]	; (800bc1c <UART_SetConfig+0x384>)
 800ba72:	fba3 1302 	umull	r1, r3, r3, r2
 800ba76:	095b      	lsrs	r3, r3, #5
 800ba78:	2164      	movs	r1, #100	; 0x64
 800ba7a:	fb01 f303 	mul.w	r3, r1, r3
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	3332      	adds	r3, #50	; 0x32
 800ba84:	4a65      	ldr	r2, [pc, #404]	; (800bc1c <UART_SetConfig+0x384>)
 800ba86:	fba2 2303 	umull	r2, r3, r2, r3
 800ba8a:	095b      	lsrs	r3, r3, #5
 800ba8c:	f003 0207 	and.w	r2, r3, #7
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4442      	add	r2, r8
 800ba96:	609a      	str	r2, [r3, #8]
 800ba98:	e26f      	b.n	800bf7a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba9a:	f7fe fc11 	bl	800a2c0 <HAL_RCC_GetPCLK1Freq>
 800ba9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	461d      	mov	r5, r3
 800baa4:	f04f 0600 	mov.w	r6, #0
 800baa8:	46a8      	mov	r8, r5
 800baaa:	46b1      	mov	r9, r6
 800baac:	eb18 0308 	adds.w	r3, r8, r8
 800bab0:	eb49 0409 	adc.w	r4, r9, r9
 800bab4:	4698      	mov	r8, r3
 800bab6:	46a1      	mov	r9, r4
 800bab8:	eb18 0805 	adds.w	r8, r8, r5
 800babc:	eb49 0906 	adc.w	r9, r9, r6
 800bac0:	f04f 0100 	mov.w	r1, #0
 800bac4:	f04f 0200 	mov.w	r2, #0
 800bac8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bacc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bad0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bad4:	4688      	mov	r8, r1
 800bad6:	4691      	mov	r9, r2
 800bad8:	eb18 0005 	adds.w	r0, r8, r5
 800badc:	eb49 0106 	adc.w	r1, r9, r6
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	461d      	mov	r5, r3
 800bae6:	f04f 0600 	mov.w	r6, #0
 800baea:	196b      	adds	r3, r5, r5
 800baec:	eb46 0406 	adc.w	r4, r6, r6
 800baf0:	461a      	mov	r2, r3
 800baf2:	4623      	mov	r3, r4
 800baf4:	f7f4 fb70 	bl	80001d8 <__aeabi_uldivmod>
 800baf8:	4603      	mov	r3, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	461a      	mov	r2, r3
 800bafe:	4b47      	ldr	r3, [pc, #284]	; (800bc1c <UART_SetConfig+0x384>)
 800bb00:	fba3 2302 	umull	r2, r3, r3, r2
 800bb04:	095b      	lsrs	r3, r3, #5
 800bb06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	461d      	mov	r5, r3
 800bb0e:	f04f 0600 	mov.w	r6, #0
 800bb12:	46a9      	mov	r9, r5
 800bb14:	46b2      	mov	sl, r6
 800bb16:	eb19 0309 	adds.w	r3, r9, r9
 800bb1a:	eb4a 040a 	adc.w	r4, sl, sl
 800bb1e:	4699      	mov	r9, r3
 800bb20:	46a2      	mov	sl, r4
 800bb22:	eb19 0905 	adds.w	r9, r9, r5
 800bb26:	eb4a 0a06 	adc.w	sl, sl, r6
 800bb2a:	f04f 0100 	mov.w	r1, #0
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bb3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bb3e:	4689      	mov	r9, r1
 800bb40:	4692      	mov	sl, r2
 800bb42:	eb19 0005 	adds.w	r0, r9, r5
 800bb46:	eb4a 0106 	adc.w	r1, sl, r6
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	461d      	mov	r5, r3
 800bb50:	f04f 0600 	mov.w	r6, #0
 800bb54:	196b      	adds	r3, r5, r5
 800bb56:	eb46 0406 	adc.w	r4, r6, r6
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	4623      	mov	r3, r4
 800bb5e:	f7f4 fb3b 	bl	80001d8 <__aeabi_uldivmod>
 800bb62:	4603      	mov	r3, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	461a      	mov	r2, r3
 800bb68:	4b2c      	ldr	r3, [pc, #176]	; (800bc1c <UART_SetConfig+0x384>)
 800bb6a:	fba3 1302 	umull	r1, r3, r3, r2
 800bb6e:	095b      	lsrs	r3, r3, #5
 800bb70:	2164      	movs	r1, #100	; 0x64
 800bb72:	fb01 f303 	mul.w	r3, r1, r3
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	3332      	adds	r3, #50	; 0x32
 800bb7c:	4a27      	ldr	r2, [pc, #156]	; (800bc1c <UART_SetConfig+0x384>)
 800bb7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb82:	095b      	lsrs	r3, r3, #5
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb8a:	4498      	add	r8, r3
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	461d      	mov	r5, r3
 800bb90:	f04f 0600 	mov.w	r6, #0
 800bb94:	46a9      	mov	r9, r5
 800bb96:	46b2      	mov	sl, r6
 800bb98:	eb19 0309 	adds.w	r3, r9, r9
 800bb9c:	eb4a 040a 	adc.w	r4, sl, sl
 800bba0:	4699      	mov	r9, r3
 800bba2:	46a2      	mov	sl, r4
 800bba4:	eb19 0905 	adds.w	r9, r9, r5
 800bba8:	eb4a 0a06 	adc.w	sl, sl, r6
 800bbac:	f04f 0100 	mov.w	r1, #0
 800bbb0:	f04f 0200 	mov.w	r2, #0
 800bbb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbc0:	4689      	mov	r9, r1
 800bbc2:	4692      	mov	sl, r2
 800bbc4:	eb19 0005 	adds.w	r0, r9, r5
 800bbc8:	eb4a 0106 	adc.w	r1, sl, r6
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	461d      	mov	r5, r3
 800bbd2:	f04f 0600 	mov.w	r6, #0
 800bbd6:	196b      	adds	r3, r5, r5
 800bbd8:	eb46 0406 	adc.w	r4, r6, r6
 800bbdc:	461a      	mov	r2, r3
 800bbde:	4623      	mov	r3, r4
 800bbe0:	f7f4 fafa 	bl	80001d8 <__aeabi_uldivmod>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	461a      	mov	r2, r3
 800bbea:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <UART_SetConfig+0x384>)
 800bbec:	fba3 1302 	umull	r1, r3, r3, r2
 800bbf0:	095b      	lsrs	r3, r3, #5
 800bbf2:	2164      	movs	r1, #100	; 0x64
 800bbf4:	fb01 f303 	mul.w	r3, r1, r3
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	00db      	lsls	r3, r3, #3
 800bbfc:	3332      	adds	r3, #50	; 0x32
 800bbfe:	4a07      	ldr	r2, [pc, #28]	; (800bc1c <UART_SetConfig+0x384>)
 800bc00:	fba2 2303 	umull	r2, r3, r2, r3
 800bc04:	095b      	lsrs	r3, r3, #5
 800bc06:	f003 0207 	and.w	r2, r3, #7
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4442      	add	r2, r8
 800bc10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bc12:	e1b2      	b.n	800bf7a <UART_SetConfig+0x6e2>
 800bc14:	40011000 	.word	0x40011000
 800bc18:	40011400 	.word	0x40011400
 800bc1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4ad7      	ldr	r2, [pc, #860]	; (800bf84 <UART_SetConfig+0x6ec>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d005      	beq.n	800bc36 <UART_SetConfig+0x39e>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4ad6      	ldr	r2, [pc, #856]	; (800bf88 <UART_SetConfig+0x6f0>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	f040 80d1 	bne.w	800bdd8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc36:	f7fe fb57 	bl	800a2e8 <HAL_RCC_GetPCLK2Freq>
 800bc3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	469a      	mov	sl, r3
 800bc40:	f04f 0b00 	mov.w	fp, #0
 800bc44:	46d0      	mov	r8, sl
 800bc46:	46d9      	mov	r9, fp
 800bc48:	eb18 0308 	adds.w	r3, r8, r8
 800bc4c:	eb49 0409 	adc.w	r4, r9, r9
 800bc50:	4698      	mov	r8, r3
 800bc52:	46a1      	mov	r9, r4
 800bc54:	eb18 080a 	adds.w	r8, r8, sl
 800bc58:	eb49 090b 	adc.w	r9, r9, fp
 800bc5c:	f04f 0100 	mov.w	r1, #0
 800bc60:	f04f 0200 	mov.w	r2, #0
 800bc64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bc68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bc6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bc70:	4688      	mov	r8, r1
 800bc72:	4691      	mov	r9, r2
 800bc74:	eb1a 0508 	adds.w	r5, sl, r8
 800bc78:	eb4b 0609 	adc.w	r6, fp, r9
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	4619      	mov	r1, r3
 800bc82:	f04f 0200 	mov.w	r2, #0
 800bc86:	f04f 0300 	mov.w	r3, #0
 800bc8a:	f04f 0400 	mov.w	r4, #0
 800bc8e:	0094      	lsls	r4, r2, #2
 800bc90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bc94:	008b      	lsls	r3, r1, #2
 800bc96:	461a      	mov	r2, r3
 800bc98:	4623      	mov	r3, r4
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	f7f4 fa9b 	bl	80001d8 <__aeabi_uldivmod>
 800bca2:	4603      	mov	r3, r0
 800bca4:	460c      	mov	r4, r1
 800bca6:	461a      	mov	r2, r3
 800bca8:	4bb8      	ldr	r3, [pc, #736]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bcaa:	fba3 2302 	umull	r2, r3, r3, r2
 800bcae:	095b      	lsrs	r3, r3, #5
 800bcb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	469b      	mov	fp, r3
 800bcb8:	f04f 0c00 	mov.w	ip, #0
 800bcbc:	46d9      	mov	r9, fp
 800bcbe:	46e2      	mov	sl, ip
 800bcc0:	eb19 0309 	adds.w	r3, r9, r9
 800bcc4:	eb4a 040a 	adc.w	r4, sl, sl
 800bcc8:	4699      	mov	r9, r3
 800bcca:	46a2      	mov	sl, r4
 800bccc:	eb19 090b 	adds.w	r9, r9, fp
 800bcd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bcd4:	f04f 0100 	mov.w	r1, #0
 800bcd8:	f04f 0200 	mov.w	r2, #0
 800bcdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bce0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bce4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bce8:	4689      	mov	r9, r1
 800bcea:	4692      	mov	sl, r2
 800bcec:	eb1b 0509 	adds.w	r5, fp, r9
 800bcf0:	eb4c 060a 	adc.w	r6, ip, sl
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	f04f 0200 	mov.w	r2, #0
 800bcfe:	f04f 0300 	mov.w	r3, #0
 800bd02:	f04f 0400 	mov.w	r4, #0
 800bd06:	0094      	lsls	r4, r2, #2
 800bd08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd0c:	008b      	lsls	r3, r1, #2
 800bd0e:	461a      	mov	r2, r3
 800bd10:	4623      	mov	r3, r4
 800bd12:	4628      	mov	r0, r5
 800bd14:	4631      	mov	r1, r6
 800bd16:	f7f4 fa5f 	bl	80001d8 <__aeabi_uldivmod>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	461a      	mov	r2, r3
 800bd20:	4b9a      	ldr	r3, [pc, #616]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bd22:	fba3 1302 	umull	r1, r3, r3, r2
 800bd26:	095b      	lsrs	r3, r3, #5
 800bd28:	2164      	movs	r1, #100	; 0x64
 800bd2a:	fb01 f303 	mul.w	r3, r1, r3
 800bd2e:	1ad3      	subs	r3, r2, r3
 800bd30:	011b      	lsls	r3, r3, #4
 800bd32:	3332      	adds	r3, #50	; 0x32
 800bd34:	4a95      	ldr	r2, [pc, #596]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bd36:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3a:	095b      	lsrs	r3, r3, #5
 800bd3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd40:	4498      	add	r8, r3
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	469b      	mov	fp, r3
 800bd46:	f04f 0c00 	mov.w	ip, #0
 800bd4a:	46d9      	mov	r9, fp
 800bd4c:	46e2      	mov	sl, ip
 800bd4e:	eb19 0309 	adds.w	r3, r9, r9
 800bd52:	eb4a 040a 	adc.w	r4, sl, sl
 800bd56:	4699      	mov	r9, r3
 800bd58:	46a2      	mov	sl, r4
 800bd5a:	eb19 090b 	adds.w	r9, r9, fp
 800bd5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd62:	f04f 0100 	mov.w	r1, #0
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bd72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bd76:	4689      	mov	r9, r1
 800bd78:	4692      	mov	sl, r2
 800bd7a:	eb1b 0509 	adds.w	r5, fp, r9
 800bd7e:	eb4c 060a 	adc.w	r6, ip, sl
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	4619      	mov	r1, r3
 800bd88:	f04f 0200 	mov.w	r2, #0
 800bd8c:	f04f 0300 	mov.w	r3, #0
 800bd90:	f04f 0400 	mov.w	r4, #0
 800bd94:	0094      	lsls	r4, r2, #2
 800bd96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd9a:	008b      	lsls	r3, r1, #2
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4623      	mov	r3, r4
 800bda0:	4628      	mov	r0, r5
 800bda2:	4631      	mov	r1, r6
 800bda4:	f7f4 fa18 	bl	80001d8 <__aeabi_uldivmod>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	461a      	mov	r2, r3
 800bdae:	4b77      	ldr	r3, [pc, #476]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bdb0:	fba3 1302 	umull	r1, r3, r3, r2
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	2164      	movs	r1, #100	; 0x64
 800bdb8:	fb01 f303 	mul.w	r3, r1, r3
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	011b      	lsls	r3, r3, #4
 800bdc0:	3332      	adds	r3, #50	; 0x32
 800bdc2:	4a72      	ldr	r2, [pc, #456]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bdc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc8:	095b      	lsrs	r3, r3, #5
 800bdca:	f003 020f 	and.w	r2, r3, #15
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4442      	add	r2, r8
 800bdd4:	609a      	str	r2, [r3, #8]
 800bdd6:	e0d0      	b.n	800bf7a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800bdd8:	f7fe fa72 	bl	800a2c0 <HAL_RCC_GetPCLK1Freq>
 800bddc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	469a      	mov	sl, r3
 800bde2:	f04f 0b00 	mov.w	fp, #0
 800bde6:	46d0      	mov	r8, sl
 800bde8:	46d9      	mov	r9, fp
 800bdea:	eb18 0308 	adds.w	r3, r8, r8
 800bdee:	eb49 0409 	adc.w	r4, r9, r9
 800bdf2:	4698      	mov	r8, r3
 800bdf4:	46a1      	mov	r9, r4
 800bdf6:	eb18 080a 	adds.w	r8, r8, sl
 800bdfa:	eb49 090b 	adc.w	r9, r9, fp
 800bdfe:	f04f 0100 	mov.w	r1, #0
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800be0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800be0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800be12:	4688      	mov	r8, r1
 800be14:	4691      	mov	r9, r2
 800be16:	eb1a 0508 	adds.w	r5, sl, r8
 800be1a:	eb4b 0609 	adc.w	r6, fp, r9
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	4619      	mov	r1, r3
 800be24:	f04f 0200 	mov.w	r2, #0
 800be28:	f04f 0300 	mov.w	r3, #0
 800be2c:	f04f 0400 	mov.w	r4, #0
 800be30:	0094      	lsls	r4, r2, #2
 800be32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800be36:	008b      	lsls	r3, r1, #2
 800be38:	461a      	mov	r2, r3
 800be3a:	4623      	mov	r3, r4
 800be3c:	4628      	mov	r0, r5
 800be3e:	4631      	mov	r1, r6
 800be40:	f7f4 f9ca 	bl	80001d8 <__aeabi_uldivmod>
 800be44:	4603      	mov	r3, r0
 800be46:	460c      	mov	r4, r1
 800be48:	461a      	mov	r2, r3
 800be4a:	4b50      	ldr	r3, [pc, #320]	; (800bf8c <UART_SetConfig+0x6f4>)
 800be4c:	fba3 2302 	umull	r2, r3, r3, r2
 800be50:	095b      	lsrs	r3, r3, #5
 800be52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	469b      	mov	fp, r3
 800be5a:	f04f 0c00 	mov.w	ip, #0
 800be5e:	46d9      	mov	r9, fp
 800be60:	46e2      	mov	sl, ip
 800be62:	eb19 0309 	adds.w	r3, r9, r9
 800be66:	eb4a 040a 	adc.w	r4, sl, sl
 800be6a:	4699      	mov	r9, r3
 800be6c:	46a2      	mov	sl, r4
 800be6e:	eb19 090b 	adds.w	r9, r9, fp
 800be72:	eb4a 0a0c 	adc.w	sl, sl, ip
 800be76:	f04f 0100 	mov.w	r1, #0
 800be7a:	f04f 0200 	mov.w	r2, #0
 800be7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be8a:	4689      	mov	r9, r1
 800be8c:	4692      	mov	sl, r2
 800be8e:	eb1b 0509 	adds.w	r5, fp, r9
 800be92:	eb4c 060a 	adc.w	r6, ip, sl
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	4619      	mov	r1, r3
 800be9c:	f04f 0200 	mov.w	r2, #0
 800bea0:	f04f 0300 	mov.w	r3, #0
 800bea4:	f04f 0400 	mov.w	r4, #0
 800bea8:	0094      	lsls	r4, r2, #2
 800beaa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800beae:	008b      	lsls	r3, r1, #2
 800beb0:	461a      	mov	r2, r3
 800beb2:	4623      	mov	r3, r4
 800beb4:	4628      	mov	r0, r5
 800beb6:	4631      	mov	r1, r6
 800beb8:	f7f4 f98e 	bl	80001d8 <__aeabi_uldivmod>
 800bebc:	4603      	mov	r3, r0
 800bebe:	460c      	mov	r4, r1
 800bec0:	461a      	mov	r2, r3
 800bec2:	4b32      	ldr	r3, [pc, #200]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bec4:	fba3 1302 	umull	r1, r3, r3, r2
 800bec8:	095b      	lsrs	r3, r3, #5
 800beca:	2164      	movs	r1, #100	; 0x64
 800becc:	fb01 f303 	mul.w	r3, r1, r3
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	3332      	adds	r3, #50	; 0x32
 800bed6:	4a2d      	ldr	r2, [pc, #180]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bed8:	fba2 2303 	umull	r2, r3, r2, r3
 800bedc:	095b      	lsrs	r3, r3, #5
 800bede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bee2:	4498      	add	r8, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	469b      	mov	fp, r3
 800bee8:	f04f 0c00 	mov.w	ip, #0
 800beec:	46d9      	mov	r9, fp
 800beee:	46e2      	mov	sl, ip
 800bef0:	eb19 0309 	adds.w	r3, r9, r9
 800bef4:	eb4a 040a 	adc.w	r4, sl, sl
 800bef8:	4699      	mov	r9, r3
 800befa:	46a2      	mov	sl, r4
 800befc:	eb19 090b 	adds.w	r9, r9, fp
 800bf00:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bf04:	f04f 0100 	mov.w	r1, #0
 800bf08:	f04f 0200 	mov.w	r2, #0
 800bf0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf18:	4689      	mov	r9, r1
 800bf1a:	4692      	mov	sl, r2
 800bf1c:	eb1b 0509 	adds.w	r5, fp, r9
 800bf20:	eb4c 060a 	adc.w	r6, ip, sl
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	4619      	mov	r1, r3
 800bf2a:	f04f 0200 	mov.w	r2, #0
 800bf2e:	f04f 0300 	mov.w	r3, #0
 800bf32:	f04f 0400 	mov.w	r4, #0
 800bf36:	0094      	lsls	r4, r2, #2
 800bf38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bf3c:	008b      	lsls	r3, r1, #2
 800bf3e:	461a      	mov	r2, r3
 800bf40:	4623      	mov	r3, r4
 800bf42:	4628      	mov	r0, r5
 800bf44:	4631      	mov	r1, r6
 800bf46:	f7f4 f947 	bl	80001d8 <__aeabi_uldivmod>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	461a      	mov	r2, r3
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bf52:	fba3 1302 	umull	r1, r3, r3, r2
 800bf56:	095b      	lsrs	r3, r3, #5
 800bf58:	2164      	movs	r1, #100	; 0x64
 800bf5a:	fb01 f303 	mul.w	r3, r1, r3
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	011b      	lsls	r3, r3, #4
 800bf62:	3332      	adds	r3, #50	; 0x32
 800bf64:	4a09      	ldr	r2, [pc, #36]	; (800bf8c <UART_SetConfig+0x6f4>)
 800bf66:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6a:	095b      	lsrs	r3, r3, #5
 800bf6c:	f003 020f 	and.w	r2, r3, #15
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4442      	add	r2, r8
 800bf76:	609a      	str	r2, [r3, #8]
}
 800bf78:	e7ff      	b.n	800bf7a <UART_SetConfig+0x6e2>
 800bf7a:	bf00      	nop
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf84:	40011000 	.word	0x40011000
 800bf88:	40011400 	.word	0x40011400
 800bf8c:	51eb851f 	.word	0x51eb851f

0800bf90 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	0a5a      	lsrs	r2, r3, #9
 800bfa0:	490f      	ldr	r1, [pc, #60]	; (800bfe0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800bfa2:	fba1 1202 	umull	r1, r2, r1, r2
 800bfa6:	09d2      	lsrs	r2, r2, #7
 800bfa8:	490e      	ldr	r1, [pc, #56]	; (800bfe4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800bfaa:	fb01 f202 	mul.w	r2, r1, r2
 800bfae:	1a9b      	subs	r3, r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	0a5b      	lsrs	r3, r3, #9
 800bfb8:	4a09      	ldr	r2, [pc, #36]	; (800bfe0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800bfba:	fba2 2303 	umull	r2, r3, r2, r3
 800bfbe:	09db      	lsrs	r3, r3, #7
 800bfc0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	441a      	add	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	601a      	str	r2, [r3, #0]
}
 800bfd4:	bf00      	nop
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	00044b83 	.word	0x00044b83
 800bfe4:	3b9aca00 	.word	0x3b9aca00

0800bfe8 <__cxa_pure_virtual>:
 800bfe8:	b508      	push	{r3, lr}
 800bfea:	f000 f80d 	bl	800c008 <_ZSt9terminatev>

0800bfee <_ZN10__cxxabiv111__terminateEPFvvE>:
 800bfee:	b508      	push	{r3, lr}
 800bff0:	4780      	blx	r0
 800bff2:	f000 f80e 	bl	800c012 <abort>
	...

0800bff8 <_ZSt13get_terminatev>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	; (800c004 <_ZSt13get_terminatev+0xc>)
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	f3bf 8f5b 	dmb	ish
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	2000000c 	.word	0x2000000c

0800c008 <_ZSt9terminatev>:
 800c008:	b508      	push	{r3, lr}
 800c00a:	f7ff fff5 	bl	800bff8 <_ZSt13get_terminatev>
 800c00e:	f7ff ffee 	bl	800bfee <_ZN10__cxxabiv111__terminateEPFvvE>

0800c012 <abort>:
 800c012:	b508      	push	{r3, lr}
 800c014:	2006      	movs	r0, #6
 800c016:	f000 f929 	bl	800c26c <raise>
 800c01a:	2001      	movs	r0, #1
 800c01c:	f7fc f8e0 	bl	80081e0 <_exit>

0800c020 <__errno>:
 800c020:	4b01      	ldr	r3, [pc, #4]	; (800c028 <__errno+0x8>)
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	20000010 	.word	0x20000010

0800c02c <__libc_init_array>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	4e0d      	ldr	r6, [pc, #52]	; (800c064 <__libc_init_array+0x38>)
 800c030:	4c0d      	ldr	r4, [pc, #52]	; (800c068 <__libc_init_array+0x3c>)
 800c032:	1ba4      	subs	r4, r4, r6
 800c034:	10a4      	asrs	r4, r4, #2
 800c036:	2500      	movs	r5, #0
 800c038:	42a5      	cmp	r5, r4
 800c03a:	d109      	bne.n	800c050 <__libc_init_array+0x24>
 800c03c:	4e0b      	ldr	r6, [pc, #44]	; (800c06c <__libc_init_array+0x40>)
 800c03e:	4c0c      	ldr	r4, [pc, #48]	; (800c070 <__libc_init_array+0x44>)
 800c040:	f000 f960 	bl	800c304 <_init>
 800c044:	1ba4      	subs	r4, r4, r6
 800c046:	10a4      	asrs	r4, r4, #2
 800c048:	2500      	movs	r5, #0
 800c04a:	42a5      	cmp	r5, r4
 800c04c:	d105      	bne.n	800c05a <__libc_init_array+0x2e>
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c054:	4798      	blx	r3
 800c056:	3501      	adds	r5, #1
 800c058:	e7ee      	b.n	800c038 <__libc_init_array+0xc>
 800c05a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c05e:	4798      	blx	r3
 800c060:	3501      	adds	r5, #1
 800c062:	e7f2      	b.n	800c04a <__libc_init_array+0x1e>
 800c064:	0800d5c8 	.word	0x0800d5c8
 800c068:	0800d5c8 	.word	0x0800d5c8
 800c06c:	0800d5c8 	.word	0x0800d5c8
 800c070:	0800d5e4 	.word	0x0800d5e4

0800c074 <memcpy>:
 800c074:	b510      	push	{r4, lr}
 800c076:	1e43      	subs	r3, r0, #1
 800c078:	440a      	add	r2, r1
 800c07a:	4291      	cmp	r1, r2
 800c07c:	d100      	bne.n	800c080 <memcpy+0xc>
 800c07e:	bd10      	pop	{r4, pc}
 800c080:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c088:	e7f7      	b.n	800c07a <memcpy+0x6>

0800c08a <memset>:
 800c08a:	4402      	add	r2, r0
 800c08c:	4603      	mov	r3, r0
 800c08e:	4293      	cmp	r3, r2
 800c090:	d100      	bne.n	800c094 <memset+0xa>
 800c092:	4770      	bx	lr
 800c094:	f803 1b01 	strb.w	r1, [r3], #1
 800c098:	e7f9      	b.n	800c08e <memset+0x4>
	...

0800c09c <_free_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4605      	mov	r5, r0
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d045      	beq.n	800c130 <_free_r+0x94>
 800c0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a8:	1f0c      	subs	r4, r1, #4
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bfb8      	it	lt
 800c0ae:	18e4      	addlt	r4, r4, r3
 800c0b0:	f000 f8f8 	bl	800c2a4 <__malloc_lock>
 800c0b4:	4a1f      	ldr	r2, [pc, #124]	; (800c134 <_free_r+0x98>)
 800c0b6:	6813      	ldr	r3, [r2, #0]
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	b933      	cbnz	r3, 800c0ca <_free_r+0x2e>
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	6014      	str	r4, [r2, #0]
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c6:	f000 b8ee 	b.w	800c2a6 <__malloc_unlock>
 800c0ca:	42a3      	cmp	r3, r4
 800c0cc:	d90c      	bls.n	800c0e8 <_free_r+0x4c>
 800c0ce:	6821      	ldr	r1, [r4, #0]
 800c0d0:	1862      	adds	r2, r4, r1
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	bf04      	itt	eq
 800c0d6:	681a      	ldreq	r2, [r3, #0]
 800c0d8:	685b      	ldreq	r3, [r3, #4]
 800c0da:	6063      	str	r3, [r4, #4]
 800c0dc:	bf04      	itt	eq
 800c0de:	1852      	addeq	r2, r2, r1
 800c0e0:	6022      	streq	r2, [r4, #0]
 800c0e2:	6004      	str	r4, [r0, #0]
 800c0e4:	e7ec      	b.n	800c0c0 <_free_r+0x24>
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	b10a      	cbz	r2, 800c0f0 <_free_r+0x54>
 800c0ec:	42a2      	cmp	r2, r4
 800c0ee:	d9fa      	bls.n	800c0e6 <_free_r+0x4a>
 800c0f0:	6819      	ldr	r1, [r3, #0]
 800c0f2:	1858      	adds	r0, r3, r1
 800c0f4:	42a0      	cmp	r0, r4
 800c0f6:	d10b      	bne.n	800c110 <_free_r+0x74>
 800c0f8:	6820      	ldr	r0, [r4, #0]
 800c0fa:	4401      	add	r1, r0
 800c0fc:	1858      	adds	r0, r3, r1
 800c0fe:	4282      	cmp	r2, r0
 800c100:	6019      	str	r1, [r3, #0]
 800c102:	d1dd      	bne.n	800c0c0 <_free_r+0x24>
 800c104:	6810      	ldr	r0, [r2, #0]
 800c106:	6852      	ldr	r2, [r2, #4]
 800c108:	605a      	str	r2, [r3, #4]
 800c10a:	4401      	add	r1, r0
 800c10c:	6019      	str	r1, [r3, #0]
 800c10e:	e7d7      	b.n	800c0c0 <_free_r+0x24>
 800c110:	d902      	bls.n	800c118 <_free_r+0x7c>
 800c112:	230c      	movs	r3, #12
 800c114:	602b      	str	r3, [r5, #0]
 800c116:	e7d3      	b.n	800c0c0 <_free_r+0x24>
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	1821      	adds	r1, r4, r0
 800c11c:	428a      	cmp	r2, r1
 800c11e:	bf04      	itt	eq
 800c120:	6811      	ldreq	r1, [r2, #0]
 800c122:	6852      	ldreq	r2, [r2, #4]
 800c124:	6062      	str	r2, [r4, #4]
 800c126:	bf04      	itt	eq
 800c128:	1809      	addeq	r1, r1, r0
 800c12a:	6021      	streq	r1, [r4, #0]
 800c12c:	605c      	str	r4, [r3, #4]
 800c12e:	e7c7      	b.n	800c0c0 <_free_r+0x24>
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	bf00      	nop
 800c134:	200045dc 	.word	0x200045dc

0800c138 <_malloc_r>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	1ccd      	adds	r5, r1, #3
 800c13c:	f025 0503 	bic.w	r5, r5, #3
 800c140:	3508      	adds	r5, #8
 800c142:	2d0c      	cmp	r5, #12
 800c144:	bf38      	it	cc
 800c146:	250c      	movcc	r5, #12
 800c148:	2d00      	cmp	r5, #0
 800c14a:	4606      	mov	r6, r0
 800c14c:	db01      	blt.n	800c152 <_malloc_r+0x1a>
 800c14e:	42a9      	cmp	r1, r5
 800c150:	d903      	bls.n	800c15a <_malloc_r+0x22>
 800c152:	230c      	movs	r3, #12
 800c154:	6033      	str	r3, [r6, #0]
 800c156:	2000      	movs	r0, #0
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	f000 f8a3 	bl	800c2a4 <__malloc_lock>
 800c15e:	4a21      	ldr	r2, [pc, #132]	; (800c1e4 <_malloc_r+0xac>)
 800c160:	6814      	ldr	r4, [r2, #0]
 800c162:	4621      	mov	r1, r4
 800c164:	b991      	cbnz	r1, 800c18c <_malloc_r+0x54>
 800c166:	4c20      	ldr	r4, [pc, #128]	; (800c1e8 <_malloc_r+0xb0>)
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	b91b      	cbnz	r3, 800c174 <_malloc_r+0x3c>
 800c16c:	4630      	mov	r0, r6
 800c16e:	f000 f845 	bl	800c1fc <_sbrk_r>
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	4629      	mov	r1, r5
 800c176:	4630      	mov	r0, r6
 800c178:	f000 f840 	bl	800c1fc <_sbrk_r>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d124      	bne.n	800c1ca <_malloc_r+0x92>
 800c180:	230c      	movs	r3, #12
 800c182:	6033      	str	r3, [r6, #0]
 800c184:	4630      	mov	r0, r6
 800c186:	f000 f88e 	bl	800c2a6 <__malloc_unlock>
 800c18a:	e7e4      	b.n	800c156 <_malloc_r+0x1e>
 800c18c:	680b      	ldr	r3, [r1, #0]
 800c18e:	1b5b      	subs	r3, r3, r5
 800c190:	d418      	bmi.n	800c1c4 <_malloc_r+0x8c>
 800c192:	2b0b      	cmp	r3, #11
 800c194:	d90f      	bls.n	800c1b6 <_malloc_r+0x7e>
 800c196:	600b      	str	r3, [r1, #0]
 800c198:	50cd      	str	r5, [r1, r3]
 800c19a:	18cc      	adds	r4, r1, r3
 800c19c:	4630      	mov	r0, r6
 800c19e:	f000 f882 	bl	800c2a6 <__malloc_unlock>
 800c1a2:	f104 000b 	add.w	r0, r4, #11
 800c1a6:	1d23      	adds	r3, r4, #4
 800c1a8:	f020 0007 	bic.w	r0, r0, #7
 800c1ac:	1ac3      	subs	r3, r0, r3
 800c1ae:	d0d3      	beq.n	800c158 <_malloc_r+0x20>
 800c1b0:	425a      	negs	r2, r3
 800c1b2:	50e2      	str	r2, [r4, r3]
 800c1b4:	e7d0      	b.n	800c158 <_malloc_r+0x20>
 800c1b6:	428c      	cmp	r4, r1
 800c1b8:	684b      	ldr	r3, [r1, #4]
 800c1ba:	bf16      	itet	ne
 800c1bc:	6063      	strne	r3, [r4, #4]
 800c1be:	6013      	streq	r3, [r2, #0]
 800c1c0:	460c      	movne	r4, r1
 800c1c2:	e7eb      	b.n	800c19c <_malloc_r+0x64>
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	6849      	ldr	r1, [r1, #4]
 800c1c8:	e7cc      	b.n	800c164 <_malloc_r+0x2c>
 800c1ca:	1cc4      	adds	r4, r0, #3
 800c1cc:	f024 0403 	bic.w	r4, r4, #3
 800c1d0:	42a0      	cmp	r0, r4
 800c1d2:	d005      	beq.n	800c1e0 <_malloc_r+0xa8>
 800c1d4:	1a21      	subs	r1, r4, r0
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f000 f810 	bl	800c1fc <_sbrk_r>
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d0cf      	beq.n	800c180 <_malloc_r+0x48>
 800c1e0:	6025      	str	r5, [r4, #0]
 800c1e2:	e7db      	b.n	800c19c <_malloc_r+0x64>
 800c1e4:	200045dc 	.word	0x200045dc
 800c1e8:	200045e0 	.word	0x200045e0

0800c1ec <realloc>:
 800c1ec:	4b02      	ldr	r3, [pc, #8]	; (800c1f8 <realloc+0xc>)
 800c1ee:	460a      	mov	r2, r1
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	f000 b858 	b.w	800c2a8 <_realloc_r>
 800c1f8:	20000010 	.word	0x20000010

0800c1fc <_sbrk_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4c06      	ldr	r4, [pc, #24]	; (800c218 <_sbrk_r+0x1c>)
 800c200:	2300      	movs	r3, #0
 800c202:	4605      	mov	r5, r0
 800c204:	4608      	mov	r0, r1
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	f7fb fff4 	bl	80081f4 <_sbrk>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_sbrk_r+0x1a>
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	b103      	cbz	r3, 800c216 <_sbrk_r+0x1a>
 800c214:	602b      	str	r3, [r5, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	200045e8 	.word	0x200045e8

0800c21c <_raise_r>:
 800c21c:	291f      	cmp	r1, #31
 800c21e:	b538      	push	{r3, r4, r5, lr}
 800c220:	4604      	mov	r4, r0
 800c222:	460d      	mov	r5, r1
 800c224:	d904      	bls.n	800c230 <_raise_r+0x14>
 800c226:	2316      	movs	r3, #22
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	f04f 30ff 	mov.w	r0, #4294967295
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c232:	b112      	cbz	r2, 800c23a <_raise_r+0x1e>
 800c234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c238:	b94b      	cbnz	r3, 800c24e <_raise_r+0x32>
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 f830 	bl	800c2a0 <_getpid_r>
 800c240:	462a      	mov	r2, r5
 800c242:	4601      	mov	r1, r0
 800c244:	4620      	mov	r0, r4
 800c246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c24a:	f000 b817 	b.w	800c27c <_kill_r>
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d00a      	beq.n	800c268 <_raise_r+0x4c>
 800c252:	1c59      	adds	r1, r3, #1
 800c254:	d103      	bne.n	800c25e <_raise_r+0x42>
 800c256:	2316      	movs	r3, #22
 800c258:	6003      	str	r3, [r0, #0]
 800c25a:	2001      	movs	r0, #1
 800c25c:	e7e7      	b.n	800c22e <_raise_r+0x12>
 800c25e:	2400      	movs	r4, #0
 800c260:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c264:	4628      	mov	r0, r5
 800c266:	4798      	blx	r3
 800c268:	2000      	movs	r0, #0
 800c26a:	e7e0      	b.n	800c22e <_raise_r+0x12>

0800c26c <raise>:
 800c26c:	4b02      	ldr	r3, [pc, #8]	; (800c278 <raise+0xc>)
 800c26e:	4601      	mov	r1, r0
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	f7ff bfd3 	b.w	800c21c <_raise_r>
 800c276:	bf00      	nop
 800c278:	20000010 	.word	0x20000010

0800c27c <_kill_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4c07      	ldr	r4, [pc, #28]	; (800c29c <_kill_r+0x20>)
 800c280:	2300      	movs	r3, #0
 800c282:	4605      	mov	r5, r0
 800c284:	4608      	mov	r0, r1
 800c286:	4611      	mov	r1, r2
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	f7fb ff99 	bl	80081c0 <_kill>
 800c28e:	1c43      	adds	r3, r0, #1
 800c290:	d102      	bne.n	800c298 <_kill_r+0x1c>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	b103      	cbz	r3, 800c298 <_kill_r+0x1c>
 800c296:	602b      	str	r3, [r5, #0]
 800c298:	bd38      	pop	{r3, r4, r5, pc}
 800c29a:	bf00      	nop
 800c29c:	200045e8 	.word	0x200045e8

0800c2a0 <_getpid_r>:
 800c2a0:	f7fb bf86 	b.w	80081b0 <_getpid>

0800c2a4 <__malloc_lock>:
 800c2a4:	4770      	bx	lr

0800c2a6 <__malloc_unlock>:
 800c2a6:	4770      	bx	lr

0800c2a8 <_realloc_r>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	4607      	mov	r7, r0
 800c2ac:	4614      	mov	r4, r2
 800c2ae:	460e      	mov	r6, r1
 800c2b0:	b921      	cbnz	r1, 800c2bc <_realloc_r+0x14>
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c2b8:	f7ff bf3e 	b.w	800c138 <_malloc_r>
 800c2bc:	b922      	cbnz	r2, 800c2c8 <_realloc_r+0x20>
 800c2be:	f7ff feed 	bl	800c09c <_free_r>
 800c2c2:	4625      	mov	r5, r4
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c8:	f000 f814 	bl	800c2f4 <_malloc_usable_size_r>
 800c2cc:	42a0      	cmp	r0, r4
 800c2ce:	d20f      	bcs.n	800c2f0 <_realloc_r+0x48>
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f7ff ff30 	bl	800c138 <_malloc_r>
 800c2d8:	4605      	mov	r5, r0
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	d0f2      	beq.n	800c2c4 <_realloc_r+0x1c>
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	f7ff fec7 	bl	800c074 <memcpy>
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7ff fed7 	bl	800c09c <_free_r>
 800c2ee:	e7e9      	b.n	800c2c4 <_realloc_r+0x1c>
 800c2f0:	4635      	mov	r5, r6
 800c2f2:	e7e7      	b.n	800c2c4 <_realloc_r+0x1c>

0800c2f4 <_malloc_usable_size_r>:
 800c2f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f8:	1f18      	subs	r0, r3, #4
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	bfbc      	itt	lt
 800c2fe:	580b      	ldrlt	r3, [r1, r0]
 800c300:	18c0      	addlt	r0, r0, r3
 800c302:	4770      	bx	lr

0800c304 <_init>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	bf00      	nop
 800c308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30a:	bc08      	pop	{r3}
 800c30c:	469e      	mov	lr, r3
 800c30e:	4770      	bx	lr

0800c310 <_fini>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	bf00      	nop
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr
