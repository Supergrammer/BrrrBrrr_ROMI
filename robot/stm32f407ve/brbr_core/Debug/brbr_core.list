
brbr_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072bc  080072bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080072bc  080072bc  000172bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c4  080072c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002010  20000078  0800734c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002088  0800734c  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eff8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003aab  00000000  00000000  0003f09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001588  00000000  00000000  00042b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  000440d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026261  00000000  00000000  00045588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fcef  00000000  00000000  0006b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1d1a  00000000  00000000  0007b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d1f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006144  00000000  00000000  0014d270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006cb8 	.word	0x08006cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08006cb8 	.word	0x08006cb8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <_ZN3ros3MsgC1Ev+0x1c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	0800728c 	.word	0x0800728c

0800051c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
      data()
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ffe8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffce 	bl	80004d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08007274 	.word	0x08007274

0800054c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6859      	ldr	r1, [r3, #4]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	4413      	add	r3, r2
 8000564:	b2ca      	uxtb	r2, r1
 8000566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	0a19      	lsrs	r1, r3, #8
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	4413      	add	r3, r2
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0c19      	lsrs	r1, r3, #16
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3302      	adds	r3, #2
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0e19      	lsrs	r1, r3, #24
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3303      	adds	r3, #3
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	4413      	add	r3, r2
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3304      	adds	r3, #4
 80005a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	0a19      	lsrs	r1, r3, #8
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	0c19      	lsrs	r1, r3, #16
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3302      	adds	r3, #2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	0e19      	lsrs	r1, r3, #24
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3303      	adds	r3, #3
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3304      	adds	r3, #4
 80005ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80005ee:	68fb      	ldr	r3, [r7, #12]
    }
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	440b      	add	r3, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3302      	adds	r3, #2
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	440b      	add	r3, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	041b      	lsls	r3, r3, #16
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3303      	adds	r3, #3
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	440b      	add	r3, r1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3304      	adds	r3, #4
 800065e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	440b      	add	r3, r1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3302      	adds	r3, #2
 800068c:	6839      	ldr	r1, [r7, #0]
 800068e:	440b      	add	r3, r1
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3303      	adds	r3, #3
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	440b      	add	r3, r1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	061b      	lsls	r3, r3, #24
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3304      	adds	r3, #4
 80006b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80006b6:	68fb      	ldr	r3, [r7, #12]
    }
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	08006cd0 	.word	0x08006cd0

080006e0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	08006ce0 	.word	0x08006ce0

080006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	809a      	strh	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
    {
    }
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	0800725c 	.word	0x0800725c
 8000740:	08006d04 	.word	0x08006d04

08000744 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8899      	ldrh	r1, [r3, #4]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	b2ca      	uxtb	r2, r1
 800075e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	b299      	uxth	r1, r3
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	b2ca      	uxtb	r2, r1
 8000772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3302      	adds	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd22 	bl	80001c8 <strlen>
 8000784:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	69b9      	ldr	r1, [r7, #24]
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f9b9 	bl	8001b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	3304      	adds	r3, #4
 8000798:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	18d0      	adds	r0, r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	4619      	mov	r1, r3
 80007a8:	f006 f93e 	bl	8006a28 <memcpy>
      offset += length_topic_name;
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	4413      	add	r3, r2
 80007b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd05 	bl	80001c8 <strlen>
 80007be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	6979      	ldr	r1, [r7, #20]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f99c 	bl	8001b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	18d0      	adds	r0, r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f006 f921 	bl	8006a28 <memcpy>
      offset += length_message_type;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fce8 	bl	80001c8 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	6939      	ldr	r1, [r7, #16]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f97f 	bl	8001b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3304      	adds	r3, #4
 800080c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	18d0      	adds	r0, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4619      	mov	r1, r3
 800081c:	f006 f904 	bl	8006a28 <memcpy>
      offset += length_md5sum;
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4413      	add	r3, r2
 8000826:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800082e:	68f9      	ldr	r1, [r7, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	0a19      	lsrs	r1, r3, #8
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3301      	adds	r3, #1
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	0c19      	lsrs	r1, r3, #16
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3302      	adds	r3, #2
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	b2ca      	uxtb	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	0e19      	lsrs	r1, r3, #24
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3303      	adds	r3, #3
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000870:	69fb      	ldr	r3, [r7, #28]
    }
 8000872:	4618      	mov	r0, r3
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800087a:	b580      	push	{r7, lr}
 800087c:	b08a      	sub	sp, #40	; 0x28
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	b21a      	sxth	r2, r3
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	3301      	adds	r3, #1
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3302      	adds	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	441a      	add	r2, r3
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f93b 	bl	8001b42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	3304      	adds	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	d20c      	bcs.n	80008fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	441a      	add	r2, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	440b      	add	r3, r1
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	3301      	adds	r3, #1
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
 80008fa:	e7ec      	b.n	80008d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	3b01      	subs	r3, #1
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	3b01      	subs	r3, #1
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	441a      	add	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	4413      	add	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	441a      	add	r2, r3
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f908 	bl	8001b42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	3304      	adds	r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4413      	add	r3, r2
 8000942:	6a3a      	ldr	r2, [r7, #32]
 8000944:	429a      	cmp	r2, r3
 8000946:	d20c      	bcs.n	8000962 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	441a      	add	r2, r3
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3b01      	subs	r3, #1
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	440b      	add	r3, r1
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	3301      	adds	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	e7ec      	b.n	800093c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	3b01      	subs	r3, #1
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	3b01      	subs	r3, #1
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	441a      	add	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4413      	add	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	441a      	add	r2, r3
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f8d5 	bl	8001b42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	3304      	adds	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d20c      	bcs.n	80009c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	441a      	add	r2, r3
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	440b      	add	r3, r1
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	e7ec      	b.n	80009a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	3b01      	subs	r3, #1
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	3b01      	subs	r3, #1
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	441a      	add	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	440a      	add	r2, r1
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3301      	adds	r3, #1
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	440b      	add	r3, r1
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	3302      	adds	r3, #2
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	440b      	add	r3, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	3303      	adds	r3, #3
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a40:	69bb      	ldr	r3, [r7, #24]
    }
 8000a42:	4618      	mov	r0, r3
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	08006d08 	.word	0x08006d08

08000a68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	08006d24 	.word	0x08006d24

08000a84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd34 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	711a      	strb	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000aa4:	609a      	str	r2, [r3, #8]
    {
    }
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08007244 	.word	0x08007244
 8000ab4:	08006d04 	.word	0x08006d04

08000ab8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7912      	ldrb	r2, [r2, #4]
 8000ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb73 	bl	80001c8 <strlen>
 8000ae2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f80a 	bl	8001b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	18d0      	adds	r0, r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f005 ff8f 	bl	8006a28 <memcpy>
      offset += length_msg;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b12:	68fb      	ldr	r3, [r7, #12]
    }
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fffa 	bl	8001b42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3304      	adds	r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20c      	bcs.n	8000b7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	441a      	add	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e7ec      	b.n	8000b58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	3b01      	subs	r3, #1
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	441a      	add	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
     return offset;
 8000ba2:	693b      	ldr	r3, [r7, #16]
    }
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	08006d48 	.word	0x08006d48

08000bc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	08006d5c 	.word	0x08006d5c

08000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc84 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	0800722c 	.word	0x0800722c

08000c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0c19      	lsrs	r1, r3, #16
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3302      	adds	r3, #2
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0e19      	lsrs	r1, r3, #24
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3303      	adds	r3, #3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3304      	adds	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d22b      	bcs.n	8000cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	0a19      	lsrs	r1, r3, #8
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	0e19      	lsrs	r1, r3, #24
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3304      	adds	r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	e7ce      	b.n	8000c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6919      	ldr	r1, [r3, #16]
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	0a19      	lsrs	r1, r3, #8
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	0c19      	lsrs	r1, r3, #16
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	3302      	adds	r3, #2
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	0e19      	lsrs	r1, r3, #24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3303      	adds	r3, #3
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3304      	adds	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d22b      	bcs.n	8000d9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	b2ca      	uxtb	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	0a19      	lsrs	r1, r3, #8
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	3301      	adds	r3, #1
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	0c19      	lsrs	r1, r3, #16
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3302      	adds	r3, #2
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2ca      	uxtb	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	0e19      	lsrs	r1, r3, #24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	3303      	adds	r3, #3
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3304      	adds	r3, #4
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e7ce      	b.n	8000d38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69d9      	ldr	r1, [r3, #28]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	b2ca      	uxtb	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	0a19      	lsrs	r1, r3, #8
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	0c19      	lsrs	r1, r3, #16
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	0e19      	lsrs	r1, r3, #24
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	3304      	adds	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d228      	bcs.n	8000e44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e2 	bl	80001c8 <strlen>
 8000e04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	6979      	ldr	r1, [r7, #20]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fe79 	bl	8001b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	3304      	adds	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	18d0      	adds	r0, r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f005 fdfa 	bl	8006a28 <memcpy>
      offset += length_stringsi;
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	e7d1      	b.n	8000de8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e46:	4618      	mov	r0, r3
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b08e      	sub	sp, #56	; 0x38
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	6a3a      	ldr	r2, [r7, #32]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	061b      	lsls	r3, r3, #24
 8000e96:	6a3a      	ldr	r2, [r7, #32]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d90a      	bls.n	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f005 fdca 	bl	8006a50 <realloc>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a3a      	ldr	r2, [r7, #32]
 8000ec6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d236      	bcs.n	8000f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	440a      	add	r2, r1
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	3301      	adds	r3, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	3302      	adds	r3, #2
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	3303      	adds	r3, #3
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	440b      	add	r3, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	3304      	adds	r3, #4
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3e:	3301      	adds	r3, #1
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
 8000f42:	e7c3      	b.n	8000ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3301      	adds	r3, #1
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	3302      	adds	r3, #2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f74:	3303      	adds	r3, #3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f86:	3304      	adds	r3, #4
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d90a      	bls.n	8000faa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f005 fd56 	bl	8006a50 <realloc>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d236      	bcs.n	800102c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	440a      	add	r2, r1
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	440b      	add	r3, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	440b      	add	r3, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3304      	adds	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	3214      	adds	r2, #20
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800102a:	e7c3      	b.n	8000fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	3301      	adds	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	3302      	adds	r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	3303      	adds	r3, #3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	3304      	adds	r3, #4
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	d90a      	bls.n	8001092 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f005 fce2 	bl	8006a50 <realloc>
 800108c:	4602      	mov	r2, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d23f      	bcs.n	8001126 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	441a      	add	r2, r3
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fd45 	bl	8001b42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	3304      	adds	r3, #4
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d20c      	bcs.n	80010e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	441a      	add	r2, r3
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	440b      	add	r3, r1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3301      	adds	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e7ec      	b.n	80010c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	3b01      	subs	r3, #1
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	3b01      	subs	r3, #1
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	441a      	add	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	3220      	adds	r2, #32
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	3301      	adds	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
 8001124:	e7ba      	b.n	800109c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001128:	4618      	mov	r0, r3
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	080071b0 	.word	0x080071b0

0800114c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	08006d80 	.word	0x08006d80

08001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	425b      	negs	r3, r3
 80011c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <_ZN13STM32HardwareC1Ev+0x34>)
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000a90 	.word	0x20000a90

0800120c <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffc4 	bl	80011ae <_ZN13STM32Hardware10getRdmaIndEv>
 8001226:	4603      	mov	r3, r0
 8001228:	429c      	cmp	r4, r3
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d012      	beq.n	800125c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800125c:	68fb      	ldr	r3, [r7, #12]
    }
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
	...

08001268 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b20      	cmp	r3, #32
 800127c:	d108      	bne.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZN13STM32Hardware5flushEv+0x28>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <_ZN13STM32Hardware5flushEv+0x2a>
 8001290:	2300      	movs	r3, #0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03f      	beq.n	8001316 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d031      	beq.n	8001310 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d20a      	bcs.n	80012d2 <_ZN13STM32Hardware5flushEv+0x6a>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	e006      	b.n	80012e0 <_ZN13STM32Hardware5flushEv+0x78>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80012de:	b29b      	uxth	r3, r3
 80012e0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f004 fba4 	bl	8005a44 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4413      	add	r3, r2
 8001306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
      }
    }
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000094 	.word	0x20000094

08001324 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133a:	bfa8      	it	ge
 800133c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001340:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001348:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	4293      	cmp	r3, r2
 8001350:	bf28      	it	cs
 8001352:	4613      	movcs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800135c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	4618      	mov	r0, r3
 800136a:	f005 fb5d 	bl	8006a28 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00b      	beq.n	80013a2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	18d1      	adds	r1, r2, r3
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	461a      	mov	r2, r3
 800139e:	f005 fb43 	bl	8006a28 <memcpy>
      }

      flush();
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ff60 	bl	8001268 <_ZN13STM32Hardware5flushEv>
    }
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	f002 f836 	bl	8003428 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
      data("")
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f892 	bl	80004fc <_ZN3ros3MsgC1Ev>
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80013e2:	605a      	str	r2, [r3, #4]
    {
    }
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08007200 	.word	0x08007200
 80013f4:	08006d04 	.word	0x08006d04

080013f8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fedc 	bl	80001c8 <strlen>
 8001410:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fb73 	bl	8001b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	18d0      	adds	r0, r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	4619      	mov	r1, r3
 8001434:	f005 faf8 	bl	8006a28 <memcpy>
      offset += length_data;
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001440:	68fb      	ldr	r3, [r7, #12]
    }
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	441a      	add	r2, r3
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fb6c 	bl	8001b42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	3304      	adds	r3, #4
 800146e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	d20c      	bcs.n	800149a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	441a      	add	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3b01      	subs	r3, #1
 800148a:	6839      	ldr	r1, [r7, #0]
 800148c:	440b      	add	r3, r1
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e7ec      	b.n	8001474 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	3b01      	subs	r3, #1
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	441a      	add	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
     return offset;
 80014be:	693b      	ldr	r3, [r7, #16]
    }
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08006da4 	.word	0x08006da4

080014e4 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	08006db4 	.word	0x08006db4

08001500 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
      data(0)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fff6 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	e9c2 3402 	strd	r3, r4, [r2, #8]
    {
    }
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	080071e8 	.word	0x080071e8

08001534 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001534:	b490      	push	{r4, r7}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001548:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800154c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	440a      	add	r2, r1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800155a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	f04f 0400 	mov.w	r4, #0
 8001566:	0a0b      	lsrs	r3, r1, #8
 8001568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800156c:	0a14      	lsrs	r4, r2, #8
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	3201      	adds	r2, #1
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	440a      	add	r2, r1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800157a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f04f 0400 	mov.w	r4, #0
 8001586:	0c0b      	lsrs	r3, r1, #16
 8001588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800158c:	0c14      	lsrs	r4, r2, #16
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	3202      	adds	r2, #2
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	440a      	add	r2, r1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800159a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	0e0b      	lsrs	r3, r1, #24
 80015a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ac:	0e14      	lsrs	r4, r2, #24
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	3203      	adds	r2, #3
 80015b2:	6839      	ldr	r1, [r7, #0]
 80015b4:	440a      	add	r2, r1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80015ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	f04f 0400 	mov.w	r4, #0
 80015c6:	0013      	movs	r3, r2
 80015c8:	2400      	movs	r4, #0
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	3204      	adds	r2, #4
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440a      	add	r2, r1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80015d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	f04f 0400 	mov.w	r4, #0
 80015e2:	0a13      	lsrs	r3, r2, #8
 80015e4:	2400      	movs	r4, #0
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	3205      	adds	r2, #5
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440a      	add	r2, r1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80015f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	f04f 0400 	mov.w	r4, #0
 80015fe:	0c13      	lsrs	r3, r2, #16
 8001600:	2400      	movs	r4, #0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	3206      	adds	r2, #6
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	440a      	add	r2, r1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800160e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	f04f 0400 	mov.w	r4, #0
 800161a:	0e13      	lsrs	r3, r2, #24
 800161c:	2400      	movs	r4, #0
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	3207      	adds	r2, #7
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	440a      	add	r2, r1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->data);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3308      	adds	r3, #8
 800162e:	617b      	str	r3, [r7, #20]
      return offset;
 8001630:	697b      	ldr	r3, [r7, #20]
    }
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bc90      	pop	{r4, r7}
 800163a:	4770      	bx	lr

0800163c <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800163c:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8001640:	b087      	sub	sp, #28
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f04f 0400 	mov.w	r4, #0
 8001654:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001658:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	4403      	add	r3, r0
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	fa5f f883 	uxtb.w	r8, r3
 8001668:	f04f 0900 	mov.w	r9, #0
 800166c:	ea48 0301 	orr.w	r3, r8, r1
 8001670:	ea49 0402 	orr.w	r4, r9, r2
 8001674:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001678:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0b00 	mov.w	fp, #0
 8001690:	f04f 0c00 	mov.w	ip, #0
 8001694:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001698:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800169c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80016a0:	ea4b 0308 	orr.w	r3, fp, r8
 80016a4:	ea4c 0409 	orr.w	r4, ip, r9
 80016a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3302      	adds	r3, #2
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2d9      	uxtb	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0b00 	mov.w	fp, #0
 80016c4:	f04f 0c00 	mov.w	ip, #0
 80016c8:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80016cc:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80016d0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80016d4:	ea4b 0308 	orr.w	r3, fp, r8
 80016d8:	ea4c 0409 	orr.w	r4, ip, r9
 80016dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3303      	adds	r3, #3
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	4403      	add	r3, r0
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	0a1e      	lsrs	r6, r3, #8
 80016f6:	061d      	lsls	r5, r3, #24
 80016f8:	ea41 0305 	orr.w	r3, r1, r5
 80016fc:	ea42 0406 	orr.w	r4, r2, r6
 8001700:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3304      	adds	r3, #4
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	4403      	add	r3, r0
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2dd      	uxtb	r5, r3
 8001714:	f04f 0600 	mov.w	r6, #0
 8001718:	f04f 0800 	mov.w	r8, #0
 800171c:	f04f 0900 	mov.w	r9, #0
 8001720:	46a9      	mov	r9, r5
 8001722:	f04f 0800 	mov.w	r8, #0
 8001726:	ea48 0301 	orr.w	r3, r8, r1
 800172a:	ea49 0402 	orr.w	r4, r9, r2
 800172e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001732:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3305      	adds	r3, #5
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	4403      	add	r3, r0
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2dd      	uxtb	r5, r3
 8001742:	f04f 0600 	mov.w	r6, #0
 8001746:	f04f 0800 	mov.w	r8, #0
 800174a:	f04f 0900 	mov.w	r9, #0
 800174e:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8001752:	f04f 0800 	mov.w	r8, #0
 8001756:	ea48 0301 	orr.w	r3, r8, r1
 800175a:	ea49 0402 	orr.w	r4, r9, r2
 800175e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001762:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3306      	adds	r3, #6
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	4403      	add	r3, r0
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2dd      	uxtb	r5, r3
 8001772:	f04f 0600 	mov.w	r6, #0
 8001776:	f04f 0800 	mov.w	r8, #0
 800177a:	f04f 0900 	mov.w	r9, #0
 800177e:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8001782:	f04f 0800 	mov.w	r8, #0
 8001786:	ea48 0301 	orr.w	r3, r8, r1
 800178a:	ea49 0402 	orr.w	r4, r9, r2
 800178e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001792:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3307      	adds	r3, #7
 800179a:	6838      	ldr	r0, [r7, #0]
 800179c:	4403      	add	r3, r0
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2dd      	uxtb	r5, r3
 80017a2:	f04f 0600 	mov.w	r6, #0
 80017a6:	f04f 0800 	mov.w	r8, #0
 80017aa:	f04f 0900 	mov.w	r9, #0
 80017ae:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80017b2:	f04f 0800 	mov.w	r8, #0
 80017b6:	ea48 0301 	orr.w	r3, r8, r1
 80017ba:	ea49 0402 	orr.w	r4, r9, r2
 80017be:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->data = u_data.real;
 80017c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->data);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3308      	adds	r3, #8
 80017d0:	617b      	str	r3, [r7, #20]
     return offset;
 80017d2:	697b      	ldr	r3, [r7, #20]
    }
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80017de:	4770      	bx	lr

080017e0 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	08006dd8 	.word	0x08006dd8

080017fc <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	08006de8 	.word	0x08006de8

08001818 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800181c:	f001 fd9e 	bl	800335c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001820:	f000 f80e 	bl	8001840 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001824:	f000 f90a 	bl	8001a3c <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8001828:	f000 f8e0 	bl	80019ec <_ZL11MX_DMA_Initv>
	MX_I2C1_Init();
 800182c:	f000 f87c 	bl	8001928 <_ZL12MX_I2C1_Initv>

	MX_USART1_UART_Init();
 8001830:	f000 f8ae 	bl	8001990 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	setup();
 8001834:	f000 ff08 	bl	8002648 <_Z5setupv>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		loop();
 8001838:	f000 ff2a 	bl	8002690 <_Z4loopv>
 800183c:	e7fc      	b.n	8001838 <main+0x20>
	...

08001840 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	; 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f005 f8f5 	bl	8006a3e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <_Z18SystemClock_Configv+0xe0>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <_Z18SystemClock_Configv+0xe0>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <_Z18SystemClock_Configv+0xe0>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <_Z18SystemClock_Configv+0xe4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <_Z18SystemClock_Configv+0xe4>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <_Z18SystemClock_Configv+0xe4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a4:	2310      	movs	r3, #16
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80018b0:	2308      	movs	r3, #8
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80018b4:	23a8      	movs	r3, #168	; 0xa8
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fd9b 	bl	8004400 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 80018da:	f000 f90d 	bl	8001af8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018de:	230f      	movs	r3, #15
 80018e0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ee:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2105      	movs	r1, #5
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 ffef 	bl	80048e0 <HAL_RCC_ClockConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_Z18SystemClock_Configv+0xd6>
		Error_Handler();
 8001912:	f000 f8f1 	bl	8001af8 <Error_Handler>
	}
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 800192e:	4a16      	ldr	r2, [pc, #88]	; (8001988 <_ZL12MX_I2C1_Initv+0x60>)
 8001930:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <_ZL12MX_I2C1_Initv+0x64>)
 8001936:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <_ZL12MX_I2C1_Initv+0x5c>)
 8001966:	f002 fc13 	bl	8004190 <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 800197a:	f000 f8bd 	bl	8001af8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000a3c 	.word	0x20000a3c
 8001988:	40005400 	.word	0x40005400
 800198c:	000186a0 	.word	0x000186a0

08001990 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001998:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019c8:	f003 ffee 	bl	80059a8 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf14      	ite	ne
 80019d2:	2301      	movne	r3, #1
 80019d4:	2300      	moveq	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 80019dc:	f000 f88c 	bl	8001af8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000a90 	.word	0x20000a90
 80019e8:	40011000 	.word	0x40011000

080019ec <_ZL11MX_DMA_Initv>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_ZL11MX_DMA_Initv+0x4c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <_ZL11MX_DMA_Initv+0x4c>)
 80019fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <_ZL11MX_DMA_Initv+0x4c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	203a      	movs	r0, #58	; 0x3a
 8001a14:	f001 fe11 	bl	800363a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a18:	203a      	movs	r0, #58	; 0x3a
 8001a1a:	f001 fe2a 	bl	8003672 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2046      	movs	r0, #70	; 0x46
 8001a24:	f001 fe09 	bl	800363a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a28:	2046      	movs	r0, #70	; 0x46
 8001a2a:	f001 fe22 	bl	8003672 <HAL_NVIC_EnableIRQ>

}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <_ZL12MX_GPIO_Initv+0xb4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	213c      	movs	r1, #60	; 0x3c
 8001ac6:	480b      	ldr	r0, [pc, #44]	; (8001af4 <_ZL12MX_GPIO_Initv+0xb8>)
 8001ac8:	f002 fb30 	bl	800412c <HAL_GPIO_WritePin>
			MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
					| MOTOR_B_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_A_DIR1_Pin | MOTOR_A_DIR2_Pin | MOTOR_B_DIR1_Pin
 8001acc:	233c      	movs	r3, #60	; 0x3c
 8001ace:	617b      	str	r3, [r7, #20]
			| MOTOR_B_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4804      	ldr	r0, [pc, #16]	; (8001af4 <_ZL12MX_GPIO_Initv+0xb8>)
 8001ae4:	f002 f970 	bl	8003dc8 <HAL_GPIO_Init>

}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40021000 	.word	0x40021000

08001af8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d80d      	bhi.n	8001b36 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	fa22 f103 	lsr.w	r1, r2, r3
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e7ee      	b.n	8001b14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d811      	bhi.n	8001b80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	440a      	add	r2, r1
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	00d2      	lsls	r2, r2, #3
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e7ea      	b.n	8001b56 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	08007218 	.word	0x08007218

08001bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ffe8 	bl	8001b8c <_ZN3ros15NodeHandleBase_C1Ev>
 8001bbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fb04 	bl	80011d4 <_ZN13STM32HardwareC1Ev>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f802 	bl	8000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b18      	cmp	r3, #24
 8001be8:	d80b      	bhi.n	8001c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e7f0      	b.n	8001be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d80a      	bhi.n	8001c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c14:	2100      	movs	r1, #0
 8001c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e7f1      	b.n	8001c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2c:	d20a      	bcs.n	8001c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e7f0      	b.n	8001c26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c4e:	d20a      	bcs.n	8001c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3301      	adds	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	e7f0      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	080071d4 	.word	0x080071d4

08001cac <_Z41__static_initialization_and_destruction_0ii>:
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d122      	bne.n	8001d02 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11d      	bne.n	8001d02 <_Z41__static_initialization_and_destruction_0ii+0x56>

extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

// ROS node handler
static ros::NodeHandle nh;
 8001cc6:	4811      	ldr	r0, [pc, #68]	; (8001d0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001cc8:	f7ff ff70 	bl	8001bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>

// ROS message struct
static std_msgs::String debug_msg;
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001cce:	f7ff fb7b 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8001cd2:	4810      	ldr	r0, [pc, #64]	; (8001d14 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001cd4:	f7ff fc14 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 8001cd8:	480f      	ldr	r0, [pc, #60]	; (8001d18 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001cda:	f7ff fc11 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>

// ROS message publisher handler
static ros::Publisher debug_pub("debug", &debug_msg);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001ce4:	480e      	ldr	r0, [pc, #56]	; (8001d20 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001ce6:	f7ff fa3f 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 8001cea:	2300      	movs	r3, #0
 8001cec:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001cee:	490d      	ldr	r1, [pc, #52]	; (8001d24 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001cf2:	f7ff fa39 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001cfa:	490c      	ldr	r1, [pc, #48]	; (8001d2c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001cfe:	f7ff fa33 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000098 	.word	0x20000098
 8001d10:	200009d4 	.word	0x200009d4
 8001d14:	200009e0 	.word	0x200009e0
 8001d18:	200009f0 	.word	0x200009f0
 8001d1c:	08006e0c 	.word	0x08006e0c
 8001d20:	20000a00 	.word	0x20000a00
 8001d24:	08006e14 	.word	0x08006e14
 8001d28:	20000a14 	.word	0x20000a14
 8001d2c:	08006e24 	.word	0x08006e24
 8001d30:	20000a28 	.word	0x20000a28

08001d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b63      	cmp	r3, #99	; 0x63
 8001d44:	dd09      	ble.n	8001d5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e077      	b.n	8001e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001d66:	3207      	adds	r2, #7
 8001d68:	4611      	mov	r1, r2
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
 8001d6e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	22ff      	movs	r2, #255	; 0xff
 8001d74:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	22fe      	movs	r2, #254	; 0xfe
 8001d7c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	121b      	asrs	r3, r3, #8
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001da4:	4413      	add	r3, r2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	121b      	asrs	r3, r3, #8
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001dce:	2305      	movs	r3, #5
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3307      	adds	r3, #7
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	da0d      	bge.n	8001df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4413      	add	r3, r2
 8001de2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e7ec      	b.n	8001dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3307      	adds	r3, #7
 8001dfc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	425a      	negs	r2, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	6179      	str	r1, [r7, #20]
 8001e12:	43d2      	mvns	r2, r2
 8001e14:	b2d1      	uxtb	r1, r2
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e26:	dc0a      	bgt.n	8001e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1d18      	adds	r0, r3, #4
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7ff fa75 	bl	8001324 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	e005      	b.n	8001e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001e3e:	4905      	ldr	r1, [pc, #20]	; (8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f9f2 	bl	800222a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08006e34 	.word	0x08006e34

08001e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff faa3 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8001e6a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d903      	bls.n	8001e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d903      	bls.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d014      	beq.n	8001ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fa7c 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad2      	subs	r2, r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	bf8c      	ite	hi
 8001ec8:	2301      	movhi	r3, #1
 8001eca:	2300      	movls	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001ed2:	f06f 0301 	mvn.w	r3, #1
 8001ed6:	e197      	b.n	8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f995 	bl	800120c <_ZN13STM32Hardware4readEv>
 8001ee2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f2c0 8177 	blt.w	80021da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	441a      	add	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f02:	2b07      	cmp	r3, #7
 8001f04:	d11e      	bne.n	8001f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001f0c:	1c59      	adds	r1, r3, #1
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	b2d1      	uxtb	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1b4      	bne.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f42:	e7af      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d128      	bne.n	8001fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2bff      	cmp	r3, #255	; 0xff
 8001f52:	d10d      	bne.n	8001f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f103 0214 	add.w	r2, r3, #20
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001f6e:	e799      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fa1b 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf8c      	ite	hi
 8001f88:	2301      	movhi	r3, #1
 8001f8a:	2300      	movls	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d088      	beq.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001f9a:	f06f 0301 	mvn.w	r3, #1
 8001f9e:	e133      	b.n	8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d11b      	bne.n	8001fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2bfe      	cmp	r3, #254	; 0xfe
 8001fae:	d107      	bne.n	8001fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001fbe:	e771      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f43f af65 	beq.w	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f933 	bl	8002246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001fe0:	e760      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d113      	bne.n	8002014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002012:	e747      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800201a:	2b03      	cmp	r3, #3
 800201c:	d110      	bne.n	8002040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800203e:	e731      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002046:	2b04      	cmp	r3, #4
 8002048:	d116      	bne.n	8002078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002050:	425a      	negs	r2, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	bf58      	it	pl
 8002058:	4253      	negpl	r3, r2
 800205a:	2bff      	cmp	r3, #255	; 0xff
 800205c:	d107      	bne.n	800206e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800206c:	e71a      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002076:	e715      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800207e:	2b05      	cmp	r3, #5
 8002080:	d10f      	bne.n	80020a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80020a0:	e700      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d117      	bne.n	80020dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	441a      	add	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2207      	movs	r2, #7
 80020c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f aee9 	bne.w	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2208      	movs	r2, #8
 80020d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020da:	e6e3      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	f47f aede 	bne.w	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80020f6:	425a      	negs	r2, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	bf58      	it	pl
 80020fe:	4253      	negpl	r3, r2
 8002100:	2bff      	cmp	r3, #255	; 0xff
 8002102:	f47f aecf 	bne.w	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d110      	bne.n	8002132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f898 	bl	8002246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8b3 	bl	8002282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	e06a      	b.n	8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002138:	2b0a      	cmp	r3, #10
 800213a:	d107      	bne.n	800214c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f97b 	bl	8002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800214a:	e6ab      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d10e      	bne.n	8002174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7fe fe72 	bl	8000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002172:	e697      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800217a:	2b0b      	cmp	r3, #11
 800217c:	d104      	bne.n	8002188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002186:	e68d      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800218e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f43f ae81 	beq.w	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80021a8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80021bc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80021d4:	4611      	mov	r1, r2
 80021d6:	4798      	blx	r3
    while (true)
 80021d8:	e664      	b.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80021da:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00f      	beq.n	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d906      	bls.n	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f824 	bl	8002246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8002206:	2300      	movs	r3, #0
  }
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    return configured_;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	2103      	movs	r1, #3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f94d 	bl	80024d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f962 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f107 020c 	add.w	r2, r7, #12
 8002262:	210a      	movs	r1, #10
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
    rt_time = hardware_.time();
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f89f 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8002272:	4602      	mov	r2, r0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8002282:	b590      	push	{r4, r7, lr}
 8002284:	b08b      	sub	sp, #44	; 0x2c
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fa34 	bl	80006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	2b18      	cmp	r3, #24
 800229c:	dc63      	bgt.n	8002366 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d056      	beq.n	800235e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3308      	adds	r3, #8
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4608      	mov	r0, r1
 80022fe:	4798      	blx	r3
 8002300:	4603      	mov	r3, r0
 8002302:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4608      	mov	r0, r1
 800232c:	4798      	blx	r3
 800232e:	4603      	mov	r3, r0
 8002330:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002336:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe ff22 	bl	8001196 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002352:	4601      	mov	r1, r0
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	461a      	mov	r2, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	3301      	adds	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	e798      	b.n	8002298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	2b18      	cmp	r3, #24
 800236e:	dc5f      	bgt.n	8002430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d053      	beq.n	8002428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	b29b      	uxth	r3, r3
 8002390:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	f202 2222 	addw	r2, r2, #546	; 0x222
 800239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3308      	adds	r3, #8
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4608      	mov	r0, r1
 80023c2:	4798      	blx	r3
 80023c4:	4603      	mov	r3, r0
 80023c6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4608      	mov	r0, r1
 80023e8:	4798      	blx	r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80023ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681c      	ldr	r4, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002402:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3304      	adds	r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4608      	mov	r0, r1
 800241a:	4798      	blx	r3
 800241c:	4601      	mov	r1, r0
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	461a      	mov	r2, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	3301      	adds	r3, #1
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	e79c      	b.n	800236a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002438:	bf00      	nop
 800243a:	372c      	adds	r7, #44	; 0x2c
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f864 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe ffa9 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 800245e:	4602      	mov	r2, r0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f8c3 	bl	80005fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	4915      	ldr	r1, [pc, #84]	; (80024d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800247c:	fba1 1303 	umull	r1, r3, r1, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002486:	6939      	ldr	r1, [r7, #16]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800248c:	fba3 0302 	umull	r0, r3, r3, r2
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002496:	fb00 f303 	mul.w	r3, r0, r3
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	440b      	add	r3, r1
 80024a4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f82e 	bl	8002510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ff79 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 80024be:	4602      	mov	r2, r0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	10624dd3 	.word	0x10624dd3
 80024d4:	000f4240 	.word	0x000f4240

080024d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	460b      	mov	r3, r1
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe faca 	bl	8000a84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f107 0214 	add.w	r2, r7, #20
 8002502:	2107      	movs	r1, #7
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	4798      	blx	r3
  }
 8002508:	bf00      	nop
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe ff46 	bl	80013b0 <_ZN13STM32Hardware4timeEv>
 8002524:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4915      	ldr	r1, [pc, #84]	; (8002584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800252e:	fba1 1303 	umull	r1, r3, r1, r3
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	1e5a      	subs	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002546:	fba3 0302 	umull	r0, r3, r3, r2
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002550:	fb00 f303 	mul.w	r3, r0, r3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	1aca      	subs	r2, r1, r3
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002560:	4413      	add	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f004 f9e4 	bl	8006944 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	10624dd3 	.word	0x10624dd3
 8002588:	000f4240 	.word	0x000f4240
 800258c:	3b9aca00 	.word	0x3b9aca00

08002590 <_GLOBAL__sub_I_hi2c1>:
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
 8002594:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002598:	2001      	movs	r0, #1
 800259a:	f7ff fb87 	bl	8001cac <_Z41__static_initialization_and_destruction_0ii>
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68d8      	ldr	r0, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6891      	ldr	r1, [r2, #8]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4798      	blx	r3
 80025be:	4603      	mov	r3, r0
  };
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_ZN13STM32Hardware4initEv>:
    void init(){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f804 	bl	80025de <_ZN13STM32Hardware10reset_rbufEv>
    }
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_ZN13STM32Hardware10reset_rbufEv>:
    void reset_rbuf(void){
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f2:	4619      	mov	r1, r3
 80025f4:	f003 fa92 	bl	8005b1c <HAL_UART_Receive_DMA>
    }
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_UART_TxCpltCallback>:
#include <std_msgs/Int64.h>

TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_UART_TxCpltCallback+0x20>)
 800260a:	f000 f87f 	bl	800270c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800260e:	4603      	mov	r3, r0
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fe29 	bl	8001268 <_ZN13STM32Hardware5flushEv>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000b90 	.word	0x20000b90

08002624 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <HAL_UART_RxCpltCallback+0x20>)
 800262e:	f000 f86d 	bl	800270c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002632:	4603      	mov	r3, r0
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ffd2 	bl	80025de <_ZN13STM32Hardware10reset_rbufEv>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000b90 	.word	0x20000b90

08002648 <_Z5setupv>:

void setup(void) {
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	wheelDirInit();
 800264c:	f000 fd5c 	bl	8003108 <_Z12wheelDirInitv>
	wheelPWMInit();
 8002650:	f000 fd8c 	bl	800316c <_Z12wheelPWMInitv>

	encoderInit();
 8002654:	f000 fc0c 	bl	8002e70 <_Z11encoderInitv>
//	encoderInit1();

	nh.initNode();
 8002658:	4809      	ldr	r0, [pc, #36]	; (8002680 <_Z5setupv+0x38>)
 800265a:	f000 f863 	bl	8002724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_encoder_pub);
 800265e:	4909      	ldr	r1, [pc, #36]	; (8002684 <_Z5setupv+0x3c>)
 8002660:	4807      	ldr	r0, [pc, #28]	; (8002680 <_Z5setupv+0x38>)
 8002662:	f000 f87c 	bl	800275e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_encoder_pub);
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <_Z5setupv+0x40>)
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <_Z5setupv+0x38>)
 800266a:	f000 f878 	bl	800275e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(debug_pub);
 800266e:	4907      	ldr	r1, [pc, #28]	; (800268c <_Z5setupv+0x44>)
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <_Z5setupv+0x38>)
 8002672:	f000 f874 	bl	800275e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	moveStop();
 8002676:	f000 fe01 	bl	800327c <_Z8moveStopv>
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000b90 	.word	0x20000b90
 8002684:	2000150c 	.word	0x2000150c
 8002688:	20001520 	.word	0x20001520
 800268c:	200014f8 	.word	0x200014f8

08002690 <_Z4loopv>:

void loop(void) {
 8002690:	b598      	push	{r3, r4, r7, lr}
 8002692:	af00      	add	r7, sp, #0
//	moveStop();
//	HAL_Delay(3000);
//
	moveForword();
 8002694:	f000 fe14 	bl	80032c0 <_Z11moveForwordv>
//	HAL_Delay(3000);

//	if (left_encoder_msg.data != left_encoder_count) {
//		strcpy(encoder_log, "left encoder start");
//	}
	left_encoder_msg.data = TIM4->CNT;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <_Z4loopv+0x54>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f04f 0400 	mov.w	r4, #0
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <_Z4loopv+0x58>)
 80026a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	left_encoder_pub.publish(&left_encoder_msg);
 80026a6:	4910      	ldr	r1, [pc, #64]	; (80026e8 <_Z4loopv+0x58>)
 80026a8:	4810      	ldr	r0, [pc, #64]	; (80026ec <_Z4loopv+0x5c>)
 80026aa:	f7ff ff79 	bl	80025a0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	right_encoder_msg.data = TIM5->CNT;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <_Z4loopv+0x60>)
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f04f 0400 	mov.w	r4, #0
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <_Z4loopv+0x64>)
 80026b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	right_encoder_pub.publish(&right_encoder_msg);
 80026bc:	490d      	ldr	r1, [pc, #52]	; (80026f4 <_Z4loopv+0x64>)
 80026be:	480e      	ldr	r0, [pc, #56]	; (80026f8 <_Z4loopv+0x68>)
 80026c0:	f7ff ff6e 	bl	80025a0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	debug_msg.data = encoder_log;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <_Z4loopv+0x6c>)
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <_Z4loopv+0x70>)
 80026c8:	605a      	str	r2, [r3, #4]
	debug_pub.publish(&debug_msg);
 80026ca:	490c      	ldr	r1, [pc, #48]	; (80026fc <_Z4loopv+0x6c>)
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <_Z4loopv+0x74>)
 80026ce:	f7ff ff67 	bl	80025a0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	HAL_Delay(100);
 80026d2:	2064      	movs	r0, #100	; 0x64
 80026d4:	f000 feb4 	bl	8003440 <HAL_Delay>
	nh.spinOnce();
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <_Z4loopv+0x78>)
 80026da:	f7ff fbbd 	bl	8001e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80026de:	bf00      	nop
 80026e0:	bd98      	pop	{r3, r4, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40000800 	.word	0x40000800
 80026e8:	200014d8 	.word	0x200014d8
 80026ec:	2000150c 	.word	0x2000150c
 80026f0:	40000c00 	.word	0x40000c00
 80026f4:	200014e8 	.word	0x200014e8
 80026f8:	20001520 	.word	0x20001520
 80026fc:	200014cc 	.word	0x200014cc
 8002700:	20001f70 	.word	0x20001f70
 8002704:	200014f8 	.word	0x200014f8
 8002708:	20000b90 	.word	0x20000b90

0800270c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
  }
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff49 	bl	80025c8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b18      	cmp	r3, #24
 8002770:	dc1e      	bgt.n	80027b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	60da      	str	r2, [r3, #12]
        return true;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e004      	b.n	80027b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e7dd      	b.n	800276c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80027b0:	2300      	movs	r3, #0
  }
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <_Z41__static_initialization_and_destruction_0ii>:
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d122      	bne.n	8002816 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11d      	bne.n	8002816 <_Z41__static_initialization_and_destruction_0ii+0x56>
static ros::NodeHandle nh;
 80027da:	4811      	ldr	r0, [pc, #68]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80027dc:	f7ff f9e6 	bl	8001bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 80027e0:	4810      	ldr	r0, [pc, #64]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80027e2:	f7fe fdf1 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 80027e6:	4810      	ldr	r0, [pc, #64]	; (8002828 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80027e8:	f7fe fe8a 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 80027ec:	480f      	ldr	r0, [pc, #60]	; (800282c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80027ee:	f7fe fe87 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 80027f2:	2300      	movs	r3, #0
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80027f6:	490e      	ldr	r1, [pc, #56]	; (8002830 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80027f8:	480e      	ldr	r0, [pc, #56]	; (8002834 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80027fa:	f7fe fcb5 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 80027fe:	2300      	movs	r3, #0
 8002800:	4a09      	ldr	r2, [pc, #36]	; (8002828 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002802:	490d      	ldr	r1, [pc, #52]	; (8002838 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002806:	f7fe fcaf 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 800280a:	2300      	movs	r3, #0
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800280e:	490c      	ldr	r1, [pc, #48]	; (8002840 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002812:	f7fe fca9 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000b90 	.word	0x20000b90
 8002824:	200014cc 	.word	0x200014cc
 8002828:	200014d8 	.word	0x200014d8
 800282c:	200014e8 	.word	0x200014e8
 8002830:	08006fe8 	.word	0x08006fe8
 8002834:	200014f8 	.word	0x200014f8
 8002838:	08006ff0 	.word	0x08006ff0
 800283c:	2000150c 	.word	0x2000150c
 8002840:	08007000 	.word	0x08007000
 8002844:	20001520 	.word	0x20001520

08002848 <_GLOBAL__sub_I_htim4>:
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
 800284c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002850:	2001      	movs	r0, #1
 8002852:	f7ff ffb5 	bl	80027c0 <_Z41__static_initialization_and_destruction_0ii>
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_MspInit+0x4c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <HAL_MspInit+0x4c>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_MspInit+0x4c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_MspInit+0x4c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <HAL_MspInit+0x4c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_MspInit+0x4c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_I2C_MspInit+0x84>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12b      	bne.n	8002922 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_I2C_MspInit+0x88>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <HAL_I2C_MspInit+0x88>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_I2C_MspInit+0x88>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028e6:	23c0      	movs	r3, #192	; 0xc0
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ea:	2312      	movs	r3, #18
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028f6:	2304      	movs	r3, #4
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <HAL_I2C_MspInit+0x8c>)
 8002902:	f001 fa61 	bl	8003dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_I2C_MspInit+0x88>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_I2C_MspInit+0x88>)
 8002910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_I2C_MspInit+0x88>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	; 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40005400 	.word	0x40005400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020400 	.word	0x40020400

08002938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <HAL_TIM_Base_MspInit+0x3c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10d      	bne.n	8002966 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_TIM_Base_MspInit+0x40>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_TIM_Base_MspInit+0x40>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_TIM_Base_MspInit+0x40>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40000400 	.word	0x40000400
 8002978:	40023800 	.word	0x40023800

0800297c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a32      	ldr	r2, [pc, #200]	; (8002a64 <HAL_TIM_Encoder_MspInit+0xe8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d12d      	bne.n	80029fa <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c4:	f043 0308 	orr.w	r3, r3, #8
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80029d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029e8:	2302      	movs	r3, #2
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4619      	mov	r1, r3
 80029f2:	481e      	ldr	r0, [pc, #120]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xf0>)
 80029f4:	f001 f9e8 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029f8:	e030      	b.n	8002a5c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d12b      	bne.n	8002a5c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	4619      	mov	r1, r3
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002a58:	f001 f9b6 	bl	8003dc8 <HAL_GPIO_Init>
}
 8002a5c:	bf00      	nop
 8002a5e:	3730      	adds	r7, #48	; 0x30
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40020000 	.word	0x40020000

08002a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_TIM_MspPostInit+0x68>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d11d      	bne.n	8002ad6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ab6:	23c0      	movs	r3, #192	; 0xc0
 8002ab8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <HAL_TIM_MspPostInit+0x70>)
 8002ad2:	f001 f979 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_UART_MspInit+0x150>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	f040 8091 	bne.w	8002c32 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_UART_MspInit+0x154>)
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	4a49      	ldr	r2, [pc, #292]	; (8002c40 <HAL_UART_MspInit+0x154>)
 8002b1a:	f043 0310 	orr.w	r3, r3, #16
 8002b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_UART_MspInit+0x154>)
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_UART_MspInit+0x154>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	4a42      	ldr	r2, [pc, #264]	; (8002c40 <HAL_UART_MspInit+0x154>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_UART_MspInit+0x154>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4837      	ldr	r0, [pc, #220]	; (8002c44 <HAL_UART_MspInit+0x158>)
 8002b66:	f001 f92f 	bl	8003dc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b6c:	4a37      	ldr	r2, [pc, #220]	; (8002c4c <HAL_UART_MspInit+0x160>)
 8002b6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b76:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba4:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002baa:	4827      	ldr	r0, [pc, #156]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002bac:	f000 fd7c 	bl	80036a8 <HAL_DMA_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002bb6:	f7fe ff9f 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc0:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <HAL_UART_MspInit+0x15c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_UART_MspInit+0x168>)
 8002bca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c06:	4812      	ldr	r0, [pc, #72]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002c08:	f000 fd4e 	bl	80036a8 <HAL_DMA_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002c12:	f7fe ff71 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_UART_MspInit+0x164>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2025      	movs	r0, #37	; 0x25
 8002c28:	f000 fd07 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c2c:	2025      	movs	r0, #37	; 0x25
 8002c2e:	f000 fd20 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40011000 	.word	0x40011000
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	20000ad0 	.word	0x20000ad0
 8002c4c:	40026440 	.word	0x40026440
 8002c50:	20000b30 	.word	0x20000b30
 8002c54:	400264b8 	.word	0x400264b8

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler+0x4>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cac:	f000 fba8 	bl	8003400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f001 fa51 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f001 fa4a 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002cd4:	2004      	movs	r0, #4
 8002cd6:	f001 fa43 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002ce2:	2008      	movs	r0, #8
 8002ce4:	f001 fa3c 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <USART1_IRQHandler+0x10>)
 8002cf2:	f002 ff93 	bl	8005c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000a90 	.word	0x20000a90

08002d00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <DMA2_Stream2_IRQHandler+0x10>)
 8002d06:	f000 fdf7 	bl	80038f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000ad0 	.word	0x20000ad0

08002d14 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <DMA2_Stream7_IRQHandler+0x10>)
 8002d1a:	f000 fded 	bl	80038f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000b30 	.word	0x20000b30

08002d28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
	if (GPIO_Pin == MOTOR_LEFT_ENCODER1_Pin) {
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d115      	bne.n	8002d64 <HAL_GPIO_EXTI_Callback+0x3c>
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_LEFT_ENCODER2_Pin);
 8002d38:	2102      	movs	r1, #2
 8002d3a:	4818      	ldr	r0, [pc, #96]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x74>)
 8002d3c:	f001 f9de 	bl	80040fc <HAL_GPIO_ReadPin>
 8002d40:	4603      	mov	r3, r0
 8002d42:	81bb      	strh	r3, [r7, #12]
		left_encoder_count = s ? -1 : 1;
 8002d44:	89bb      	ldrh	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_GPIO_EXTI_Callback+0x2c>
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8002d52:	e003      	b.n	8002d5c <HAL_GPIO_EXTI_Callback+0x34>
 8002d54:	f04f 0301 	mov.w	r3, #1
 8002d58:	f04f 0400 	mov.w	r4, #0
 8002d5c:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002d5e:	e9c2 3400 	strd	r3, r4, [r2]
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_RIGHT_ENCODER2_Pin);
		right_encoder_count = s ? -1 : 1;

	}

}
 8002d62:	e017      	b.n	8002d94 <HAL_GPIO_EXTI_Callback+0x6c>
	} else if (GPIO_Pin == MOTOR_RIGHT_ENCODER1_Pin) {
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d114      	bne.n	8002d94 <HAL_GPIO_EXTI_Callback+0x6c>
		uint16_t s = HAL_GPIO_ReadPin(MOTOR_ENCODER_GPIO_Port, MOTOR_RIGHT_ENCODER2_Pin);
 8002d6a:	2108      	movs	r1, #8
 8002d6c:	480b      	ldr	r0, [pc, #44]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x74>)
 8002d6e:	f001 f9c5 	bl	80040fc <HAL_GPIO_ReadPin>
 8002d72:	4603      	mov	r3, r0
 8002d74:	81fb      	strh	r3, [r7, #14]
		right_encoder_count = s ? -1 : 1;
 8002d76:	89fb      	ldrh	r3, [r7, #14]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_GPIO_EXTI_Callback+0x5e>
 8002d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d80:	f04f 34ff 	mov.w	r4, #4294967295
 8002d84:	e003      	b.n	8002d8e <HAL_GPIO_EXTI_Callback+0x66>
 8002d86:	f04f 0301 	mov.w	r3, #1
 8002d8a:	f04f 0400 	mov.w	r4, #0
 8002d8e:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002d90:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	20001f60 	.word	0x20001f60
 8002da4:	20001f68 	.word	0x20001f68

08002da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
	return 1;
 8002dac:	2301      	movs	r3, #1
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_kill>:

int _kill(int pid, int sig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dc2:	f003 fe07 	bl	80069d4 <__errno>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	2316      	movs	r3, #22
 8002dca:	6013      	str	r3, [r2, #0]
	return -1;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_exit>:

void _exit (int status)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ffe7 	bl	8002db8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dea:	e7fe      	b.n	8002dea <_exit+0x12>

08002dec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <_sbrk+0x50>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <_sbrk+0x16>
		heap_end = &end;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <_sbrk+0x50>)
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <_sbrk+0x54>)
 8002e00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <_sbrk+0x50>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <_sbrk+0x50>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	466a      	mov	r2, sp
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d907      	bls.n	8002e26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e16:	f003 fddd 	bl	80069d4 <__errno>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	e006      	b.n	8002e34 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <_sbrk+0x50>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a03      	ldr	r2, [pc, #12]	; (8002e3c <_sbrk+0x50>)
 8002e30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200015b4 	.word	0x200015b4
 8002e40:	20002088 	.word	0x20002088

08002e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <SystemInit+0x28>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <SystemInit+0x28>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <SystemInit+0x28>)
 8002e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <_Z11encoderInitv>:

volatile long long left_encoder_count;
volatile long long right_encoder_count;
char encoder_log[200];

void encoderInit() {
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b08f      	sub	sp, #60	; 0x3c
 8002e74:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b76      	ldr	r3, [pc, #472]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a75      	ldr	r2, [pc, #468]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b73      	ldr	r3, [pc, #460]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a6e      	ldr	r2, [pc, #440]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4b68      	ldr	r3, [pc, #416]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a67      	ldr	r2, [pc, #412]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002eb8:	f043 0310 	orr.w	r3, r3, #16
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b65      	ldr	r3, [pc, #404]	; (8003054 <_Z11encoderInitv+0x1e4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
//	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//	GPIO_InitStruct.Pull = GPIO_PULLUP;
//	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fdb3 	bl	8006a3e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */
//	__HAL_RCC_GPIOD_CLK_ENABLE();
	/* USER CODE END TIM4_Init 1 */

	htim4.Instance = TIM4;
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	; (800305c <_Z11encoderInitv+0x1ec>)
 8002ee6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002ee8:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eee:	4b5a      	ldr	r3, [pc, #360]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002ef4:	4b58      	ldr	r3, [pc, #352]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efa:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efc:	4b56      	ldr	r3, [pc, #344]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f02:	4b55      	ldr	r3, [pc, #340]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f10:	2301      	movs	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f20:	2301      	movs	r3, #1
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f24:	2300      	movs	r3, #0
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4619      	mov	r1, r3
 8002f32:	4849      	ldr	r0, [pc, #292]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002f34:	f001 ff64 	bl	8004e00 <HAL_TIM_Encoder_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <_Z11encoderInitv+0xdc>
		Error_Handler();
 8002f48:	f7fe fdd6 	bl	8001af8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	4619      	mov	r1, r3
 8002f5a:	483f      	ldr	r0, [pc, #252]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8002f5c:	f002 fca8 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f60:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <_Z11encoderInitv+0x104>
		Error_Handler();
 8002f70:	f7fe fdc2 	bl	8001af8 <Error_Handler>

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	sConfig = { 0 };
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2224      	movs	r2, #36	; 0x24
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fd5e 	bl	8006a3e <memset>
	sMasterConfig = { 0 };
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8002f8e:	4a35      	ldr	r2, [pc, #212]	; (8003064 <_Z11encoderInitv+0x1f4>)
 8002f90:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8002fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fa4:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fac:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
	sConfig.IC1Filter = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC2Filter = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4820      	ldr	r0, [pc, #128]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8002fde:	f001 ff0f 	bl	8004e00 <HAL_TIM_Encoder_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <_Z11encoderInitv+0x186>
		Error_Handler();
 8002ff2:	f7fe fd81 	bl	8001af8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	4619      	mov	r1, r3
 8003004:	4816      	ldr	r0, [pc, #88]	; (8003060 <_Z11encoderInitv+0x1f0>)
 8003006:	f002 fc53 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 800300a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <_Z11encoderInitv+0x1ae>
		Error_Handler();
 800301a:	f7fe fd6d 	bl	8001af8 <Error_Handler>
	}

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800301e:	213c      	movs	r1, #60	; 0x3c
 8003020:	480d      	ldr	r0, [pc, #52]	; (8003058 <_Z11encoderInitv+0x1e8>)
 8003022:	f001 ff7f 	bl	8004f24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8003026:	213c      	movs	r1, #60	; 0x3c
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <_Z11encoderInitv+0x1f0>)
 800302a:	f001 ff7b 	bl	8004f24 <HAL_TIM_Encoder_Start>
	left_encoder_count = 10;
 800302e:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <_Z11encoderInitv+0x1f8>)
 8003030:	f04f 030a 	mov.w	r3, #10
 8003034:	f04f 0400 	mov.w	r4, #0
 8003038:	e9c2 3400 	strd	r3, r4, [r2]
	right_encoder_count = 10;
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <_Z11encoderInitv+0x1fc>)
 800303e:	f04f 030a 	mov.w	r3, #10
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	e9c2 3400 	strd	r3, r4, [r2]

}
 800304a:	bf00      	nop
 800304c:	373c      	adds	r7, #60	; 0x3c
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	20001534 	.word	0x20001534
 800305c:	40000800 	.word	0x40000800
 8003060:	20001574 	.word	0x20001574
 8003064:	40000c00 	.word	0x40000c00
 8003068:	20001f60 	.word	0x20001f60
 800306c:	20001f68 	.word	0x20001f68

08003070 <_Z41__static_initialization_and_destruction_0ii>:
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);

}
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d122      	bne.n	80030c6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003086:	4293      	cmp	r3, r2
 8003088:	d11d      	bne.n	80030c6 <_Z41__static_initialization_and_destruction_0ii+0x56>
static ros::NodeHandle nh;
 800308a:	4811      	ldr	r0, [pc, #68]	; (80030d0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800308c:	f7fe fd8e 	bl	8001bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
static std_msgs::String debug_msg;
 8003090:	4810      	ldr	r0, [pc, #64]	; (80030d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003092:	f7fe f999 	bl	80013c8 <_ZN8std_msgs6StringC1Ev>
static std_msgs::Int64 left_encoder_msg;
 8003096:	4810      	ldr	r0, [pc, #64]	; (80030d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003098:	f7fe fa32 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static std_msgs::Int64 right_encoder_msg;
 800309c:	480f      	ldr	r0, [pc, #60]	; (80030dc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800309e:	f7fe fa2f 	bl	8001500 <_ZN8std_msgs5Int64C1Ev>
static ros::Publisher debug_pub("debug", &debug_msg);
 80030a2:	2300      	movs	r3, #0
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80030a6:	490e      	ldr	r1, [pc, #56]	; (80030e0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80030a8:	480e      	ldr	r0, [pc, #56]	; (80030e4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80030aa:	f7fe f85d 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher left_encoder_pub("left_encoder", &left_encoder_msg);
 80030ae:	2300      	movs	r3, #0
 80030b0:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80030b2:	490d      	ldr	r1, [pc, #52]	; (80030e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80030b4:	480d      	ldr	r0, [pc, #52]	; (80030ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80030b6:	f7fe f857 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
static ros::Publisher right_encoder_pub("right_encoder", &right_encoder_msg);
 80030ba:	2300      	movs	r3, #0
 80030bc:	4a07      	ldr	r2, [pc, #28]	; (80030dc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80030be:	490c      	ldr	r1, [pc, #48]	; (80030f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80030c0:	480c      	ldr	r0, [pc, #48]	; (80030f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80030c2:	f7fe f851 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200015b8 	.word	0x200015b8
 80030d4:	20001ef4 	.word	0x20001ef4
 80030d8:	20001f00 	.word	0x20001f00
 80030dc:	20001f10 	.word	0x20001f10
 80030e0:	0800714c 	.word	0x0800714c
 80030e4:	20001f20 	.word	0x20001f20
 80030e8:	08007154 	.word	0x08007154
 80030ec:	20001f34 	.word	0x20001f34
 80030f0:	08007164 	.word	0x08007164
 80030f4:	20001f48 	.word	0x20001f48

080030f8 <_GLOBAL__sub_I_left_encoder_count>:
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003100:	2001      	movs	r0, #1
 8003102:	f7ff ffb5 	bl	8003070 <_Z41__static_initialization_and_destruction_0ii>
 8003106:	bd80      	pop	{r7, pc}

08003108 <_Z12wheelDirInitv>:
 */
#include "wheel_motor.h"

extern TIM_HandleTypeDef htim3;

void wheelDirInit() {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <_Z12wheelDirInitv+0x5c>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <_Z12wheelDirInitv+0x5c>)
 8003126:	f043 0310 	orr.w	r3, r3, #16
 800312a:	6313      	str	r3, [r2, #48]	; 0x30
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <_Z12wheelDirInitv+0x5c>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
//	__HAL_RCC_GPIOH_CLK_ENABLE();
//	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8003138:	2200      	movs	r2, #0
 800313a:	213c      	movs	r1, #60	; 0x3c
 800313c:	480a      	ldr	r0, [pc, #40]	; (8003168 <_Z12wheelDirInitv+0x60>)
 800313e:	f000 fff5 	bl	800412c <HAL_GPIO_WritePin>
			MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin | MOTOR_RIGHT_DIR1_Pin
					| MOTOR_RIGHT_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : MOTOR_A_DIR1_Pin MOTOR_A_DIR2_Pin MOTOR_B_DIR1_Pin MOTOR_B_DIR2_Pin */
	GPIO_InitStruct.Pin = MOTOR_LEFT_DIR1_Pin | MOTOR_LEFT_DIR2_Pin
 8003142:	233c      	movs	r3, #60	; 0x3c
 8003144:	607b      	str	r3, [r7, #4]
			| MOTOR_RIGHT_DIR1_Pin | MOTOR_RIGHT_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003146:	2301      	movs	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4804      	ldr	r0, [pc, #16]	; (8003168 <_Z12wheelDirInitv+0x60>)
 8003158:	f000 fe36 	bl	8003dc8 <HAL_GPIO_Init>

}
 800315c:	bf00      	nop
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	40021000 	.word	0x40021000

0800316c <_Z12wheelPWMInitv>:

void wheelPWMInit() {
 800316c:	b580      	push	{r7, lr}
 800316e:	b08e      	sub	sp, #56	; 0x38
 8003170:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <_Z12wheelPWMInitv+0x104>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a3d      	ldr	r2, [pc, #244]	; (8003270 <_Z12wheelPWMInitv+0x104>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <_Z12wheelPWMInitv+0x104>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	683b      	ldr	r3, [r7, #0]

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800318e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800319c:	f107 0320 	add.w	r3, r7, #32
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	615a      	str	r2, [r3, #20]
 80031b6:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 80031b8:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031ba:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <_Z12wheelPWMInitv+0x10c>)
 80031bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2 - 1;
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 42000 - 1;
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031cc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80031d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d8:	4b26      	ldr	r3, [pc, #152]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80031de:	4825      	ldr	r0, [pc, #148]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031e0:	f001 fd70 	bl	8004cc4 <HAL_TIM_Base_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80031ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031f2:	4619      	mov	r1, r3
 80031f4:	481f      	ldr	r0, [pc, #124]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 80031f6:	f001 ff93 	bl	8005120 <HAL_TIM_ConfigClockSource>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80031fe:	481d      	ldr	r0, [pc, #116]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 8003200:	f001 fd8b 	bl	8004d1a <HAL_TIM_PWM_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003210:	f107 0320 	add.w	r3, r7, #32
 8003214:	4619      	mov	r1, r3
 8003216:	4817      	ldr	r0, [pc, #92]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 8003218:	f002 fb4a 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 800321c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800321e:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003220:	2360      	movs	r3, #96	; 0x60
 8003222:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	2200      	movs	r2, #0
 8003234:	4619      	mov	r1, r3
 8003236:	480f      	ldr	r0, [pc, #60]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 8003238:	f001 feac 	bl	8004f94 <HAL_TIM_PWM_ConfigChannel>
 800323c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800323e:	2b00      	cmp	r3, #0
//		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2204      	movs	r2, #4
 8003244:	4619      	mov	r1, r3
 8003246:	480b      	ldr	r0, [pc, #44]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 8003248:	f001 fea4 	bl	8004f94 <HAL_TIM_PWM_ConfigChannel>
 800324c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800324e:	2b00      	cmp	r3, #0
//		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim3);
 8003250:	4808      	ldr	r0, [pc, #32]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 8003252:	f7ff fc11 	bl	8002a78 <HAL_TIM_MspPostInit>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003256:	2100      	movs	r1, #0
 8003258:	4806      	ldr	r0, [pc, #24]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 800325a:	f001 fd93 	bl	8004d84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800325e:	2104      	movs	r1, #4
 8003260:	4804      	ldr	r0, [pc, #16]	; (8003274 <_Z12wheelPWMInitv+0x108>)
 8003262:	f001 fd8f 	bl	8004d84 <HAL_TIM_PWM_Start>
}
 8003266:	bf00      	nop
 8003268:	3738      	adds	r7, #56	; 0x38
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	20002038 	.word	0x20002038
 8003278:	40000400 	.word	0x40000400

0800327c <_Z8moveStopv>:

void moveStop() {
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 8003280:	2200      	movs	r2, #0
 8003282:	2104      	movs	r1, #4
 8003284:	480c      	ldr	r0, [pc, #48]	; (80032b8 <_Z8moveStopv+0x3c>)
 8003286:	f000 ff51 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 800328a:	2200      	movs	r2, #0
 800328c:	2108      	movs	r1, #8
 800328e:	480a      	ldr	r0, [pc, #40]	; (80032b8 <_Z8moveStopv+0x3c>)
 8003290:	f000 ff4c 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 8003294:	2200      	movs	r2, #0
 8003296:	2110      	movs	r1, #16
 8003298:	4807      	ldr	r0, [pc, #28]	; (80032b8 <_Z8moveStopv+0x3c>)
 800329a:	f000 ff47 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 800329e:	2200      	movs	r2, #0
 80032a0:	2120      	movs	r1, #32
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <_Z8moveStopv+0x3c>)
 80032a4:	f000 ff42 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	TIM3->CCR1 = (uint16_t) 0;
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <_Z8moveStopv+0x40>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 0;
 80032ae:	4b03      	ldr	r3, [pc, #12]	; (80032bc <_Z8moveStopv+0x40>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38

}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40000400 	.word	0x40000400

080032c0 <_Z11moveForwordv>:

void moveForword() {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR1_Pin,
 80032c4:	2200      	movs	r2, #0
 80032c6:	2104      	movs	r1, #4
 80032c8:	480d      	ldr	r0, [pc, #52]	; (8003300 <_Z11moveForwordv+0x40>)
 80032ca:	f000 ff2f 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_LEFT_DIR2_Pin,
 80032ce:	2201      	movs	r2, #1
 80032d0:	2108      	movs	r1, #8
 80032d2:	480b      	ldr	r0, [pc, #44]	; (8003300 <_Z11moveForwordv+0x40>)
 80032d4:	f000 ff2a 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR1_Pin,
 80032d8:	2200      	movs	r2, #0
 80032da:	2110      	movs	r1, #16
 80032dc:	4808      	ldr	r0, [pc, #32]	; (8003300 <_Z11moveForwordv+0x40>)
 80032de:	f000 ff25 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_LEFT_DIR1_GPIO_Port, MOTOR_RIGHT_DIR2_Pin,
 80032e2:	2201      	movs	r2, #1
 80032e4:	2120      	movs	r1, #32
 80032e6:	4806      	ldr	r0, [pc, #24]	; (8003300 <_Z11moveForwordv+0x40>)
 80032e8:	f000 ff20 	bl	800412c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	TIM3->CCR1 = (uint16_t) 31000 - 1;
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <_Z11moveForwordv+0x44>)
 80032ee:	f647 1217 	movw	r2, #30999	; 0x7917
 80032f2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint16_t) 31000 - 1;
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <_Z11moveForwordv+0x44>)
 80032f6:	f647 1217 	movw	r2, #30999	; 0x7917
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	40000400 	.word	0x40000400

08003308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800330c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800330e:	e003      	b.n	8003318 <LoopCopyDataInit>

08003310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003316:	3104      	adds	r1, #4

08003318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003318:	480b      	ldr	r0, [pc, #44]	; (8003348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800331c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800331e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003320:	d3f6      	bcc.n	8003310 <CopyDataInit>
  ldr  r2, =_sbss
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003324:	e002      	b.n	800332c <LoopFillZerobss>

08003326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003328:	f842 3b04 	str.w	r3, [r2], #4

0800332c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800332e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003330:	d3f9      	bcc.n	8003326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003332:	f7ff fd87 	bl	8002e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003336:	f003 fb53 	bl	80069e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800333a:	f7fe fa6d 	bl	8001818 <main>
  bx  lr    
 800333e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003340:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003344:	080072d8 	.word	0x080072d8
  ldr  r0, =_sdata
 8003348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800334c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003350:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003354:	20002088 	.word	0x20002088

08003358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC_IRQHandler>
	...

0800335c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <HAL_Init+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <HAL_Init+0x40>)
 8003366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800336a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_Init+0x40>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_Init+0x40>)
 8003372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_Init+0x40>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <HAL_Init+0x40>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003384:	2003      	movs	r0, #3
 8003386:	f000 f94d 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800338a:	2000      	movs	r0, #0
 800338c:	f000 f808 	bl	80033a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003390:	f7ff fa62 	bl	8002858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023c00 	.word	0x40023c00

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_InitTick+0x54>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_InitTick+0x58>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f965 	bl	800368e <HAL_SYSTICK_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00e      	b.n	80033ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d80a      	bhi.n	80033ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d4:	2200      	movs	r2, #0
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	f000 f92d 	bl	800363a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <HAL_InitTick+0x5c>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000008 	.word	0x20000008
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_IncTick+0x20>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_IncTick+0x24>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4413      	add	r3, r2
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_IncTick+0x24>)
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000008 	.word	0x20000008
 8003424:	20002080 	.word	0x20002080

08003428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return uwTick;
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_GetTick+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20002080 	.word	0x20002080

08003440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7ff ffee 	bl	8003428 <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d005      	beq.n	8003466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_Delay+0x40>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003466:	bf00      	nop
 8003468:	f7ff ffde 	bl	8003428 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	429a      	cmp	r2, r3
 8003476:	d8f7      	bhi.n	8003468 <HAL_Delay+0x28>
  {
  }
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000008 	.word	0x20000008

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff3e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff8e 	bl	8003578 <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5d 	bl	8003524 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff31 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa2 	bl	80035e0 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff feb8 	bl	8003428 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e099      	b.n	80037f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e4:	e00f      	b.n	8003706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e6:	f7ff fe9f 	bl	8003428 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d908      	bls.n	8003706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2203      	movs	r2, #3
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e078      	b.n	80037f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e8      	bne.n	80036e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_DMA_Init+0x158>)
 8003720:	4013      	ands	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b04      	cmp	r3, #4
 800375e:	d107      	bne.n	8003770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4313      	orrs	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0307 	bic.w	r3, r3, #7
 8003786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b04      	cmp	r3, #4
 8003798:	d117      	bne.n	80037ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa91 	bl	8003cd4 <DMA_CheckFifoParam>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037c6:	2301      	movs	r3, #1
 80037c8:	e016      	b.n	80037f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa48 	bl	8003c68 <DMA_CalcBaseAndBitshift>
 80037d8:	4603      	mov	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	223f      	movs	r2, #63	; 0x3f
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	f010803f 	.word	0xf010803f

08003804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_DMA_Start_IT+0x26>
 8003826:	2302      	movs	r3, #2
 8003828:	e040      	b.n	80038ac <HAL_DMA_Start_IT+0xa8>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d12f      	bne.n	800389e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f9da 	bl	8003c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	223f      	movs	r2, #63	; 0x3f
 800385e:	409a      	lsls	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0216 	orr.w	r2, r2, #22
 8003872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0208 	orr.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e005      	b.n	80038aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d004      	beq.n	80038d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00c      	b.n	80038ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2205      	movs	r2, #5
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003904:	4b92      	ldr	r3, [pc, #584]	; (8003b50 <HAL_DMA_IRQHandler+0x258>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a92      	ldr	r2, [pc, #584]	; (8003b54 <HAL_DMA_IRQHandler+0x25c>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	2208      	movs	r2, #8
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01a      	beq.n	8003964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d013      	beq.n	8003964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0204 	bic.w	r2, r2, #4
 800394a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	2208      	movs	r2, #8
 8003952:	409a      	lsls	r2, r3
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f043 0201 	orr.w	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d012      	beq.n	800399a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	2201      	movs	r2, #1
 8003988:	409a      	lsls	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	f043 0202 	orr.w	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2204      	movs	r2, #4
 80039a0:	409a      	lsls	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d012      	beq.n	80039d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2204      	movs	r2, #4
 80039be:	409a      	lsls	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	2210      	movs	r2, #16
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d043      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d03c      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2210      	movs	r2, #16
 80039f4:	409a      	lsls	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d024      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
 8003a26:	e01f      	b.n	8003a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01b      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
 8003a38:	e016      	b.n	8003a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0208 	bic.w	r2, r2, #8
 8003a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 808e 	beq.w	8003b96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8086 	beq.w	8003b96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2220      	movs	r2, #32
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d136      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0216 	bic.w	r2, r2, #22
 8003ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_DMA_IRQHandler+0x1da>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	223f      	movs	r2, #63	; 0x3f
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d07d      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
        }
        return;
 8003b0e:	e078      	b.n	8003c02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01c      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d108      	bne.n	8003b3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d030      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
 8003b3c:	e02b      	b.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d027      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
 8003b4e:	e022      	b.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
 8003b50:	20000000 	.word	0x20000000
 8003b54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0210 	bic.w	r2, r2, #16
 8003b74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d032      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2205      	movs	r2, #5
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d307      	bcc.n	8003bde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f2      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x2ca>
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
 8003c00:	e000      	b.n	8003c04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c02:	bf00      	nop
    }
  }
}
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop

08003c0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d108      	bne.n	8003c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c4a:	e007      	b.n	8003c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	3b10      	subs	r3, #16
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <DMA_CalcBaseAndBitshift+0x64>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d909      	bls.n	8003caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	1d1a      	adds	r2, r3, #4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ca8:	e007      	b.n	8003cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	aaaaaaab 	.word	0xaaaaaaab
 8003cd0:	080072b4 	.word	0x080072b4

08003cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11f      	bne.n	8003d2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d855      	bhi.n	8003da0 <DMA_CheckFifoParam+0xcc>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <DMA_CheckFifoParam+0x28>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d1f 	.word	0x08003d1f
 8003d04:	08003d0d 	.word	0x08003d0d
 8003d08:	08003da1 	.word	0x08003da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d045      	beq.n	8003da4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1c:	e042      	b.n	8003da4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d26:	d13f      	bne.n	8003da8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2c:	e03c      	b.n	8003da8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d36:	d121      	bne.n	8003d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d836      	bhi.n	8003dac <DMA_CheckFifoParam+0xd8>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <DMA_CheckFifoParam+0x70>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d5b 	.word	0x08003d5b
 8003d4c:	08003d55 	.word	0x08003d55
 8003d50:	08003d6d 	.word	0x08003d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	e02f      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d024      	beq.n	8003db0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6a:	e021      	b.n	8003db0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d74:	d11e      	bne.n	8003db4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d7a:	e01b      	b.n	8003db4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <DMA_CheckFifoParam+0xb4>
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d003      	beq.n	8003d8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d86:	e018      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e015      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00e      	beq.n	8003db8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9e:	e00b      	b.n	8003db8 <DMA_CheckFifoParam+0xe4>
      break;
 8003da0:	bf00      	nop
 8003da2:	e00a      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003da4:	bf00      	nop
 8003da6:	e008      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003da8:	bf00      	nop
 8003daa:	e006      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003dac:	bf00      	nop
 8003dae:	e004      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;   
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003db8:	bf00      	nop
    }
  } 
  
  return status; 
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e16b      	b.n	80040bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	f040 815a 	bne.w	80040b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d00b      	beq.n	8003e22 <HAL_GPIO_Init+0x5a>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d007      	beq.n	8003e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e16:	2b11      	cmp	r3, #17
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b12      	cmp	r3, #18
 8003e20:	d130      	bne.n	8003e84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 0201 	and.w	r2, r3, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0xfc>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b12      	cmp	r3, #18
 8003ec2:	d123      	bne.n	8003f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0203 	and.w	r2, r3, #3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80b4 	beq.w	80040b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <HAL_GPIO_Init+0x308>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4a5e      	ldr	r2, [pc, #376]	; (80040d0 <HAL_GPIO_Init+0x308>)
 8003f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5e:	4b5c      	ldr	r3, [pc, #368]	; (80040d0 <HAL_GPIO_Init+0x308>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6a:	4a5a      	ldr	r2, [pc, #360]	; (80040d4 <HAL_GPIO_Init+0x30c>)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	3302      	adds	r3, #2
 8003f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a51      	ldr	r2, [pc, #324]	; (80040d8 <HAL_GPIO_Init+0x310>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02b      	beq.n	8003fee <HAL_GPIO_Init+0x226>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a50      	ldr	r2, [pc, #320]	; (80040dc <HAL_GPIO_Init+0x314>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d025      	beq.n	8003fea <HAL_GPIO_Init+0x222>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4f      	ldr	r2, [pc, #316]	; (80040e0 <HAL_GPIO_Init+0x318>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_GPIO_Init+0x21e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4e      	ldr	r2, [pc, #312]	; (80040e4 <HAL_GPIO_Init+0x31c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d019      	beq.n	8003fe2 <HAL_GPIO_Init+0x21a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a4d      	ldr	r2, [pc, #308]	; (80040e8 <HAL_GPIO_Init+0x320>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_GPIO_Init+0x216>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4c      	ldr	r2, [pc, #304]	; (80040ec <HAL_GPIO_Init+0x324>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00d      	beq.n	8003fda <HAL_GPIO_Init+0x212>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4b      	ldr	r2, [pc, #300]	; (80040f0 <HAL_GPIO_Init+0x328>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <HAL_GPIO_Init+0x20e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <HAL_GPIO_Init+0x32c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_GPIO_Init+0x20a>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e00e      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	e00c      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fd6:	2306      	movs	r3, #6
 8003fd8:	e00a      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fda:	2305      	movs	r3, #5
 8003fdc:	e008      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fde:	2304      	movs	r3, #4
 8003fe0:	e006      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e004      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f002 0203 	and.w	r2, r2, #3
 8003ff6:	0092      	lsls	r2, r2, #2
 8003ff8:	4093      	lsls	r3, r2
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004000:	4934      	ldr	r1, [pc, #208]	; (80040d4 <HAL_GPIO_Init+0x30c>)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800400e:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <HAL_GPIO_Init+0x330>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004032:	4a31      	ldr	r2, [pc, #196]	; (80040f8 <HAL_GPIO_Init+0x330>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004038:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <HAL_GPIO_Init+0x330>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <HAL_GPIO_Init+0x330>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004062:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_GPIO_Init+0x330>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_GPIO_Init+0x330>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <HAL_GPIO_Init+0x330>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040b0:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <HAL_GPIO_Init+0x330>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	f67f ae90 	bls.w	8003de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040c4:	bf00      	nop
 80040c6:	3724      	adds	r7, #36	; 0x24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40013800 	.word	0x40013800
 80040d8:	40020000 	.word	0x40020000
 80040dc:	40020400 	.word	0x40020400
 80040e0:	40020800 	.word	0x40020800
 80040e4:	40020c00 	.word	0x40020c00
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40021400 	.word	0x40021400
 80040f0:	40021800 	.word	0x40021800
 80040f4:	40021c00 	.word	0x40021c00
 80040f8:	40013c00 	.word	0x40013c00

080040fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	887b      	ldrh	r3, [r7, #2]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	e001      	b.n	800411e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
 8004138:	4613      	mov	r3, r2
 800413a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800413c:	787b      	ldrb	r3, [r7, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004148:	e003      	b.n	8004152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	041a      	lsls	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	619a      	str	r2, [r3, #24]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800416a:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004176:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fdd2 	bl	8002d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40013c00 	.word	0x40013c00

08004190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e11f      	b.n	80043e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fb76 	bl	80028a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	; 0x24
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f4:	f000 fd3e 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 80041f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4a7b      	ldr	r2, [pc, #492]	; (80043ec <HAL_I2C_Init+0x25c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d807      	bhi.n	8004214 <HAL_I2C_Init+0x84>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a7a      	ldr	r2, [pc, #488]	; (80043f0 <HAL_I2C_Init+0x260>)
 8004208:	4293      	cmp	r3, r2
 800420a:	bf94      	ite	ls
 800420c:	2301      	movls	r3, #1
 800420e:	2300      	movhi	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e006      	b.n	8004222 <HAL_I2C_Init+0x92>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_I2C_Init+0x264>)
 8004218:	4293      	cmp	r3, r2
 800421a:	bf94      	ite	ls
 800421c:	2301      	movls	r3, #1
 800421e:	2300      	movhi	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0db      	b.n	80043e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a72      	ldr	r2, [pc, #456]	; (80043f8 <HAL_I2C_Init+0x268>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0c9b      	lsrs	r3, r3, #18
 8004234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a64      	ldr	r2, [pc, #400]	; (80043ec <HAL_I2C_Init+0x25c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d802      	bhi.n	8004264 <HAL_I2C_Init+0xd4>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3301      	adds	r3, #1
 8004262:	e009      	b.n	8004278 <HAL_I2C_Init+0xe8>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	4a63      	ldr	r2, [pc, #396]	; (80043fc <HAL_I2C_Init+0x26c>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	099b      	lsrs	r3, r3, #6
 8004276:	3301      	adds	r3, #1
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	430b      	orrs	r3, r1
 800427e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800428a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4956      	ldr	r1, [pc, #344]	; (80043ec <HAL_I2C_Init+0x25c>)
 8004294:	428b      	cmp	r3, r1
 8004296:	d80d      	bhi.n	80042b4 <HAL_I2C_Init+0x124>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1e59      	subs	r1, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	bf38      	it	cc
 80042b0:	2304      	movcc	r3, #4
 80042b2:	e04f      	b.n	8004354 <HAL_I2C_Init+0x1c4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d111      	bne.n	80042e0 <HAL_I2C_Init+0x150>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1e58      	subs	r0, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	440b      	add	r3, r1
 80042ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e012      	b.n	8004306 <HAL_I2C_Init+0x176>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1e58      	subs	r0, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	0099      	lsls	r1, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Init+0x17e>
 800430a:	2301      	movs	r3, #1
 800430c:	e022      	b.n	8004354 <HAL_I2C_Init+0x1c4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10e      	bne.n	8004334 <HAL_I2C_Init+0x1a4>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1e58      	subs	r0, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6859      	ldr	r1, [r3, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	440b      	add	r3, r1
 8004324:	fbb0 f3f3 	udiv	r3, r0, r3
 8004328:	3301      	adds	r3, #1
 800432a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004332:	e00f      	b.n	8004354 <HAL_I2C_Init+0x1c4>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1e58      	subs	r0, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	0099      	lsls	r1, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	fbb0 f3f3 	udiv	r3, r0, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	6809      	ldr	r1, [r1, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69da      	ldr	r2, [r3, #28]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6911      	ldr	r1, [r2, #16]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	4311      	orrs	r1, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	430b      	orrs	r3, r1
 8004396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	000186a0 	.word	0x000186a0
 80043f0:	001e847f 	.word	0x001e847f
 80043f4:	003d08ff 	.word	0x003d08ff
 80043f8:	431bde83 	.word	0x431bde83
 80043fc:	10624dd3 	.word	0x10624dd3

08004400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e25b      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d075      	beq.n	800450a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441e:	4ba3      	ldr	r3, [pc, #652]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b04      	cmp	r3, #4
 8004428:	d00c      	beq.n	8004444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442a:	4ba0      	ldr	r3, [pc, #640]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004432:	2b08      	cmp	r3, #8
 8004434:	d112      	bne.n	800445c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004436:	4b9d      	ldr	r3, [pc, #628]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004442:	d10b      	bne.n	800445c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	4b99      	ldr	r3, [pc, #612]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d05b      	beq.n	8004508 <HAL_RCC_OscConfig+0x108>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d157      	bne.n	8004508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e236      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004464:	d106      	bne.n	8004474 <HAL_RCC_OscConfig+0x74>
 8004466:	4b91      	ldr	r3, [pc, #580]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a90      	ldr	r2, [pc, #576]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e01d      	b.n	80044b0 <HAL_RCC_OscConfig+0xb0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x98>
 800447e:	4b8b      	ldr	r3, [pc, #556]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a8a      	ldr	r2, [pc, #552]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b88      	ldr	r3, [pc, #544]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a87      	ldr	r2, [pc, #540]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0xb0>
 8004498:	4b84      	ldr	r3, [pc, #528]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a83      	ldr	r2, [pc, #524]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800449e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b81      	ldr	r3, [pc, #516]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a80      	ldr	r2, [pc, #512]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fe ffb6 	bl	8003428 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c0:	f7fe ffb2 	bl	8003428 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e1fb      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b76      	ldr	r3, [pc, #472]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0xc0>
 80044de:	e014      	b.n	800450a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fe ffa2 	bl	8003428 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fe ff9e 	bl	8003428 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e1e7      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	4b6c      	ldr	r3, [pc, #432]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0xe8>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d063      	beq.n	80045de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b62      	ldr	r3, [pc, #392]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800452a:	2b08      	cmp	r3, #8
 800452c:	d11c      	bne.n	8004568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452e:	4b5f      	ldr	r3, [pc, #380]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	4b5c      	ldr	r3, [pc, #368]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x152>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e1bb      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b56      	ldr	r3, [pc, #344]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4952      	ldr	r1, [pc, #328]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	e03a      	b.n	80045de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004570:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <HAL_RCC_OscConfig+0x2b0>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fe ff57 	bl	8003428 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457e:	f7fe ff53 	bl	8003428 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e19c      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004590:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459c:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4940      	ldr	r1, [pc, #256]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]
 80045b0:	e015      	b.n	80045de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b2:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <HAL_RCC_OscConfig+0x2b0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fe ff36 	bl	8003428 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c0:	f7fe ff32 	bl	8003428 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e17b      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d030      	beq.n	800464c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f2:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_RCC_OscConfig+0x2b4>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fe ff16 	bl	8003428 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004600:	f7fe ff12 	bl	8003428 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e15b      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x200>
 800461e:	e015      	b.n	800464c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_RCC_OscConfig+0x2b4>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004626:	f7fe feff 	bl	8003428 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462e:	f7fe fefb 	bl	8003428 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e144      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f0      	bne.n	800462e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a0 	beq.w	800479a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_OscConfig+0x2b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d121      	bne.n	80046da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <HAL_RCC_OscConfig+0x2b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <HAL_RCC_OscConfig+0x2b8>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a2:	f7fe fec1 	bl	8003428 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	e011      	b.n	80046ce <HAL_RCC_OscConfig+0x2ce>
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	42470000 	.word	0x42470000
 80046b4:	42470e80 	.word	0x42470e80
 80046b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046bc:	f7fe feb4 	bl	8003428 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0fd      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ce:	4b81      	ldr	r3, [pc, #516]	; (80048d4 <HAL_RCC_OscConfig+0x4d4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d106      	bne.n	80046f0 <HAL_RCC_OscConfig+0x2f0>
 80046e2:	4b7d      	ldr	r3, [pc, #500]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a7c      	ldr	r2, [pc, #496]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	e01c      	b.n	800472a <HAL_RCC_OscConfig+0x32a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d10c      	bne.n	8004712 <HAL_RCC_OscConfig+0x312>
 80046f8:	4b77      	ldr	r3, [pc, #476]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4a76      	ldr	r2, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
 8004704:	4b74      	ldr	r3, [pc, #464]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a73      	ldr	r2, [pc, #460]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	e00b      	b.n	800472a <HAL_RCC_OscConfig+0x32a>
 8004712:	4b71      	ldr	r3, [pc, #452]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a70      	ldr	r2, [pc, #448]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6713      	str	r3, [r2, #112]	; 0x70
 800471e:	4b6e      	ldr	r3, [pc, #440]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	4a6d      	ldr	r2, [pc, #436]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004724:	f023 0304 	bic.w	r3, r3, #4
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d015      	beq.n	800475e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fe fe79 	bl	8003428 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fe fe75 	bl	8003428 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0bc      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004750:	4b61      	ldr	r3, [pc, #388]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ee      	beq.n	800473a <HAL_RCC_OscConfig+0x33a>
 800475c:	e014      	b.n	8004788 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fe fe63 	bl	8003428 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fe fe5f 	bl	8003428 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0a6      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477c:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ee      	bne.n	8004766 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d105      	bne.n	800479a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478e:	4b52      	ldr	r3, [pc, #328]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a51      	ldr	r2, [pc, #324]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8092 	beq.w	80048c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a4:	4b4c      	ldr	r3, [pc, #304]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d05c      	beq.n	800486a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d141      	bne.n	800483c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b8:	4b48      	ldr	r3, [pc, #288]	; (80048dc <HAL_RCC_OscConfig+0x4dc>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fe fe33 	bl	8003428 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fe fe2f 	bl	8003428 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e078      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d8:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	019b      	lsls	r3, r3, #6
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	4933      	ldr	r1, [pc, #204]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800480e:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_RCC_OscConfig+0x4dc>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fe fe08 	bl	8003428 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481c:	f7fe fe04 	bl	8003428 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04d      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x41c>
 800483a:	e045      	b.n	80048c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x4dc>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004842:	f7fe fdf1 	bl	8003428 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484a:	f7fe fded 	bl	8003428 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e036      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485c:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f0      	bne.n	800484a <HAL_RCC_OscConfig+0x44a>
 8004868:	e02e      	b.n	80048c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e029      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004876:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <HAL_RCC_OscConfig+0x4d8>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	429a      	cmp	r2, r3
 8004888:	d11c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d115      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800489e:	4013      	ands	r3, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10d      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d106      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40007000 	.word	0x40007000
 80048d8:	40023800 	.word	0x40023800
 80048dc:	42470060 	.word	0x42470060

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0cc      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90c      	bls.n	800491c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b8      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a58      	ldr	r2, [pc, #352]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800493e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	494d      	ldr	r1, [pc, #308]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d044      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d119      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d003      	beq.n	800499e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	2b03      	cmp	r3, #3
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e067      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4934      	ldr	r1, [pc, #208]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d0:	f7fe fd2a 	bl	8003428 <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fe fd26 	bl	8003428 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d20c      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e032      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4916      	ldr	r1, [pc, #88]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	490e      	ldr	r1, [pc, #56]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a66:	f000 f821 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	5cd3      	ldrb	r3, [r2, r3]
 8004a7a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fc8a 	bl	80033a0 <HAL_InitTick>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	0800729c 	.word	0x0800729c
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	20000004 	.word	0x20000004

08004aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	2300      	movs	r3, #0
 8004abc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac2:	4b63      	ldr	r3, [pc, #396]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d007      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x32>
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d008      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 80b4 	bne.w	8004c40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad8:	4b5e      	ldr	r3, [pc, #376]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ada:	60bb      	str	r3, [r7, #8]
       break;
 8004adc:	e0b3      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ade:	4b5e      	ldr	r3, [pc, #376]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ae0:	60bb      	str	r3, [r7, #8]
      break;
 8004ae2:	e0b0      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae4:	4b5a      	ldr	r3, [pc, #360]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aee:	4b58      	ldr	r3, [pc, #352]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d04a      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	4b55      	ldr	r3, [pc, #340]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	ea03 0501 	and.w	r5, r3, r1
 8004b10:	ea04 0602 	and.w	r6, r4, r2
 8004b14:	4629      	mov	r1, r5
 8004b16:	4632      	mov	r2, r6
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	f04f 0400 	mov.w	r4, #0
 8004b20:	0154      	lsls	r4, r2, #5
 8004b22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b26:	014b      	lsls	r3, r1, #5
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	1b49      	subs	r1, r1, r5
 8004b2e:	eb62 0206 	sbc.w	r2, r2, r6
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	0194      	lsls	r4, r2, #6
 8004b3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b40:	018b      	lsls	r3, r1, #6
 8004b42:	1a5b      	subs	r3, r3, r1
 8004b44:	eb64 0402 	sbc.w	r4, r4, r2
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	00e2      	lsls	r2, r4, #3
 8004b52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b56:	00d9      	lsls	r1, r3, #3
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	195b      	adds	r3, r3, r5
 8004b5e:	eb44 0406 	adc.w	r4, r4, r6
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	0262      	lsls	r2, r4, #9
 8004b6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b70:	0259      	lsls	r1, r3, #9
 8004b72:	460b      	mov	r3, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	4621      	mov	r1, r4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f04f 0400 	mov.w	r4, #0
 8004b80:	461a      	mov	r2, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	f7fb fb28 	bl	80001d8 <__aeabi_uldivmod>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e049      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b90:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	f04f 0400 	mov.w	r4, #0
 8004b9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	ea03 0501 	and.w	r5, r3, r1
 8004ba6:	ea04 0602 	and.w	r6, r4, r2
 8004baa:	4629      	mov	r1, r5
 8004bac:	4632      	mov	r2, r6
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	f04f 0400 	mov.w	r4, #0
 8004bb6:	0154      	lsls	r4, r2, #5
 8004bb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bbc:	014b      	lsls	r3, r1, #5
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	1b49      	subs	r1, r1, r5
 8004bc4:	eb62 0206 	sbc.w	r2, r2, r6
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	f04f 0400 	mov.w	r4, #0
 8004bd0:	0194      	lsls	r4, r2, #6
 8004bd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bd6:	018b      	lsls	r3, r1, #6
 8004bd8:	1a5b      	subs	r3, r3, r1
 8004bda:	eb64 0402 	sbc.w	r4, r4, r2
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	00e2      	lsls	r2, r4, #3
 8004be8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bec:	00d9      	lsls	r1, r3, #3
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	195b      	adds	r3, r3, r5
 8004bf4:	eb44 0406 	adc.w	r4, r4, r6
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	02a2      	lsls	r2, r4, #10
 8004c02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c06:	0299      	lsls	r1, r3, #10
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4614      	mov	r4, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	4621      	mov	r1, r4
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f04f 0400 	mov.w	r4, #0
 8004c16:	461a      	mov	r2, r3
 8004c18:	4623      	mov	r3, r4
 8004c1a:	f7fb fadd 	bl	80001d8 <__aeabi_uldivmod>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	60bb      	str	r3, [r7, #8]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c42:	60bb      	str	r3, [r7, #8]
      break;
 8004c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c46:	68bb      	ldr	r3, [r7, #8]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	00f42400 	.word	0x00f42400
 8004c58:	007a1200 	.word	0x007a1200

08004c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000000 	.word	0x20000000

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c78:	f7ff fff0 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004c7c:	4601      	mov	r1, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	0a9b      	lsrs	r3, r3, #10
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8a:	5cd3      	ldrb	r3, [r2, r3]
 8004c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40023800 	.word	0x40023800
 8004c98:	080072ac 	.word	0x080072ac

08004c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ca0:	f7ff ffdc 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004ca4:	4601      	mov	r1, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	0b5b      	lsrs	r3, r3, #13
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4a03      	ldr	r2, [pc, #12]	; (8004cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb2:	5cd3      	ldrb	r3, [r2, r3]
 8004cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	080072ac 	.word	0x080072ac

08004cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e01d      	b.n	8004d12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd fe24 	bl	8002938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 fac4 	bl	8005290 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e01d      	b.n	8004d68 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f815 	bl	8004d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 fa99 	bl	8005290 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2201      	movs	r2, #1
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fd64 	bl	8005864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <HAL_TIM_PWM_Start+0x74>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_TIM_PWM_Start+0x2c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <HAL_TIM_PWM_Start+0x78>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x30>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <HAL_TIM_PWM_Start+0x32>
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40010400 	.word	0x40010400

08004e00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e083      	b.n	8004f1c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fd fda7 	bl	800297c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e44:	f023 0307 	bic.w	r3, r3, #7
 8004e48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f000 fa1b 	bl	8005290 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	4313      	orrs	r3, r2
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ea0:	f023 030c 	bic.w	r3, r3, #12
 8004ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	011a      	lsls	r2, r3, #4
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	031b      	lsls	r3, r3, #12
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_TIM_Encoder_Start+0x16>
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d008      	beq.n	8004f4a <HAL_TIM_Encoder_Start+0x26>
 8004f38:	e00f      	b.n	8004f5a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fc8e 	bl	8005864 <TIM_CCxChannelCmd>
      break;
 8004f48:	e016      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2104      	movs	r1, #4
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fc86 	bl	8005864 <TIM_CCxChannelCmd>
      break;
 8004f58:	e00e      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fc7e 	bl	8005864 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2104      	movs	r1, #4
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fc77 	bl	8005864 <TIM_CCxChannelCmd>
      break;
 8004f76:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e0b4      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	f200 809f 	bhi.w	8005104 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005105 	.word	0x08005105
 8004fd4:	08005105 	.word	0x08005105
 8004fd8:	08005105 	.word	0x08005105
 8004fdc:	08005041 	.word	0x08005041
 8004fe0:	08005105 	.word	0x08005105
 8004fe4:	08005105 	.word	0x08005105
 8004fe8:	08005105 	.word	0x08005105
 8004fec:	08005083 	.word	0x08005083
 8004ff0:	08005105 	.word	0x08005105
 8004ff4:	08005105 	.word	0x08005105
 8004ff8:	08005105 	.word	0x08005105
 8004ffc:	080050c3 	.word	0x080050c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f9e2 	bl	80053d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0208 	orr.w	r2, r2, #8
 800501a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0204 	bic.w	r2, r2, #4
 800502a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6999      	ldr	r1, [r3, #24]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	619a      	str	r2, [r3, #24]
      break;
 800503e:	e062      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fa32 	bl	80054b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6999      	ldr	r1, [r3, #24]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	021a      	lsls	r2, r3, #8
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	619a      	str	r2, [r3, #24]
      break;
 8005080:	e041      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fa87 	bl	800559c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0208 	orr.w	r2, r2, #8
 800509c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0204 	bic.w	r2, r2, #4
 80050ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69d9      	ldr	r1, [r3, #28]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	61da      	str	r2, [r3, #28]
      break;
 80050c0:	e021      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fadb 	bl	8005684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69d9      	ldr	r1, [r3, #28]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	021a      	lsls	r2, r3, #8
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	61da      	str	r2, [r3, #28]
      break;
 8005102:	e000      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005104:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIM_ConfigClockSource+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e0a6      	b.n	8005286 <HAL_TIM_ConfigClockSource+0x166>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800515e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b40      	cmp	r3, #64	; 0x40
 800516e:	d067      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0x120>
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d80b      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x6c>
 8005174:	2b10      	cmp	r3, #16
 8005176:	d073      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0x140>
 8005178:	2b10      	cmp	r3, #16
 800517a:	d802      	bhi.n	8005182 <HAL_TIM_ConfigClockSource+0x62>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d06f      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005180:	e078      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005182:	2b20      	cmp	r3, #32
 8005184:	d06c      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0x140>
 8005186:	2b30      	cmp	r3, #48	; 0x30
 8005188:	d06a      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800518a:	e073      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800518c:	2b70      	cmp	r3, #112	; 0x70
 800518e:	d00d      	beq.n	80051ac <HAL_TIM_ConfigClockSource+0x8c>
 8005190:	2b70      	cmp	r3, #112	; 0x70
 8005192:	d804      	bhi.n	800519e <HAL_TIM_ConfigClockSource+0x7e>
 8005194:	2b50      	cmp	r3, #80	; 0x50
 8005196:	d033      	beq.n	8005200 <HAL_TIM_ConfigClockSource+0xe0>
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d041      	beq.n	8005220 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800519c:	e06a      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	d066      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x152>
 80051a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a8:	d017      	beq.n	80051da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80051aa:	e063      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6899      	ldr	r1, [r3, #8]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f000 fb32 	bl	8005824 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	609a      	str	r2, [r3, #8]
      break;
 80051d8:	e04c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f000 fb1b 	bl	8005824 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051fc:	609a      	str	r2, [r3, #8]
      break;
 80051fe:	e039      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	461a      	mov	r2, r3
 800520e:	f000 fa8f 	bl	8005730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2150      	movs	r1, #80	; 0x50
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fae8 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 800521e:	e029      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	461a      	mov	r2, r3
 800522e:	f000 faae 	bl	800578e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2160      	movs	r1, #96	; 0x60
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fad8 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 800523e:	e019      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	6859      	ldr	r1, [r3, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	461a      	mov	r2, r3
 800524e:	f000 fa6f 	bl	8005730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2140      	movs	r1, #64	; 0x40
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fac8 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 800525e:	e009      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f000 fabf 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 8005270:	e000      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a40      	ldr	r2, [pc, #256]	; (80053a4 <TIM_Base_SetConfig+0x114>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d00f      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3d      	ldr	r2, [pc, #244]	; (80053a8 <TIM_Base_SetConfig+0x118>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00b      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a3c      	ldr	r2, [pc, #240]	; (80053ac <TIM_Base_SetConfig+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a3b      	ldr	r2, [pc, #236]	; (80053b0 <TIM_Base_SetConfig+0x120>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a3a      	ldr	r2, [pc, #232]	; (80053b4 <TIM_Base_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d108      	bne.n	80052e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <TIM_Base_SetConfig+0x114>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02b      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d027      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2c      	ldr	r2, [pc, #176]	; (80053a8 <TIM_Base_SetConfig+0x118>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d023      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <TIM_Base_SetConfig+0x11c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d01f      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <TIM_Base_SetConfig+0x120>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01b      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <TIM_Base_SetConfig+0x124>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d017      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <TIM_Base_SetConfig+0x128>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a27      	ldr	r2, [pc, #156]	; (80053bc <TIM_Base_SetConfig+0x12c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00f      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <TIM_Base_SetConfig+0x130>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00b      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a25      	ldr	r2, [pc, #148]	; (80053c4 <TIM_Base_SetConfig+0x134>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d007      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <TIM_Base_SetConfig+0x138>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a23      	ldr	r2, [pc, #140]	; (80053cc <TIM_Base_SetConfig+0x13c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d108      	bne.n	8005354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <TIM_Base_SetConfig+0x114>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_Base_SetConfig+0xf8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <TIM_Base_SetConfig+0x124>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d103      	bne.n	8005390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	615a      	str	r2, [r3, #20]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40010400 	.word	0x40010400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800
 80053c4:	40001800 	.word	0x40001800
 80053c8:	40001c00 	.word	0x40001c00
 80053cc:	40002000 	.word	0x40002000

080053d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0302 	bic.w	r3, r3, #2
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <TIM_OC1_SetConfig+0xd8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_OC1_SetConfig+0x64>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <TIM_OC1_SetConfig+0xdc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d10c      	bne.n	800544e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f023 0308 	bic.w	r3, r3, #8
 800543a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <TIM_OC1_SetConfig+0xd8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_OC1_SetConfig+0x8e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a14      	ldr	r2, [pc, #80]	; (80054ac <TIM_OC1_SetConfig+0xdc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d111      	bne.n	8005482 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800546c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400

080054b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f023 0210 	bic.w	r2, r3, #16
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0320 	bic.w	r3, r3, #32
 80054fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a22      	ldr	r2, [pc, #136]	; (8005594 <TIM_OC2_SetConfig+0xe4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC2_SetConfig+0x68>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a21      	ldr	r2, [pc, #132]	; (8005598 <TIM_OC2_SetConfig+0xe8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d10d      	bne.n	8005534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a17      	ldr	r2, [pc, #92]	; (8005594 <TIM_OC2_SetConfig+0xe4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_OC2_SetConfig+0x94>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <TIM_OC2_SetConfig+0xe8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d113      	bne.n	800556c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000
 8005598:	40010400 	.word	0x40010400

0800559c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a21      	ldr	r2, [pc, #132]	; (800567c <TIM_OC3_SetConfig+0xe0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC3_SetConfig+0x66>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a20      	ldr	r2, [pc, #128]	; (8005680 <TIM_OC3_SetConfig+0xe4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10d      	bne.n	800561e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800561c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a16      	ldr	r2, [pc, #88]	; (800567c <TIM_OC3_SetConfig+0xe0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_OC3_SetConfig+0x92>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a15      	ldr	r2, [pc, #84]	; (8005680 <TIM_OC3_SetConfig+0xe4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d113      	bne.n	8005656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800563c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40010000 	.word	0x40010000
 8005680:	40010400 	.word	0x40010400

08005684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	031b      	lsls	r3, r3, #12
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a12      	ldr	r2, [pc, #72]	; (8005728 <TIM_OC4_SetConfig+0xa4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC4_SetConfig+0x68>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a11      	ldr	r2, [pc, #68]	; (800572c <TIM_OC4_SetConfig+0xa8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d109      	bne.n	8005700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000
 800572c:	40010400 	.word	0x40010400

08005730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0201 	bic.w	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 030a 	bic.w	r3, r3, #10
 800576c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578e:	b480      	push	{r7}
 8005790:	b087      	sub	sp, #28
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0210 	bic.w	r2, r3, #16
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	031b      	lsls	r3, r3, #12
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	f043 0307 	orr.w	r3, r3, #7
 8005810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	431a      	orrs	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4313      	orrs	r3, r2
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2201      	movs	r2, #1
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1a      	ldr	r2, [r3, #32]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e05a      	b.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d022      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d01d      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d018      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1b      	ldr	r2, [pc, #108]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a18      	ldr	r2, [pc, #96]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10c      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	4313      	orrs	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40010000 	.word	0x40010000
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40010400 	.word	0x40010400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40001800 	.word	0x40001800

080059a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e03f      	b.n	8005a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fd f88c 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2224      	movs	r2, #36	; 0x24
 80059d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fc2d 	bl	800624c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d153      	bne.n	8005b06 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_UART_Transmit_DMA+0x26>
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e04c      	b.n	8005b08 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_UART_Transmit_DMA+0x38>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e045      	b.n	8005b08 <HAL_UART_Transmit_DMA+0xc4>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2221      	movs	r2, #33	; 0x21
 8005aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <HAL_UART_Transmit_DMA+0xcc>)
 8005aaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	4a18      	ldr	r2, [pc, #96]	; (8005b14 <HAL_UART_Transmit_DMA+0xd0>)
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <HAL_UART_Transmit_DMA+0xd4>)
 8005aba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005ac4:	f107 0308 	add.w	r3, r7, #8
 8005ac8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	461a      	mov	r2, r3
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	f7fd fe92 	bl	8003804 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ae8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b00:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08005e59 	.word	0x08005e59
 8005b14:	08005eab 	.word	0x08005eab
 8005b18:	08005f4b 	.word	0x08005f4b

08005b1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d166      	bne.n	8005c04 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_UART_Receive_DMA+0x26>
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e05f      	b.n	8005c06 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Receive_DMA+0x38>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e058      	b.n	8005c06 <HAL_UART_Receive_DMA+0xea>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2222      	movs	r2, #34	; 0x22
 8005b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <HAL_UART_Receive_DMA+0xf4>)
 8005b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <HAL_UART_Receive_DMA+0xf8>)
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	4a23      	ldr	r2, [pc, #140]	; (8005c18 <HAL_UART_Receive_DMA+0xfc>)
 8005b8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	2200      	movs	r2, #0
 8005b94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	f7fd fe29 	bl	8003804 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bde:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bfe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	08005ec7 	.word	0x08005ec7
 8005c14:	08005f2f 	.word	0x08005f2f
 8005c18:	08005f4b 	.word	0x08005f4b

08005c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <HAL_UART_IRQHandler+0x52>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa6f 	bl	800614a <UART_Receive_IT>
      return;
 8005c6c:	e0d1      	b.n	8005e12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 80b0 	beq.w	8005dd6 <HAL_UART_IRQHandler+0x1ba>
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <HAL_UART_IRQHandler+0x70>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80a5 	beq.w	8005dd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_UART_IRQHandler+0x90>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_UART_IRQHandler+0xb0>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc4:	f043 0202 	orr.w	r2, r3, #2
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <HAL_UART_IRQHandler+0xd0>
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	f043 0204 	orr.w	r2, r3, #4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00f      	beq.n	8005d16 <HAL_UART_IRQHandler+0xfa>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <HAL_UART_IRQHandler+0xee>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0e:	f043 0208 	orr.w	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d078      	beq.n	8005e10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_UART_IRQHandler+0x11c>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa09 	bl	800614a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	bf0c      	ite	eq
 8005d46:	2301      	moveq	r3, #1
 8005d48:	2300      	movne	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <HAL_UART_IRQHandler+0x144>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d031      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f952 	bl	800600a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d123      	bne.n	8005dbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d013      	beq.n	8005db4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d90:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <HAL_UART_IRQHandler+0x1fc>)
 8005d92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd fd8b 	bl	80038b4 <HAL_DMA_Abort_IT>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d016      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dae:	4610      	mov	r0, r2
 8005db0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db2:	e00e      	b.n	8005dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f845 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dba:	e00a      	b.n	8005dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f841 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc2:	e006      	b.n	8005dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f83d 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005dd0:	e01e      	b.n	8005e10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd2:	bf00      	nop
    return;
 8005dd4:	e01c      	b.n	8005e10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1d6>
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f93f 	bl	800606e <UART_Transmit_IT>
    return;
 8005df0:	e00f      	b.n	8005e12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_UART_IRQHandler+0x1f6>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f987 	bl	800611a <UART_EndTransmit_IT>
    return;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005e10:	bf00      	nop
  }
}
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	08006047 	.word	0x08006047

08005e1c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d113      	bne.n	8005e9c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e88:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e98:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e9a:	e002      	b.n	8005ea2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7fc fbaf 	bl	8002600 <HAL_UART_TxCpltCallback>
}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff ffaf 	bl	8005e1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d11e      	bne.n	8005f20 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f16:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7fc fb7f 	bl	8002624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ff77 	bl	8005e30 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f42:	bf00      	nop
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	bf0c      	ite	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	2300      	movne	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b21      	cmp	r3, #33	; 0x21
 8005f7c:	d108      	bne.n	8005f90 <UART_DMAError+0x46>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f8a:	68b8      	ldr	r0, [r7, #8]
 8005f8c:	f000 f827 	bl	8005fde <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b22      	cmp	r3, #34	; 0x22
 8005fb0:	d108      	bne.n	8005fc4 <UART_DMAError+0x7a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fbe:	68b8      	ldr	r0, [r7, #8]
 8005fc0:	f000 f823 	bl	800600a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	f043 0210 	orr.w	r2, r3, #16
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd0:	68b8      	ldr	r0, [r7, #8]
 8005fd2:	f7ff ff37 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ff4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006020:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff feef 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b21      	cmp	r3, #33	; 0x21
 8006080:	d144      	bne.n	800610c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608a:	d11a      	bne.n	80060c2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]
 80060b4:	e00e      	b.n	80060d4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	621a      	str	r2, [r3, #32]
 80060c0:	e008      	b.n	80060d4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	1c59      	adds	r1, r3, #1
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6211      	str	r1, [r2, #32]
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29b      	uxth	r3, r3
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4619      	mov	r1, r3
 80060e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10f      	bne.n	8006108 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fc fa60 	bl	8002600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b22      	cmp	r3, #34	; 0x22
 800615c:	d171      	bne.n	8006242 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	d123      	bne.n	80061b0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10e      	bne.n	8006194 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	1c9a      	adds	r2, r3, #2
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
 8006192:	e029      	b.n	80061e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b29b      	uxth	r3, r3
 800619c:	b2db      	uxtb	r3, r3
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	629a      	str	r2, [r3, #40]	; 0x28
 80061ae:	e01b      	b.n	80061e8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6858      	ldr	r0, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6291      	str	r1, [r2, #40]	; 0x28
 80061c8:	b2c2      	uxtb	r2, r0
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e00c      	b.n	80061e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	1c58      	adds	r0, r3, #1
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	6288      	str	r0, [r1, #40]	; 0x28
 80061e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4619      	mov	r1, r3
 80061f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d120      	bne.n	800623e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0220 	bic.w	r2, r2, #32
 800620a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800621a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fc f9f5 	bl	8002624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e002      	b.n	8006244 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e000      	b.n	8006244 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006242:	2302      	movs	r3, #2
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800628e:	f023 030c 	bic.w	r3, r3, #12
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	68f9      	ldr	r1, [r7, #12]
 8006298:	430b      	orrs	r3, r1
 800629a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ba:	f040 818b 	bne.w	80065d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4ac1      	ldr	r2, [pc, #772]	; (80065c8 <UART_SetConfig+0x37c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d005      	beq.n	80062d4 <UART_SetConfig+0x88>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4abf      	ldr	r2, [pc, #764]	; (80065cc <UART_SetConfig+0x380>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	f040 80bd 	bne.w	800644e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7fe fce2 	bl	8004c9c <HAL_RCC_GetPCLK2Freq>
 80062d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	461d      	mov	r5, r3
 80062de:	f04f 0600 	mov.w	r6, #0
 80062e2:	46a8      	mov	r8, r5
 80062e4:	46b1      	mov	r9, r6
 80062e6:	eb18 0308 	adds.w	r3, r8, r8
 80062ea:	eb49 0409 	adc.w	r4, r9, r9
 80062ee:	4698      	mov	r8, r3
 80062f0:	46a1      	mov	r9, r4
 80062f2:	eb18 0805 	adds.w	r8, r8, r5
 80062f6:	eb49 0906 	adc.w	r9, r9, r6
 80062fa:	f04f 0100 	mov.w	r1, #0
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006306:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800630a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800630e:	4688      	mov	r8, r1
 8006310:	4691      	mov	r9, r2
 8006312:	eb18 0005 	adds.w	r0, r8, r5
 8006316:	eb49 0106 	adc.w	r1, r9, r6
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	461d      	mov	r5, r3
 8006320:	f04f 0600 	mov.w	r6, #0
 8006324:	196b      	adds	r3, r5, r5
 8006326:	eb46 0406 	adc.w	r4, r6, r6
 800632a:	461a      	mov	r2, r3
 800632c:	4623      	mov	r3, r4
 800632e:	f7f9 ff53 	bl	80001d8 <__aeabi_uldivmod>
 8006332:	4603      	mov	r3, r0
 8006334:	460c      	mov	r4, r1
 8006336:	461a      	mov	r2, r3
 8006338:	4ba5      	ldr	r3, [pc, #660]	; (80065d0 <UART_SetConfig+0x384>)
 800633a:	fba3 2302 	umull	r2, r3, r3, r2
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	461d      	mov	r5, r3
 8006348:	f04f 0600 	mov.w	r6, #0
 800634c:	46a9      	mov	r9, r5
 800634e:	46b2      	mov	sl, r6
 8006350:	eb19 0309 	adds.w	r3, r9, r9
 8006354:	eb4a 040a 	adc.w	r4, sl, sl
 8006358:	4699      	mov	r9, r3
 800635a:	46a2      	mov	sl, r4
 800635c:	eb19 0905 	adds.w	r9, r9, r5
 8006360:	eb4a 0a06 	adc.w	sl, sl, r6
 8006364:	f04f 0100 	mov.w	r1, #0
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006370:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006374:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006378:	4689      	mov	r9, r1
 800637a:	4692      	mov	sl, r2
 800637c:	eb19 0005 	adds.w	r0, r9, r5
 8006380:	eb4a 0106 	adc.w	r1, sl, r6
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	461d      	mov	r5, r3
 800638a:	f04f 0600 	mov.w	r6, #0
 800638e:	196b      	adds	r3, r5, r5
 8006390:	eb46 0406 	adc.w	r4, r6, r6
 8006394:	461a      	mov	r2, r3
 8006396:	4623      	mov	r3, r4
 8006398:	f7f9 ff1e 	bl	80001d8 <__aeabi_uldivmod>
 800639c:	4603      	mov	r3, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	461a      	mov	r2, r3
 80063a2:	4b8b      	ldr	r3, [pc, #556]	; (80065d0 <UART_SetConfig+0x384>)
 80063a4:	fba3 1302 	umull	r1, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2164      	movs	r1, #100	; 0x64
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	3332      	adds	r3, #50	; 0x32
 80063b6:	4a86      	ldr	r2, [pc, #536]	; (80065d0 <UART_SetConfig+0x384>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063c4:	4498      	add	r8, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	461d      	mov	r5, r3
 80063ca:	f04f 0600 	mov.w	r6, #0
 80063ce:	46a9      	mov	r9, r5
 80063d0:	46b2      	mov	sl, r6
 80063d2:	eb19 0309 	adds.w	r3, r9, r9
 80063d6:	eb4a 040a 	adc.w	r4, sl, sl
 80063da:	4699      	mov	r9, r3
 80063dc:	46a2      	mov	sl, r4
 80063de:	eb19 0905 	adds.w	r9, r9, r5
 80063e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063fa:	4689      	mov	r9, r1
 80063fc:	4692      	mov	sl, r2
 80063fe:	eb19 0005 	adds.w	r0, r9, r5
 8006402:	eb4a 0106 	adc.w	r1, sl, r6
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	461d      	mov	r5, r3
 800640c:	f04f 0600 	mov.w	r6, #0
 8006410:	196b      	adds	r3, r5, r5
 8006412:	eb46 0406 	adc.w	r4, r6, r6
 8006416:	461a      	mov	r2, r3
 8006418:	4623      	mov	r3, r4
 800641a:	f7f9 fedd 	bl	80001d8 <__aeabi_uldivmod>
 800641e:	4603      	mov	r3, r0
 8006420:	460c      	mov	r4, r1
 8006422:	461a      	mov	r2, r3
 8006424:	4b6a      	ldr	r3, [pc, #424]	; (80065d0 <UART_SetConfig+0x384>)
 8006426:	fba3 1302 	umull	r1, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	2164      	movs	r1, #100	; 0x64
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	3332      	adds	r3, #50	; 0x32
 8006438:	4a65      	ldr	r2, [pc, #404]	; (80065d0 <UART_SetConfig+0x384>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	f003 0207 	and.w	r2, r3, #7
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4442      	add	r2, r8
 800644a:	609a      	str	r2, [r3, #8]
 800644c:	e26f      	b.n	800692e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800644e:	f7fe fc11 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8006452:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	461d      	mov	r5, r3
 8006458:	f04f 0600 	mov.w	r6, #0
 800645c:	46a8      	mov	r8, r5
 800645e:	46b1      	mov	r9, r6
 8006460:	eb18 0308 	adds.w	r3, r8, r8
 8006464:	eb49 0409 	adc.w	r4, r9, r9
 8006468:	4698      	mov	r8, r3
 800646a:	46a1      	mov	r9, r4
 800646c:	eb18 0805 	adds.w	r8, r8, r5
 8006470:	eb49 0906 	adc.w	r9, r9, r6
 8006474:	f04f 0100 	mov.w	r1, #0
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006480:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006484:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006488:	4688      	mov	r8, r1
 800648a:	4691      	mov	r9, r2
 800648c:	eb18 0005 	adds.w	r0, r8, r5
 8006490:	eb49 0106 	adc.w	r1, r9, r6
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	461d      	mov	r5, r3
 800649a:	f04f 0600 	mov.w	r6, #0
 800649e:	196b      	adds	r3, r5, r5
 80064a0:	eb46 0406 	adc.w	r4, r6, r6
 80064a4:	461a      	mov	r2, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	f7f9 fe96 	bl	80001d8 <__aeabi_uldivmod>
 80064ac:	4603      	mov	r3, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	461a      	mov	r2, r3
 80064b2:	4b47      	ldr	r3, [pc, #284]	; (80065d0 <UART_SetConfig+0x384>)
 80064b4:	fba3 2302 	umull	r2, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	461d      	mov	r5, r3
 80064c2:	f04f 0600 	mov.w	r6, #0
 80064c6:	46a9      	mov	r9, r5
 80064c8:	46b2      	mov	sl, r6
 80064ca:	eb19 0309 	adds.w	r3, r9, r9
 80064ce:	eb4a 040a 	adc.w	r4, sl, sl
 80064d2:	4699      	mov	r9, r3
 80064d4:	46a2      	mov	sl, r4
 80064d6:	eb19 0905 	adds.w	r9, r9, r5
 80064da:	eb4a 0a06 	adc.w	sl, sl, r6
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064f2:	4689      	mov	r9, r1
 80064f4:	4692      	mov	sl, r2
 80064f6:	eb19 0005 	adds.w	r0, r9, r5
 80064fa:	eb4a 0106 	adc.w	r1, sl, r6
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	461d      	mov	r5, r3
 8006504:	f04f 0600 	mov.w	r6, #0
 8006508:	196b      	adds	r3, r5, r5
 800650a:	eb46 0406 	adc.w	r4, r6, r6
 800650e:	461a      	mov	r2, r3
 8006510:	4623      	mov	r3, r4
 8006512:	f7f9 fe61 	bl	80001d8 <__aeabi_uldivmod>
 8006516:	4603      	mov	r3, r0
 8006518:	460c      	mov	r4, r1
 800651a:	461a      	mov	r2, r3
 800651c:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <UART_SetConfig+0x384>)
 800651e:	fba3 1302 	umull	r1, r3, r3, r2
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	2164      	movs	r1, #100	; 0x64
 8006526:	fb01 f303 	mul.w	r3, r1, r3
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	3332      	adds	r3, #50	; 0x32
 8006530:	4a27      	ldr	r2, [pc, #156]	; (80065d0 <UART_SetConfig+0x384>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800653e:	4498      	add	r8, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	461d      	mov	r5, r3
 8006544:	f04f 0600 	mov.w	r6, #0
 8006548:	46a9      	mov	r9, r5
 800654a:	46b2      	mov	sl, r6
 800654c:	eb19 0309 	adds.w	r3, r9, r9
 8006550:	eb4a 040a 	adc.w	r4, sl, sl
 8006554:	4699      	mov	r9, r3
 8006556:	46a2      	mov	sl, r4
 8006558:	eb19 0905 	adds.w	r9, r9, r5
 800655c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800656c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006574:	4689      	mov	r9, r1
 8006576:	4692      	mov	sl, r2
 8006578:	eb19 0005 	adds.w	r0, r9, r5
 800657c:	eb4a 0106 	adc.w	r1, sl, r6
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	461d      	mov	r5, r3
 8006586:	f04f 0600 	mov.w	r6, #0
 800658a:	196b      	adds	r3, r5, r5
 800658c:	eb46 0406 	adc.w	r4, r6, r6
 8006590:	461a      	mov	r2, r3
 8006592:	4623      	mov	r3, r4
 8006594:	f7f9 fe20 	bl	80001d8 <__aeabi_uldivmod>
 8006598:	4603      	mov	r3, r0
 800659a:	460c      	mov	r4, r1
 800659c:	461a      	mov	r2, r3
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <UART_SetConfig+0x384>)
 80065a0:	fba3 1302 	umull	r1, r3, r3, r2
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	2164      	movs	r1, #100	; 0x64
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	3332      	adds	r3, #50	; 0x32
 80065b2:	4a07      	ldr	r2, [pc, #28]	; (80065d0 <UART_SetConfig+0x384>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f003 0207 	and.w	r2, r3, #7
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4442      	add	r2, r8
 80065c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80065c6:	e1b2      	b.n	800692e <UART_SetConfig+0x6e2>
 80065c8:	40011000 	.word	0x40011000
 80065cc:	40011400 	.word	0x40011400
 80065d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4ad7      	ldr	r2, [pc, #860]	; (8006938 <UART_SetConfig+0x6ec>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d005      	beq.n	80065ea <UART_SetConfig+0x39e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4ad6      	ldr	r2, [pc, #856]	; (800693c <UART_SetConfig+0x6f0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	f040 80d1 	bne.w	800678c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80065ea:	f7fe fb57 	bl	8004c9c <HAL_RCC_GetPCLK2Freq>
 80065ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	469a      	mov	sl, r3
 80065f4:	f04f 0b00 	mov.w	fp, #0
 80065f8:	46d0      	mov	r8, sl
 80065fa:	46d9      	mov	r9, fp
 80065fc:	eb18 0308 	adds.w	r3, r8, r8
 8006600:	eb49 0409 	adc.w	r4, r9, r9
 8006604:	4698      	mov	r8, r3
 8006606:	46a1      	mov	r9, r4
 8006608:	eb18 080a 	adds.w	r8, r8, sl
 800660c:	eb49 090b 	adc.w	r9, r9, fp
 8006610:	f04f 0100 	mov.w	r1, #0
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800661c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006620:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006624:	4688      	mov	r8, r1
 8006626:	4691      	mov	r9, r2
 8006628:	eb1a 0508 	adds.w	r5, sl, r8
 800662c:	eb4b 0609 	adc.w	r6, fp, r9
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4619      	mov	r1, r3
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	f04f 0400 	mov.w	r4, #0
 8006642:	0094      	lsls	r4, r2, #2
 8006644:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006648:	008b      	lsls	r3, r1, #2
 800664a:	461a      	mov	r2, r3
 800664c:	4623      	mov	r3, r4
 800664e:	4628      	mov	r0, r5
 8006650:	4631      	mov	r1, r6
 8006652:	f7f9 fdc1 	bl	80001d8 <__aeabi_uldivmod>
 8006656:	4603      	mov	r3, r0
 8006658:	460c      	mov	r4, r1
 800665a:	461a      	mov	r2, r3
 800665c:	4bb8      	ldr	r3, [pc, #736]	; (8006940 <UART_SetConfig+0x6f4>)
 800665e:	fba3 2302 	umull	r2, r3, r3, r2
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	469b      	mov	fp, r3
 800666c:	f04f 0c00 	mov.w	ip, #0
 8006670:	46d9      	mov	r9, fp
 8006672:	46e2      	mov	sl, ip
 8006674:	eb19 0309 	adds.w	r3, r9, r9
 8006678:	eb4a 040a 	adc.w	r4, sl, sl
 800667c:	4699      	mov	r9, r3
 800667e:	46a2      	mov	sl, r4
 8006680:	eb19 090b 	adds.w	r9, r9, fp
 8006684:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006694:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006698:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800669c:	4689      	mov	r9, r1
 800669e:	4692      	mov	sl, r2
 80066a0:	eb1b 0509 	adds.w	r5, fp, r9
 80066a4:	eb4c 060a 	adc.w	r6, ip, sl
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4619      	mov	r1, r3
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	f04f 0400 	mov.w	r4, #0
 80066ba:	0094      	lsls	r4, r2, #2
 80066bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066c0:	008b      	lsls	r3, r1, #2
 80066c2:	461a      	mov	r2, r3
 80066c4:	4623      	mov	r3, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	4631      	mov	r1, r6
 80066ca:	f7f9 fd85 	bl	80001d8 <__aeabi_uldivmod>
 80066ce:	4603      	mov	r3, r0
 80066d0:	460c      	mov	r4, r1
 80066d2:	461a      	mov	r2, r3
 80066d4:	4b9a      	ldr	r3, [pc, #616]	; (8006940 <UART_SetConfig+0x6f4>)
 80066d6:	fba3 1302 	umull	r1, r3, r3, r2
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	2164      	movs	r1, #100	; 0x64
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	3332      	adds	r3, #50	; 0x32
 80066e8:	4a95      	ldr	r2, [pc, #596]	; (8006940 <UART_SetConfig+0x6f4>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f4:	4498      	add	r8, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	469b      	mov	fp, r3
 80066fa:	f04f 0c00 	mov.w	ip, #0
 80066fe:	46d9      	mov	r9, fp
 8006700:	46e2      	mov	sl, ip
 8006702:	eb19 0309 	adds.w	r3, r9, r9
 8006706:	eb4a 040a 	adc.w	r4, sl, sl
 800670a:	4699      	mov	r9, r3
 800670c:	46a2      	mov	sl, r4
 800670e:	eb19 090b 	adds.w	r9, r9, fp
 8006712:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006716:	f04f 0100 	mov.w	r1, #0
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006722:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006726:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800672a:	4689      	mov	r9, r1
 800672c:	4692      	mov	sl, r2
 800672e:	eb1b 0509 	adds.w	r5, fp, r9
 8006732:	eb4c 060a 	adc.w	r6, ip, sl
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	4619      	mov	r1, r3
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	f04f 0400 	mov.w	r4, #0
 8006748:	0094      	lsls	r4, r2, #2
 800674a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800674e:	008b      	lsls	r3, r1, #2
 8006750:	461a      	mov	r2, r3
 8006752:	4623      	mov	r3, r4
 8006754:	4628      	mov	r0, r5
 8006756:	4631      	mov	r1, r6
 8006758:	f7f9 fd3e 	bl	80001d8 <__aeabi_uldivmod>
 800675c:	4603      	mov	r3, r0
 800675e:	460c      	mov	r4, r1
 8006760:	461a      	mov	r2, r3
 8006762:	4b77      	ldr	r3, [pc, #476]	; (8006940 <UART_SetConfig+0x6f4>)
 8006764:	fba3 1302 	umull	r1, r3, r3, r2
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	2164      	movs	r1, #100	; 0x64
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	3332      	adds	r3, #50	; 0x32
 8006776:	4a72      	ldr	r2, [pc, #456]	; (8006940 <UART_SetConfig+0x6f4>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	f003 020f 	and.w	r2, r3, #15
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4442      	add	r2, r8
 8006788:	609a      	str	r2, [r3, #8]
 800678a:	e0d0      	b.n	800692e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800678c:	f7fe fa72 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8006790:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	469a      	mov	sl, r3
 8006796:	f04f 0b00 	mov.w	fp, #0
 800679a:	46d0      	mov	r8, sl
 800679c:	46d9      	mov	r9, fp
 800679e:	eb18 0308 	adds.w	r3, r8, r8
 80067a2:	eb49 0409 	adc.w	r4, r9, r9
 80067a6:	4698      	mov	r8, r3
 80067a8:	46a1      	mov	r9, r4
 80067aa:	eb18 080a 	adds.w	r8, r8, sl
 80067ae:	eb49 090b 	adc.w	r9, r9, fp
 80067b2:	f04f 0100 	mov.w	r1, #0
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067c6:	4688      	mov	r8, r1
 80067c8:	4691      	mov	r9, r2
 80067ca:	eb1a 0508 	adds.w	r5, sl, r8
 80067ce:	eb4b 0609 	adc.w	r6, fp, r9
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4619      	mov	r1, r3
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	f04f 0400 	mov.w	r4, #0
 80067e4:	0094      	lsls	r4, r2, #2
 80067e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067ea:	008b      	lsls	r3, r1, #2
 80067ec:	461a      	mov	r2, r3
 80067ee:	4623      	mov	r3, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	4631      	mov	r1, r6
 80067f4:	f7f9 fcf0 	bl	80001d8 <__aeabi_uldivmod>
 80067f8:	4603      	mov	r3, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b50      	ldr	r3, [pc, #320]	; (8006940 <UART_SetConfig+0x6f4>)
 8006800:	fba3 2302 	umull	r2, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	469b      	mov	fp, r3
 800680e:	f04f 0c00 	mov.w	ip, #0
 8006812:	46d9      	mov	r9, fp
 8006814:	46e2      	mov	sl, ip
 8006816:	eb19 0309 	adds.w	r3, r9, r9
 800681a:	eb4a 040a 	adc.w	r4, sl, sl
 800681e:	4699      	mov	r9, r3
 8006820:	46a2      	mov	sl, r4
 8006822:	eb19 090b 	adds.w	r9, r9, fp
 8006826:	eb4a 0a0c 	adc.w	sl, sl, ip
 800682a:	f04f 0100 	mov.w	r1, #0
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006836:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800683a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800683e:	4689      	mov	r9, r1
 8006840:	4692      	mov	sl, r2
 8006842:	eb1b 0509 	adds.w	r5, fp, r9
 8006846:	eb4c 060a 	adc.w	r6, ip, sl
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4619      	mov	r1, r3
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	f04f 0400 	mov.w	r4, #0
 800685c:	0094      	lsls	r4, r2, #2
 800685e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006862:	008b      	lsls	r3, r1, #2
 8006864:	461a      	mov	r2, r3
 8006866:	4623      	mov	r3, r4
 8006868:	4628      	mov	r0, r5
 800686a:	4631      	mov	r1, r6
 800686c:	f7f9 fcb4 	bl	80001d8 <__aeabi_uldivmod>
 8006870:	4603      	mov	r3, r0
 8006872:	460c      	mov	r4, r1
 8006874:	461a      	mov	r2, r3
 8006876:	4b32      	ldr	r3, [pc, #200]	; (8006940 <UART_SetConfig+0x6f4>)
 8006878:	fba3 1302 	umull	r1, r3, r3, r2
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	2164      	movs	r1, #100	; 0x64
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	3332      	adds	r3, #50	; 0x32
 800688a:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <UART_SetConfig+0x6f4>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006896:	4498      	add	r8, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	469b      	mov	fp, r3
 800689c:	f04f 0c00 	mov.w	ip, #0
 80068a0:	46d9      	mov	r9, fp
 80068a2:	46e2      	mov	sl, ip
 80068a4:	eb19 0309 	adds.w	r3, r9, r9
 80068a8:	eb4a 040a 	adc.w	r4, sl, sl
 80068ac:	4699      	mov	r9, r3
 80068ae:	46a2      	mov	sl, r4
 80068b0:	eb19 090b 	adds.w	r9, r9, fp
 80068b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068cc:	4689      	mov	r9, r1
 80068ce:	4692      	mov	sl, r2
 80068d0:	eb1b 0509 	adds.w	r5, fp, r9
 80068d4:	eb4c 060a 	adc.w	r6, ip, sl
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4619      	mov	r1, r3
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	f04f 0400 	mov.w	r4, #0
 80068ea:	0094      	lsls	r4, r2, #2
 80068ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068f0:	008b      	lsls	r3, r1, #2
 80068f2:	461a      	mov	r2, r3
 80068f4:	4623      	mov	r3, r4
 80068f6:	4628      	mov	r0, r5
 80068f8:	4631      	mov	r1, r6
 80068fa:	f7f9 fc6d 	bl	80001d8 <__aeabi_uldivmod>
 80068fe:	4603      	mov	r3, r0
 8006900:	460c      	mov	r4, r1
 8006902:	461a      	mov	r2, r3
 8006904:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <UART_SetConfig+0x6f4>)
 8006906:	fba3 1302 	umull	r1, r3, r3, r2
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	2164      	movs	r1, #100	; 0x64
 800690e:	fb01 f303 	mul.w	r3, r1, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	3332      	adds	r3, #50	; 0x32
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <UART_SetConfig+0x6f4>)
 800691a:	fba2 2303 	umull	r2, r3, r2, r3
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	f003 020f 	and.w	r2, r3, #15
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4442      	add	r2, r8
 800692a:	609a      	str	r2, [r3, #8]
}
 800692c:	e7ff      	b.n	800692e <UART_SetConfig+0x6e2>
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006938:	40011000 	.word	0x40011000
 800693c:	40011400 	.word	0x40011400
 8006940:	51eb851f 	.word	0x51eb851f

08006944 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	0a5a      	lsrs	r2, r3, #9
 8006954:	490f      	ldr	r1, [pc, #60]	; (8006994 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006956:	fba1 1202 	umull	r1, r2, r1, r2
 800695a:	09d2      	lsrs	r2, r2, #7
 800695c:	490e      	ldr	r1, [pc, #56]	; (8006998 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800695e:	fb01 f202 	mul.w	r2, r1, r2
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	0a5b      	lsrs	r3, r3, #9
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	09db      	lsrs	r3, r3, #7
 8006974:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	441a      	add	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	601a      	str	r2, [r3, #0]
}
 8006988:	bf00      	nop
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	00044b83 	.word	0x00044b83
 8006998:	3b9aca00 	.word	0x3b9aca00

0800699c <__cxa_pure_virtual>:
 800699c:	b508      	push	{r3, lr}
 800699e:	f000 f80d 	bl	80069bc <_ZSt9terminatev>

080069a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80069a2:	b508      	push	{r3, lr}
 80069a4:	4780      	blx	r0
 80069a6:	f000 f80e 	bl	80069c6 <abort>
	...

080069ac <_ZSt13get_terminatev>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <_ZSt13get_terminatev+0xc>)
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	f3bf 8f5b 	dmb	ish
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	2000000c 	.word	0x2000000c

080069bc <_ZSt9terminatev>:
 80069bc:	b508      	push	{r3, lr}
 80069be:	f7ff fff5 	bl	80069ac <_ZSt13get_terminatev>
 80069c2:	f7ff ffee 	bl	80069a2 <_ZN10__cxxabiv111__terminateEPFvvE>

080069c6 <abort>:
 80069c6:	b508      	push	{r3, lr}
 80069c8:	2006      	movs	r0, #6
 80069ca:	f000 f871 	bl	8006ab0 <raise>
 80069ce:	2001      	movs	r0, #1
 80069d0:	f7fc fa02 	bl	8002dd8 <_exit>

080069d4 <__errno>:
 80069d4:	4b01      	ldr	r3, [pc, #4]	; (80069dc <__errno+0x8>)
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000010 	.word	0x20000010

080069e0 <__libc_init_array>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	4e0d      	ldr	r6, [pc, #52]	; (8006a18 <__libc_init_array+0x38>)
 80069e4:	4c0d      	ldr	r4, [pc, #52]	; (8006a1c <__libc_init_array+0x3c>)
 80069e6:	1ba4      	subs	r4, r4, r6
 80069e8:	10a4      	asrs	r4, r4, #2
 80069ea:	2500      	movs	r5, #0
 80069ec:	42a5      	cmp	r5, r4
 80069ee:	d109      	bne.n	8006a04 <__libc_init_array+0x24>
 80069f0:	4e0b      	ldr	r6, [pc, #44]	; (8006a20 <__libc_init_array+0x40>)
 80069f2:	4c0c      	ldr	r4, [pc, #48]	; (8006a24 <__libc_init_array+0x44>)
 80069f4:	f000 f960 	bl	8006cb8 <_init>
 80069f8:	1ba4      	subs	r4, r4, r6
 80069fa:	10a4      	asrs	r4, r4, #2
 80069fc:	2500      	movs	r5, #0
 80069fe:	42a5      	cmp	r5, r4
 8006a00:	d105      	bne.n	8006a0e <__libc_init_array+0x2e>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a08:	4798      	blx	r3
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	e7ee      	b.n	80069ec <__libc_init_array+0xc>
 8006a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a12:	4798      	blx	r3
 8006a14:	3501      	adds	r5, #1
 8006a16:	e7f2      	b.n	80069fe <__libc_init_array+0x1e>
 8006a18:	080072c4 	.word	0x080072c4
 8006a1c:	080072c4 	.word	0x080072c4
 8006a20:	080072c4 	.word	0x080072c4
 8006a24:	080072d4 	.word	0x080072d4

08006a28 <memcpy>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	1e43      	subs	r3, r0, #1
 8006a2c:	440a      	add	r2, r1
 8006a2e:	4291      	cmp	r1, r2
 8006a30:	d100      	bne.n	8006a34 <memcpy+0xc>
 8006a32:	bd10      	pop	{r4, pc}
 8006a34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a3c:	e7f7      	b.n	8006a2e <memcpy+0x6>

08006a3e <memset>:
 8006a3e:	4402      	add	r2, r0
 8006a40:	4603      	mov	r3, r0
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d100      	bne.n	8006a48 <memset+0xa>
 8006a46:	4770      	bx	lr
 8006a48:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4c:	e7f9      	b.n	8006a42 <memset+0x4>
	...

08006a50 <realloc>:
 8006a50:	4b02      	ldr	r3, [pc, #8]	; (8006a5c <realloc+0xc>)
 8006a52:	460a      	mov	r2, r1
 8006a54:	4601      	mov	r1, r0
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	f000 b8a0 	b.w	8006b9c <_realloc_r>
 8006a5c:	20000010 	.word	0x20000010

08006a60 <_raise_r>:
 8006a60:	291f      	cmp	r1, #31
 8006a62:	b538      	push	{r3, r4, r5, lr}
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	d904      	bls.n	8006a74 <_raise_r+0x14>
 8006a6a:	2316      	movs	r3, #22
 8006a6c:	6003      	str	r3, [r0, #0]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a76:	b112      	cbz	r2, 8006a7e <_raise_r+0x1e>
 8006a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a7c:	b94b      	cbnz	r3, 8006a92 <_raise_r+0x32>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f830 	bl	8006ae4 <_getpid_r>
 8006a84:	462a      	mov	r2, r5
 8006a86:	4601      	mov	r1, r0
 8006a88:	4620      	mov	r0, r4
 8006a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a8e:	f000 b817 	b.w	8006ac0 <_kill_r>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d00a      	beq.n	8006aac <_raise_r+0x4c>
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	d103      	bne.n	8006aa2 <_raise_r+0x42>
 8006a9a:	2316      	movs	r3, #22
 8006a9c:	6003      	str	r3, [r0, #0]
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	e7e7      	b.n	8006a72 <_raise_r+0x12>
 8006aa2:	2400      	movs	r4, #0
 8006aa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	4798      	blx	r3
 8006aac:	2000      	movs	r0, #0
 8006aae:	e7e0      	b.n	8006a72 <_raise_r+0x12>

08006ab0 <raise>:
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <raise+0xc>)
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	f7ff bfd3 	b.w	8006a60 <_raise_r>
 8006aba:	bf00      	nop
 8006abc:	20000010 	.word	0x20000010

08006ac0 <_kill_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4c07      	ldr	r4, [pc, #28]	; (8006ae0 <_kill_r+0x20>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	f7fc f973 	bl	8002db8 <_kill>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d102      	bne.n	8006adc <_kill_r+0x1c>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	b103      	cbz	r3, 8006adc <_kill_r+0x1c>
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	20002084 	.word	0x20002084

08006ae4 <_getpid_r>:
 8006ae4:	f7fc b960 	b.w	8002da8 <_getpid>

08006ae8 <_malloc_r>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	1ccd      	adds	r5, r1, #3
 8006aec:	f025 0503 	bic.w	r5, r5, #3
 8006af0:	3508      	adds	r5, #8
 8006af2:	2d0c      	cmp	r5, #12
 8006af4:	bf38      	it	cc
 8006af6:	250c      	movcc	r5, #12
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	4606      	mov	r6, r0
 8006afc:	db01      	blt.n	8006b02 <_malloc_r+0x1a>
 8006afe:	42a9      	cmp	r1, r5
 8006b00:	d903      	bls.n	8006b0a <_malloc_r+0x22>
 8006b02:	230c      	movs	r3, #12
 8006b04:	6033      	str	r3, [r6, #0]
 8006b06:	2000      	movs	r0, #0
 8006b08:	bd70      	pop	{r4, r5, r6, pc}
 8006b0a:	f000 f87d 	bl	8006c08 <__malloc_lock>
 8006b0e:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <_malloc_r+0xac>)
 8006b10:	6814      	ldr	r4, [r2, #0]
 8006b12:	4621      	mov	r1, r4
 8006b14:	b991      	cbnz	r1, 8006b3c <_malloc_r+0x54>
 8006b16:	4c20      	ldr	r4, [pc, #128]	; (8006b98 <_malloc_r+0xb0>)
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	b91b      	cbnz	r3, 8006b24 <_malloc_r+0x3c>
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f000 f863 	bl	8006be8 <_sbrk_r>
 8006b22:	6020      	str	r0, [r4, #0]
 8006b24:	4629      	mov	r1, r5
 8006b26:	4630      	mov	r0, r6
 8006b28:	f000 f85e 	bl	8006be8 <_sbrk_r>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d124      	bne.n	8006b7a <_malloc_r+0x92>
 8006b30:	230c      	movs	r3, #12
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	4630      	mov	r0, r6
 8006b36:	f000 f868 	bl	8006c0a <__malloc_unlock>
 8006b3a:	e7e4      	b.n	8006b06 <_malloc_r+0x1e>
 8006b3c:	680b      	ldr	r3, [r1, #0]
 8006b3e:	1b5b      	subs	r3, r3, r5
 8006b40:	d418      	bmi.n	8006b74 <_malloc_r+0x8c>
 8006b42:	2b0b      	cmp	r3, #11
 8006b44:	d90f      	bls.n	8006b66 <_malloc_r+0x7e>
 8006b46:	600b      	str	r3, [r1, #0]
 8006b48:	50cd      	str	r5, [r1, r3]
 8006b4a:	18cc      	adds	r4, r1, r3
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f000 f85c 	bl	8006c0a <__malloc_unlock>
 8006b52:	f104 000b 	add.w	r0, r4, #11
 8006b56:	1d23      	adds	r3, r4, #4
 8006b58:	f020 0007 	bic.w	r0, r0, #7
 8006b5c:	1ac3      	subs	r3, r0, r3
 8006b5e:	d0d3      	beq.n	8006b08 <_malloc_r+0x20>
 8006b60:	425a      	negs	r2, r3
 8006b62:	50e2      	str	r2, [r4, r3]
 8006b64:	e7d0      	b.n	8006b08 <_malloc_r+0x20>
 8006b66:	428c      	cmp	r4, r1
 8006b68:	684b      	ldr	r3, [r1, #4]
 8006b6a:	bf16      	itet	ne
 8006b6c:	6063      	strne	r3, [r4, #4]
 8006b6e:	6013      	streq	r3, [r2, #0]
 8006b70:	460c      	movne	r4, r1
 8006b72:	e7eb      	b.n	8006b4c <_malloc_r+0x64>
 8006b74:	460c      	mov	r4, r1
 8006b76:	6849      	ldr	r1, [r1, #4]
 8006b78:	e7cc      	b.n	8006b14 <_malloc_r+0x2c>
 8006b7a:	1cc4      	adds	r4, r0, #3
 8006b7c:	f024 0403 	bic.w	r4, r4, #3
 8006b80:	42a0      	cmp	r0, r4
 8006b82:	d005      	beq.n	8006b90 <_malloc_r+0xa8>
 8006b84:	1a21      	subs	r1, r4, r0
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 f82e 	bl	8006be8 <_sbrk_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d0cf      	beq.n	8006b30 <_malloc_r+0x48>
 8006b90:	6025      	str	r5, [r4, #0]
 8006b92:	e7db      	b.n	8006b4c <_malloc_r+0x64>
 8006b94:	20002078 	.word	0x20002078
 8006b98:	2000207c 	.word	0x2000207c

08006b9c <_realloc_r>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	460e      	mov	r6, r1
 8006ba4:	b921      	cbnz	r1, 8006bb0 <_realloc_r+0x14>
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bac:	f7ff bf9c 	b.w	8006ae8 <_malloc_r>
 8006bb0:	b922      	cbnz	r2, 8006bbc <_realloc_r+0x20>
 8006bb2:	f000 f82b 	bl	8006c0c <_free_r>
 8006bb6:	4625      	mov	r5, r4
 8006bb8:	4628      	mov	r0, r5
 8006bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bbc:	f000 f874 	bl	8006ca8 <_malloc_usable_size_r>
 8006bc0:	42a0      	cmp	r0, r4
 8006bc2:	d20f      	bcs.n	8006be4 <_realloc_r+0x48>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	f7ff ff8e 	bl	8006ae8 <_malloc_r>
 8006bcc:	4605      	mov	r5, r0
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0f2      	beq.n	8006bb8 <_realloc_r+0x1c>
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4622      	mov	r2, r4
 8006bd6:	f7ff ff27 	bl	8006a28 <memcpy>
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4638      	mov	r0, r7
 8006bde:	f000 f815 	bl	8006c0c <_free_r>
 8006be2:	e7e9      	b.n	8006bb8 <_realloc_r+0x1c>
 8006be4:	4635      	mov	r5, r6
 8006be6:	e7e7      	b.n	8006bb8 <_realloc_r+0x1c>

08006be8 <_sbrk_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4c06      	ldr	r4, [pc, #24]	; (8006c04 <_sbrk_r+0x1c>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4605      	mov	r5, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	f7fc f8fa 	bl	8002dec <_sbrk>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_sbrk_r+0x1a>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_sbrk_r+0x1a>
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20002084 	.word	0x20002084

08006c08 <__malloc_lock>:
 8006c08:	4770      	bx	lr

08006c0a <__malloc_unlock>:
 8006c0a:	4770      	bx	lr

08006c0c <_free_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4605      	mov	r5, r0
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d045      	beq.n	8006ca0 <_free_r+0x94>
 8006c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c18:	1f0c      	subs	r4, r1, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	bfb8      	it	lt
 8006c1e:	18e4      	addlt	r4, r4, r3
 8006c20:	f7ff fff2 	bl	8006c08 <__malloc_lock>
 8006c24:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <_free_r+0x98>)
 8006c26:	6813      	ldr	r3, [r2, #0]
 8006c28:	4610      	mov	r0, r2
 8006c2a:	b933      	cbnz	r3, 8006c3a <_free_r+0x2e>
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	6014      	str	r4, [r2, #0]
 8006c30:	4628      	mov	r0, r5
 8006c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c36:	f7ff bfe8 	b.w	8006c0a <__malloc_unlock>
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	d90c      	bls.n	8006c58 <_free_r+0x4c>
 8006c3e:	6821      	ldr	r1, [r4, #0]
 8006c40:	1862      	adds	r2, r4, r1
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bf04      	itt	eq
 8006c46:	681a      	ldreq	r2, [r3, #0]
 8006c48:	685b      	ldreq	r3, [r3, #4]
 8006c4a:	6063      	str	r3, [r4, #4]
 8006c4c:	bf04      	itt	eq
 8006c4e:	1852      	addeq	r2, r2, r1
 8006c50:	6022      	streq	r2, [r4, #0]
 8006c52:	6004      	str	r4, [r0, #0]
 8006c54:	e7ec      	b.n	8006c30 <_free_r+0x24>
 8006c56:	4613      	mov	r3, r2
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	b10a      	cbz	r2, 8006c60 <_free_r+0x54>
 8006c5c:	42a2      	cmp	r2, r4
 8006c5e:	d9fa      	bls.n	8006c56 <_free_r+0x4a>
 8006c60:	6819      	ldr	r1, [r3, #0]
 8006c62:	1858      	adds	r0, r3, r1
 8006c64:	42a0      	cmp	r0, r4
 8006c66:	d10b      	bne.n	8006c80 <_free_r+0x74>
 8006c68:	6820      	ldr	r0, [r4, #0]
 8006c6a:	4401      	add	r1, r0
 8006c6c:	1858      	adds	r0, r3, r1
 8006c6e:	4282      	cmp	r2, r0
 8006c70:	6019      	str	r1, [r3, #0]
 8006c72:	d1dd      	bne.n	8006c30 <_free_r+0x24>
 8006c74:	6810      	ldr	r0, [r2, #0]
 8006c76:	6852      	ldr	r2, [r2, #4]
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	4401      	add	r1, r0
 8006c7c:	6019      	str	r1, [r3, #0]
 8006c7e:	e7d7      	b.n	8006c30 <_free_r+0x24>
 8006c80:	d902      	bls.n	8006c88 <_free_r+0x7c>
 8006c82:	230c      	movs	r3, #12
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	e7d3      	b.n	8006c30 <_free_r+0x24>
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	1821      	adds	r1, r4, r0
 8006c8c:	428a      	cmp	r2, r1
 8006c8e:	bf04      	itt	eq
 8006c90:	6811      	ldreq	r1, [r2, #0]
 8006c92:	6852      	ldreq	r2, [r2, #4]
 8006c94:	6062      	str	r2, [r4, #4]
 8006c96:	bf04      	itt	eq
 8006c98:	1809      	addeq	r1, r1, r0
 8006c9a:	6021      	streq	r1, [r4, #0]
 8006c9c:	605c      	str	r4, [r3, #4]
 8006c9e:	e7c7      	b.n	8006c30 <_free_r+0x24>
 8006ca0:	bd38      	pop	{r3, r4, r5, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20002078 	.word	0x20002078

08006ca8 <_malloc_usable_size_r>:
 8006ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cac:	1f18      	subs	r0, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfbc      	itt	lt
 8006cb2:	580b      	ldrlt	r3, [r1, r0]
 8006cb4:	18c0      	addlt	r0, r0, r3
 8006cb6:	4770      	bx	lr

08006cb8 <_init>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr

08006cc4 <_fini>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr
