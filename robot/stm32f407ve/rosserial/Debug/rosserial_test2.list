
rosserial_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800674c  0800674c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006754  08006754  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000084  080067e4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  080067e4  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e62  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028b9  00000000  00000000  00033f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  000367d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  00037918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024e32  00000000  00000000  00038990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c612  00000000  00000000  0005d7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d167d  00000000  00000000  00069dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e30  00000000  00000000  0013b4cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080064f4 	.word	0x080064f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080064f4 	.word	0x080064f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <_ZN3ros3MsgC1Ev+0x1c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	0800671c 	.word	0x0800671c

0800051c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
      data()
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ffe8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffce 	bl	80004d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08006704 	.word	0x08006704

0800054c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6859      	ldr	r1, [r3, #4]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	4413      	add	r3, r2
 8000564:	b2ca      	uxtb	r2, r1
 8000566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	0a19      	lsrs	r1, r3, #8
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	4413      	add	r3, r2
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0c19      	lsrs	r1, r3, #16
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3302      	adds	r3, #2
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0e19      	lsrs	r1, r3, #24
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3303      	adds	r3, #3
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	4413      	add	r3, r2
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3304      	adds	r3, #4
 80005a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	0a19      	lsrs	r1, r3, #8
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	0c19      	lsrs	r1, r3, #16
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3302      	adds	r3, #2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	0e19      	lsrs	r1, r3, #24
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3303      	adds	r3, #3
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3304      	adds	r3, #4
 80005ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80005ee:	68fb      	ldr	r3, [r7, #12]
    }
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	440b      	add	r3, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3302      	adds	r3, #2
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	440b      	add	r3, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	041b      	lsls	r3, r3, #16
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3303      	adds	r3, #3
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	440b      	add	r3, r1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3304      	adds	r3, #4
 800065e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	440b      	add	r3, r1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3302      	adds	r3, #2
 800068c:	6839      	ldr	r1, [r7, #0]
 800068e:	440b      	add	r3, r1
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3303      	adds	r3, #3
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	440b      	add	r3, r1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	061b      	lsls	r3, r3, #24
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3304      	adds	r3, #4
 80006b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80006b6:	68fb      	ldr	r3, [r7, #12]
    }
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	0800650c 	.word	0x0800650c

080006e0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	0800651c 	.word	0x0800651c

080006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef8 	bl	80004fc <_ZN3ros3MsgC1Ev>
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	809a      	strh	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
    {
    }
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	080066ec 	.word	0x080066ec
 8000740:	08006540 	.word	0x08006540

08000744 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8899      	ldrh	r1, [r3, #4]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	b2ca      	uxtb	r2, r1
 800075e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	b299      	uxth	r1, r3
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	b2ca      	uxtb	r2, r1
 8000772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3302      	adds	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd22 	bl	80001c8 <strlen>
 8000784:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	69b9      	ldr	r1, [r7, #24]
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fa57 	bl	8001c42 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	3304      	adds	r3, #4
 8000798:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	18d0      	adds	r0, r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	4619      	mov	r1, r3
 80007a8:	f005 fd5c 	bl	8006264 <memcpy>
      offset += length_topic_name;
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	4413      	add	r3, r2
 80007b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd05 	bl	80001c8 <strlen>
 80007be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	6979      	ldr	r1, [r7, #20]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fa3a 	bl	8001c42 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	18d0      	adds	r0, r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f005 fd3f 	bl	8006264 <memcpy>
      offset += length_message_type;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fce8 	bl	80001c8 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	6939      	ldr	r1, [r7, #16]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fa1d 	bl	8001c42 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3304      	adds	r3, #4
 800080c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	18d0      	adds	r0, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4619      	mov	r1, r3
 800081c:	f005 fd22 	bl	8006264 <memcpy>
      offset += length_md5sum;
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4413      	add	r3, r2
 8000826:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800082e:	68f9      	ldr	r1, [r7, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	0a19      	lsrs	r1, r3, #8
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3301      	adds	r3, #1
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	0c19      	lsrs	r1, r3, #16
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3302      	adds	r3, #2
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	b2ca      	uxtb	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	0e19      	lsrs	r1, r3, #24
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3303      	adds	r3, #3
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000870:	69fb      	ldr	r3, [r7, #28]
    }
 8000872:	4618      	mov	r0, r3
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800087a:	b580      	push	{r7, lr}
 800087c:	b08a      	sub	sp, #40	; 0x28
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	b21a      	sxth	r2, r3
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	3301      	adds	r3, #1
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3302      	adds	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	441a      	add	r2, r3
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f9d9 	bl	8001c7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	3304      	adds	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	d20c      	bcs.n	80008fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	441a      	add	r2, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	440b      	add	r3, r1
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	3301      	adds	r3, #1
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
 80008fa:	e7ec      	b.n	80008d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	3b01      	subs	r3, #1
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	3b01      	subs	r3, #1
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	441a      	add	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	4413      	add	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	441a      	add	r2, r3
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f9a6 	bl	8001c7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	3304      	adds	r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4413      	add	r3, r2
 8000942:	6a3a      	ldr	r2, [r7, #32]
 8000944:	429a      	cmp	r2, r3
 8000946:	d20c      	bcs.n	8000962 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	441a      	add	r2, r3
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3b01      	subs	r3, #1
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	440b      	add	r3, r1
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	3301      	adds	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	e7ec      	b.n	800093c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	3b01      	subs	r3, #1
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	3b01      	subs	r3, #1
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	441a      	add	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4413      	add	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	441a      	add	r2, r3
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f973 	bl	8001c7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	3304      	adds	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d20c      	bcs.n	80009c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	441a      	add	r2, r3
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	440b      	add	r3, r1
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	e7ec      	b.n	80009a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	3b01      	subs	r3, #1
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	3b01      	subs	r3, #1
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	441a      	add	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	440a      	add	r2, r1
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3301      	adds	r3, #1
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	440b      	add	r3, r1
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	3302      	adds	r3, #2
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	440b      	add	r3, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	3303      	adds	r3, #3
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a40:	69bb      	ldr	r3, [r7, #24]
    }
 8000a42:	4618      	mov	r0, r3
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	08006544 	.word	0x08006544

08000a68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	08006560 	.word	0x08006560

08000a84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd34 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	711a      	strb	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000aa4:	609a      	str	r2, [r3, #8]
    {
    }
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	080066d4 	.word	0x080066d4
 8000ab4:	08006540 	.word	0x08006540

08000ab8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7912      	ldrb	r2, [r2, #4]
 8000ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb73 	bl	80001c8 <strlen>
 8000ae2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f8a8 	bl	8001c42 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	18d0      	adds	r0, r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f005 fbad 	bl	8006264 <memcpy>
      offset += length_msg;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b12:	68fb      	ldr	r3, [r7, #12]
    }
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f898 	bl	8001c7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3304      	adds	r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20c      	bcs.n	8000b7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	441a      	add	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e7ec      	b.n	8000b58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	3b01      	subs	r3, #1
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	441a      	add	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
     return offset;
 8000ba2:	693b      	ldr	r3, [r7, #16]
    }
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	08006584 	.word	0x08006584

08000bc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	08006598 	.word	0x08006598

08000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc84 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	080066bc 	.word	0x080066bc

08000c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0c19      	lsrs	r1, r3, #16
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3302      	adds	r3, #2
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0e19      	lsrs	r1, r3, #24
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3303      	adds	r3, #3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3304      	adds	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d22b      	bcs.n	8000cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	0a19      	lsrs	r1, r3, #8
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	0e19      	lsrs	r1, r3, #24
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3304      	adds	r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	e7ce      	b.n	8000c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6919      	ldr	r1, [r3, #16]
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	0a19      	lsrs	r1, r3, #8
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	0c19      	lsrs	r1, r3, #16
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	3302      	adds	r3, #2
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	0e19      	lsrs	r1, r3, #24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3303      	adds	r3, #3
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3304      	adds	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d22b      	bcs.n	8000d9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	b2ca      	uxtb	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	0a19      	lsrs	r1, r3, #8
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	3301      	adds	r3, #1
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	0c19      	lsrs	r1, r3, #16
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3302      	adds	r3, #2
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2ca      	uxtb	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	0e19      	lsrs	r1, r3, #24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	3303      	adds	r3, #3
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3304      	adds	r3, #4
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e7ce      	b.n	8000d38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69d9      	ldr	r1, [r3, #28]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	b2ca      	uxtb	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	0a19      	lsrs	r1, r3, #8
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	0c19      	lsrs	r1, r3, #16
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	0e19      	lsrs	r1, r3, #24
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	3304      	adds	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d228      	bcs.n	8000e44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e2 	bl	80001c8 <strlen>
 8000e04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	6979      	ldr	r1, [r7, #20]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 ff17 	bl	8001c42 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	3304      	adds	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	18d0      	adds	r0, r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f005 fa18 	bl	8006264 <memcpy>
      offset += length_stringsi;
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	e7d1      	b.n	8000de8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e46:	4618      	mov	r0, r3
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b08e      	sub	sp, #56	; 0x38
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	6a3a      	ldr	r2, [r7, #32]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	061b      	lsls	r3, r3, #24
 8000e96:	6a3a      	ldr	r2, [r7, #32]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d90a      	bls.n	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f005 f9e8 	bl	800628c <realloc>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a3a      	ldr	r2, [r7, #32]
 8000ec6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d236      	bcs.n	8000f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	440a      	add	r2, r1
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	3301      	adds	r3, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	3302      	adds	r3, #2
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	3303      	adds	r3, #3
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	440b      	add	r3, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	3304      	adds	r3, #4
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3e:	3301      	adds	r3, #1
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
 8000f42:	e7c3      	b.n	8000ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3301      	adds	r3, #1
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	3302      	adds	r3, #2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f74:	3303      	adds	r3, #3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f86:	3304      	adds	r3, #4
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d90a      	bls.n	8000faa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f005 f974 	bl	800628c <realloc>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d236      	bcs.n	800102c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	440a      	add	r2, r1
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	440b      	add	r3, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	440b      	add	r3, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3304      	adds	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	3214      	adds	r2, #20
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800102a:	e7c3      	b.n	8000fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	3301      	adds	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	3302      	adds	r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	3303      	adds	r3, #3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	3304      	adds	r3, #4
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	d90a      	bls.n	8001092 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f005 f900 	bl	800628c <realloc>
 800108c:	4602      	mov	r2, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d23f      	bcs.n	8001126 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	441a      	add	r2, r3
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fde3 	bl	8001c7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	3304      	adds	r3, #4
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d20c      	bcs.n	80010e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	441a      	add	r2, r3
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	440b      	add	r3, r1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3301      	adds	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e7ec      	b.n	80010c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	3b01      	subs	r3, #1
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	3b01      	subs	r3, #1
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	441a      	add	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	3220      	adds	r2, #32
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	3301      	adds	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
 8001124:	e7ba      	b.n	800109c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001128:	4618      	mov	r0, r3
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	08006658 	.word	0x08006658

0800114c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	080065bc 	.word	0x080065bc

08001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68d8      	ldr	r0, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6891      	ldr	r1, [r2, #8]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4798      	blx	r3
 80011b4:	4603      	mov	r3, r0
  };
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
  }
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	425b      	negs	r3, r3
 80011ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <_ZN13STM32HardwareC1Ev+0x34>)
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	20000ad0 	.word	0x20000ad0

08001234 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f804 	bl	800124a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3304      	adds	r3, #4
 800125a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125e:	4619      	mov	r1, r3
 8001260:	f004 f87a 	bl	8005358 <HAL_UART_Receive_DMA>
    }
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN13STM32Hardware4readEv>:

    int read(){
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffa8 	bl	80011d6 <_ZN13STM32Hardware10getRdmaIndEv>
 8001286:	4603      	mov	r3, r0
 8001288:	429c      	cmp	r4, r3
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d012      	beq.n	80012bc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800129c:	1c59      	adds	r1, r3, #1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	791b      	ldrb	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80012bc:	68fb      	ldr	r3, [r7, #12]
    }
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}
	...

080012c8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d108      	bne.n	80012f0 <_ZN13STM32Hardware5flushEv+0x28>
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <_ZN13STM32Hardware5flushEv+0xb8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <_ZN13STM32Hardware5flushEv+0x28>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <_ZN13STM32Hardware5flushEv+0x2a>
 80012f0:	2300      	movs	r3, #0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d03f      	beq.n	8001376 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <_ZN13STM32Hardware5flushEv+0xb8>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001308:	429a      	cmp	r2, r3
 800130a:	d031      	beq.n	8001370 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001318:	429a      	cmp	r2, r3
 800131a:	d20a      	bcs.n	8001332 <_ZN13STM32Hardware5flushEv+0x6a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800132a:	b29b      	uxth	r3, r3
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	e006      	b.n	8001340 <_ZN13STM32Hardware5flushEv+0x78>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001338:	b29b      	uxth	r3, r3
 800133a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800133e:	b29b      	uxth	r3, r3
 8001340:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800134c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	89fa      	ldrh	r2, [r7, #14]
 8001356:	4619      	mov	r1, r3
 8001358:	f003 ff92 	bl	8005280 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	4413      	add	r3, r2
 8001366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
      }
    }
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000a0 	.word	0x200000a0

08001384 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139a:	bfa8      	it	ge
 800139c:	f44f 7300 	movge.w	r3, #512	; 0x200
 80013a0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80013a8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	bf28      	it	cs
 80013b2:	4613      	movcs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80013bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 ff4b 	bl	8006264 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	4413      	add	r3, r2
 80013d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d00b      	beq.n	8001402 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	18d1      	adds	r1, r2, r3
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	f004 ff31 	bl	8006264 <memcpy>
      }

      flush();
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f7ff ff60 	bl	80012c8 <_ZN13STM32Hardware5flushEv>
    }
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	f001 fcec 	bl	8002df4 <HAL_GetTick>
 800141c:	4603      	mov	r3, r0
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
      data("")
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f862 	bl	80004fc <_ZN3ros3MsgC1Ev>
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_ZN8std_msgs6StringC1Ev+0x28>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001442:	605a      	str	r2, [r3, #4]
    {
    }
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	08006690 	.word	0x08006690
 8001454:	08006540 	.word	0x08006540

08001458 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe feac 	bl	80001c8 <strlen>
 8001470:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	4413      	add	r3, r2
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fbe1 	bl	8001c42 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3304      	adds	r3, #4
 8001484:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	18d0      	adds	r0, r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	4619      	mov	r1, r3
 8001494:	f004 fee6 	bl	8006264 <memcpy>
      offset += length_data;
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
      return offset;
 80014a0:	68fb      	ldr	r3, [r7, #12]
    }
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	441a      	add	r2, r3
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fbda 	bl	8001c7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3304      	adds	r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d20c      	bcs.n	80014fa <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	441a      	add	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	6839      	ldr	r1, [r7, #0]
 80014ec:	440b      	add	r3, r1
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e7ec      	b.n	80014d4 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	3b01      	subs	r3, #1
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	3b01      	subs	r3, #1
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
     return offset;
 800151e:	693b      	ldr	r3, [r7, #16]
    }
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	080065e0 	.word	0x080065e0

08001544 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	080065f0 	.word	0x080065f0

08001560 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_UART_TxCpltCallback+0x20>)
 800156a:	f000 fc3d 	bl	8001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fea9 	bl	80012c8 <_ZN13STM32Hardware5flushEv>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000a4 	.word	0x200000a4

08001584 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_UART_RxCpltCallback+0x20>)
 800158e:	f000 fc2b 	bl	8001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe58 	bl	800124a <_ZN13STM32Hardware10reset_rbufEv>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000a4 	.word	0x200000a4

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f001 fbbb 	bl	8002d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f853 	bl	800165c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 fabf 	bl	8001b38 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80015ba:	f000 fa95 	bl	8001ae8 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80015be:	f000 f8c1 	bl	8001744 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80015c2:	f000 f8f3 	bl	80017ac <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80015c6:	f000 f993 	bl	80018f0 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80015ca:	f000 fa31 	bl	8001a30 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80015ce:	f000 fa5d 	bl	8001a8c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  nh.initNode();
 80015d2:	481b      	ldr	r0, [pc, #108]	; (8001640 <main+0x98>)
 80015d4:	f000 fc14 	bl	8001e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80015d8:	491a      	ldr	r1, [pc, #104]	; (8001644 <main+0x9c>)
 80015da:	4819      	ldr	r0, [pc, #100]	; (8001640 <main+0x98>)
 80015dc:	f000 fc2d 	bl	8001e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015e0:	2100      	movs	r1, #0
 80015e2:	4819      	ldr	r0, [pc, #100]	; (8001648 <main+0xa0>)
 80015e4:	f003 f8b6 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015e8:	2104      	movs	r1, #4
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <main+0xa0>)
 80015ec:	f003 f8b2 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015f0:	2104      	movs	r1, #4
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <main+0xa4>)
 80015f4:	f003 f8ae 	bl	8004754 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t ccr = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */
	  str_msg.data = hello;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <main+0xa8>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <main+0xac>)
 8001600:	605a      	str	r2, [r3, #4]
	  chatter.publish(&str_msg);
 8001602:	4913      	ldr	r1, [pc, #76]	; (8001650 <main+0xa8>)
 8001604:	480f      	ldr	r0, [pc, #60]	; (8001644 <main+0x9c>)
 8001606:	f7ff fdc6 	bl	8001196 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	  TIM3->CCR2 = ccr;
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <main+0xb0>)
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	6393      	str	r3, [r2, #56]	; 0x38
	  ccr += 1000;
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001616:	80fb      	strh	r3, [r7, #6]
	  if (ccr > TIM3->ARR) ccr = 0;
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <main+0xb0>)
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	429a      	cmp	r2, r3
 8001620:	bf8c      	ite	hi
 8001622:	2301      	movhi	r3, #1
 8001624:	2300      	movls	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <main+0x88>
 800162c:	2300      	movs	r3, #0
 800162e:	80fb      	strh	r3, [r7, #6]
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
//	  HAL_Delay(2000);
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);

	  nh.spinOnce();
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <main+0x98>)
 8001632:	f000 fc32 	bl	8001e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	  HAL_Delay(50);
 8001636:	2032      	movs	r0, #50	; 0x32
 8001638:	f001 fbe8 	bl	8002e0c <HAL_Delay>
	  str_msg.data = hello;
 800163c:	e7de      	b.n	80015fc <main+0x54>
 800163e:	bf00      	nop
 8001640:	200000a4 	.word	0x200000a4
 8001644:	200009e8 	.word	0x200009e8
 8001648:	20000a50 	.word	0x20000a50
 800164c:	20000a90 	.word	0x20000a90
 8001650:	200009e0 	.word	0x200009e0
 8001654:	20000000 	.word	0x20000000
 8001658:	40000400 	.word	0x40000400

0800165c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b094      	sub	sp, #80	; 0x50
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2230      	movs	r2, #48	; 0x30
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fe05 	bl	800627a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <_Z18SystemClock_Configv+0xe0>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a2c      	ldr	r2, [pc, #176]	; (800173c <_Z18SystemClock_Configv+0xe0>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <_Z18SystemClock_Configv+0xe0>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <_Z18SystemClock_Configv+0xe4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <_Z18SystemClock_Configv+0xe4>)
 80016a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <_Z18SystemClock_Configv+0xe4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2310      	movs	r3, #16
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d0:	23a8      	movs	r3, #168	; 0xa8
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fb75 	bl	8003dd0 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80016f6:	f000 fa9d 	bl	8001c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
 80016fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2302      	movs	r3, #2
 8001700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800170a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800170c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2105      	movs	r1, #5
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fdc9 	bl	80042b0 <HAL_RCC_ClockConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800172e:	f000 fa81 	bl	8001c34 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <_ZL12MX_I2C1_Initv+0x60>)
 800174c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <_ZL12MX_I2C1_Initv+0x64>)
 8001752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001782:	f002 f9ed 	bl	8003b60 <HAL_I2C_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001796:	f000 fa4d 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200009fc 	.word	0x200009fc
 80017a4:	40005400 	.word	0x40005400
 80017a8:	000186a0 	.word	0x000186a0

080017ac <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80017e6:	2213      	movs	r2, #19
 80017e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b40      	ldr	r3, [pc, #256]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 80017f0:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80017f2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80017f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b3c      	ldr	r3, [pc, #240]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001804:	4839      	ldr	r0, [pc, #228]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 8001806:	f002 ff45 	bl	8004694 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800181a:	f000 fa0b 	bl	8001c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001828:	4619      	mov	r1, r3
 800182a:	4830      	ldr	r0, [pc, #192]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 800182c:	f003 f896 	bl	800495c <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf14      	ite	ne
 8001836:	2301      	movne	r3, #1
 8001838:	2300      	moveq	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001840:	f000 f9f8 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001844:	4829      	ldr	r0, [pc, #164]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 8001846:	f002 ff50 	bl	80046ea <HAL_TIM_PWM_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800185a:	f000 f9eb 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	4619      	mov	r1, r3
 800186c:	481f      	ldr	r0, [pc, #124]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 800186e:	f003 fc3d 	bl	80050ec <HAL_TIMEx_MasterConfigSynchronization>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001882:	f000 f9d7 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001886:	2360      	movs	r3, #96	; 0x60
 8001888:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 800188a:	f245 2307 	movw	r3, #20999	; 0x5207
 800188e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4813      	ldr	r0, [pc, #76]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80018a0:	f002 ff96 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 80018b4:	f000 f9be 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.Pulse = 10500-1;
 80018b8:	f642 1303 	movw	r3, #10499	; 0x2903
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2204      	movs	r2, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80018c6:	f002 ff83 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_ZL12MX_TIM2_Initv+0x132>
  {
    Error_Handler();
 80018da:	f000 f9ab 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <_ZL12MX_TIM2_Initv+0x140>)
 80018e0:	f000 ffde 	bl	80028a0 <HAL_TIM_MspPostInit>

}
 80018e4:	bf00      	nop
 80018e6:	3738      	adds	r7, #56	; 0x38
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000a50 	.word	0x20000a50

080018f0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08e      	sub	sp, #56	; 0x38
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001922:	4a42      	ldr	r2, [pc, #264]	; (8001a2c <_ZL12MX_TIM3_Initv+0x13c>)
 8001924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1; // 주기
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001928:	2213      	movs	r2, #19
 800192a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42000-1;
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001934:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001946:	4838      	ldr	r0, [pc, #224]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001948:	f002 fea4 	bl	8004694 <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 800195c:	f000 f96a 	bl	8001c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	4619      	mov	r1, r3
 800196c:	482e      	ldr	r0, [pc, #184]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 800196e:	f002 fff5 	bl	800495c <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf14      	ite	ne
 8001978:	2301      	movne	r3, #1
 800197a:	2300      	moveq	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001982:	f000 f957 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001986:	4828      	ldr	r0, [pc, #160]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001988:	f002 feaf 	bl	80046ea <HAL_TIM_PWM_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 800199c:	f000 f94a 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	4619      	mov	r1, r3
 80019ae:	481e      	ldr	r0, [pc, #120]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 80019b0:	f003 fb9c 	bl	80050ec <HAL_TIMEx_MasterConfigSynchronization>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80019c4:	f000 f936 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c8:	2360      	movs	r3, #96	; 0x60
 80019ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;// 펄스 폭
 80019cc:	f245 2307 	movw	r3, #20999	; 0x5207
 80019d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	4619      	mov	r1, r3
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 80019e2:	f002 fef5 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 80019f6:	f000 f91d 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2204      	movs	r2, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001a02:	f002 fee5 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <_ZL12MX_TIM3_Initv+0x12a>
  {
    Error_Handler();
 8001a16:	f000 f90d 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <_ZL12MX_TIM3_Initv+0x138>)
 8001a1c:	f000 ff40 	bl	80028a0 <HAL_TIM_MspPostInit>

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000a90 	.word	0x20000a90
 8001a2c:	40000400 	.word	0x40000400

08001a30 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart1.Instance = USART1;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a68:	f003 fbbc 	bl	80051e4 <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001a7c:	f000 f8da 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000ad0 	.word	0x20000ad0
 8001a88:	40011000 	.word	0x40011000

08001a8c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ac4:	f003 fb8e 	bl	80051e4 <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001ad8:	f000 f8ac 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000b10 	.word	0x20000b10
 8001ae4:	40004400 	.word	0x40004400

08001ae8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <_ZL11MX_DMA_Initv+0x4c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <_ZL11MX_DMA_Initv+0x4c>)
 8001af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <_ZL11MX_DMA_Initv+0x4c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	203a      	movs	r0, #58	; 0x3a
 8001b10:	f001 fa79 	bl	8003006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b14:	203a      	movs	r0, #58	; 0x3a
 8001b16:	f001 fa92 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2046      	movs	r0, #70	; 0x46
 8001b20:	f001 fa71 	bl	8003006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b24:	2046      	movs	r0, #70	; 0x46
 8001b26:	f001 fa8a 	bl	800303e <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <_ZL12MX_GPIO_Initv+0xec>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001bbe:	2318      	movs	r3, #24
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <_ZL12MX_GPIO_Initv+0xf0>)
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <_ZL12MX_GPIO_Initv+0xf4>)
 8001bd2:	f001 fddf 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bd6:	2340      	movs	r3, #64	; 0x40
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4810      	ldr	r0, [pc, #64]	; (8001c30 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bee:	f001 fdd1 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bf8:	f001 ff66 	bl	8003ac8 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2009      	movs	r0, #9
 8001c02:	f001 fa00 	bl	8003006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c06:	2009      	movs	r0, #9
 8001c08:	f001 fa19 	bl	800303e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	200a      	movs	r0, #10
 8001c12:	f001 f9f8 	bl	8003006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c16:	200a      	movs	r0, #10
 8001c18:	f001 fa11 	bl	800303e <HAL_NVIC_EnableIRQ>

}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40020000 	.word	0x40020000

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d80d      	bhi.n	8001c72 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	fa22 f103 	lsr.w	r1, r2, r3
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e7ee      	b.n	8001c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d811      	bhi.n	8001cbc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	440a      	add	r2, r1
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e7ea      	b.n	8001c92 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	080066a8 	.word	0x080066a8

08001ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ffe8 	bl	8001cc8 <_ZN3ros15NodeHandleBase_C1Ev>
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa7a 	bl	80011fc <_ZN13STM32HardwareC1Ev>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff64 	bl	8000be4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b18      	cmp	r3, #24
 8001d24:	d80b      	bhi.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e7f0      	b.n	8001d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b18      	cmp	r3, #24
 8001d46:	d80a      	bhi.n	8001d5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d50:	2100      	movs	r1, #0
 8001d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	e7f1      	b.n	8001d42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d68:	d20a      	bcs.n	8001d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e7f0      	b.n	8001d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8a:	d20a      	bcs.n	8001da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4413      	add	r3, r2
 8001d92:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	e7f0      	b.n	8001d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	0800667c 	.word	0x0800667c

08001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
  }
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fa11 	bl	8001234 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b18      	cmp	r3, #24
 8001e4c:	dc1e      	bgt.n	8001e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d111      	bne.n	8001e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	60da      	str	r2, [r3, #12]
        return true;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e004      	b.n	8001e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3301      	adds	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e7dd      	b.n	8001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001e8c:	2300      	movs	r3, #0
  }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fab2 	bl	8001410 <_ZN13STM32Hardware4timeEv>
 8001eac:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d903      	bls.n	8001ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d903      	bls.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d014      	beq.n	8001f1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fa8b 	bl	8001410 <_ZN13STM32Hardware4timeEv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad2      	subs	r2, r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001f06:	429a      	cmp	r2, r3
 8001f08:	bf8c      	ite	hi
 8001f0a:	2301      	movhi	r3, #1
 8001f0c:	2300      	movls	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001f14:	f06f 0301 	mvn.w	r3, #1
 8001f18:	e197      	b.n	800224a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f9a4 	bl	800126c <_ZN13STM32Hardware4readEv>
 8001f24:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f2c0 8177 	blt.w	800221c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	441a      	add	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d11e      	bne.n	8001f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	b2d1      	uxtb	r1, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	460a      	mov	r2, r1
 8001f60:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f6a:	1e5a      	subs	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1b4      	bne.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2208      	movs	r2, #8
 8001f80:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f84:	e7af      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d128      	bne.n	8001fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d10d      	bne.n	8001fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f103 0214 	add.w	r2, r3, #20
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001fb0:	e799      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fa2a 	bl	8001410 <_ZN13STM32Hardware4timeEv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	bf8c      	ite	hi
 8001fca:	2301      	movhi	r3, #1
 8001fcc:	2300      	movls	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d088      	beq.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001fdc:	f06f 0301 	mvn.w	r3, #1
 8001fe0:	e133      	b.n	800224a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d11b      	bne.n	8002024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2bfe      	cmp	r3, #254	; 0xfe
 8001ff0:	d107      	bne.n	8002002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002000:	e771      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f43f af65 	beq.w	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f918 	bl	8002252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002022:	e760      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800202a:	2b02      	cmp	r3, #2
 800202c:	d113      	bne.n	8002056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002054:	e747      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800205c:	2b03      	cmp	r3, #3
 800205e:	d110      	bne.n	8002082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	441a      	add	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002080:	e731      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002088:	2b04      	cmp	r3, #4
 800208a:	d116      	bne.n	80020ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002092:	425a      	negs	r2, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	bf58      	it	pl
 800209a:	4253      	negpl	r3, r2
 800209c:	2bff      	cmp	r3, #255	; 0xff
 800209e:	d107      	bne.n	80020b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020ae:	e71a      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020b8:	e715      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10f      	bne.n	80020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80020e2:	e700      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d117      	bne.n	800211e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2207      	movs	r2, #7
 8002104:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f47f aee9 	bne.w	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2208      	movs	r2, #8
 8002118:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800211c:	e6e3      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002124:	2b08      	cmp	r3, #8
 8002126:	f47f aede 	bne.w	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002138:	425a      	negs	r2, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	bf58      	it	pl
 8002140:	4253      	negpl	r3, r2
 8002142:	2bff      	cmp	r3, #255	; 0xff
 8002144:	f47f aecf 	bne.w	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d110      	bne.n	8002174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f87d 	bl	8002252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f898 	bl	800228e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e06a      	b.n	800224a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800217a:	2b0a      	cmp	r3, #10
 800217c:	d107      	bne.n	800218e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f960 	bl	800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800218c:	e6ab      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002194:	2b06      	cmp	r3, #6
 8002196:	d10e      	bne.n	80021b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f7fe fe51 	bl	8000e4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80021b4:	e697      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80021bc:	2b0b      	cmp	r3, #11
 80021be:	d104      	bne.n	80021ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80021c8:	e68d      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80021d0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f43f ae81 	beq.w	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80021ea:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80021fe:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002216:	4611      	mov	r1, r2
 8002218:	4798      	blx	r3
    while (true)
 800221a:	e664      	b.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800221c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00f      	beq.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002236:	4293      	cmp	r3, r2
 8002238:	d906      	bls.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f809 	bl	8002252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8002248:	2300      	movs	r3, #0
  }
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f95c 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f107 020c 	add.w	r2, r7, #12
 800226e:	210a      	movs	r1, #10
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
    rt_time = hardware_.time();
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f8c9 	bl	8001410 <_ZN13STM32Hardware4timeEv>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800228e:	b590      	push	{r4, r7, lr}
 8002290:	b08b      	sub	sp, #44	; 0x2c
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fa2e 	bl	80006fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	2b18      	cmp	r3, #24
 80022a8:	dc63      	bgt.n	8002372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d056      	beq.n	800236a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3308      	adds	r3, #8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4608      	mov	r0, r1
 800230a:	4798      	blx	r3
 800230c:	4603      	mov	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4608      	mov	r0, r1
 8002338:	4798      	blx	r3
 800233a:	4603      	mov	r3, r0
 800233c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800233e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002342:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681c      	ldr	r4, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe ff30 	bl	80011be <_ZN3ros9Publisher15getEndpointTypeEv>
 800235e:	4601      	mov	r1, r0
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	461a      	mov	r2, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	e798      	b.n	80022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	2b18      	cmp	r3, #24
 800237a:	dc5f      	bgt.n	800243c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d053      	beq.n	8002434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	b29b      	uxth	r3, r3
 800239c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3308      	adds	r3, #8
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4608      	mov	r0, r1
 80023ce:	4798      	blx	r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	330c      	adds	r3, #12
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4608      	mov	r0, r1
 80023f4:	4798      	blx	r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80023fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023fe:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681c      	ldr	r4, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800240e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	f202 2222 	addw	r2, r2, #546	; 0x222
 800241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3304      	adds	r3, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4608      	mov	r0, r1
 8002426:	4798      	blx	r3
 8002428:	4601      	mov	r1, r0
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	461a      	mov	r2, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	3301      	adds	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	e79c      	b.n	8002376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002444:	bf00      	nop
 8002446:	372c      	adds	r7, #44	; 0x2c
 8002448:	46bd      	mov	sp, r7
 800244a:	bd90      	pop	{r4, r7, pc}

0800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f85e 	bl	800051c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe ffd3 	bl	8001410 <_ZN13STM32Hardware4timeEv>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002476:	f107 0308 	add.w	r3, r7, #8
 800247a:	6839      	ldr	r1, [r7, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f8bd 	bl	80005fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	4915      	ldr	r1, [pc, #84]	; (80024dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002488:	fba1 1303 	umull	r1, r3, r1, r3
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002498:	fba3 0302 	umull	r0, r3, r3, r2
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a2:	fb00 f303 	mul.w	r3, r0, r3
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	440b      	add	r3, r1
 80024b0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	3304      	adds	r3, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8a4 	bl	8002608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe ffa3 	bl	8001410 <_ZN13STM32Hardware4timeEv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	10624dd3 	.word	0x10624dd3
 80024e0:	000f4240 	.word	0x000f4240

080024e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b63      	cmp	r3, #99	; 0x63
 80024f4:	dd09      	ble.n	800250a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002506:	2300      	movs	r3, #0
 8002508:	e077      	b.n	80025fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002516:	3207      	adds	r2, #7
 8002518:	4611      	mov	r1, r2
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
 800251e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	22ff      	movs	r2, #255	; 0xff
 8002524:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	22fe      	movs	r2, #254	; 0xfe
 800252c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	b29b      	uxth	r3, r3
 800253e:	121b      	asrs	r3, r3, #8
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002554:	4413      	add	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	b21b      	sxth	r3, r3
 8002570:	121b      	asrs	r3, r3, #8
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800257e:	2305      	movs	r3, #5
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3307      	adds	r3, #7
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	429a      	cmp	r2, r3
 800258a:	da0d      	bge.n	80025a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e7ec      	b.n	8002582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3307      	adds	r3, #7
 80025ac:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	425a      	negs	r2, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	bf58      	it	pl
 80025b8:	4253      	negpl	r3, r2
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	6179      	str	r1, [r7, #20]
 80025c2:	43d2      	mvns	r2, r2
 80025c4:	b2d1      	uxtb	r1, r2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	460a      	mov	r2, r1
 80025cc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d6:	dc0a      	bgt.n	80025ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1d18      	adds	r0, r3, #4
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fecd 	bl	8001384 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	e005      	b.n	80025fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80025ee:	4905      	ldr	r1, [pc, #20]	; (8002604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f849 	bl	8002688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	08006614 	.word	0x08006614

08002608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fefa 	bl	8001410 <_ZN13STM32Hardware4timeEv>
 800261c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4915      	ldr	r1, [pc, #84]	; (800267c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002626:	fba1 1303 	umull	r1, r3, r1, r3
 800262a:	099b      	lsrs	r3, r3, #6
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	1e5a      	subs	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800263e:	fba3 0302 	umull	r0, r3, r3, r2
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002648:	fb00 f303 	mul.w	r3, r0, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	1aca      	subs	r2, r1, r3
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002658:	4413      	add	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f003 fd86 	bl	8006180 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	10624dd3 	.word	0x10624dd3
 8002680:	000f4240 	.word	0x000f4240
 8002684:	3b9aca00 	.word	0x3b9aca00

08002688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	2103      	movs	r1, #3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f804 	bl	80026a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	460b      	mov	r3, r1
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe f9e4 	bl	8000a84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80026bc:	7afb      	ldrb	r3, [r7, #11]
 80026be:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f107 0214 	add.w	r2, r7, #20
 80026ce:	2107      	movs	r1, #7
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	4798      	blx	r3
  }
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_Z41__static_initialization_and_destruction_0ii>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d110      	bne.n	800270e <_Z41__static_initialization_and_destruction_0ii+0x32>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10b      	bne.n	800270e <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 80026f6:	4808      	ldr	r0, [pc, #32]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80026f8:	f7ff faf6 	bl	8001ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80026fc:	4807      	ldr	r0, [pc, #28]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026fe:	f7fe fe93 	bl	8001428 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002702:	2300      	movs	r3, #0
 8002704:	4a05      	ldr	r2, [pc, #20]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002706:	4906      	ldr	r1, [pc, #24]	; (8002720 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800270a:	f7fe fd2d 	bl	8001168 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200000a4 	.word	0x200000a4
 800271c:	200009e0 	.word	0x200009e0
 8002720:	08006650 	.word	0x08006650
 8002724:	200009e8 	.word	0x200009e8

08002728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
    return configured_;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_GLOBAL__sub_I_nh>:
 8002742:	b580      	push	{r7, lr}
 8002744:	af00      	add	r7, sp, #0
 8002746:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800274a:	2001      	movs	r0, #1
 800274c:	f7ff ffc6 	bl	80026dc <_Z41__static_initialization_and_destruction_0ii>
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_MspInit+0x4c>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_MspInit+0x4c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_MspInit+0x4c>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_MspInit+0x4c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_I2C_MspInit+0x84>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12b      	bne.n	800281e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_I2C_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_I2C_MspInit+0x88>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_I2C_MspInit+0x88>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027e2:	23c0      	movs	r3, #192	; 0xc0
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e6:	2312      	movs	r3, #18
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f2:	2304      	movs	r3, #4
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <HAL_I2C_MspInit+0x8c>)
 80027fe:	f000 ffc9 	bl	8003794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_I2C_MspInit+0x88>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_I2C_MspInit+0x88>)
 800280c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_I2C_MspInit+0x88>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40005400 	.word	0x40005400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020400 	.word	0x40020400

08002834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_TIM_Base_MspInit+0x64>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <HAL_TIM_Base_MspInit+0x64>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_TIM_Base_MspInit+0x64>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002862:	e012      	b.n	800288a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_TIM_Base_MspInit+0x68>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10d      	bne.n	800288a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_TIM_Base_MspInit+0x64>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_TIM_Base_MspInit+0x64>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_TIM_Base_MspInit+0x64>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40000400 	.word	0x40000400

080028a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d11e      	bne.n	8002900 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_TIM_MspPostInit+0xb0>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_TIM_MspPostInit+0xb0>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_TIM_MspPostInit+0xb0>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028de:	2303      	movs	r3, #3
 80028e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028ee:	2301      	movs	r3, #1
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	4816      	ldr	r0, [pc, #88]	; (8002954 <HAL_TIM_MspPostInit+0xb4>)
 80028fa:	f000 ff4b 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028fe:	e022      	b.n	8002946 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <HAL_TIM_MspPostInit+0xb8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d11d      	bne.n	8002946 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_TIM_MspPostInit+0xb0>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_TIM_MspPostInit+0xb0>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_TIM_MspPostInit+0xb0>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002936:	2302      	movs	r3, #2
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <HAL_TIM_MspPostInit+0xb4>)
 8002942:	f000 ff27 	bl	8003794 <HAL_GPIO_Init>
}
 8002946:	bf00      	nop
 8002948:	3728      	adds	r7, #40	; 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000
 8002958:	40000400 	.word	0x40000400

0800295c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a66      	ldr	r2, [pc, #408]	; (8002b14 <HAL_UART_MspInit+0x1b8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	f040 8094 	bne.w	8002aa8 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	4a63      	ldr	r2, [pc, #396]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	6453      	str	r3, [r2, #68]	; 0x44
 8002990:	4b61      	ldr	r3, [pc, #388]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c6:	2303      	movs	r3, #3
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029ca:	2307      	movs	r3, #7
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	4619      	mov	r1, r3
 80029d4:	4851      	ldr	r0, [pc, #324]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 80029d6:	f000 fedd 	bl	8003794 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 80029dc:	4a51      	ldr	r2, [pc, #324]	; (8002b24 <HAL_UART_MspInit+0x1c8>)
 80029de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 80029e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ee:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 80029f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fc:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002a08:	4b45      	ldr	r3, [pc, #276]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a14:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a16:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a1c:	4840      	ldr	r0, [pc, #256]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002a1e:	f000 fb29 	bl	8003074 <HAL_DMA_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002a28:	f7ff f904 	bl	8001c34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
 8002a32:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a3a:	4a3c      	ldr	r2, [pc, #240]	; (8002b2c <HAL_UART_MspInit+0x1d0>)
 8002a3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a44:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a48:	2240      	movs	r2, #64	; 0x40
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a58:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a5a:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a60:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a72:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a7a:	482b      	ldr	r0, [pc, #172]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a7c:	f000 fafa 	bl	8003074 <HAL_DMA_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002a86:	f7ff f8d5 	bl	8001c34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a90:	4a25      	ldr	r2, [pc, #148]	; (8002b28 <HAL_UART_MspInit+0x1cc>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2025      	movs	r0, #37	; 0x25
 8002a9c:	f000 fab3 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aa0:	2025      	movs	r0, #37	; 0x25
 8002aa2:	f000 facc 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aa6:	e030      	b.n	8002b0a <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <HAL_UART_MspInit+0x1d4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12b      	bne.n	8002b0a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002aea:	230c      	movs	r3, #12
 8002aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002afa:	2307      	movs	r3, #7
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002b06:	f000 fe45 	bl	8003794 <HAL_GPIO_Init>
}
 8002b0a:	bf00      	nop
 8002b0c:	3730      	adds	r7, #48	; 0x30
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	20000b50 	.word	0x20000b50
 8002b24:	40026440 	.word	0x40026440
 8002b28:	20000bb0 	.word	0x20000bb0
 8002b2c:	400264b8 	.word	0x400264b8
 8002b30:	40004400 	.word	0x40004400

08002b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <MemManage_Handler+0x4>

08002b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b52:	e7fe      	b.n	8002b52 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b88:	f000 f920 	bl	8002dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002b94:	2008      	movs	r0, #8
 8002b96:	f000 ffcb 	bl	8003b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002ba2:	2010      	movs	r0, #16
 8002ba4:	f000 ffc4 	bl	8003b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <USART1_IRQHandler+0x10>)
 8002bb2:	f002 fc51 	bl	8005458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000ad0 	.word	0x20000ad0

08002bc0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <DMA2_Stream2_IRQHandler+0x10>)
 8002bc6:	f000 fb7d 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000b50 	.word	0x20000b50

08002bd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA2_Stream7_IRQHandler+0x10>)
 8002bda:	f000 fb73 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000bb0 	.word	0x20000bb0

08002be8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if (GPIO_Pin== GPIO_PIN_4) {
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d103      	bne.n	8002c00 <HAL_GPIO_EXTI_Callback+0x18>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002bf8:	2140      	movs	r1, #64	; 0x40
 8002bfa:	4803      	ldr	r0, [pc, #12]	; (8002c08 <HAL_GPIO_EXTI_Callback+0x20>)
 8002bfc:	f000 ff7d 	bl	8003afa <HAL_GPIO_TogglePin>
  }
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40020000 	.word	0x40020000

08002c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
	return 1;
 8002c10:	2301      	movs	r3, #1
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_kill>:

int _kill(int pid, int sig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c26:	f003 faf3 	bl	8006210 <__errno>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	2316      	movs	r3, #22
 8002c2e:	6013      	str	r3, [r2, #0]
	return -1;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_exit>:

void _exit (int status)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ffe7 	bl	8002c1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c4e:	e7fe      	b.n	8002c4e <_exit+0x12>

08002c50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <_sbrk+0x50>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x16>
		heap_end = &end;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <_sbrk+0x50>)
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <_sbrk+0x54>)
 8002c64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <_sbrk+0x50>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <_sbrk+0x50>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	466a      	mov	r2, sp
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d907      	bls.n	8002c8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c7a:	f003 fac9 	bl	8006210 <__errno>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	230c      	movs	r3, #12
 8002c82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	e006      	b.n	8002c98 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <_sbrk+0x50>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <_sbrk+0x50>)
 8002c94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000c10 	.word	0x20000c10
 8002ca4:	20000c28 	.word	0x20000c28

08002ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <SystemInit+0x28>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <SystemInit+0x28>)
 8002cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <SystemInit+0x28>)
 8002cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cda:	e003      	b.n	8002ce4 <LoopCopyDataInit>

08002cdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ce0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ce2:	3104      	adds	r1, #4

08002ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ce4:	480b      	ldr	r0, [pc, #44]	; (8002d14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ce8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cec:	d3f6      	bcc.n	8002cdc <CopyDataInit>
  ldr  r2, =_sbss
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cf0:	e002      	b.n	8002cf8 <LoopFillZerobss>

08002cf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cf4:	f842 3b04 	str.w	r3, [r2], #4

08002cf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cfc:	d3f9      	bcc.n	8002cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cfe:	f7ff ffd3 	bl	8002ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d02:	f003 fa8b 	bl	800621c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d06:	f7fe fc4f 	bl	80015a8 <main>
  bx  lr    
 8002d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d10:	08006760 	.word	0x08006760
  ldr  r0, =_sdata
 8002d14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d18:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002d1c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8002d20:	20000c24 	.word	0x20000c24

08002d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <ADC_IRQHandler>
	...

08002d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_Init+0x40>)
 8002d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_Init+0x40>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_Init+0x40>)
 8002d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_Init+0x40>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_Init+0x40>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d50:	2003      	movs	r0, #3
 8002d52:	f000 f94d 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f000 f808 	bl	8002d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d5c:	f7ff fcfa 	bl	8002754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023c00 	.word	0x40023c00

08002d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_InitTick+0x54>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_InitTick+0x58>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f965 	bl	800305a <HAL_SYSTICK_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00e      	b.n	8002db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d80a      	bhi.n	8002db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f000 f92d 	bl	8003006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_InitTick+0x5c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000010 	.word	0x20000010
 8002dc4:	20000018 	.word	0x20000018
 8002dc8:	20000014 	.word	0x20000014

08002dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x20>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x24>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_IncTick+0x24>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000018 	.word	0x20000018
 8002df0:	20000c1c 	.word	0x20000c1c

08002df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_GetTick+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000c1c 	.word	0x20000c1c

08002e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff ffee 	bl	8002df4 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d005      	beq.n	8002e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_Delay+0x40>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e32:	bf00      	nop
 8002e34:	f7ff ffde 	bl	8002df4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d8f7      	bhi.n	8002e34 <HAL_Delay+0x28>
  {
  }
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000018 	.word	0x20000018

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff29 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff3e 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff8e 	bl	8002f44 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5d 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff31 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffa2 	bl	8002fac <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff feb8 	bl	8002df4 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e099      	b.n	80031c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b0:	e00f      	b.n	80030d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b2:	f7ff fe9f 	bl	8002df4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d908      	bls.n	80030d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e078      	b.n	80031c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e8      	bne.n	80030b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_DMA_Init+0x158>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b04      	cmp	r3, #4
 800312a:	d107      	bne.n	800313c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	4313      	orrs	r3, r2
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0307 	bic.w	r3, r3, #7
 8003152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b04      	cmp	r3, #4
 8003164:	d117      	bne.n	8003196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa91 	bl	80036a0 <DMA_CheckFifoParam>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003192:	2301      	movs	r3, #1
 8003194:	e016      	b.n	80031c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa48 	bl	8003634 <DMA_CalcBaseAndBitshift>
 80031a4:	4603      	mov	r3, r0
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	223f      	movs	r2, #63	; 0x3f
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	f010803f 	.word	0xf010803f

080031d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_DMA_Start_IT+0x26>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e040      	b.n	8003278 <HAL_DMA_Start_IT+0xa8>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d12f      	bne.n	800326a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9da 	bl	80035d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	223f      	movs	r2, #63	; 0x3f
 800322a:	409a      	lsls	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0216 	orr.w	r2, r2, #22
 800323e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0208 	orr.w	r2, r2, #8
 8003256:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e005      	b.n	8003276 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00c      	b.n	80032b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2205      	movs	r2, #5
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d0:	4b92      	ldr	r3, [pc, #584]	; (800351c <HAL_DMA_IRQHandler+0x258>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a92      	ldr	r2, [pc, #584]	; (8003520 <HAL_DMA_IRQHandler+0x25c>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2208      	movs	r2, #8
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01a      	beq.n	8003330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2208      	movs	r2, #8
 800331e:	409a      	lsls	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	f043 0201 	orr.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2201      	movs	r2, #1
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2201      	movs	r2, #1
 8003354:	409a      	lsls	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2204      	movs	r2, #4
 800336c:	409a      	lsls	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2204      	movs	r2, #4
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	2210      	movs	r2, #16
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d043      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03c      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	2210      	movs	r2, #16
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d018      	beq.n	8003406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d024      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
 80033f2:	e01f      	b.n	8003434 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
 8003404:	e016      	b.n	8003434 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0208 	bic.w	r2, r2, #8
 8003422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	2220      	movs	r2, #32
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 808e 	beq.w	8003562 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8086 	beq.w	8003562 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2220      	movs	r2, #32
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b05      	cmp	r3, #5
 800346c:	d136      	bne.n	80034dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0216 	bic.w	r2, r2, #22
 800347c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_DMA_IRQHandler+0x1da>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	223f      	movs	r2, #63	; 0x3f
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
        }
        return;
 80034da:	e078      	b.n	80035ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01c      	beq.n	8003524 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d108      	bne.n	800350a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d030      	beq.n	8003562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
 8003508:	e02b      	b.n	8003562 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d027      	beq.n	8003562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
 800351a:	e022      	b.n	8003562 <HAL_DMA_IRQHandler+0x29e>
 800351c:	20000010 	.word	0x20000010
 8003520:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0210 	bic.w	r2, r2, #16
 8003540:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	2b00      	cmp	r3, #0
 8003568:	d032      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d022      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2205      	movs	r2, #5
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3301      	adds	r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	429a      	cmp	r2, r3
 8003598:	d307      	bcc.n	80035aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f2      	bne.n	800358e <HAL_DMA_IRQHandler+0x2ca>
 80035a8:	e000      	b.n	80035ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e000      	b.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035ce:	bf00      	nop
    }
  }
}
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop

080035d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d108      	bne.n	8003618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003616:	e007      	b.n	8003628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	3b10      	subs	r3, #16
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <DMA_CalcBaseAndBitshift+0x64>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <DMA_CalcBaseAndBitshift+0x68>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d909      	bls.n	8003676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	; 0x58
 8003674:	e007      	b.n	8003686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	aaaaaaab 	.word	0xaaaaaaab
 800369c:	08006744 	.word	0x08006744

080036a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11f      	bne.n	80036fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d855      	bhi.n	800376c <DMA_CheckFifoParam+0xcc>
 80036c0:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <DMA_CheckFifoParam+0x28>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036eb 	.word	0x080036eb
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	0800376d 	.word	0x0800376d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d045      	beq.n	8003770 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e8:	e042      	b.n	8003770 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f2:	d13f      	bne.n	8003774 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e03c      	b.n	8003774 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003702:	d121      	bne.n	8003748 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d836      	bhi.n	8003778 <DMA_CheckFifoParam+0xd8>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <DMA_CheckFifoParam+0x70>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003721 	.word	0x08003721
 8003714:	08003727 	.word	0x08003727
 8003718:	08003721 	.word	0x08003721
 800371c:	08003739 	.word	0x08003739
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e02f      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d024      	beq.n	800377c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003736:	e021      	b.n	800377c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003740:	d11e      	bne.n	8003780 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003746:	e01b      	b.n	8003780 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <DMA_CheckFifoParam+0xb4>
 800374e:	2b03      	cmp	r3, #3
 8003750:	d003      	beq.n	800375a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003752:	e018      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      break;
 8003758:	e015      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      break;
 800376a:	e00b      	b.n	8003784 <DMA_CheckFifoParam+0xe4>
      break;
 800376c:	bf00      	nop
 800376e:	e00a      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;
 8003770:	bf00      	nop
 8003772:	e008      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;
 8003774:	bf00      	nop
 8003776:	e006      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;
 8003778:	bf00      	nop
 800377a:	e004      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;
 800377c:	bf00      	nop
 800377e:	e002      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;   
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;
 8003784:	bf00      	nop
    }
  } 
  
  return status; 
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	e16b      	b.n	8003a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b0:	2201      	movs	r2, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	f040 815a 	bne.w	8003a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d00b      	beq.n	80037ee <HAL_GPIO_Init+0x5a>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037e2:	2b11      	cmp	r3, #17
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b12      	cmp	r3, #18
 80037ec:	d130      	bne.n	8003850 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	2203      	movs	r2, #3
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 0201 	and.w	r2, r3, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0xfc>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b12      	cmp	r3, #18
 800388e:	d123      	bne.n	80038d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	08da      	lsrs	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3208      	adds	r2, #8
 8003898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	220f      	movs	r2, #15
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	08da      	lsrs	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3208      	adds	r2, #8
 80038d2:	69b9      	ldr	r1, [r7, #24]
 80038d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80b4 	beq.w	8003a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b5f      	ldr	r3, [pc, #380]	; (8003a9c <HAL_GPIO_Init+0x308>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	4a5e      	ldr	r2, [pc, #376]	; (8003a9c <HAL_GPIO_Init+0x308>)
 8003924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003928:	6453      	str	r3, [r2, #68]	; 0x44
 800392a:	4b5c      	ldr	r3, [pc, #368]	; (8003a9c <HAL_GPIO_Init+0x308>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003936:	4a5a      	ldr	r2, [pc, #360]	; (8003aa0 <HAL_GPIO_Init+0x30c>)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	3302      	adds	r3, #2
 800393e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	220f      	movs	r2, #15
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a51      	ldr	r2, [pc, #324]	; (8003aa4 <HAL_GPIO_Init+0x310>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d02b      	beq.n	80039ba <HAL_GPIO_Init+0x226>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a50      	ldr	r2, [pc, #320]	; (8003aa8 <HAL_GPIO_Init+0x314>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d025      	beq.n	80039b6 <HAL_GPIO_Init+0x222>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4f      	ldr	r2, [pc, #316]	; (8003aac <HAL_GPIO_Init+0x318>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01f      	beq.n	80039b2 <HAL_GPIO_Init+0x21e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4e      	ldr	r2, [pc, #312]	; (8003ab0 <HAL_GPIO_Init+0x31c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d019      	beq.n	80039ae <HAL_GPIO_Init+0x21a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4d      	ldr	r2, [pc, #308]	; (8003ab4 <HAL_GPIO_Init+0x320>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_GPIO_Init+0x216>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <HAL_GPIO_Init+0x324>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00d      	beq.n	80039a6 <HAL_GPIO_Init+0x212>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4b      	ldr	r2, [pc, #300]	; (8003abc <HAL_GPIO_Init+0x328>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <HAL_GPIO_Init+0x20e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4a      	ldr	r2, [pc, #296]	; (8003ac0 <HAL_GPIO_Init+0x32c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_GPIO_Init+0x20a>
 800399a:	2307      	movs	r3, #7
 800399c:	e00e      	b.n	80039bc <HAL_GPIO_Init+0x228>
 800399e:	2308      	movs	r3, #8
 80039a0:	e00c      	b.n	80039bc <HAL_GPIO_Init+0x228>
 80039a2:	2306      	movs	r3, #6
 80039a4:	e00a      	b.n	80039bc <HAL_GPIO_Init+0x228>
 80039a6:	2305      	movs	r3, #5
 80039a8:	e008      	b.n	80039bc <HAL_GPIO_Init+0x228>
 80039aa:	2304      	movs	r3, #4
 80039ac:	e006      	b.n	80039bc <HAL_GPIO_Init+0x228>
 80039ae:	2303      	movs	r3, #3
 80039b0:	e004      	b.n	80039bc <HAL_GPIO_Init+0x228>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e002      	b.n	80039bc <HAL_GPIO_Init+0x228>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_GPIO_Init+0x228>
 80039ba:	2300      	movs	r3, #0
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	f002 0203 	and.w	r2, r2, #3
 80039c2:	0092      	lsls	r2, r2, #2
 80039c4:	4093      	lsls	r3, r2
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039cc:	4934      	ldr	r1, [pc, #208]	; (8003aa0 <HAL_GPIO_Init+0x30c>)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	3302      	adds	r3, #2
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039da:	4b3a      	ldr	r3, [pc, #232]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039fe:	4a31      	ldr	r2, [pc, #196]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a04:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a52:	4a1c      	ldr	r2, [pc, #112]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <HAL_GPIO_Init+0x330>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	f67f ae90 	bls.w	80037b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a90:	bf00      	nop
 8003a92:	3724      	adds	r7, #36	; 0x24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021400 	.word	0x40021400
 8003abc:	40021800 	.word	0x40021800
 8003ac0:	40021c00 	.word	0x40021c00
 8003ac4:	40013c00 	.word	0x40013c00

08003ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad8:	787b      	ldrb	r3, [r7, #1]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ade:	887a      	ldrh	r2, [r7, #2]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ae4:	e003      	b.n	8003aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	041a      	lsls	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	619a      	str	r2, [r3, #24]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	887b      	ldrh	r3, [r7, #2]
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d104      	bne.n	8003b1e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	041a      	lsls	r2, r3, #16
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b1c:	e002      	b.n	8003b24 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b46:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff f84a 	bl	8002be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40013c00 	.word	0x40013c00

08003b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e11f      	b.n	8003db2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fe fe0c 	bl	80027a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f000 fd3e 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 8003bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a7b      	ldr	r2, [pc, #492]	; (8003dbc <HAL_I2C_Init+0x25c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d807      	bhi.n	8003be4 <HAL_I2C_Init+0x84>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a7a      	ldr	r2, [pc, #488]	; (8003dc0 <HAL_I2C_Init+0x260>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bf94      	ite	ls
 8003bdc:	2301      	movls	r3, #1
 8003bde:	2300      	movhi	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e006      	b.n	8003bf2 <HAL_I2C_Init+0x92>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a77      	ldr	r2, [pc, #476]	; (8003dc4 <HAL_I2C_Init+0x264>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	bf94      	ite	ls
 8003bec:	2301      	movls	r3, #1
 8003bee:	2300      	movhi	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0db      	b.n	8003db2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a72      	ldr	r2, [pc, #456]	; (8003dc8 <HAL_I2C_Init+0x268>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	0c9b      	lsrs	r3, r3, #18
 8003c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a64      	ldr	r2, [pc, #400]	; (8003dbc <HAL_I2C_Init+0x25c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d802      	bhi.n	8003c34 <HAL_I2C_Init+0xd4>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	3301      	adds	r3, #1
 8003c32:	e009      	b.n	8003c48 <HAL_I2C_Init+0xe8>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	4a63      	ldr	r2, [pc, #396]	; (8003dcc <HAL_I2C_Init+0x26c>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	3301      	adds	r3, #1
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4956      	ldr	r1, [pc, #344]	; (8003dbc <HAL_I2C_Init+0x25c>)
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d80d      	bhi.n	8003c84 <HAL_I2C_Init+0x124>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e59      	subs	r1, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	bf38      	it	cc
 8003c80:	2304      	movcc	r3, #4
 8003c82:	e04f      	b.n	8003d24 <HAL_I2C_Init+0x1c4>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d111      	bne.n	8003cb0 <HAL_I2C_Init+0x150>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e012      	b.n	8003cd6 <HAL_I2C_Init+0x176>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	0099      	lsls	r1, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Init+0x17e>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e022      	b.n	8003d24 <HAL_I2C_Init+0x1c4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10e      	bne.n	8003d04 <HAL_I2C_Init+0x1a4>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1e58      	subs	r0, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	440b      	add	r3, r1
 8003cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d02:	e00f      	b.n	8003d24 <HAL_I2C_Init+0x1c4>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e58      	subs	r0, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	0099      	lsls	r1, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	6809      	ldr	r1, [r1, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6911      	ldr	r1, [r2, #16]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	4311      	orrs	r1, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	000186a0 	.word	0x000186a0
 8003dc0:	001e847f 	.word	0x001e847f
 8003dc4:	003d08ff 	.word	0x003d08ff
 8003dc8:	431bde83 	.word	0x431bde83
 8003dcc:	10624dd3 	.word	0x10624dd3

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e25b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dee:	4ba3      	ldr	r3, [pc, #652]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4ba0      	ldr	r3, [pc, #640]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b9d      	ldr	r3, [pc, #628]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b99      	ldr	r3, [pc, #612]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e236      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b91      	ldr	r3, [pc, #580]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a90      	ldr	r2, [pc, #576]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a87      	ldr	r2, [pc, #540]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a83      	ldr	r2, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fe ffb4 	bl	8002df4 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fe ffb0 	bl	8002df4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e1fb      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe ffa0 	bl	8002df4 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fe ff9c 	bl	8002df4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1e7      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b6c      	ldr	r3, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1bb      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4952      	ldr	r1, [pc, #328]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fe ff55 	bl	8002df4 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fe ff51 	bl	8002df4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e19c      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4940      	ldr	r1, [pc, #256]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe ff34 	bl	8002df4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fe ff30 	bl	8002df4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e17b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d030      	beq.n	800401c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe ff14 	bl	8002df4 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fe ff10 	bl	8002df4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e15b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
 8003fee:	e015      	b.n	800401c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fefd 	bl	8002df4 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fe fef9 	bl	8002df4 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e144      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80a0 	beq.w	800416a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d121      	bne.n	80040aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fe febf 	bl	8002df4 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e011      	b.n	800409e <HAL_RCC_OscConfig+0x2ce>
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	42470000 	.word	0x42470000
 8004084:	42470e80 	.word	0x42470e80
 8004088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fe feb2 	bl	8002df4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0fd      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b81      	ldr	r3, [pc, #516]	; (80042a4 <HAL_RCC_OscConfig+0x4d4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x312>
 80040c8:	4b77      	ldr	r3, [pc, #476]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a76      	ldr	r2, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
 80040d4:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a73      	ldr	r2, [pc, #460]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040e2:	4b71      	ldr	r3, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a70      	ldr	r2, [pc, #448]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	4b6e      	ldr	r3, [pc, #440]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a6d      	ldr	r2, [pc, #436]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fe fe77 	bl	8002df4 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fe fe73 	bl	8002df4 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0bc      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x33a>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe fe61 	bl	8002df4 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fe fe5d 	bl	8002df4 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0a6      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a51      	ldr	r2, [pc, #324]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8092 	beq.w	8004298 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d05c      	beq.n	800423a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d141      	bne.n	800420c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b48      	ldr	r3, [pc, #288]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fe fe31 	bl	8002df4 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004196:	f7fe fe2d 	bl	8002df4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e078      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	4933      	ldr	r1, [pc, #204]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fe fe06 	bl	8002df4 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fe fe02 	bl	8002df4 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e04d      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x41c>
 800420a:	e045      	b.n	8004298 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe fdef 	bl	8002df4 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421a:	f7fe fdeb 	bl	8002df4 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e036      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x44a>
 8004238:	e02e      	b.n	8004298 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e029      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	429a      	cmp	r2, r3
 8004258:	d11c      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d115      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d106      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40007000 	.word	0x40007000
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470060 	.word	0x42470060

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fe fd28 	bl	8002df4 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fe fd24 	bl	8002df4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4601      	mov	r1, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	fa21 f303 	lsr.w	r3, r1, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fc88 	bl	8002d6c <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	0800672c 	.word	0x0800672c
 8004474:	20000010 	.word	0x20000010
 8004478:	20000014 	.word	0x20000014

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004492:	4b63      	ldr	r3, [pc, #396]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d007      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x32>
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d008      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x38>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 80b4 	bne.w	8004610 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b5e      	ldr	r3, [pc, #376]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044aa:	60bb      	str	r3, [r7, #8]
       break;
 80044ac:	e0b3      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ae:	4b5e      	ldr	r3, [pc, #376]	; (8004628 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80044b0:	60bb      	str	r3, [r7, #8]
      break;
 80044b2:	e0b0      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b4:	4b5a      	ldr	r3, [pc, #360]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044be:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04a      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b55      	ldr	r3, [pc, #340]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	ea03 0501 	and.w	r5, r3, r1
 80044e0:	ea04 0602 	and.w	r6, r4, r2
 80044e4:	4629      	mov	r1, r5
 80044e6:	4632      	mov	r2, r6
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	f04f 0400 	mov.w	r4, #0
 80044f0:	0154      	lsls	r4, r2, #5
 80044f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044f6:	014b      	lsls	r3, r1, #5
 80044f8:	4619      	mov	r1, r3
 80044fa:	4622      	mov	r2, r4
 80044fc:	1b49      	subs	r1, r1, r5
 80044fe:	eb62 0206 	sbc.w	r2, r2, r6
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	f04f 0400 	mov.w	r4, #0
 800450a:	0194      	lsls	r4, r2, #6
 800450c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004510:	018b      	lsls	r3, r1, #6
 8004512:	1a5b      	subs	r3, r3, r1
 8004514:	eb64 0402 	sbc.w	r4, r4, r2
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	00e2      	lsls	r2, r4, #3
 8004522:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004526:	00d9      	lsls	r1, r3, #3
 8004528:	460b      	mov	r3, r1
 800452a:	4614      	mov	r4, r2
 800452c:	195b      	adds	r3, r3, r5
 800452e:	eb44 0406 	adc.w	r4, r4, r6
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	0262      	lsls	r2, r4, #9
 800453c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004540:	0259      	lsls	r1, r3, #9
 8004542:	460b      	mov	r3, r1
 8004544:	4614      	mov	r4, r2
 8004546:	4618      	mov	r0, r3
 8004548:	4621      	mov	r1, r4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f04f 0400 	mov.w	r4, #0
 8004550:	461a      	mov	r2, r3
 8004552:	4623      	mov	r3, r4
 8004554:	f7fb fe40 	bl	80001d8 <__aeabi_uldivmod>
 8004558:	4603      	mov	r3, r0
 800455a:	460c      	mov	r4, r1
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e049      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	099b      	lsrs	r3, r3, #6
 8004566:	f04f 0400 	mov.w	r4, #0
 800456a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	ea03 0501 	and.w	r5, r3, r1
 8004576:	ea04 0602 	and.w	r6, r4, r2
 800457a:	4629      	mov	r1, r5
 800457c:	4632      	mov	r2, r6
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	f04f 0400 	mov.w	r4, #0
 8004586:	0154      	lsls	r4, r2, #5
 8004588:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800458c:	014b      	lsls	r3, r1, #5
 800458e:	4619      	mov	r1, r3
 8004590:	4622      	mov	r2, r4
 8004592:	1b49      	subs	r1, r1, r5
 8004594:	eb62 0206 	sbc.w	r2, r2, r6
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	f04f 0400 	mov.w	r4, #0
 80045a0:	0194      	lsls	r4, r2, #6
 80045a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045a6:	018b      	lsls	r3, r1, #6
 80045a8:	1a5b      	subs	r3, r3, r1
 80045aa:	eb64 0402 	sbc.w	r4, r4, r2
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	00e2      	lsls	r2, r4, #3
 80045b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045bc:	00d9      	lsls	r1, r3, #3
 80045be:	460b      	mov	r3, r1
 80045c0:	4614      	mov	r4, r2
 80045c2:	195b      	adds	r3, r3, r5
 80045c4:	eb44 0406 	adc.w	r4, r4, r6
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	02a2      	lsls	r2, r4, #10
 80045d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045d6:	0299      	lsls	r1, r3, #10
 80045d8:	460b      	mov	r3, r1
 80045da:	4614      	mov	r4, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	4621      	mov	r1, r4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f04f 0400 	mov.w	r4, #0
 80045e6:	461a      	mov	r2, r3
 80045e8:	4623      	mov	r3, r4
 80045ea:	f7fb fdf5 	bl	80001d8 <__aeabi_uldivmod>
 80045ee:	4603      	mov	r3, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	3301      	adds	r3, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	60bb      	str	r3, [r7, #8]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004612:	60bb      	str	r3, [r7, #8]
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	68bb      	ldr	r3, [r7, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	00f42400 	.word	0x00f42400
 8004628:	007a1200 	.word	0x007a1200

0800462c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCC_GetHCLKFreq+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000010 	.word	0x20000010

08004644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004648:	f7ff fff0 	bl	800462c <HAL_RCC_GetHCLKFreq>
 800464c:	4601      	mov	r1, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0a9b      	lsrs	r3, r3, #10
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4a03      	ldr	r2, [pc, #12]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	0800673c 	.word	0x0800673c

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004670:	f7ff ffdc 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004674:	4601      	mov	r1, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0b5b      	lsrs	r3, r3, #13
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4a03      	ldr	r2, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004682:	5cd3      	ldrb	r3, [r2, r3]
 8004684:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	0800673c 	.word	0x0800673c

08004694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e01d      	b.n	80046e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe f8ba 	bl	8002834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 f9fa 	bl	8004acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e01d      	b.n	8004738 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f815 	bl	8004740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f000 f9cf 	bl	8004acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fc9a 	bl	80050a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <HAL_TIM_PWM_Start+0x74>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_PWM_Start+0x2c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_TIM_PWM_Start+0x78>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <HAL_TIM_PWM_Start+0x30>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_TIM_PWM_Start+0x32>
 8004784:	2300      	movs	r3, #0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b06      	cmp	r3, #6
 80047aa:	d007      	beq.n	80047bc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e0b4      	b.n	8004954 <HAL_TIM_PWM_ConfigChannel+0x184>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	f200 809f 	bhi.w	8004940 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	0800483d 	.word	0x0800483d
 800480c:	08004941 	.word	0x08004941
 8004810:	08004941 	.word	0x08004941
 8004814:	08004941 	.word	0x08004941
 8004818:	0800487d 	.word	0x0800487d
 800481c:	08004941 	.word	0x08004941
 8004820:	08004941 	.word	0x08004941
 8004824:	08004941 	.word	0x08004941
 8004828:	080048bf 	.word	0x080048bf
 800482c:	08004941 	.word	0x08004941
 8004830:	08004941 	.word	0x08004941
 8004834:	08004941 	.word	0x08004941
 8004838:	080048ff 	.word	0x080048ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f9e2 	bl	8004c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0208 	orr.w	r2, r2, #8
 8004856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0204 	bic.w	r2, r2, #4
 8004866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6999      	ldr	r1, [r3, #24]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	619a      	str	r2, [r3, #24]
      break;
 800487a:	e062      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa32 	bl	8004cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6999      	ldr	r1, [r3, #24]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	619a      	str	r2, [r3, #24]
      break;
 80048bc:	e041      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa87 	bl	8004dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0208 	orr.w	r2, r2, #8
 80048d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0204 	bic.w	r2, r2, #4
 80048e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69d9      	ldr	r1, [r3, #28]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	61da      	str	r2, [r3, #28]
      break;
 80048fc:	e021      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fadb 	bl	8004ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69d9      	ldr	r1, [r3, #28]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	021a      	lsls	r2, r3, #8
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	61da      	str	r2, [r3, #28]
      break;
 800493e:	e000      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004940:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_TIM_ConfigClockSource+0x18>
 8004970:	2302      	movs	r3, #2
 8004972:	e0a6      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x166>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800499a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d067      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0x120>
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d80b      	bhi.n	80049c8 <HAL_TIM_ConfigClockSource+0x6c>
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d073      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x140>
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d802      	bhi.n	80049be <HAL_TIM_ConfigClockSource+0x62>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d06f      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049bc:	e078      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d06c      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x140>
 80049c2:	2b30      	cmp	r3, #48	; 0x30
 80049c4:	d06a      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049c6:	e073      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049c8:	2b70      	cmp	r3, #112	; 0x70
 80049ca:	d00d      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0x8c>
 80049cc:	2b70      	cmp	r3, #112	; 0x70
 80049ce:	d804      	bhi.n	80049da <HAL_TIM_ConfigClockSource+0x7e>
 80049d0:	2b50      	cmp	r3, #80	; 0x50
 80049d2:	d033      	beq.n	8004a3c <HAL_TIM_ConfigClockSource+0xe0>
 80049d4:	2b60      	cmp	r3, #96	; 0x60
 80049d6:	d041      	beq.n	8004a5c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049d8:	e06a      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	d066      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x152>
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e4:	d017      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049e6:	e063      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f000 fb32 	bl	8005060 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	609a      	str	r2, [r3, #8]
      break;
 8004a14:	e04c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6899      	ldr	r1, [r3, #8]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f000 fb1b 	bl	8005060 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a38:	609a      	str	r2, [r3, #8]
      break;
 8004a3a:	e039      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6859      	ldr	r1, [r3, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f000 fa8f 	bl	8004f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2150      	movs	r1, #80	; 0x50
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fae8 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004a5a:	e029      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f000 faae 	bl	8004fca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2160      	movs	r1, #96	; 0x60
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fad8 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004a7a:	e019      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f000 fa6f 	bl	8004f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2140      	movs	r1, #64	; 0x40
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fac8 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004a9a:	e009      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f000 fabf 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004aac:	e000      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a40      	ldr	r2, [pc, #256]	; (8004be0 <TIM_Base_SetConfig+0x114>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <TIM_Base_SetConfig+0x40>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aea:	d00f      	beq.n	8004b0c <TIM_Base_SetConfig+0x40>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3d      	ldr	r2, [pc, #244]	; (8004be4 <TIM_Base_SetConfig+0x118>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_Base_SetConfig+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3c      	ldr	r2, [pc, #240]	; (8004be8 <TIM_Base_SetConfig+0x11c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_Base_SetConfig+0x40>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3b      	ldr	r2, [pc, #236]	; (8004bec <TIM_Base_SetConfig+0x120>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a3a      	ldr	r2, [pc, #232]	; (8004bf0 <TIM_Base_SetConfig+0x124>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d108      	bne.n	8004b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2f      	ldr	r2, [pc, #188]	; (8004be0 <TIM_Base_SetConfig+0x114>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d02b      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2c:	d027      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2c      	ldr	r2, [pc, #176]	; (8004be4 <TIM_Base_SetConfig+0x118>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d023      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a2b      	ldr	r2, [pc, #172]	; (8004be8 <TIM_Base_SetConfig+0x11c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01f      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a2a      	ldr	r2, [pc, #168]	; (8004bec <TIM_Base_SetConfig+0x120>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01b      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a29      	ldr	r2, [pc, #164]	; (8004bf0 <TIM_Base_SetConfig+0x124>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d017      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a28      	ldr	r2, [pc, #160]	; (8004bf4 <TIM_Base_SetConfig+0x128>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a27      	ldr	r2, [pc, #156]	; (8004bf8 <TIM_Base_SetConfig+0x12c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00f      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a26      	ldr	r2, [pc, #152]	; (8004bfc <TIM_Base_SetConfig+0x130>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00b      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <TIM_Base_SetConfig+0x134>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <TIM_Base_SetConfig+0x138>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d003      	beq.n	8004b7e <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a23      	ldr	r2, [pc, #140]	; (8004c08 <TIM_Base_SetConfig+0x13c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d108      	bne.n	8004b90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <TIM_Base_SetConfig+0x114>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_Base_SetConfig+0xf8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <TIM_Base_SetConfig+0x124>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d103      	bne.n	8004bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	615a      	str	r2, [r3, #20]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40010400 	.word	0x40010400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800
 8004c00:	40001800 	.word	0x40001800
 8004c04:	40001c00 	.word	0x40001c00
 8004c08:	40002000 	.word	0x40002000

08004c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 0302 	bic.w	r3, r3, #2
 8004c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a20      	ldr	r2, [pc, #128]	; (8004ce4 <TIM_OC1_SetConfig+0xd8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_OC1_SetConfig+0x64>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <TIM_OC1_SetConfig+0xdc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10c      	bne.n	8004c8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0308 	bic.w	r3, r3, #8
 8004c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <TIM_OC1_SetConfig+0xd8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC1_SetConfig+0x8e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <TIM_OC1_SetConfig+0xdc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40010400 	.word	0x40010400

08004cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f023 0210 	bic.w	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0320 	bic.w	r3, r3, #32
 8004d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a22      	ldr	r2, [pc, #136]	; (8004dd0 <TIM_OC2_SetConfig+0xe4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC2_SetConfig+0x68>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a21      	ldr	r2, [pc, #132]	; (8004dd4 <TIM_OC2_SetConfig+0xe8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10d      	bne.n	8004d70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <TIM_OC2_SetConfig+0xe4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_OC2_SetConfig+0x94>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <TIM_OC2_SetConfig+0xe8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d113      	bne.n	8004da8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40010400 	.word	0x40010400

08004dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <TIM_OC3_SetConfig+0xe0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d003      	beq.n	8004e3e <TIM_OC3_SetConfig+0x66>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <TIM_OC3_SetConfig+0xe4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10d      	bne.n	8004e5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <TIM_OC3_SetConfig+0xe0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_OC3_SetConfig+0x92>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <TIM_OC3_SetConfig+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d113      	bne.n	8004e92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	031b      	lsls	r3, r3, #12
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <TIM_OC4_SetConfig+0xa4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC4_SetConfig+0x68>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <TIM_OC4_SetConfig+0xa8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d109      	bne.n	8004f3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	019b      	lsls	r3, r3, #6
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40010400 	.word	0x40010400

08004f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 030a 	bic.w	r3, r3, #10
 8004fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0210 	bic.w	r2, r3, #16
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005006:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	f043 0307 	orr.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	431a      	orrs	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2201      	movs	r2, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	401a      	ands	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	fa01 f303 	lsl.w	r3, r1, r3
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005100:	2302      	movs	r3, #2
 8005102:	e05a      	b.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d01d      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10c      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40010400 	.word	0x40010400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40001800 	.word	0x40001800

080051e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e03f      	b.n	8005276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fd fba6 	bl	800295c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2224      	movs	r2, #36	; 0x24
 8005214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fc2d 	bl	8005a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800523c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800524c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800525c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b20      	cmp	r3, #32
 8005298:	d153      	bne.n	8005342 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_UART_Transmit_DMA+0x26>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e04c      	b.n	8005344 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_UART_Transmit_DMA+0x38>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e045      	b.n	8005344 <HAL_UART_Transmit_DMA+0xc4>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2221      	movs	r2, #33	; 0x21
 80052dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	4a19      	ldr	r2, [pc, #100]	; (800534c <HAL_UART_Transmit_DMA+0xcc>)
 80052e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	4a18      	ldr	r2, [pc, #96]	; (8005350 <HAL_UART_Transmit_DMA+0xd0>)
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_UART_Transmit_DMA+0xd4>)
 80052f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6819      	ldr	r1, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3304      	adds	r3, #4
 8005314:	461a      	mov	r2, r3
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	f7fd ff5a 	bl	80031d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005324:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800533c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	08005695 	.word	0x08005695
 8005350:	080056e7 	.word	0x080056e7
 8005354:	08005787 	.word	0x08005787

08005358 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b20      	cmp	r3, #32
 8005370:	d166      	bne.n	8005440 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_UART_Receive_DMA+0x26>
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e05f      	b.n	8005442 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_UART_Receive_DMA+0x38>
 800538c:	2302      	movs	r3, #2
 800538e:	e058      	b.n	8005442 <HAL_UART_Receive_DMA+0xea>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2222      	movs	r2, #34	; 0x22
 80053ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	4a25      	ldr	r2, [pc, #148]	; (800544c <HAL_UART_Receive_DMA+0xf4>)
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	4a24      	ldr	r2, [pc, #144]	; (8005450 <HAL_UART_Receive_DMA+0xf8>)
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c6:	4a23      	ldr	r2, [pc, #140]	; (8005454 <HAL_UART_Receive_DMA+0xfc>)
 80053c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	2200      	movs	r2, #0
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3304      	adds	r3, #4
 80053e2:	4619      	mov	r1, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	f7fd fef1 	bl	80031d0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
  }
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	08005703 	.word	0x08005703
 8005450:	0800576b 	.word	0x0800576b
 8005454:	08005787 	.word	0x08005787

08005458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_UART_IRQHandler+0x52>
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa6f 	bl	8005986 <UART_Receive_IT>
      return;
 80054a8:	e0d1      	b.n	800564e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80b0 	beq.w	8005612 <HAL_UART_IRQHandler+0x1ba>
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_UART_IRQHandler+0x70>
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80a5 	beq.w	8005612 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_UART_IRQHandler+0x90>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	f043 0201 	orr.w	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_UART_IRQHandler+0xb0>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	f043 0202 	orr.w	r2, r3, #2
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_UART_IRQHandler+0xd0>
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	f043 0204 	orr.w	r2, r3, #4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00f      	beq.n	8005552 <HAL_UART_IRQHandler+0xfa>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_UART_IRQHandler+0xee>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	f043 0208 	orr.w	r2, r3, #8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d078      	beq.n	800564c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_UART_IRQHandler+0x11c>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa09 	bl	8005986 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <HAL_UART_IRQHandler+0x144>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d031      	beq.n	8005600 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f952 	bl	8005846 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d123      	bne.n	80055f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d013      	beq.n	80055f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <HAL_UART_IRQHandler+0x1fc>)
 80055ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fd fe53 	bl	8003280 <HAL_DMA_Abort_IT>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d016      	beq.n	800560e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055ea:	4610      	mov	r0, r2
 80055ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ee:	e00e      	b.n	800560e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f845 	bl	8005680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f6:	e00a      	b.n	800560e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f841 	bl	8005680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fe:	e006      	b.n	800560e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f83d 	bl	8005680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800560c:	e01e      	b.n	800564c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560e:	bf00      	nop
    return;
 8005610:	e01c      	b.n	800564c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_UART_IRQHandler+0x1d6>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f93f 	bl	80058aa <UART_Transmit_IT>
    return;
 800562c:	e00f      	b.n	800564e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_UART_IRQHandler+0x1f6>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f987 	bl	8005956 <UART_EndTransmit_IT>
    return;
 8005648:	bf00      	nop
 800564a:	e000      	b.n	800564e <HAL_UART_IRQHandler+0x1f6>
    return;
 800564c:	bf00      	nop
  }
}
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	08005883 	.word	0x08005883

08005658 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d113      	bne.n	80056d8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056c4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056d6:	e002      	b.n	80056de <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7fb ff41 	bl	8001560 <HAL_UART_TxCpltCallback>
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ffaf 	bl	8005658 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d11e      	bne.n	800575c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005732:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695a      	ldr	r2, [r3, #20]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005752:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7fb ff11 	bl	8001584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff ff77 	bl	800566c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b21      	cmp	r3, #33	; 0x21
 80057b8:	d108      	bne.n	80057cc <UART_DMAError+0x46>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2200      	movs	r2, #0
 80057c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80057c6:	68b8      	ldr	r0, [r7, #8]
 80057c8:	f000 f827 	bl	800581a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	bf0c      	ite	eq
 80057da:	2301      	moveq	r3, #1
 80057dc:	2300      	movne	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b22      	cmp	r3, #34	; 0x22
 80057ec:	d108      	bne.n	8005800 <UART_DMAError+0x7a>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057fa:	68b8      	ldr	r0, [r7, #8]
 80057fc:	f000 f823 	bl	8005846 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	f043 0210 	orr.w	r2, r3, #16
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f7ff ff37 	bl	8005680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005830:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800585c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff feef 	bl	8005680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b21      	cmp	r3, #33	; 0x21
 80058bc:	d144      	bne.n	8005948 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d11a      	bne.n	80058fe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058dc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d105      	bne.n	80058f2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	1c9a      	adds	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]
 80058f0:	e00e      	b.n	8005910 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]
 80058fc:	e008      	b.n	8005910 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6211      	str	r1, [r2, #32]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29b      	uxth	r3, r3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4619      	mov	r1, r3
 800591e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10f      	bne.n	8005944 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005932:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005942:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fb fdf2 	bl	8001560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b22      	cmp	r3, #34	; 0x22
 8005998:	d171      	bne.n	8005a7e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a2:	d123      	bne.n	80059ec <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10e      	bne.n	80059d0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	1c9a      	adds	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	629a      	str	r2, [r3, #40]	; 0x28
 80059ce:	e029      	b.n	8005a24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	629a      	str	r2, [r3, #40]	; 0x28
 80059ea:	e01b      	b.n	8005a24 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6858      	ldr	r0, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	1c59      	adds	r1, r3, #1
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6291      	str	r1, [r2, #40]	; 0x28
 8005a04:	b2c2      	uxtb	r2, r0
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e00c      	b.n	8005a24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	1c58      	adds	r0, r3, #1
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	6288      	str	r0, [r1, #40]	; 0x28
 8005a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4619      	mov	r1, r3
 8005a32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d120      	bne.n	8005a7a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0220 	bic.w	r2, r2, #32
 8005a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fb fd87 	bl	8001584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e002      	b.n	8005a80 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005aca:	f023 030c 	bic.w	r3, r3, #12
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af6:	f040 818b 	bne.w	8005e10 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4ac1      	ldr	r2, [pc, #772]	; (8005e04 <UART_SetConfig+0x37c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d005      	beq.n	8005b10 <UART_SetConfig+0x88>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4abf      	ldr	r2, [pc, #764]	; (8005e08 <UART_SetConfig+0x380>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	f040 80bd 	bne.w	8005c8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b10:	f7fe fdac 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8005b14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	461d      	mov	r5, r3
 8005b1a:	f04f 0600 	mov.w	r6, #0
 8005b1e:	46a8      	mov	r8, r5
 8005b20:	46b1      	mov	r9, r6
 8005b22:	eb18 0308 	adds.w	r3, r8, r8
 8005b26:	eb49 0409 	adc.w	r4, r9, r9
 8005b2a:	4698      	mov	r8, r3
 8005b2c:	46a1      	mov	r9, r4
 8005b2e:	eb18 0805 	adds.w	r8, r8, r5
 8005b32:	eb49 0906 	adc.w	r9, r9, r6
 8005b36:	f04f 0100 	mov.w	r1, #0
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b4a:	4688      	mov	r8, r1
 8005b4c:	4691      	mov	r9, r2
 8005b4e:	eb18 0005 	adds.w	r0, r8, r5
 8005b52:	eb49 0106 	adc.w	r1, r9, r6
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	461d      	mov	r5, r3
 8005b5c:	f04f 0600 	mov.w	r6, #0
 8005b60:	196b      	adds	r3, r5, r5
 8005b62:	eb46 0406 	adc.w	r4, r6, r6
 8005b66:	461a      	mov	r2, r3
 8005b68:	4623      	mov	r3, r4
 8005b6a:	f7fa fb35 	bl	80001d8 <__aeabi_uldivmod>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	460c      	mov	r4, r1
 8005b72:	461a      	mov	r2, r3
 8005b74:	4ba5      	ldr	r3, [pc, #660]	; (8005e0c <UART_SetConfig+0x384>)
 8005b76:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	461d      	mov	r5, r3
 8005b84:	f04f 0600 	mov.w	r6, #0
 8005b88:	46a9      	mov	r9, r5
 8005b8a:	46b2      	mov	sl, r6
 8005b8c:	eb19 0309 	adds.w	r3, r9, r9
 8005b90:	eb4a 040a 	adc.w	r4, sl, sl
 8005b94:	4699      	mov	r9, r3
 8005b96:	46a2      	mov	sl, r4
 8005b98:	eb19 0905 	adds.w	r9, r9, r5
 8005b9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4692      	mov	sl, r2
 8005bb8:	eb19 0005 	adds.w	r0, r9, r5
 8005bbc:	eb4a 0106 	adc.w	r1, sl, r6
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	f04f 0600 	mov.w	r6, #0
 8005bca:	196b      	adds	r3, r5, r5
 8005bcc:	eb46 0406 	adc.w	r4, r6, r6
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4623      	mov	r3, r4
 8005bd4:	f7fa fb00 	bl	80001d8 <__aeabi_uldivmod>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4b8b      	ldr	r3, [pc, #556]	; (8005e0c <UART_SetConfig+0x384>)
 8005be0:	fba3 1302 	umull	r1, r3, r3, r2
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	2164      	movs	r1, #100	; 0x64
 8005be8:	fb01 f303 	mul.w	r3, r1, r3
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	3332      	adds	r3, #50	; 0x32
 8005bf2:	4a86      	ldr	r2, [pc, #536]	; (8005e0c <UART_SetConfig+0x384>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c00:	4498      	add	r8, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	461d      	mov	r5, r3
 8005c06:	f04f 0600 	mov.w	r6, #0
 8005c0a:	46a9      	mov	r9, r5
 8005c0c:	46b2      	mov	sl, r6
 8005c0e:	eb19 0309 	adds.w	r3, r9, r9
 8005c12:	eb4a 040a 	adc.w	r4, sl, sl
 8005c16:	4699      	mov	r9, r3
 8005c18:	46a2      	mov	sl, r4
 8005c1a:	eb19 0905 	adds.w	r9, r9, r5
 8005c1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c22:	f04f 0100 	mov.w	r1, #0
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c36:	4689      	mov	r9, r1
 8005c38:	4692      	mov	sl, r2
 8005c3a:	eb19 0005 	adds.w	r0, r9, r5
 8005c3e:	eb4a 0106 	adc.w	r1, sl, r6
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	461d      	mov	r5, r3
 8005c48:	f04f 0600 	mov.w	r6, #0
 8005c4c:	196b      	adds	r3, r5, r5
 8005c4e:	eb46 0406 	adc.w	r4, r6, r6
 8005c52:	461a      	mov	r2, r3
 8005c54:	4623      	mov	r3, r4
 8005c56:	f7fa fabf 	bl	80001d8 <__aeabi_uldivmod>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4b6a      	ldr	r3, [pc, #424]	; (8005e0c <UART_SetConfig+0x384>)
 8005c62:	fba3 1302 	umull	r1, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	2164      	movs	r1, #100	; 0x64
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	3332      	adds	r3, #50	; 0x32
 8005c74:	4a65      	ldr	r2, [pc, #404]	; (8005e0c <UART_SetConfig+0x384>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	f003 0207 	and.w	r2, r3, #7
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4442      	add	r2, r8
 8005c86:	609a      	str	r2, [r3, #8]
 8005c88:	e26f      	b.n	800616a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c8a:	f7fe fcdb 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 8005c8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	461d      	mov	r5, r3
 8005c94:	f04f 0600 	mov.w	r6, #0
 8005c98:	46a8      	mov	r8, r5
 8005c9a:	46b1      	mov	r9, r6
 8005c9c:	eb18 0308 	adds.w	r3, r8, r8
 8005ca0:	eb49 0409 	adc.w	r4, r9, r9
 8005ca4:	4698      	mov	r8, r3
 8005ca6:	46a1      	mov	r9, r4
 8005ca8:	eb18 0805 	adds.w	r8, r8, r5
 8005cac:	eb49 0906 	adc.w	r9, r9, r6
 8005cb0:	f04f 0100 	mov.w	r1, #0
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cc4:	4688      	mov	r8, r1
 8005cc6:	4691      	mov	r9, r2
 8005cc8:	eb18 0005 	adds.w	r0, r8, r5
 8005ccc:	eb49 0106 	adc.w	r1, r9, r6
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	461d      	mov	r5, r3
 8005cd6:	f04f 0600 	mov.w	r6, #0
 8005cda:	196b      	adds	r3, r5, r5
 8005cdc:	eb46 0406 	adc.w	r4, r6, r6
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4623      	mov	r3, r4
 8005ce4:	f7fa fa78 	bl	80001d8 <__aeabi_uldivmod>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	461a      	mov	r2, r3
 8005cee:	4b47      	ldr	r3, [pc, #284]	; (8005e0c <UART_SetConfig+0x384>)
 8005cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	461d      	mov	r5, r3
 8005cfe:	f04f 0600 	mov.w	r6, #0
 8005d02:	46a9      	mov	r9, r5
 8005d04:	46b2      	mov	sl, r6
 8005d06:	eb19 0309 	adds.w	r3, r9, r9
 8005d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d0e:	4699      	mov	r9, r3
 8005d10:	46a2      	mov	sl, r4
 8005d12:	eb19 0905 	adds.w	r9, r9, r5
 8005d16:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d2e:	4689      	mov	r9, r1
 8005d30:	4692      	mov	sl, r2
 8005d32:	eb19 0005 	adds.w	r0, r9, r5
 8005d36:	eb4a 0106 	adc.w	r1, sl, r6
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	461d      	mov	r5, r3
 8005d40:	f04f 0600 	mov.w	r6, #0
 8005d44:	196b      	adds	r3, r5, r5
 8005d46:	eb46 0406 	adc.w	r4, r6, r6
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	f7fa fa43 	bl	80001d8 <__aeabi_uldivmod>
 8005d52:	4603      	mov	r3, r0
 8005d54:	460c      	mov	r4, r1
 8005d56:	461a      	mov	r2, r3
 8005d58:	4b2c      	ldr	r3, [pc, #176]	; (8005e0c <UART_SetConfig+0x384>)
 8005d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2164      	movs	r1, #100	; 0x64
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <UART_SetConfig+0x384>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d7a:	4498      	add	r8, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	461d      	mov	r5, r3
 8005d80:	f04f 0600 	mov.w	r6, #0
 8005d84:	46a9      	mov	r9, r5
 8005d86:	46b2      	mov	sl, r6
 8005d88:	eb19 0309 	adds.w	r3, r9, r9
 8005d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d90:	4699      	mov	r9, r3
 8005d92:	46a2      	mov	sl, r4
 8005d94:	eb19 0905 	adds.w	r9, r9, r5
 8005d98:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d9c:	f04f 0100 	mov.w	r1, #0
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db0:	4689      	mov	r9, r1
 8005db2:	4692      	mov	sl, r2
 8005db4:	eb19 0005 	adds.w	r0, r9, r5
 8005db8:	eb4a 0106 	adc.w	r1, sl, r6
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	f04f 0600 	mov.w	r6, #0
 8005dc6:	196b      	adds	r3, r5, r5
 8005dc8:	eb46 0406 	adc.w	r4, r6, r6
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	f7fa fa02 	bl	80001d8 <__aeabi_uldivmod>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <UART_SetConfig+0x384>)
 8005ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	2164      	movs	r1, #100	; 0x64
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	3332      	adds	r3, #50	; 0x32
 8005dee:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <UART_SetConfig+0x384>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	f003 0207 	and.w	r2, r3, #7
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4442      	add	r2, r8
 8005e00:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e02:	e1b2      	b.n	800616a <UART_SetConfig+0x6e2>
 8005e04:	40011000 	.word	0x40011000
 8005e08:	40011400 	.word	0x40011400
 8005e0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4ad7      	ldr	r2, [pc, #860]	; (8006174 <UART_SetConfig+0x6ec>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d005      	beq.n	8005e26 <UART_SetConfig+0x39e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4ad6      	ldr	r2, [pc, #856]	; (8006178 <UART_SetConfig+0x6f0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	f040 80d1 	bne.w	8005fc8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e26:	f7fe fc21 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8005e2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	469a      	mov	sl, r3
 8005e30:	f04f 0b00 	mov.w	fp, #0
 8005e34:	46d0      	mov	r8, sl
 8005e36:	46d9      	mov	r9, fp
 8005e38:	eb18 0308 	adds.w	r3, r8, r8
 8005e3c:	eb49 0409 	adc.w	r4, r9, r9
 8005e40:	4698      	mov	r8, r3
 8005e42:	46a1      	mov	r9, r4
 8005e44:	eb18 080a 	adds.w	r8, r8, sl
 8005e48:	eb49 090b 	adc.w	r9, r9, fp
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e60:	4688      	mov	r8, r1
 8005e62:	4691      	mov	r9, r2
 8005e64:	eb1a 0508 	adds.w	r5, sl, r8
 8005e68:	eb4b 0609 	adc.w	r6, fp, r9
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	f04f 0400 	mov.w	r4, #0
 8005e7e:	0094      	lsls	r4, r2, #2
 8005e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e84:	008b      	lsls	r3, r1, #2
 8005e86:	461a      	mov	r2, r3
 8005e88:	4623      	mov	r3, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	f7fa f9a3 	bl	80001d8 <__aeabi_uldivmod>
 8005e92:	4603      	mov	r3, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	461a      	mov	r2, r3
 8005e98:	4bb8      	ldr	r3, [pc, #736]	; (800617c <UART_SetConfig+0x6f4>)
 8005e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	469b      	mov	fp, r3
 8005ea8:	f04f 0c00 	mov.w	ip, #0
 8005eac:	46d9      	mov	r9, fp
 8005eae:	46e2      	mov	sl, ip
 8005eb0:	eb19 0309 	adds.w	r3, r9, r9
 8005eb4:	eb4a 040a 	adc.w	r4, sl, sl
 8005eb8:	4699      	mov	r9, r3
 8005eba:	46a2      	mov	sl, r4
 8005ebc:	eb19 090b 	adds.w	r9, r9, fp
 8005ec0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ec4:	f04f 0100 	mov.w	r1, #0
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ed4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ed8:	4689      	mov	r9, r1
 8005eda:	4692      	mov	sl, r2
 8005edc:	eb1b 0509 	adds.w	r5, fp, r9
 8005ee0:	eb4c 060a 	adc.w	r6, ip, sl
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	f04f 0400 	mov.w	r4, #0
 8005ef6:	0094      	lsls	r4, r2, #2
 8005ef8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005efc:	008b      	lsls	r3, r1, #2
 8005efe:	461a      	mov	r2, r3
 8005f00:	4623      	mov	r3, r4
 8005f02:	4628      	mov	r0, r5
 8005f04:	4631      	mov	r1, r6
 8005f06:	f7fa f967 	bl	80001d8 <__aeabi_uldivmod>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b9a      	ldr	r3, [pc, #616]	; (800617c <UART_SetConfig+0x6f4>)
 8005f12:	fba3 1302 	umull	r1, r3, r3, r2
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2164      	movs	r1, #100	; 0x64
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	3332      	adds	r3, #50	; 0x32
 8005f24:	4a95      	ldr	r2, [pc, #596]	; (800617c <UART_SetConfig+0x6f4>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f30:	4498      	add	r8, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	469b      	mov	fp, r3
 8005f36:	f04f 0c00 	mov.w	ip, #0
 8005f3a:	46d9      	mov	r9, fp
 8005f3c:	46e2      	mov	sl, ip
 8005f3e:	eb19 0309 	adds.w	r3, r9, r9
 8005f42:	eb4a 040a 	adc.w	r4, sl, sl
 8005f46:	4699      	mov	r9, r3
 8005f48:	46a2      	mov	sl, r4
 8005f4a:	eb19 090b 	adds.w	r9, r9, fp
 8005f4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f66:	4689      	mov	r9, r1
 8005f68:	4692      	mov	sl, r2
 8005f6a:	eb1b 0509 	adds.w	r5, fp, r9
 8005f6e:	eb4c 060a 	adc.w	r6, ip, sl
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	f04f 0400 	mov.w	r4, #0
 8005f84:	0094      	lsls	r4, r2, #2
 8005f86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f8a:	008b      	lsls	r3, r1, #2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	4628      	mov	r0, r5
 8005f92:	4631      	mov	r1, r6
 8005f94:	f7fa f920 	bl	80001d8 <__aeabi_uldivmod>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b77      	ldr	r3, [pc, #476]	; (800617c <UART_SetConfig+0x6f4>)
 8005fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	2164      	movs	r1, #100	; 0x64
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	3332      	adds	r3, #50	; 0x32
 8005fb2:	4a72      	ldr	r2, [pc, #456]	; (800617c <UART_SetConfig+0x6f4>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4442      	add	r2, r8
 8005fc4:	609a      	str	r2, [r3, #8]
 8005fc6:	e0d0      	b.n	800616a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f7fe fb3c 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 8005fcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	469a      	mov	sl, r3
 8005fd2:	f04f 0b00 	mov.w	fp, #0
 8005fd6:	46d0      	mov	r8, sl
 8005fd8:	46d9      	mov	r9, fp
 8005fda:	eb18 0308 	adds.w	r3, r8, r8
 8005fde:	eb49 0409 	adc.w	r4, r9, r9
 8005fe2:	4698      	mov	r8, r3
 8005fe4:	46a1      	mov	r9, r4
 8005fe6:	eb18 080a 	adds.w	r8, r8, sl
 8005fea:	eb49 090b 	adc.w	r9, r9, fp
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ffa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ffe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006002:	4688      	mov	r8, r1
 8006004:	4691      	mov	r9, r2
 8006006:	eb1a 0508 	adds.w	r5, sl, r8
 800600a:	eb4b 0609 	adc.w	r6, fp, r9
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4619      	mov	r1, r3
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	f04f 0400 	mov.w	r4, #0
 8006020:	0094      	lsls	r4, r2, #2
 8006022:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006026:	008b      	lsls	r3, r1, #2
 8006028:	461a      	mov	r2, r3
 800602a:	4623      	mov	r3, r4
 800602c:	4628      	mov	r0, r5
 800602e:	4631      	mov	r1, r6
 8006030:	f7fa f8d2 	bl	80001d8 <__aeabi_uldivmod>
 8006034:	4603      	mov	r3, r0
 8006036:	460c      	mov	r4, r1
 8006038:	461a      	mov	r2, r3
 800603a:	4b50      	ldr	r3, [pc, #320]	; (800617c <UART_SetConfig+0x6f4>)
 800603c:	fba3 2302 	umull	r2, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	469b      	mov	fp, r3
 800604a:	f04f 0c00 	mov.w	ip, #0
 800604e:	46d9      	mov	r9, fp
 8006050:	46e2      	mov	sl, ip
 8006052:	eb19 0309 	adds.w	r3, r9, r9
 8006056:	eb4a 040a 	adc.w	r4, sl, sl
 800605a:	4699      	mov	r9, r3
 800605c:	46a2      	mov	sl, r4
 800605e:	eb19 090b 	adds.w	r9, r9, fp
 8006062:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006066:	f04f 0100 	mov.w	r1, #0
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006072:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006076:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800607a:	4689      	mov	r9, r1
 800607c:	4692      	mov	sl, r2
 800607e:	eb1b 0509 	adds.w	r5, fp, r9
 8006082:	eb4c 060a 	adc.w	r6, ip, sl
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	4619      	mov	r1, r3
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	f04f 0400 	mov.w	r4, #0
 8006098:	0094      	lsls	r4, r2, #2
 800609a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800609e:	008b      	lsls	r3, r1, #2
 80060a0:	461a      	mov	r2, r3
 80060a2:	4623      	mov	r3, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	4631      	mov	r1, r6
 80060a8:	f7fa f896 	bl	80001d8 <__aeabi_uldivmod>
 80060ac:	4603      	mov	r3, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b32      	ldr	r3, [pc, #200]	; (800617c <UART_SetConfig+0x6f4>)
 80060b4:	fba3 1302 	umull	r1, r3, r3, r2
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	2164      	movs	r1, #100	; 0x64
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	3332      	adds	r3, #50	; 0x32
 80060c6:	4a2d      	ldr	r2, [pc, #180]	; (800617c <UART_SetConfig+0x6f4>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d2:	4498      	add	r8, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	469b      	mov	fp, r3
 80060d8:	f04f 0c00 	mov.w	ip, #0
 80060dc:	46d9      	mov	r9, fp
 80060de:	46e2      	mov	sl, ip
 80060e0:	eb19 0309 	adds.w	r3, r9, r9
 80060e4:	eb4a 040a 	adc.w	r4, sl, sl
 80060e8:	4699      	mov	r9, r3
 80060ea:	46a2      	mov	sl, r4
 80060ec:	eb19 090b 	adds.w	r9, r9, fp
 80060f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060f4:	f04f 0100 	mov.w	r1, #0
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006108:	4689      	mov	r9, r1
 800610a:	4692      	mov	sl, r2
 800610c:	eb1b 0509 	adds.w	r5, fp, r9
 8006110:	eb4c 060a 	adc.w	r6, ip, sl
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4619      	mov	r1, r3
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	f04f 0400 	mov.w	r4, #0
 8006126:	0094      	lsls	r4, r2, #2
 8006128:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800612c:	008b      	lsls	r3, r1, #2
 800612e:	461a      	mov	r2, r3
 8006130:	4623      	mov	r3, r4
 8006132:	4628      	mov	r0, r5
 8006134:	4631      	mov	r1, r6
 8006136:	f7fa f84f 	bl	80001d8 <__aeabi_uldivmod>
 800613a:	4603      	mov	r3, r0
 800613c:	460c      	mov	r4, r1
 800613e:	461a      	mov	r2, r3
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <UART_SetConfig+0x6f4>)
 8006142:	fba3 1302 	umull	r1, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2164      	movs	r1, #100	; 0x64
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	3332      	adds	r3, #50	; 0x32
 8006154:	4a09      	ldr	r2, [pc, #36]	; (800617c <UART_SetConfig+0x6f4>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4442      	add	r2, r8
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	e7ff      	b.n	800616a <UART_SetConfig+0x6e2>
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006174:	40011000 	.word	0x40011000
 8006178:	40011400 	.word	0x40011400
 800617c:	51eb851f 	.word	0x51eb851f

08006180 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0a5a      	lsrs	r2, r3, #9
 8006190:	490f      	ldr	r1, [pc, #60]	; (80061d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006192:	fba1 1202 	umull	r1, r2, r1, r2
 8006196:	09d2      	lsrs	r2, r2, #7
 8006198:	490e      	ldr	r1, [pc, #56]	; (80061d4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800619a:	fb01 f202 	mul.w	r2, r1, r2
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	0a5b      	lsrs	r3, r3, #9
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	441a      	add	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	00044b83 	.word	0x00044b83
 80061d4:	3b9aca00 	.word	0x3b9aca00

080061d8 <__cxa_pure_virtual>:
 80061d8:	b508      	push	{r3, lr}
 80061da:	f000 f80d 	bl	80061f8 <_ZSt9terminatev>

080061de <_ZN10__cxxabiv111__terminateEPFvvE>:
 80061de:	b508      	push	{r3, lr}
 80061e0:	4780      	blx	r0
 80061e2:	f000 f80e 	bl	8006202 <abort>
	...

080061e8 <_ZSt13get_terminatev>:
 80061e8:	4b02      	ldr	r3, [pc, #8]	; (80061f4 <_ZSt13get_terminatev+0xc>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	f3bf 8f5b 	dmb	ish
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	2000001c 	.word	0x2000001c

080061f8 <_ZSt9terminatev>:
 80061f8:	b508      	push	{r3, lr}
 80061fa:	f7ff fff5 	bl	80061e8 <_ZSt13get_terminatev>
 80061fe:	f7ff ffee 	bl	80061de <_ZN10__cxxabiv111__terminateEPFvvE>

08006202 <abort>:
 8006202:	b508      	push	{r3, lr}
 8006204:	2006      	movs	r0, #6
 8006206:	f000 f871 	bl	80062ec <raise>
 800620a:	2001      	movs	r0, #1
 800620c:	f7fc fd16 	bl	8002c3c <_exit>

08006210 <__errno>:
 8006210:	4b01      	ldr	r3, [pc, #4]	; (8006218 <__errno+0x8>)
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000020 	.word	0x20000020

0800621c <__libc_init_array>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4e0d      	ldr	r6, [pc, #52]	; (8006254 <__libc_init_array+0x38>)
 8006220:	4c0d      	ldr	r4, [pc, #52]	; (8006258 <__libc_init_array+0x3c>)
 8006222:	1ba4      	subs	r4, r4, r6
 8006224:	10a4      	asrs	r4, r4, #2
 8006226:	2500      	movs	r5, #0
 8006228:	42a5      	cmp	r5, r4
 800622a:	d109      	bne.n	8006240 <__libc_init_array+0x24>
 800622c:	4e0b      	ldr	r6, [pc, #44]	; (800625c <__libc_init_array+0x40>)
 800622e:	4c0c      	ldr	r4, [pc, #48]	; (8006260 <__libc_init_array+0x44>)
 8006230:	f000 f960 	bl	80064f4 <_init>
 8006234:	1ba4      	subs	r4, r4, r6
 8006236:	10a4      	asrs	r4, r4, #2
 8006238:	2500      	movs	r5, #0
 800623a:	42a5      	cmp	r5, r4
 800623c:	d105      	bne.n	800624a <__libc_init_array+0x2e>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006244:	4798      	blx	r3
 8006246:	3501      	adds	r5, #1
 8006248:	e7ee      	b.n	8006228 <__libc_init_array+0xc>
 800624a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800624e:	4798      	blx	r3
 8006250:	3501      	adds	r5, #1
 8006252:	e7f2      	b.n	800623a <__libc_init_array+0x1e>
 8006254:	08006754 	.word	0x08006754
 8006258:	08006754 	.word	0x08006754
 800625c:	08006754 	.word	0x08006754
 8006260:	0800675c 	.word	0x0800675c

08006264 <memcpy>:
 8006264:	b510      	push	{r4, lr}
 8006266:	1e43      	subs	r3, r0, #1
 8006268:	440a      	add	r2, r1
 800626a:	4291      	cmp	r1, r2
 800626c:	d100      	bne.n	8006270 <memcpy+0xc>
 800626e:	bd10      	pop	{r4, pc}
 8006270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006278:	e7f7      	b.n	800626a <memcpy+0x6>

0800627a <memset>:
 800627a:	4402      	add	r2, r0
 800627c:	4603      	mov	r3, r0
 800627e:	4293      	cmp	r3, r2
 8006280:	d100      	bne.n	8006284 <memset+0xa>
 8006282:	4770      	bx	lr
 8006284:	f803 1b01 	strb.w	r1, [r3], #1
 8006288:	e7f9      	b.n	800627e <memset+0x4>
	...

0800628c <realloc>:
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <realloc+0xc>)
 800628e:	460a      	mov	r2, r1
 8006290:	4601      	mov	r1, r0
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f000 b8a0 	b.w	80063d8 <_realloc_r>
 8006298:	20000020 	.word	0x20000020

0800629c <_raise_r>:
 800629c:	291f      	cmp	r1, #31
 800629e:	b538      	push	{r3, r4, r5, lr}
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
 80062a4:	d904      	bls.n	80062b0 <_raise_r+0x14>
 80062a6:	2316      	movs	r3, #22
 80062a8:	6003      	str	r3, [r0, #0]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062b2:	b112      	cbz	r2, 80062ba <_raise_r+0x1e>
 80062b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062b8:	b94b      	cbnz	r3, 80062ce <_raise_r+0x32>
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 f830 	bl	8006320 <_getpid_r>
 80062c0:	462a      	mov	r2, r5
 80062c2:	4601      	mov	r1, r0
 80062c4:	4620      	mov	r0, r4
 80062c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ca:	f000 b817 	b.w	80062fc <_kill_r>
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d00a      	beq.n	80062e8 <_raise_r+0x4c>
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	d103      	bne.n	80062de <_raise_r+0x42>
 80062d6:	2316      	movs	r3, #22
 80062d8:	6003      	str	r3, [r0, #0]
 80062da:	2001      	movs	r0, #1
 80062dc:	e7e7      	b.n	80062ae <_raise_r+0x12>
 80062de:	2400      	movs	r4, #0
 80062e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062e4:	4628      	mov	r0, r5
 80062e6:	4798      	blx	r3
 80062e8:	2000      	movs	r0, #0
 80062ea:	e7e0      	b.n	80062ae <_raise_r+0x12>

080062ec <raise>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <raise+0xc>)
 80062ee:	4601      	mov	r1, r0
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f7ff bfd3 	b.w	800629c <_raise_r>
 80062f6:	bf00      	nop
 80062f8:	20000020 	.word	0x20000020

080062fc <_kill_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4c07      	ldr	r4, [pc, #28]	; (800631c <_kill_r+0x20>)
 8006300:	2300      	movs	r3, #0
 8006302:	4605      	mov	r5, r0
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	f7fc fc87 	bl	8002c1c <_kill>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d102      	bne.n	8006318 <_kill_r+0x1c>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	b103      	cbz	r3, 8006318 <_kill_r+0x1c>
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	bd38      	pop	{r3, r4, r5, pc}
 800631a:	bf00      	nop
 800631c:	20000c20 	.word	0x20000c20

08006320 <_getpid_r>:
 8006320:	f7fc bc74 	b.w	8002c0c <_getpid>

08006324 <_malloc_r>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	1ccd      	adds	r5, r1, #3
 8006328:	f025 0503 	bic.w	r5, r5, #3
 800632c:	3508      	adds	r5, #8
 800632e:	2d0c      	cmp	r5, #12
 8006330:	bf38      	it	cc
 8006332:	250c      	movcc	r5, #12
 8006334:	2d00      	cmp	r5, #0
 8006336:	4606      	mov	r6, r0
 8006338:	db01      	blt.n	800633e <_malloc_r+0x1a>
 800633a:	42a9      	cmp	r1, r5
 800633c:	d903      	bls.n	8006346 <_malloc_r+0x22>
 800633e:	230c      	movs	r3, #12
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	2000      	movs	r0, #0
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	f000 f87d 	bl	8006444 <__malloc_lock>
 800634a:	4a21      	ldr	r2, [pc, #132]	; (80063d0 <_malloc_r+0xac>)
 800634c:	6814      	ldr	r4, [r2, #0]
 800634e:	4621      	mov	r1, r4
 8006350:	b991      	cbnz	r1, 8006378 <_malloc_r+0x54>
 8006352:	4c20      	ldr	r4, [pc, #128]	; (80063d4 <_malloc_r+0xb0>)
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	b91b      	cbnz	r3, 8006360 <_malloc_r+0x3c>
 8006358:	4630      	mov	r0, r6
 800635a:	f000 f863 	bl	8006424 <_sbrk_r>
 800635e:	6020      	str	r0, [r4, #0]
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f000 f85e 	bl	8006424 <_sbrk_r>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d124      	bne.n	80063b6 <_malloc_r+0x92>
 800636c:	230c      	movs	r3, #12
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	4630      	mov	r0, r6
 8006372:	f000 f868 	bl	8006446 <__malloc_unlock>
 8006376:	e7e4      	b.n	8006342 <_malloc_r+0x1e>
 8006378:	680b      	ldr	r3, [r1, #0]
 800637a:	1b5b      	subs	r3, r3, r5
 800637c:	d418      	bmi.n	80063b0 <_malloc_r+0x8c>
 800637e:	2b0b      	cmp	r3, #11
 8006380:	d90f      	bls.n	80063a2 <_malloc_r+0x7e>
 8006382:	600b      	str	r3, [r1, #0]
 8006384:	50cd      	str	r5, [r1, r3]
 8006386:	18cc      	adds	r4, r1, r3
 8006388:	4630      	mov	r0, r6
 800638a:	f000 f85c 	bl	8006446 <__malloc_unlock>
 800638e:	f104 000b 	add.w	r0, r4, #11
 8006392:	1d23      	adds	r3, r4, #4
 8006394:	f020 0007 	bic.w	r0, r0, #7
 8006398:	1ac3      	subs	r3, r0, r3
 800639a:	d0d3      	beq.n	8006344 <_malloc_r+0x20>
 800639c:	425a      	negs	r2, r3
 800639e:	50e2      	str	r2, [r4, r3]
 80063a0:	e7d0      	b.n	8006344 <_malloc_r+0x20>
 80063a2:	428c      	cmp	r4, r1
 80063a4:	684b      	ldr	r3, [r1, #4]
 80063a6:	bf16      	itet	ne
 80063a8:	6063      	strne	r3, [r4, #4]
 80063aa:	6013      	streq	r3, [r2, #0]
 80063ac:	460c      	movne	r4, r1
 80063ae:	e7eb      	b.n	8006388 <_malloc_r+0x64>
 80063b0:	460c      	mov	r4, r1
 80063b2:	6849      	ldr	r1, [r1, #4]
 80063b4:	e7cc      	b.n	8006350 <_malloc_r+0x2c>
 80063b6:	1cc4      	adds	r4, r0, #3
 80063b8:	f024 0403 	bic.w	r4, r4, #3
 80063bc:	42a0      	cmp	r0, r4
 80063be:	d005      	beq.n	80063cc <_malloc_r+0xa8>
 80063c0:	1a21      	subs	r1, r4, r0
 80063c2:	4630      	mov	r0, r6
 80063c4:	f000 f82e 	bl	8006424 <_sbrk_r>
 80063c8:	3001      	adds	r0, #1
 80063ca:	d0cf      	beq.n	800636c <_malloc_r+0x48>
 80063cc:	6025      	str	r5, [r4, #0]
 80063ce:	e7db      	b.n	8006388 <_malloc_r+0x64>
 80063d0:	20000c14 	.word	0x20000c14
 80063d4:	20000c18 	.word	0x20000c18

080063d8 <_realloc_r>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	4607      	mov	r7, r0
 80063dc:	4614      	mov	r4, r2
 80063de:	460e      	mov	r6, r1
 80063e0:	b921      	cbnz	r1, 80063ec <_realloc_r+0x14>
 80063e2:	4611      	mov	r1, r2
 80063e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063e8:	f7ff bf9c 	b.w	8006324 <_malloc_r>
 80063ec:	b922      	cbnz	r2, 80063f8 <_realloc_r+0x20>
 80063ee:	f000 f82b 	bl	8006448 <_free_r>
 80063f2:	4625      	mov	r5, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f8:	f000 f874 	bl	80064e4 <_malloc_usable_size_r>
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d20f      	bcs.n	8006420 <_realloc_r+0x48>
 8006400:	4621      	mov	r1, r4
 8006402:	4638      	mov	r0, r7
 8006404:	f7ff ff8e 	bl	8006324 <_malloc_r>
 8006408:	4605      	mov	r5, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	d0f2      	beq.n	80063f4 <_realloc_r+0x1c>
 800640e:	4631      	mov	r1, r6
 8006410:	4622      	mov	r2, r4
 8006412:	f7ff ff27 	bl	8006264 <memcpy>
 8006416:	4631      	mov	r1, r6
 8006418:	4638      	mov	r0, r7
 800641a:	f000 f815 	bl	8006448 <_free_r>
 800641e:	e7e9      	b.n	80063f4 <_realloc_r+0x1c>
 8006420:	4635      	mov	r5, r6
 8006422:	e7e7      	b.n	80063f4 <_realloc_r+0x1c>

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4c06      	ldr	r4, [pc, #24]	; (8006440 <_sbrk_r+0x1c>)
 8006428:	2300      	movs	r3, #0
 800642a:	4605      	mov	r5, r0
 800642c:	4608      	mov	r0, r1
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	f7fc fc0e 	bl	8002c50 <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20000c20 	.word	0x20000c20

08006444 <__malloc_lock>:
 8006444:	4770      	bx	lr

08006446 <__malloc_unlock>:
 8006446:	4770      	bx	lr

08006448 <_free_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4605      	mov	r5, r0
 800644c:	2900      	cmp	r1, #0
 800644e:	d045      	beq.n	80064dc <_free_r+0x94>
 8006450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006454:	1f0c      	subs	r4, r1, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	bfb8      	it	lt
 800645a:	18e4      	addlt	r4, r4, r3
 800645c:	f7ff fff2 	bl	8006444 <__malloc_lock>
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <_free_r+0x98>)
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	4610      	mov	r0, r2
 8006466:	b933      	cbnz	r3, 8006476 <_free_r+0x2e>
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	6014      	str	r4, [r2, #0]
 800646c:	4628      	mov	r0, r5
 800646e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006472:	f7ff bfe8 	b.w	8006446 <__malloc_unlock>
 8006476:	42a3      	cmp	r3, r4
 8006478:	d90c      	bls.n	8006494 <_free_r+0x4c>
 800647a:	6821      	ldr	r1, [r4, #0]
 800647c:	1862      	adds	r2, r4, r1
 800647e:	4293      	cmp	r3, r2
 8006480:	bf04      	itt	eq
 8006482:	681a      	ldreq	r2, [r3, #0]
 8006484:	685b      	ldreq	r3, [r3, #4]
 8006486:	6063      	str	r3, [r4, #4]
 8006488:	bf04      	itt	eq
 800648a:	1852      	addeq	r2, r2, r1
 800648c:	6022      	streq	r2, [r4, #0]
 800648e:	6004      	str	r4, [r0, #0]
 8006490:	e7ec      	b.n	800646c <_free_r+0x24>
 8006492:	4613      	mov	r3, r2
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	b10a      	cbz	r2, 800649c <_free_r+0x54>
 8006498:	42a2      	cmp	r2, r4
 800649a:	d9fa      	bls.n	8006492 <_free_r+0x4a>
 800649c:	6819      	ldr	r1, [r3, #0]
 800649e:	1858      	adds	r0, r3, r1
 80064a0:	42a0      	cmp	r0, r4
 80064a2:	d10b      	bne.n	80064bc <_free_r+0x74>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	4401      	add	r1, r0
 80064a8:	1858      	adds	r0, r3, r1
 80064aa:	4282      	cmp	r2, r0
 80064ac:	6019      	str	r1, [r3, #0]
 80064ae:	d1dd      	bne.n	800646c <_free_r+0x24>
 80064b0:	6810      	ldr	r0, [r2, #0]
 80064b2:	6852      	ldr	r2, [r2, #4]
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	4401      	add	r1, r0
 80064b8:	6019      	str	r1, [r3, #0]
 80064ba:	e7d7      	b.n	800646c <_free_r+0x24>
 80064bc:	d902      	bls.n	80064c4 <_free_r+0x7c>
 80064be:	230c      	movs	r3, #12
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	e7d3      	b.n	800646c <_free_r+0x24>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	1821      	adds	r1, r4, r0
 80064c8:	428a      	cmp	r2, r1
 80064ca:	bf04      	itt	eq
 80064cc:	6811      	ldreq	r1, [r2, #0]
 80064ce:	6852      	ldreq	r2, [r2, #4]
 80064d0:	6062      	str	r2, [r4, #4]
 80064d2:	bf04      	itt	eq
 80064d4:	1809      	addeq	r1, r1, r0
 80064d6:	6021      	streq	r1, [r4, #0]
 80064d8:	605c      	str	r4, [r3, #4]
 80064da:	e7c7      	b.n	800646c <_free_r+0x24>
 80064dc:	bd38      	pop	{r3, r4, r5, pc}
 80064de:	bf00      	nop
 80064e0:	20000c14 	.word	0x20000c14

080064e4 <_malloc_usable_size_r>:
 80064e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e8:	1f18      	subs	r0, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bfbc      	itt	lt
 80064ee:	580b      	ldrlt	r3, [r1, r0]
 80064f0:	18c0      	addlt	r0, r0, r3
 80064f2:	4770      	bx	lr

080064f4 <_init>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	bf00      	nop
 80064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fa:	bc08      	pop	{r3}
 80064fc:	469e      	mov	lr, r3
 80064fe:	4770      	bx	lr

08006500 <_fini>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr
