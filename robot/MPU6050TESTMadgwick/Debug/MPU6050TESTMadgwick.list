
MPU6050TESTMadgwick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008384  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08008518  08008518  00018518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008940  08008940  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008948  08008948  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e4  08008b34  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08008b34  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b78e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca7  00000000  00000000  0002b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  0002d650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  0002e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a71  00000000  00000000  0002ea38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000896c  00000000  00000000  000504a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8143  00000000  00000000  00058e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a4c  00000000  00000000  00120fd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084fc 	.word	0x080084fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080084fc 	.word	0x080084fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09c      	sub	sp, #112	; 0x70
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f52:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f56:	ed87 1a03 	vstr	s2, [r7, #12]
 8000f5a:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f5e:	ed87 2a01 	vstr	s4, [r7, #4]
 8000f62:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000f66:	4bee      	ldr	r3, [pc, #952]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	eeb1 7a67 	vneg.f32	s14, s15
 8000f70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f78:	4bea      	ldr	r3, [pc, #936]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 8000f7a:	edd3 6a00 	vldr	s13, [r3]
 8000f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f8a:	4be7      	ldr	r3, [pc, #924]	; (8001328 <MadgwickAHRSupdateIMU+0x3e0>)
 8000f8c:	edd3 6a00 	vldr	s13, [r3]
 8000f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000fa8:	4be0      	ldr	r3, [pc, #896]	; (800132c <MadgwickAHRSupdateIMU+0x3e4>)
 8000faa:	ed93 7a00 	vldr	s14, [r3]
 8000fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	4bdb      	ldr	r3, [pc, #876]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 8000fb8:	edd3 6a00 	vldr	s13, [r3]
 8000fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc8:	4bd7      	ldr	r3, [pc, #860]	; (8001328 <MadgwickAHRSupdateIMU+0x3e0>)
 8000fca:	edd3 6a00 	vldr	s13, [r3]
 8000fce:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000fe6:	4bd1      	ldr	r3, [pc, #836]	; (800132c <MadgwickAHRSupdateIMU+0x3e4>)
 8000fe8:	ed93 7a00 	vldr	s14, [r3]
 8000fec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ff0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff4:	4bca      	ldr	r3, [pc, #808]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 8000ff6:	edd3 6a00 	vldr	s13, [r3]
 8000ffa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001002:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001006:	4bc8      	ldr	r3, [pc, #800]	; (8001328 <MadgwickAHRSupdateIMU+0x3e0>)
 8001008:	edd3 6a00 	vldr	s13, [r3]
 800100c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800101c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001020:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001024:	4bc1      	ldr	r3, [pc, #772]	; (800132c <MadgwickAHRSupdateIMU+0x3e4>)
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	edd7 7a03 	vldr	s15, [r7, #12]
 800102e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001032:	4bbb      	ldr	r3, [pc, #748]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 8001034:	edd3 6a00 	vldr	s13, [r3]
 8001038:	edd7 7a04 	vldr	s15, [r7, #16]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001044:	4bb7      	ldr	r3, [pc, #732]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 8001046:	edd3 6a00 	vldr	s13, [r3]
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001056:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800105a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001062:	edd7 7a02 	vldr	s15, [r7, #8]
 8001066:	eef5 7a40 	vcmp.f32	s15, #0.0
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	d10e      	bne.n	800108e <MadgwickAHRSupdateIMU+0x146>
 8001070:	edd7 7a01 	vldr	s15, [r7, #4]
 8001074:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	d107      	bne.n	800108e <MadgwickAHRSupdateIMU+0x146>
 800107e:	edd7 7a00 	vldr	s15, [r7]
 8001082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	f000 81f3 	beq.w	8001474 <MadgwickAHRSupdateIMU+0x52c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800108e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001092:	edd7 7a02 	vldr	s15, [r7, #8]
 8001096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800109a:	edd7 6a01 	vldr	s13, [r7, #4]
 800109e:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010aa:	edd7 6a00 	vldr	s13, [r7]
 80010ae:	edd7 7a00 	vldr	s15, [r7]
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f000 fa75 	bl	80015ac <invSqrt>
 80010c2:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 80010c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80010d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80010da:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 80010e6:	ed97 7a00 	vldr	s14, [r7]
 80010ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80010ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80010f6:	4b8d      	ldr	r3, [pc, #564]	; (800132c <MadgwickAHRSupdateIMU+0x3e4>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001100:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001104:	4b86      	ldr	r3, [pc, #536]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800110e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001112:	4b84      	ldr	r3, [pc, #528]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800111c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001120:	4b81      	ldr	r3, [pc, #516]	; (8001328 <MadgwickAHRSupdateIMU+0x3e0>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800112a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 800112e:	4b7f      	ldr	r3, [pc, #508]	; (800132c <MadgwickAHRSupdateIMU+0x3e4>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001140:	4b77      	ldr	r3, [pc, #476]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001152:	4b74      	ldr	r3, [pc, #464]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001164:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001176:	4b6b      	ldr	r3, [pc, #428]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <MadgwickAHRSupdateIMU+0x3e4>)
 800118a:	ed93 7a00 	vldr	s14, [r3]
 800118e:	4b67      	ldr	r3, [pc, #412]	; (800132c <MadgwickAHRSupdateIMU+0x3e4>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001198:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 800119c:	4b60      	ldr	r3, [pc, #384]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 800119e:	ed93 7a00 	vldr	s14, [r3]
 80011a2:	4b5f      	ldr	r3, [pc, #380]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 80011b0:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 80011c4:	4b58      	ldr	r3, [pc, #352]	; (8001328 <MadgwickAHRSupdateIMU+0x3e0>)
 80011c6:	ed93 7a00 	vldr	s14, [r3]
 80011ca:	4b57      	ldr	r3, [pc, #348]	; (8001328 <MadgwickAHRSupdateIMU+0x3e0>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80011d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80011dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011f4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001204:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001208:	edd7 7a01 	vldr	s15, [r7, #4]
 800120c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001218:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800121c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001224:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001228:	edd7 7a02 	vldr	s15, [r7, #8]
 800122c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001230:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001234:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001238:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800123c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <MadgwickAHRSupdateIMU+0x3d8>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800124e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001252:	edd7 7a01 	vldr	s15, [r7, #4]
 8001256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001262:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001266:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800126a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800126e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001272:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001276:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800127a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800127e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001282:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001286:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800128a:	edd7 7a00 	vldr	s15, [r7]
 800128e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800129a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800129e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80012a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MadgwickAHRSupdateIMU+0x3dc>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80012b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80012c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80012d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80012e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80012ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80012f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80012fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001308:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800130c:	edd7 7a00 	vldr	s15, [r7]
 8001310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	edc7 7a07 	vstr	s15, [r7, #28]
 800131c:	e008      	b.n	8001330 <MadgwickAHRSupdateIMU+0x3e8>
 800131e:	bf00      	nop
 8001320:	20000200 	.word	0x20000200
 8001324:	20000204 	.word	0x20000204
 8001328:	20000208 	.word	0x20000208
 800132c:	20000004 	.word	0x20000004
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001330:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001334:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001338:	ee27 7a87 	vmul.f32	s14, s15, s14
 800133c:	4b95      	ldr	r3, [pc, #596]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001346:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800134a:	edd7 7a02 	vldr	s15, [r7, #8]
 800134e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001352:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001356:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800135a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800135e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001362:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001370:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001384:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001388:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800138c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001390:	edd7 6a08 	vldr	s13, [r7, #32]
 8001394:	edd7 7a08 	vldr	s15, [r7, #32]
 8001398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80013a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b0:	edd7 6a06 	vldr	s13, [r7, #24]
 80013b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f000 f8f2 	bl	80015ac <invSqrt>
 80013c8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 80013cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80013dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80013e0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80013ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80013f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80013fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001400:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001408:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <MadgwickAHRSupdateIMU+0x650>)
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <MadgwickAHRSupdateIMU+0x650>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8001440:	4b55      	ldr	r3, [pc, #340]	; (8001598 <MadgwickAHRSupdateIMU+0x650>)
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	edd7 7a07 	vldr	s15, [r7, #28]
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800145a:	4b4f      	ldr	r3, [pc, #316]	; (8001598 <MadgwickAHRSupdateIMU+0x650>)
 800145c:	ed93 7a00 	vldr	s14, [r3]
 8001460:	edd7 7a06 	vldr	s15, [r7, #24]
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800146c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001470:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001474:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001478:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800159c <MadgwickAHRSupdateIMU+0x654>
 800147c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <MadgwickAHRSupdateIMU+0x658>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <MadgwickAHRSupdateIMU+0x658>)
 800148c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001490:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001494:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800159c <MadgwickAHRSupdateIMU+0x654>
 8001498:	ee27 7a87 	vmul.f32	s14, s15, s14
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <MadgwickAHRSupdateIMU+0x65c>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MadgwickAHRSupdateIMU+0x65c>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80014ac:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80014b0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800159c <MadgwickAHRSupdateIMU+0x654>
 80014b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b8:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <MadgwickAHRSupdateIMU+0x660>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <MadgwickAHRSupdateIMU+0x660>)
 80014c4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80014c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014cc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800159c <MadgwickAHRSupdateIMU+0x654>
 80014d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 80014e0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MadgwickAHRSupdateIMU+0x658>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MadgwickAHRSupdateIMU+0x658>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <MadgwickAHRSupdateIMU+0x65c>)
 80014f6:	edd3 6a00 	vldr	s13, [r3]
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MadgwickAHRSupdateIMU+0x65c>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <MadgwickAHRSupdateIMU+0x660>)
 800150a:	edd3 6a00 	vldr	s13, [r3]
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MadgwickAHRSupdateIMU+0x660>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 800151e:	edd3 6a00 	vldr	s13, [r3]
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	f000 f83a 	bl	80015ac <invSqrt>
 8001538:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MadgwickAHRSupdateIMU+0x658>)
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MadgwickAHRSupdateIMU+0x658>)
 800154c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MadgwickAHRSupdateIMU+0x65c>)
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MadgwickAHRSupdateIMU+0x65c>)
 8001560:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MadgwickAHRSupdateIMU+0x660>)
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <MadgwickAHRSupdateIMU+0x660>)
 8001574:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 800157a:	ed93 7a00 	vldr	s14, [r3]
 800157e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	4b03      	ldr	r3, [pc, #12]	; (8001594 <MadgwickAHRSupdateIMU+0x64c>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
}
 800158c:	bf00      	nop
 800158e:	3770      	adds	r7, #112	; 0x70
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000208 	.word	0x20000208
 8001598:	20000000 	.word	0x20000000
 800159c:	3b000000 	.word	0x3b000000
 80015a0:	20000004 	.word	0x20000004
 80015a4:	20000200 	.word	0x20000200
 80015a8:	20000204 	.word	0x20000204

080015ac <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80015b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	105a      	asrs	r2, r3, #1
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <invSqrt+0x74>)
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80015e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80015e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80015fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001600:	edd7 7a04 	vldr	s15, [r7, #16]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	ee07 3a90 	vmov	s15, r3
}
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	5f3759df 	.word	0x5f3759df

08001624 <MPU6050_Write_bits>:

void MPU6050_Write(uint8_t Address, uint8_t data){
  HAL_I2C_Mem_Write(&hi2c1, MPU6050, Address, 1, (uint8_t *)&data, 1, 10);
}

void MPU6050_Write_bits(uint8_t Address, uint8_t bitStart, uint8_t length, uint8_t data){
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af04      	add	r7, sp, #16
 800162a:	4604      	mov	r4, r0
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4623      	mov	r3, r4
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	4603      	mov	r3, r0
 8001638:	71bb      	strb	r3, [r7, #6]
 800163a:	460b      	mov	r3, r1
 800163c:	717b      	strb	r3, [r7, #5]
 800163e:	4613      	mov	r3, r2
 8001640:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050, Address, 1, (uint8_t *)&tmp, 1, 10);
 8001646:	4b36      	ldr	r3, [pc, #216]	; (8001720 <MPU6050_Write_bits+0xfc>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b299      	uxth	r1, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	b29a      	uxth	r2, r3
 8001650:	230a      	movs	r3, #10
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f107 030e 	add.w	r3, r7, #14
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	4830      	ldr	r0, [pc, #192]	; (8001724 <MPU6050_Write_bits+0x100>)
 8001662:	f001 fbe3 	bl	8002e2c <HAL_I2C_Mem_Read>
  uint8_t mask = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
  switch(length){
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	3b01      	subs	r3, #1
 800166e:	2b07      	cmp	r3, #7
 8001670:	d82a      	bhi.n	80016c8 <MPU6050_Write_bits+0xa4>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <MPU6050_Write_bits+0x54>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	08001699 	.word	0x08001699
 800167c:	0800169f 	.word	0x0800169f
 8001680:	080016a5 	.word	0x080016a5
 8001684:	080016ab 	.word	0x080016ab
 8001688:	080016b1 	.word	0x080016b1
 800168c:	080016b7 	.word	0x080016b7
 8001690:	080016bd 	.word	0x080016bd
 8001694:	080016c3 	.word	0x080016c3
    case 1: mask = 0x01; break;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e014      	b.n	80016c8 <MPU6050_Write_bits+0xa4>
    case 2: mask = 0x03; break;
 800169e:	2303      	movs	r3, #3
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e011      	b.n	80016c8 <MPU6050_Write_bits+0xa4>
    case 3: mask = 0x07; break;
 80016a4:	2307      	movs	r3, #7
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e00e      	b.n	80016c8 <MPU6050_Write_bits+0xa4>
    case 4: mask = 0x0F; break;
 80016aa:	230f      	movs	r3, #15
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e00b      	b.n	80016c8 <MPU6050_Write_bits+0xa4>
    case 5: mask = 0x1F; break;
 80016b0:	231f      	movs	r3, #31
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e008      	b.n	80016c8 <MPU6050_Write_bits+0xa4>
    case 6: mask = 0x3F; break;
 80016b6:	233f      	movs	r3, #63	; 0x3f
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e005      	b.n	80016c8 <MPU6050_Write_bits+0xa4>
    case 7: mask = 0x7F; break;
 80016bc:	237f      	movs	r3, #127	; 0x7f
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e002      	b.n	80016c8 <MPU6050_Write_bits+0xa4>
    case 8: mask = 0xFF; break;
 80016c2:	23ff      	movs	r3, #255	; 0xff
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	bf00      	nop
  }
  tmp &= ~(mask << bitStart);
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	b25a      	sxtb	r2, r3
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4013      	ands	r3, r2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	73bb      	strb	r3, [r7, #14]
  tmp |= (data << bitStart);
 80016e2:	793a      	ldrb	r2, [r7, #4]
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050, Address, 1, (uint8_t *)&tmp, 1, 10);
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MPU6050_Write_bits+0xfc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b299      	uxth	r1, r3
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	b29a      	uxth	r2, r3
 8001702:	230a      	movs	r3, #10
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	2301      	movs	r3, #1
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	f107 030e 	add.w	r3, r7, #14
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <MPU6050_Write_bits+0x100>)
 8001714:	f001 fa90 	bl	8002c38 <HAL_I2C_Mem_Write>
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	2000020c 	.word	0x2000020c
 8001724:	20000228 	.word	0x20000228

08001728 <MPU6050_Read>:

uint8_t MPU6050_Read(uint8_t Address){
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af04      	add	r7, sp, #16
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_I2C_Mem_Read(&hi2c1, MPU6050, Address, 1, (uint8_t *)&data, 1, 10);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MPU6050_Read+0x34>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b299      	uxth	r1, r3
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	b29a      	uxth	r2, r3
 800173c:	230a      	movs	r3, #10
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	2301      	movs	r3, #1
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	f107 030f 	add.w	r3, r7, #15
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MPU6050_Read+0x38>)
 800174e:	f001 fb6d 	bl	8002e2c <HAL_I2C_Mem_Read>
  return data;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000020c 	.word	0x2000020c
 8001760:	20000228 	.word	0x20000228

08001764 <init_MPU6050>:

void init_MPU6050(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  while(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050, 10, 1000)!=HAL_OK) {
 8001768:	e005      	b.n	8001776 <init_MPU6050+0x12>
    MPU6050++;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <init_MPU6050+0x70>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <init_MPU6050+0x70>)
 8001774:	701a      	strb	r2, [r3, #0]
  while(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050, 10, 1000)!=HAL_OK) {
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <init_MPU6050+0x70>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b299      	uxth	r1, r3
 800177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001780:	220a      	movs	r2, #10
 8001782:	4815      	ldr	r0, [pc, #84]	; (80017d8 <init_MPU6050+0x74>)
 8001784:	f001 fd78 	bl	8003278 <HAL_I2C_IsDeviceReady>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ed      	bne.n	800176a <init_MPU6050+0x6>

  // uint8_t temp = MPU6050_Read(MPU6050_RA_WHO_AM_I);
  // printf("Who am I = 0x%02X\r\n", temp);

  // printf("MPU6050 Initialize..... \r\n");
  printf("--------------------------------------------------------\r\n");
 800178e:	4813      	ldr	r0, [pc, #76]	; (80017dc <init_MPU6050+0x78>)
 8001790:	f004 fff8 	bl	8006784 <puts>

  HAL_Delay(100);
 8001794:	2064      	movs	r0, #100	; 0x64
 8001796:	f000 fe27 	bl	80023e8 <HAL_Delay>
  /* Power Management 1, SLEEP Diasble*/
  MPU6050_Write_bits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, MPU6050_PWR1_SLEEP_LENGTH, DISABLE);
 800179a:	2300      	movs	r3, #0
 800179c:	2201      	movs	r2, #1
 800179e:	2106      	movs	r1, #6
 80017a0:	206b      	movs	r0, #107	; 0x6b
 80017a2:	f7ff ff3f 	bl	8001624 <MPU6050_Write_bits>
  HAL_Delay(10);
 80017a6:	200a      	movs	r0, #10
 80017a8:	f000 fe1e 	bl	80023e8 <HAL_Delay>
  /* Power Management 1, Internal 8MHz oscillator */
  MPU6050_Write_bits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_INTERNAL);
 80017ac:	2300      	movs	r3, #0
 80017ae:	2203      	movs	r2, #3
 80017b0:	2100      	movs	r1, #0
 80017b2:	206b      	movs	r0, #107	; 0x6b
 80017b4:	f7ff ff36 	bl	8001624 <MPU6050_Write_bits>
  /* Gyroscope Configuration, ± 250 °/s, 131 LSB/°/s */
  MPU6050_Write_bits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 80017b8:	2300      	movs	r3, #0
 80017ba:	2202      	movs	r2, #2
 80017bc:	2103      	movs	r1, #3
 80017be:	201b      	movs	r0, #27
 80017c0:	f7ff ff30 	bl	8001624 <MPU6050_Write_bits>
  /* Accelerometer Configuration, ± 2g, 16384 LSB/g */
  MPU6050_Write_bits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS_2);
 80017c4:	2300      	movs	r3, #0
 80017c6:	2202      	movs	r2, #2
 80017c8:	2103      	movs	r1, #3
 80017ca:	201c      	movs	r0, #28
 80017cc:	f7ff ff2a 	bl	8001624 <MPU6050_Write_bits>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000020c 	.word	0x2000020c
 80017d8:	20000228 	.word	0x20000228
 80017dc:	08008518 	.word	0x08008518

080017e0 <read_MPU6050_data>:

void read_MPU6050_data(void){
 80017e0:	b598      	push	{r3, r4, r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  Accel_X = (MPU6050_Read(MPU6050_RA_ACCEL_XOUT_H)<<8) | MPU6050_Read(MPU6050_RA_ACCEL_XOUT_L);
 80017e4:	203b      	movs	r0, #59	; 0x3b
 80017e6:	f7ff ff9f 	bl	8001728 <MPU6050_Read>
 80017ea:	4603      	mov	r3, r0
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21c      	sxth	r4, r3
 80017f0:	203c      	movs	r0, #60	; 0x3c
 80017f2:	f7ff ff99 	bl	8001728 <MPU6050_Read>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4323      	orrs	r3, r4
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <read_MPU6050_data+0xbc>)
 8001800:	801a      	strh	r2, [r3, #0]
  Accel_Y = (MPU6050_Read(MPU6050_RA_ACCEL_YOUT_H)<<8) | MPU6050_Read(MPU6050_RA_ACCEL_YOUT_L);
 8001802:	203d      	movs	r0, #61	; 0x3d
 8001804:	f7ff ff90 	bl	8001728 <MPU6050_Read>
 8001808:	4603      	mov	r3, r0
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21c      	sxth	r4, r3
 800180e:	203e      	movs	r0, #62	; 0x3e
 8001810:	f7ff ff8a 	bl	8001728 <MPU6050_Read>
 8001814:	4603      	mov	r3, r0
 8001816:	b21b      	sxth	r3, r3
 8001818:	4323      	orrs	r3, r4
 800181a:	b21a      	sxth	r2, r3
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <read_MPU6050_data+0xc0>)
 800181e:	801a      	strh	r2, [r3, #0]
  Accel_Z = (MPU6050_Read(MPU6050_RA_ACCEL_ZOUT_H)<<8) | MPU6050_Read(MPU6050_RA_ACCEL_ZOUT_L);
 8001820:	203f      	movs	r0, #63	; 0x3f
 8001822:	f7ff ff81 	bl	8001728 <MPU6050_Read>
 8001826:	4603      	mov	r3, r0
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21c      	sxth	r4, r3
 800182c:	2040      	movs	r0, #64	; 0x40
 800182e:	f7ff ff7b 	bl	8001728 <MPU6050_Read>
 8001832:	4603      	mov	r3, r0
 8001834:	b21b      	sxth	r3, r3
 8001836:	4323      	orrs	r3, r4
 8001838:	b21a      	sxth	r2, r3
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <read_MPU6050_data+0xc4>)
 800183c:	801a      	strh	r2, [r3, #0]
  Gyro_X  = (MPU6050_Read(MPU6050_RA_GYRO_XOUT_H)<<8)  | MPU6050_Read(MPU6050_RA_GYRO_XOUT_L);
 800183e:	2043      	movs	r0, #67	; 0x43
 8001840:	f7ff ff72 	bl	8001728 <MPU6050_Read>
 8001844:	4603      	mov	r3, r0
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21c      	sxth	r4, r3
 800184a:	2044      	movs	r0, #68	; 0x44
 800184c:	f7ff ff6c 	bl	8001728 <MPU6050_Read>
 8001850:	4603      	mov	r3, r0
 8001852:	b21b      	sxth	r3, r3
 8001854:	4323      	orrs	r3, r4
 8001856:	b21a      	sxth	r2, r3
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <read_MPU6050_data+0xc8>)
 800185a:	801a      	strh	r2, [r3, #0]
  Gyro_Y  = (MPU6050_Read(MPU6050_RA_GYRO_YOUT_H)<<8)  | MPU6050_Read(MPU6050_RA_GYRO_YOUT_L);
 800185c:	2045      	movs	r0, #69	; 0x45
 800185e:	f7ff ff63 	bl	8001728 <MPU6050_Read>
 8001862:	4603      	mov	r3, r0
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21c      	sxth	r4, r3
 8001868:	2046      	movs	r0, #70	; 0x46
 800186a:	f7ff ff5d 	bl	8001728 <MPU6050_Read>
 800186e:	4603      	mov	r3, r0
 8001870:	b21b      	sxth	r3, r3
 8001872:	4323      	orrs	r3, r4
 8001874:	b21a      	sxth	r2, r3
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <read_MPU6050_data+0xcc>)
 8001878:	801a      	strh	r2, [r3, #0]
  Gyro_Z  = (MPU6050_Read(MPU6050_RA_GYRO_ZOUT_H)<<8)  | MPU6050_Read(MPU6050_RA_GYRO_ZOUT_L);
 800187a:	2047      	movs	r0, #71	; 0x47
 800187c:	f7ff ff54 	bl	8001728 <MPU6050_Read>
 8001880:	4603      	mov	r3, r0
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b21c      	sxth	r4, r3
 8001886:	2048      	movs	r0, #72	; 0x48
 8001888:	f7ff ff4e 	bl	8001728 <MPU6050_Read>
 800188c:	4603      	mov	r3, r0
 800188e:	b21b      	sxth	r3, r3
 8001890:	4323      	orrs	r3, r4
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <read_MPU6050_data+0xd0>)
 8001896:	801a      	strh	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	bd98      	pop	{r3, r4, r7, pc}
 800189c:	20000284 	.word	0x20000284
 80018a0:	200002d4 	.word	0x200002d4
 80018a4:	20000220 	.word	0x20000220
 80018a8:	200002e8 	.word	0x200002e8
 80018ac:	200002e0 	.word	0x200002e0
 80018b0:	200002c8 	.word	0x200002c8

080018b4 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, ptr, len, 10);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	230a      	movs	r3, #10
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <_write+0x24>)
 80018ca:	f002 fe0a 	bl	80044e2 <HAL_UART_Transmit>
  return len;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000288 	.word	0x20000288
 80018dc:	00000000 	.word	0x00000000

080018e0 <mpu6050_update>:

void mpu6050_update() {
 80018e0:	b598      	push	{r3, r4, r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  axg = (float)(Accel_X - MPU6050_AXOFFSET) / MPU6050_AXGAIN;
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <mpu6050_update+0x138>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001a1c <mpu6050_update+0x13c>
 80018f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <mpu6050_update+0x140>)
 80018fc:	edc3 7a00 	vstr	s15, [r3]
  ayg = (float)(Accel_Y - MPU6050_AYOFFSET) / MPU6050_AYGAIN;
 8001900:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <mpu6050_update+0x144>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190e:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001a1c <mpu6050_update+0x13c>
 8001912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001916:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <mpu6050_update+0x148>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
  azg = (float)(Accel_Z - MPU6050_AZOFFSET) / MPU6050_AZGAIN;
 800191c:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <mpu6050_update+0x14c>)
 800191e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001a1c <mpu6050_update+0x13c>
 800192e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <mpu6050_update+0x150>)
 8001934:	edc3 7a00 	vstr	s15, [r3]
  gxrs = (float)(Gyro_X - MPU6050_GXOFFSET) / MPU6050_GXGAIN * 0.01745329; //degree to radians
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <mpu6050_update+0x154>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001946:	ee17 0a90 	vmov	r0, s15
 800194a:	f7fe fdfd 	bl	8000548 <__aeabi_f2d>
 800194e:	a32e      	add	r3, pc, #184	; (adr r3, 8001a08 <mpu6050_update+0x128>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe ff7a 	bl	800084c <__aeabi_ddiv>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4618      	mov	r0, r3
 800195e:	4621      	mov	r1, r4
 8001960:	a32b      	add	r3, pc, #172	; (adr r3, 8001a10 <mpu6050_update+0x130>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fe47 	bl	80005f8 <__aeabi_dmul>
 800196a:	4603      	mov	r3, r0
 800196c:	460c      	mov	r4, r1
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	f7ff f919 	bl	8000ba8 <__aeabi_d2f>
 8001976:	4602      	mov	r2, r0
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <mpu6050_update+0x158>)
 800197a:	601a      	str	r2, [r3, #0]
  gyrs = (float)(Gyro_Y - MPU6050_GYOFFSET) / MPU6050_GYGAIN * 0.01745329; //degree to radians
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <mpu6050_update+0x15c>)
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	ee17 0a90 	vmov	r0, s15
 800198e:	f7fe fddb 	bl	8000548 <__aeabi_f2d>
 8001992:	a31d      	add	r3, pc, #116	; (adr r3, 8001a08 <mpu6050_update+0x128>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe ff58 	bl	800084c <__aeabi_ddiv>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	4618      	mov	r0, r3
 80019a2:	4621      	mov	r1, r4
 80019a4:	a31a      	add	r3, pc, #104	; (adr r3, 8001a10 <mpu6050_update+0x130>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fe25 	bl	80005f8 <__aeabi_dmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	460c      	mov	r4, r1
 80019b2:	4618      	mov	r0, r3
 80019b4:	4621      	mov	r1, r4
 80019b6:	f7ff f8f7 	bl	8000ba8 <__aeabi_d2f>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <mpu6050_update+0x160>)
 80019be:	601a      	str	r2, [r3, #0]
  gzrs = (float)(Gyro_Z - MPU6050_GZOFFSET) / MPU6050_GZGAIN * 0.01745329; //degree to radians
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <mpu6050_update+0x164>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	ee17 0a90 	vmov	r0, s15
 80019d2:	f7fe fdb9 	bl	8000548 <__aeabi_f2d>
 80019d6:	a30c      	add	r3, pc, #48	; (adr r3, 8001a08 <mpu6050_update+0x128>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe ff36 	bl	800084c <__aeabi_ddiv>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	4618      	mov	r0, r3
 80019e6:	4621      	mov	r1, r4
 80019e8:	a309      	add	r3, pc, #36	; (adr r3, 8001a10 <mpu6050_update+0x130>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe03 	bl	80005f8 <__aeabi_dmul>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	4618      	mov	r0, r3
 80019f8:	4621      	mov	r1, r4
 80019fa:	f7ff f8d5 	bl	8000ba8 <__aeabi_d2f>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <mpu6050_update+0x168>)
 8001a02:	601a      	str	r2, [r3, #0]
  // Degree to Radians Pi / 180 = 0.01745329 0.01745329251994329576923690768489
}
 8001a04:	bf00      	nop
 8001a06:	bd98      	pop	{r3, r4, r7, pc}
 8001a08:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a0c:	4060624d 	.word	0x4060624d
 8001a10:	7707c94d 	.word	0x7707c94d
 8001a14:	3f91df46 	.word	0x3f91df46
 8001a18:	20000284 	.word	0x20000284
 8001a1c:	46800000 	.word	0x46800000
 8001a20:	200002cc 	.word	0x200002cc
 8001a24:	200002d4 	.word	0x200002d4
 8001a28:	200002e4 	.word	0x200002e4
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	2000027c 	.word	0x2000027c
 8001a34:	200002e8 	.word	0x200002e8
 8001a38:	2000021c 	.word	0x2000021c
 8001a3c:	200002e0 	.word	0x200002e0
 8001a40:	20000280 	.word	0x20000280
 8001a44:	200002c8 	.word	0x200002c8
 8001a48:	20000224 	.word	0x20000224
 8001a4c:	00000000 	.word	0x00000000

08001a50 <mpu6050_getRollPitchYaw>:

void mpu6050_getRollPitchYaw() {
 8001a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a54:	af00      	add	r7, sp, #0
  yaw   = -atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.29577951;
 8001a56:	4b7a      	ldr	r3, [pc, #488]	; (8001c40 <mpu6050_getRollPitchYaw+0x1f0>)
 8001a58:	ed93 7a00 	vldr	s14, [r3]
 8001a5c:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <mpu6050_getRollPitchYaw+0x1f4>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a66:	4b78      	ldr	r3, [pc, #480]	; (8001c48 <mpu6050_getRollPitchYaw+0x1f8>)
 8001a68:	edd3 6a00 	vldr	s13, [r3]
 8001a6c:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <mpu6050_getRollPitchYaw+0x1fc>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a7e:	ee17 0a90 	vmov	r0, s15
 8001a82:	f7fe fd61 	bl	8000548 <__aeabi_f2d>
 8001a86:	4680      	mov	r8, r0
 8001a88:	4689      	mov	r9, r1
 8001a8a:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <mpu6050_getRollPitchYaw+0x1f8>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <mpu6050_getRollPitchYaw+0x1f8>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9a:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <mpu6050_getRollPitchYaw+0x1f0>)
 8001a9c:	edd3 6a00 	vldr	s13, [r3]
 8001aa0:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <mpu6050_getRollPitchYaw+0x1f0>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <mpu6050_getRollPitchYaw+0x1f4>)
 8001ab0:	edd3 6a00 	vldr	s13, [r3]
 8001ab4:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <mpu6050_getRollPitchYaw+0x1f4>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac2:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <mpu6050_getRollPitchYaw+0x1fc>)
 8001ac4:	edd3 6a00 	vldr	s13, [r3]
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <mpu6050_getRollPitchYaw+0x1fc>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad6:	ee17 0a90 	vmov	r0, s15
 8001ada:	f7fe fd35 	bl	8000548 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	ec43 2b11 	vmov	d1, r2, r3
 8001ae6:	ec49 8b10 	vmov	d0, r8, r9
 8001aea:	f003 fbf1 	bl	80052d0 <atan2>
 8001aee:	ec53 2b10 	vmov	r2, r3, d0
 8001af2:	4614      	mov	r4, r2
 8001af4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001af8:	a34f      	add	r3, pc, #316	; (adr r3, 8001c38 <mpu6050_getRollPitchYaw+0x1e8>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	4620      	mov	r0, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	f7fe fd79 	bl	80005f8 <__aeabi_dmul>
 8001b06:	4603      	mov	r3, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	f7ff f84b 	bl	8000ba8 <__aeabi_d2f>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <mpu6050_getRollPitchYaw+0x200>)
 8001b16:	601a      	str	r2, [r3, #0]
  pitch = asin(2.0f * (q1 * q3 - q0 * q2)) * 57.29577951;
 8001b18:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <mpu6050_getRollPitchYaw+0x1f0>)
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <mpu6050_getRollPitchYaw+0x1fc>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b28:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <mpu6050_getRollPitchYaw+0x1f8>)
 8001b2a:	edd3 6a00 	vldr	s13, [r3]
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <mpu6050_getRollPitchYaw+0x1f4>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b40:	ee17 0a90 	vmov	r0, s15
 8001b44:	f7fe fd00 	bl	8000548 <__aeabi_f2d>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460c      	mov	r4, r1
 8001b4c:	ec44 3b10 	vmov	d0, r3, r4
 8001b50:	f003 fb66 	bl	8005220 <asin>
 8001b54:	ec51 0b10 	vmov	r0, r1, d0
 8001b58:	a337      	add	r3, pc, #220	; (adr r3, 8001c38 <mpu6050_getRollPitchYaw+0x1e8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd4b 	bl	80005f8 <__aeabi_dmul>
 8001b62:	4603      	mov	r3, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	4618      	mov	r0, r3
 8001b68:	4621      	mov	r1, r4
 8001b6a:	f7ff f81d 	bl	8000ba8 <__aeabi_d2f>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <mpu6050_getRollPitchYaw+0x204>)
 8001b72:	601a      	str	r2, [r3, #0]
  roll  = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3) * 57.29577951;
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <mpu6050_getRollPitchYaw+0x1f8>)
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <mpu6050_getRollPitchYaw+0x1f0>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <mpu6050_getRollPitchYaw+0x1f4>)
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <mpu6050_getRollPitchYaw+0x1fc>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b9c:	ee17 0a90 	vmov	r0, s15
 8001ba0:	f7fe fcd2 	bl	8000548 <__aeabi_f2d>
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	460d      	mov	r5, r1
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <mpu6050_getRollPitchYaw+0x1f8>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <mpu6050_getRollPitchYaw+0x1f8>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <mpu6050_getRollPitchYaw+0x1f0>)
 8001bba:	edd3 6a00 	vldr	s13, [r3]
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <mpu6050_getRollPitchYaw+0x1f0>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <mpu6050_getRollPitchYaw+0x1f4>)
 8001bce:	edd3 6a00 	vldr	s13, [r3]
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <mpu6050_getRollPitchYaw+0x1f4>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <mpu6050_getRollPitchYaw+0x1fc>)
 8001be2:	edd3 6a00 	vldr	s13, [r3]
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <mpu6050_getRollPitchYaw+0x1fc>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	ee17 0a90 	vmov	r0, s15
 8001bf8:	f7fe fca6 	bl	8000548 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	ec43 2b11 	vmov	d1, r2, r3
 8001c04:	ec45 4b10 	vmov	d0, r4, r5
 8001c08:	f003 fb62 	bl	80052d0 <atan2>
 8001c0c:	ec51 0b10 	vmov	r0, r1, d0
 8001c10:	a309      	add	r3, pc, #36	; (adr r3, 8001c38 <mpu6050_getRollPitchYaw+0x1e8>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fcef 	bl	80005f8 <__aeabi_dmul>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4621      	mov	r1, r4
 8001c22:	f7fe ffc1 	bl	8000ba8 <__aeabi_d2f>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <mpu6050_getRollPitchYaw+0x208>)
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c32:	bf00      	nop
 8001c34:	f3af 8000 	nop.w
 8001c38:	1a5d2372 	.word	0x1a5d2372
 8001c3c:	404ca5dc 	.word	0x404ca5dc
 8001c40:	20000200 	.word	0x20000200
 8001c44:	20000204 	.word	0x20000204
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	20000208 	.word	0x20000208
 8001c50:	200002d0 	.word	0x200002d0
 8001c54:	200002d8 	.word	0x200002d8
 8001c58:	200002dc 	.word	0x200002dc

08001c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c64:	f000 fb4e 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c68:	f000 f896 	bl	8001d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6c:	f000 f956 	bl	8001f1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c70:	f000 f8fc 	bl	8001e6c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c74:	f000 f928 	bl	8001ec8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_MPU6050();
 8001c78:	f7ff fd74 	bl	8001764 <init_MPU6050>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	read_MPU6050_data();
 8001c7c:	f7ff fdb0 	bl	80017e0 <read_MPU6050_data>

	printf("Acce_X = %6d / Acce_Y = %6d / Acce_Z = %6d \r\n", Accel_X, Accel_Y, Accel_Z);
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <main+0xf0>)
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	4619      	mov	r1, r3
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <main+0xf4>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <main+0xf8>)
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	4830      	ldr	r0, [pc, #192]	; (8001d58 <main+0xfc>)
 8001c98:	f004 fd00 	bl	800669c <iprintf>
	printf("Gyro_X = %6d / Gyro_Y = %6d / Gyro_Z = %6d \r\n", Gyro_X, Gyro_Y, Gyro_Z);
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <main+0x100>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <main+0x104>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <main+0x108>)
 8001cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb2:	482d      	ldr	r0, [pc, #180]	; (8001d68 <main+0x10c>)
 8001cb4:	f004 fcf2 	bl	800669c <iprintf>

	mpu6050_update();
 8001cb8:	f7ff fe12 	bl	80018e0 <mpu6050_update>

	//compute data
	MadgwickAHRSupdateIMU(gxrs, gyrs, gzrs, axg, ayg, azg);
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <main+0x110>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <main+0x114>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <main+0x118>)
 8001cca:	edd3 6a00 	vldr	s13, [r3]
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <main+0x11c>)
 8001cd0:	ed93 6a00 	vldr	s12, [r3]
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <main+0x120>)
 8001cd6:	edd3 5a00 	vldr	s11, [r3]
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <main+0x124>)
 8001cdc:	ed93 5a00 	vldr	s10, [r3]
 8001ce0:	eef0 2a45 	vmov.f32	s5, s10
 8001ce4:	eeb0 2a65 	vmov.f32	s4, s11
 8001ce8:	eef0 1a46 	vmov.f32	s3, s12
 8001cec:	eeb0 1a66 	vmov.f32	s2, s13
 8001cf0:	eef0 0a47 	vmov.f32	s1, s14
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	f7ff f926 	bl	8000f48 <MadgwickAHRSupdateIMU>

	// Value of Roll, Pitch, Yaw
	mpu6050_getRollPitchYaw();
 8001cfc:	f7ff fea8 	bl	8001a50 <mpu6050_getRollPitchYaw>

	printf("Roll : %.3f / Pitch : %.3f / Yaw : %.3f\r\n", roll, pitch, yaw);
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <main+0x128>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc1f 	bl	8000548 <__aeabi_f2d>
 8001d0a:	4680      	mov	r8, r0
 8001d0c:	4689      	mov	r9, r1
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <main+0x12c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc18 	bl	8000548 <__aeabi_f2d>
 8001d18:	4604      	mov	r4, r0
 8001d1a:	460d      	mov	r5, r1
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <main+0x130>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc11 	bl	8000548 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d2e:	e9cd 4500 	strd	r4, r5, [sp]
 8001d32:	4642      	mov	r2, r8
 8001d34:	464b      	mov	r3, r9
 8001d36:	4816      	ldr	r0, [pc, #88]	; (8001d90 <main+0x134>)
 8001d38:	f004 fcb0 	bl	800669c <iprintf>
	printf("---------------------------------------------------------\r\n");
 8001d3c:	4815      	ldr	r0, [pc, #84]	; (8001d94 <main+0x138>)
 8001d3e:	f004 fd21 	bl	8006784 <puts>

	HAL_Delay(500);
 8001d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d46:	f000 fb4f 	bl	80023e8 <HAL_Delay>
  {
 8001d4a:	e797      	b.n	8001c7c <main+0x20>
 8001d4c:	20000284 	.word	0x20000284
 8001d50:	200002d4 	.word	0x200002d4
 8001d54:	20000220 	.word	0x20000220
 8001d58:	08008554 	.word	0x08008554
 8001d5c:	200002e8 	.word	0x200002e8
 8001d60:	200002e0 	.word	0x200002e0
 8001d64:	200002c8 	.word	0x200002c8
 8001d68:	08008584 	.word	0x08008584
 8001d6c:	2000021c 	.word	0x2000021c
 8001d70:	20000280 	.word	0x20000280
 8001d74:	20000224 	.word	0x20000224
 8001d78:	200002cc 	.word	0x200002cc
 8001d7c:	200002e4 	.word	0x200002e4
 8001d80:	2000027c 	.word	0x2000027c
 8001d84:	200002dc 	.word	0x200002dc
 8001d88:	200002d8 	.word	0x200002d8
 8001d8c:	200002d0 	.word	0x200002d0
 8001d90:	080085b4 	.word	0x080085b4
 8001d94:	080085e0 	.word	0x080085e0

08001d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b094      	sub	sp, #80	; 0x50
 8001d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	2230      	movs	r2, #48	; 0x30
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 f814 	bl	8005dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <SystemClock_Config+0xcc>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <SystemClock_Config+0xcc>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	; 0x40
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <SystemClock_Config+0xcc>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <SystemClock_Config+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <SystemClock_Config+0xd0>)
 8001de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <SystemClock_Config+0xd0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2302      	movs	r3, #2
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e0c:	23a8      	movs	r3, #168	; 0xa8
 8001e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e14:	2304      	movs	r3, #4
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 feb1 	bl	8003b84 <HAL_RCC_OscConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e28:	f000 f8ae 	bl	8001f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e30:	2302      	movs	r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2105      	movs	r1, #5
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 f90a 	bl	8004064 <HAL_RCC_ClockConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e56:	f000 f897 	bl	8001f88 <Error_Handler>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3750      	adds	r7, #80	; 0x50
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000

08001e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <MX_I2C1_Init+0x54>)
 8001e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <MX_I2C1_Init+0x58>)
 8001e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001eaa:	f000 fd8d 	bl	80029c8 <HAL_I2C_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb4:	f000 f868 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000228 	.word	0x20000228
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	000186a0 	.word	0x000186a0

08001ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <MX_USART1_UART_Init+0x50>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001f00:	f002 faa2 	bl	8004448 <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0a:	f000 f83d 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000288 	.word	0x20000288
 8001f18:	40011000 	.word	0x40011000

08001f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_GPIO_Init+0x68>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]

}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_I2C_MspInit+0x84>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12c      	bne.n	8002064 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_I2C_MspInit+0x88>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_I2C_MspInit+0x88>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_I2C_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002030:	2301      	movs	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002038:	2304      	movs	r3, #4
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	; (8002074 <HAL_I2C_MspInit+0x8c>)
 8002044:	f000 fb26 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_I2C_MspInit+0x88>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_I2C_MspInit+0x88>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_I2C_MspInit+0x88>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40005400 	.word	0x40005400
 8002070:	40023800 	.word	0x40023800
 8002074:	40020400 	.word	0x40020400

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_UART_MspInit+0x94>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d134      	bne.n	8002104 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020a4:	f043 0310 	orr.w	r3, r3, #16
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020e4:	2307      	movs	r3, #7
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	4809      	ldr	r0, [pc, #36]	; (8002114 <HAL_UART_MspInit+0x9c>)
 80020f0:	f000 fad0 	bl	8002694 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	2025      	movs	r0, #37	; 0x25
 80020fa:	f000 fa72 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020fe:	2025      	movs	r0, #37	; 0x25
 8002100:	f000 fa8b 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	; 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40011000 	.word	0x40011000
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <MemManage_Handler+0x4>

08002132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <UsageFault_Handler+0x4>

0800213e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216c:	f000 f91c 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <USART1_IRQHandler+0x10>)
 800217a:	f002 fa4b 	bl	8004614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000288 	.word	0x20000288

08002188 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e00a      	b.n	80021b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800219a:	f3af 8000 	nop.w
 800219e:	4601      	mov	r1, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	b2ca      	uxtb	r2, r1
 80021a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dbf0      	blt.n	800219a <_read+0x12>
	}

return len;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	return -1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ea:	605a      	str	r2, [r3, #4]
	return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <_isatty>:

int _isatty(int file)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	return 1;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x50>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x16>
		heap_end = &end;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <_sbrk+0x50>)
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <_sbrk+0x54>)
 8002240:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <_sbrk+0x50>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <_sbrk+0x50>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	466a      	mov	r2, sp
 8002252:	4293      	cmp	r3, r2
 8002254:	d907      	bls.n	8002266 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002256:	f003 fd93 	bl	8005d80 <__errno>
 800225a:	4602      	mov	r2, r0
 800225c:	230c      	movs	r3, #12
 800225e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	e006      	b.n	8002274 <_sbrk+0x48>
	}

	heap_end += incr;
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <_sbrk+0x50>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a03      	ldr	r2, [pc, #12]	; (800227c <_sbrk+0x50>)
 8002270:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000210 	.word	0x20000210
 8002280:	200002f8 	.word	0x200002f8

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <SystemInit+0x28>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <SystemInit+0x28>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SystemInit+0x28>)
 800229a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800229e:	609a      	str	r2, [r3, #8]
#endif
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022b6:	e003      	b.n	80022c0 <LoopCopyDataInit>

080022b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022be:	3104      	adds	r1, #4

080022c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022c0:	480b      	ldr	r0, [pc, #44]	; (80022f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022c8:	d3f6      	bcc.n	80022b8 <CopyDataInit>
  ldr  r2, =_sbss
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022cc:	e002      	b.n	80022d4 <LoopFillZerobss>

080022ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022d0:	f842 3b04 	str.w	r3, [r2], #4

080022d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022d8:	d3f9      	bcc.n	80022ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022da:	f7ff ffd3 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022de:	f003 fd55 	bl	8005d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7ff fcbb 	bl	8001c5c <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022ec:	08008950 	.word	0x08008950
  ldr  r0, =_sdata
 80022f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022f4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80022f8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80022fc:	200002f4 	.word	0x200002f4

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>
	...

08002304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_Init+0x40>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_Init+0x40>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_Init+0x40>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 f94d 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fe2e 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f965 	bl	8002636 <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 f92d 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000010 	.word	0x20000010
 80023a4:	2000000c 	.word	0x2000000c

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000010 	.word	0x20000010
 80023cc:	200002ec 	.word	0x200002ec

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	200002ec 	.word	0x200002ec

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff ffee 	bl	80023d0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_Delay+0x40>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffde 	bl	80023d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000010 	.word	0x20000010

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d004      	beq.n	800266c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e00c      	b.n	8002686 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e16b      	b.n	8002988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 815a 	bne.w	8002982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d00b      	beq.n	80026ee <HAL_GPIO_Init+0x5a>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e2:	2b11      	cmp	r3, #17
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b12      	cmp	r3, #18
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0xfc>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b12      	cmp	r3, #18
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b4 	beq.w	8002982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_GPIO_Init+0x308>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a5e      	ldr	r2, [pc, #376]	; (800299c <HAL_GPIO_Init+0x308>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_GPIO_Init+0x308>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_GPIO_Init+0x310>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_GPIO_Init+0x314>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_Init+0x318>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_GPIO_Init+0x31c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x21a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x320>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x216>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_GPIO_Init+0x324>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x212>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_GPIO_Init+0x328>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_GPIO_Init+0x32c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x20a>
 800289a:	2307      	movs	r3, #7
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x228>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028cc:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_GPIO_Init+0x330>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fe:	4a31      	ldr	r2, [pc, #196]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_GPIO_Init+0x330>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_GPIO_Init+0x330>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_GPIO_Init+0x330>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae90 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	3724      	adds	r7, #36	; 0x24
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40013c00 	.word	0x40013c00

080029c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e11f      	b.n	8002c1a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fafa 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f001 fce4 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a7b      	ldr	r2, [pc, #492]	; (8002c24 <HAL_I2C_Init+0x25c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d807      	bhi.n	8002a4c <HAL_I2C_Init+0x84>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a7a      	ldr	r2, [pc, #488]	; (8002c28 <HAL_I2C_Init+0x260>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e006      	b.n	8002a5a <HAL_I2C_Init+0x92>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a77      	ldr	r2, [pc, #476]	; (8002c2c <HAL_I2C_Init+0x264>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0db      	b.n	8002c1a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <HAL_I2C_Init+0x268>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0c9b      	lsrs	r3, r3, #18
 8002a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a64      	ldr	r2, [pc, #400]	; (8002c24 <HAL_I2C_Init+0x25c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d802      	bhi.n	8002a9c <HAL_I2C_Init+0xd4>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	e009      	b.n	8002ab0 <HAL_I2C_Init+0xe8>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	4a63      	ldr	r2, [pc, #396]	; (8002c34 <HAL_I2C_Init+0x26c>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	3301      	adds	r3, #1
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4956      	ldr	r1, [pc, #344]	; (8002c24 <HAL_I2C_Init+0x25c>)
 8002acc:	428b      	cmp	r3, r1
 8002ace:	d80d      	bhi.n	8002aec <HAL_I2C_Init+0x124>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e59      	subs	r1, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	bf38      	it	cc
 8002ae8:	2304      	movcc	r3, #4
 8002aea:	e04f      	b.n	8002b8c <HAL_I2C_Init+0x1c4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_I2C_Init+0x150>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e012      	b.n	8002b3e <HAL_I2C_Init+0x176>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Init+0x17e>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_I2C_Init+0x1c4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10e      	bne.n	8002b6c <HAL_I2C_Init+0x1a4>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e58      	subs	r0, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Init+0x1c4>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6911      	ldr	r1, [r2, #16]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	000186a0 	.word	0x000186a0
 8002c28:	001e847f 	.word	0x001e847f
 8002c2c:	003d08ff 	.word	0x003d08ff
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	813b      	strh	r3, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c52:	f7ff fbbd 	bl	80023d0 <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	f040 80d9 	bne.w	8002e18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2319      	movs	r3, #25
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	496d      	ldr	r1, [pc, #436]	; (8002e24 <HAL_I2C_Mem_Write+0x1ec>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fda9 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0cc      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Mem_Write+0x56>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0c5      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d007      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2221      	movs	r2, #33	; 0x21
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2240      	movs	r2, #64	; 0x40
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a4d      	ldr	r2, [pc, #308]	; (8002e28 <HAL_I2C_Mem_Write+0x1f0>)
 8002cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf6:	88f8      	ldrh	r0, [r7, #6]
 8002cf8:	893a      	ldrh	r2, [r7, #8]
 8002cfa:	8979      	ldrh	r1, [r7, #10]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4603      	mov	r3, r0
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fbe4 	bl	80034d4 <I2C_RequestMemoryWrite>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d052      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e081      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fe2a 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_I2C_Mem_Write+0x180>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1aa      	bne.n	8002d16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fe16 	bl	80039f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e016      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	00100002 	.word	0x00100002
 8002e28:	ffff0000 	.word	0xffff0000

08002e2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e46:	f7ff fac3 	bl	80023d0 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	f040 8208 	bne.w	800326a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2319      	movs	r3, #25
 8002e60:	2201      	movs	r2, #1
 8002e62:	497b      	ldr	r1, [pc, #492]	; (8003050 <HAL_I2C_Mem_Read+0x224>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fcaf 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	e1fb      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Mem_Read+0x56>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e1f4      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d007      	beq.n	8002ea8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2222      	movs	r2, #34	; 0x22
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	; (8003054 <HAL_I2C_Mem_Read+0x228>)
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eea:	88f8      	ldrh	r0, [r7, #6]
 8002eec:	893a      	ldrh	r2, [r7, #8]
 8002eee:	8979      	ldrh	r1, [r7, #10]
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4603      	mov	r3, r0
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fb7e 	bl	80035fc <I2C_RequestMemoryRead>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e1b0      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d113      	bne.n	8002f3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	623b      	str	r3, [r7, #32]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e184      	b.n	8003244 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d11b      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e164      	b.n	8003244 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d11b      	bne.n	8002fba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	e144      	b.n	8003244 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fd0:	e138      	b.n	8003244 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	f200 80f1 	bhi.w	80031be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d123      	bne.n	800302c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fd45 	bl	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e139      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302a:	e10b      	b.n	8003244 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	2b02      	cmp	r3, #2
 8003032:	d14e      	bne.n	80030d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	2200      	movs	r2, #0
 800303c:	4906      	ldr	r1, [pc, #24]	; (8003058 <HAL_I2C_Mem_Read+0x22c>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fbc2 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e10e      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
 800304e:	bf00      	nop
 8003050:	00100002 	.word	0x00100002
 8003054:	ffff0000 	.word	0xffff0000
 8003058:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d0:	e0b8      	b.n	8003244 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	2200      	movs	r2, #0
 80030da:	4966      	ldr	r1, [pc, #408]	; (8003274 <HAL_I2C_Mem_Read+0x448>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fb73 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0bf      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	2200      	movs	r2, #0
 8003136:	494f      	ldr	r1, [pc, #316]	; (8003274 <HAL_I2C_Mem_Read+0x448>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fb45 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e091      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031bc:	e042      	b.n	8003244 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fc58 	bl	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e04c      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d118      	bne.n	8003244 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f aec2 	bne.w	8002fd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3728      	adds	r7, #40	; 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	00010004 	.word	0x00010004

08003278 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003288:	f7ff f8a2 	bl	80023d0 <HAL_GetTick>
 800328c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800328e:	2301      	movs	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	f040 8110 	bne.w	80034c0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2319      	movs	r3, #25
 80032a6:	2201      	movs	r2, #1
 80032a8:	4988      	ldr	r1, [pc, #544]	; (80034cc <HAL_I2C_IsDeviceReady+0x254>)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fa8c 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e103      	b.n	80034c2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_I2C_IsDeviceReady+0x50>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0fc      	b.n	80034c2 <HAL_I2C_IsDeviceReady+0x24a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d007      	beq.n	80032ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2224      	movs	r2, #36	; 0x24
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a70      	ldr	r2, [pc, #448]	; (80034d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003320:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2200      	movs	r2, #0
 800332a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fa4a 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0b6      	b.n	80034c2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003362:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003364:	f7ff f834 	bl	80023d0 <HAL_GetTick>
 8003368:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b02      	cmp	r3, #2
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003398:	e025      	b.n	80033e6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7ff f819 	bl	80023d0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <HAL_I2C_IsDeviceReady+0x138>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	22a0      	movs	r2, #160	; 0xa0
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2ba0      	cmp	r3, #160	; 0xa0
 80033f0:	d005      	beq.n	80033fe <HAL_I2C_IsDeviceReady+0x186>
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <HAL_I2C_IsDeviceReady+0x186>
 80033f8:	7dbb      	ldrb	r3, [r7, #22]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0cd      	beq.n	800339a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d129      	bne.n	8003468 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2319      	movs	r3, #25
 8003440:	2201      	movs	r2, #1
 8003442:	4922      	ldr	r1, [pc, #136]	; (80034cc <HAL_I2C_IsDeviceReady+0x254>)
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f9bf 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e036      	b.n	80034c2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e02c      	b.n	80034c2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003480:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2319      	movs	r3, #25
 8003488:	2201      	movs	r2, #1
 800348a:	4910      	ldr	r1, [pc, #64]	; (80034cc <HAL_I2C_IsDeviceReady+0x254>)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f99b 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e012      	b.n	80034c2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	3301      	adds	r3, #1
 80034a0:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	f4ff af33 	bcc.w	8003312 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	00100002 	.word	0x00100002
 80034d0:	ffff0000 	.word	0xffff0000

080034d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	817b      	strh	r3, [r7, #10]
 80034e6:	460b      	mov	r3, r1
 80034e8:	813b      	strh	r3, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2200      	movs	r2, #0
 8003506:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f95c 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e05f      	b.n	80035f0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003530:	897b      	ldrh	r3, [r7, #10]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800353e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	6a3a      	ldr	r2, [r7, #32]
 8003544:	492c      	ldr	r1, [pc, #176]	; (80035f8 <I2C_RequestMemoryWrite+0x124>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f995 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e04c      	b.n	80035f0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	6a39      	ldr	r1, [r7, #32]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f9ff 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2b04      	cmp	r3, #4
 8003582:	d107      	bne.n	8003594 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e02b      	b.n	80035f0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
 80035a8:	e021      	b.n	80035ee <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035aa:	893b      	ldrh	r3, [r7, #8]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ba:	6a39      	ldr	r1, [r7, #32]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f9d9 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d107      	bne.n	80035e0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e005      	b.n	80035f0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	00010002 	.word	0x00010002

080035fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003624:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	2200      	movs	r2, #0
 800363e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f8c0 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0a9      	b.n	80037bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003668:	897b      	ldrh	r3, [r7, #10]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003676:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	6a3a      	ldr	r2, [r7, #32]
 800367c:	4951      	ldr	r1, [pc, #324]	; (80037c4 <I2C_RequestMemoryRead+0x1c8>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f8f9 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e096      	b.n	80037bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a6:	6a39      	ldr	r1, [r7, #32]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f963 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d107      	bne.n	80036cc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e075      	b.n	80037bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036d6:	893b      	ldrh	r3, [r7, #8]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	611a      	str	r2, [r3, #16]
 80036e0:	e021      	b.n	8003726 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036e2:	893b      	ldrh	r3, [r7, #8]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	6a39      	ldr	r1, [r7, #32]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f93d 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e04f      	b.n	80037bc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	6a39      	ldr	r1, [r7, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f922 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b04      	cmp	r3, #4
 800373c:	d107      	bne.n	800374e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e034      	b.n	80037bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2200      	movs	r2, #0
 800376a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f82a 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e013      	b.n	80037bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	6a3a      	ldr	r2, [r7, #32]
 80037a8:	4906      	ldr	r1, [pc, #24]	; (80037c4 <I2C_RequestMemoryRead+0x1c8>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f863 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	00010002 	.word	0x00010002

080037c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d8:	e025      	b.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d021      	beq.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe fdf5 	bl	80023d0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d116      	bne.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e023      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d10d      	bne.n	800384c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	43da      	mvns	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	e00c      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d0b6      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003884:	e051      	b.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003894:	d123      	bne.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e046      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d021      	beq.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fd73 	bl	80023d0 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e020      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10c      	bne.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e00b      	b.n	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	43da      	mvns	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d18d      	bne.n	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003980:	e02d      	b.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f8ce 	bl	8003b24 <I2C_IsAcknowledgeFailed>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e02d      	b.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d021      	beq.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe fd19 	bl	80023d0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e007      	b.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b80      	cmp	r3, #128	; 0x80
 80039ea:	d1ca      	bne.n	8003982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a02:	e02d      	b.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f88d 	bl	8003b24 <I2C_IsAcknowledgeFailed>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e02d      	b.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d021      	beq.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7fe fcd8 	bl	80023d0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d1ca      	bne.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a84:	e042      	b.n	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d119      	bne.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0210 	mvn.w	r2, #16
 8003a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e029      	b.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac8:	f7fe fc82 	bl	80023d0 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d302      	bcc.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d1b5      	bne.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d11b      	bne.n	8003b74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e25b      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d075      	beq.n	8003c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba2:	4ba3      	ldr	r3, [pc, #652]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d00c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4ba0      	ldr	r3, [pc, #640]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d112      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b9d      	ldr	r3, [pc, #628]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05b      	beq.n	8003c8c <HAL_RCC_OscConfig+0x108>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d157      	bne.n	8003c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e236      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x74>
 8003bea:	4b91      	ldr	r3, [pc, #580]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x98>
 8003c02:	4b8b      	ldr	r3, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a8a      	ldr	r2, [pc, #552]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b88      	ldr	r3, [pc, #544]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a87      	ldr	r2, [pc, #540]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a83      	ldr	r2, [pc, #524]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b81      	ldr	r3, [pc, #516]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a80      	ldr	r2, [pc, #512]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fbc8 	bl	80023d0 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe fbc4 	bl	80023d0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1fb      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xc0>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fbb4 	bl	80023d0 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fbb0 	bl	80023d0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1e7      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0xe8>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9a:	4b65      	ldr	r3, [pc, #404]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b5f      	ldr	r3, [pc, #380]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1bb      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4952      	ldr	r1, [pc, #328]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e03a      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_RCC_OscConfig+0x2b0>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fb69 	bl	80023d0 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fe fb65 	bl	80023d0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e19c      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4940      	ldr	r1, [pc, #256]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_RCC_OscConfig+0x2b0>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fb48 	bl	80023d0 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fe fb44 	bl	80023d0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e17b      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d030      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_RCC_OscConfig+0x2b4>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fe fb28 	bl	80023d0 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fe fb24 	bl	80023d0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e15b      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x200>
 8003da2:	e015      	b.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x2b4>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fe fb11 	bl	80023d0 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fe fb0d 	bl	80023d0 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e144      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a0 	beq.w	8003f1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_OscConfig+0x2b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d121      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_RCC_OscConfig+0x2b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fe fad3 	bl	80023d0 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e011      	b.n	8003e52 <HAL_RCC_OscConfig+0x2ce>
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	42470000 	.word	0x42470000
 8003e38:	42470e80 	.word	0x42470e80
 8003e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fe fac6 	bl	80023d0 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0fd      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e52:	4b81      	ldr	r3, [pc, #516]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2f0>
 8003e66:	4b7d      	ldr	r3, [pc, #500]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a7c      	ldr	r2, [pc, #496]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	e01c      	b.n	8003eae <HAL_RCC_OscConfig+0x32a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x312>
 8003e7c:	4b77      	ldr	r3, [pc, #476]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a76      	ldr	r2, [pc, #472]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	4b74      	ldr	r3, [pc, #464]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a73      	ldr	r2, [pc, #460]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0x32a>
 8003e96:	4b71      	ldr	r3, [pc, #452]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a70      	ldr	r2, [pc, #448]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	4b6e      	ldr	r3, [pc, #440]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a6d      	ldr	r2, [pc, #436]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d015      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fe fa8b 	bl	80023d0 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe fa87 	bl	80023d0 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0bc      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	4b61      	ldr	r3, [pc, #388]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ee      	beq.n	8003ebe <HAL_RCC_OscConfig+0x33a>
 8003ee0:	e014      	b.n	8003f0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fa75 	bl	80023d0 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fe fa71 	bl	80023d0 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0a6      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ee      	bne.n	8003eea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d105      	bne.n	8003f1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f12:	4b52      	ldr	r3, [pc, #328]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4a51      	ldr	r2, [pc, #324]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8092 	beq.w	800404c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f28:	4b4c      	ldr	r3, [pc, #304]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d05c      	beq.n	8003fee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d141      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <HAL_RCC_OscConfig+0x4dc>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fe fa45 	bl	80023d0 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fe fa41 	bl	80023d0 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e078      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	4b3f      	ldr	r3, [pc, #252]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	019b      	lsls	r3, r3, #6
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	061b      	lsls	r3, r3, #24
 8003f8c:	4933      	ldr	r1, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f92:	4b33      	ldr	r3, [pc, #204]	; (8004060 <HAL_RCC_OscConfig+0x4dc>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fe fa1a 	bl	80023d0 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe fa16 	bl	80023d0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e04d      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x41c>
 8003fbe:	e045      	b.n	800404c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCC_OscConfig+0x4dc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fa03 	bl	80023d0 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fe f9ff 	bl	80023d0 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e036      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x44a>
 8003fec:	e02e      	b.n	800404c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e029      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ffa:	4b18      	ldr	r3, [pc, #96]	; (800405c <HAL_RCC_OscConfig+0x4d8>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	429a      	cmp	r2, r3
 800400c:	d11c      	bne.n	8004048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d115      	bne.n	8004048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004022:	4013      	ands	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d10d      	bne.n	8004048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d106      	bne.n	8004048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40007000 	.word	0x40007000
 800405c:	40023800 	.word	0x40023800
 8004060:	42470060 	.word	0x42470060

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0cc      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d90c      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d119      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e067      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4934      	ldr	r1, [pc, #208]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fe f93c 	bl	80023d0 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fe f938 	bl	80023d0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20c      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4601      	mov	r1, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe f89c 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	0800861c 	.word	0x0800861c
 8004228:	20000008 	.word	0x20000008
 800422c:	2000000c 	.word	0x2000000c

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	2300      	movs	r3, #0
 8004240:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b04      	cmp	r3, #4
 8004250:	d007      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x32>
 8004252:	2b08      	cmp	r3, #8
 8004254:	d008      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x38>
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 80b4 	bne.w	80043c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800425e:	60bb      	str	r3, [r7, #8]
       break;
 8004260:	e0b3      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004262:	4b5e      	ldr	r3, [pc, #376]	; (80043dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004264:	60bb      	str	r3, [r7, #8]
      break;
 8004266:	e0b0      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004268:	4b5a      	ldr	r3, [pc, #360]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004270:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004272:	4b58      	ldr	r3, [pc, #352]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d04a      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	f04f 0400 	mov.w	r4, #0
 8004288:	f240 11ff 	movw	r1, #511	; 0x1ff
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	ea03 0501 	and.w	r5, r3, r1
 8004294:	ea04 0602 	and.w	r6, r4, r2
 8004298:	4629      	mov	r1, r5
 800429a:	4632      	mov	r2, r6
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	0154      	lsls	r4, r2, #5
 80042a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042aa:	014b      	lsls	r3, r1, #5
 80042ac:	4619      	mov	r1, r3
 80042ae:	4622      	mov	r2, r4
 80042b0:	1b49      	subs	r1, r1, r5
 80042b2:	eb62 0206 	sbc.w	r2, r2, r6
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	f04f 0400 	mov.w	r4, #0
 80042be:	0194      	lsls	r4, r2, #6
 80042c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042c4:	018b      	lsls	r3, r1, #6
 80042c6:	1a5b      	subs	r3, r3, r1
 80042c8:	eb64 0402 	sbc.w	r4, r4, r2
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	00e2      	lsls	r2, r4, #3
 80042d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042da:	00d9      	lsls	r1, r3, #3
 80042dc:	460b      	mov	r3, r1
 80042de:	4614      	mov	r4, r2
 80042e0:	195b      	adds	r3, r3, r5
 80042e2:	eb44 0406 	adc.w	r4, r4, r6
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	0262      	lsls	r2, r4, #9
 80042f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042f4:	0259      	lsls	r1, r3, #9
 80042f6:	460b      	mov	r3, r1
 80042f8:	4614      	mov	r4, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	4621      	mov	r1, r4
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	461a      	mov	r2, r3
 8004306:	4623      	mov	r3, r4
 8004308:	f7fc fc9e 	bl	8000c48 <__aeabi_uldivmod>
 800430c:	4603      	mov	r3, r0
 800430e:	460c      	mov	r4, r1
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e049      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004314:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	f04f 0400 	mov.w	r4, #0
 800431e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	ea03 0501 	and.w	r5, r3, r1
 800432a:	ea04 0602 	and.w	r6, r4, r2
 800432e:	4629      	mov	r1, r5
 8004330:	4632      	mov	r2, r6
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	f04f 0400 	mov.w	r4, #0
 800433a:	0154      	lsls	r4, r2, #5
 800433c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004340:	014b      	lsls	r3, r1, #5
 8004342:	4619      	mov	r1, r3
 8004344:	4622      	mov	r2, r4
 8004346:	1b49      	subs	r1, r1, r5
 8004348:	eb62 0206 	sbc.w	r2, r2, r6
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	f04f 0400 	mov.w	r4, #0
 8004354:	0194      	lsls	r4, r2, #6
 8004356:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800435a:	018b      	lsls	r3, r1, #6
 800435c:	1a5b      	subs	r3, r3, r1
 800435e:	eb64 0402 	sbc.w	r4, r4, r2
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	00e2      	lsls	r2, r4, #3
 800436c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004370:	00d9      	lsls	r1, r3, #3
 8004372:	460b      	mov	r3, r1
 8004374:	4614      	mov	r4, r2
 8004376:	195b      	adds	r3, r3, r5
 8004378:	eb44 0406 	adc.w	r4, r4, r6
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	02a2      	lsls	r2, r4, #10
 8004386:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800438a:	0299      	lsls	r1, r3, #10
 800438c:	460b      	mov	r3, r1
 800438e:	4614      	mov	r4, r2
 8004390:	4618      	mov	r0, r3
 8004392:	4621      	mov	r1, r4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f04f 0400 	mov.w	r4, #0
 800439a:	461a      	mov	r2, r3
 800439c:	4623      	mov	r3, r4
 800439e:	f7fc fc53 	bl	8000c48 <__aeabi_uldivmod>
 80043a2:	4603      	mov	r3, r0
 80043a4:	460c      	mov	r4, r1
 80043a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	60bb      	str	r3, [r7, #8]
      break;
 80043c2:	e002      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043c6:	60bb      	str	r3, [r7, #8]
      break;
 80043c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ca:	68bb      	ldr	r3, [r7, #8]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	007a1200 	.word	0x007a1200

080043e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000008 	.word	0x20000008

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043fc:	f7ff fff0 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004400:	4601      	mov	r1, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0a9b      	lsrs	r3, r3, #10
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4a03      	ldr	r2, [pc, #12]	; (800441c <HAL_RCC_GetPCLK1Freq+0x24>)
 800440e:	5cd3      	ldrb	r3, [r2, r3]
 8004410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	0800862c 	.word	0x0800862c

08004420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004424:	f7ff ffdc 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004428:	4601      	mov	r1, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0b5b      	lsrs	r3, r3, #13
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4a03      	ldr	r2, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	0800862c 	.word	0x0800862c

08004448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e03f      	b.n	80044da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd fe02 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb4b 	bl	8004b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b088      	sub	sp, #32
 80044e6:	af02      	add	r7, sp, #8
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b20      	cmp	r3, #32
 8004500:	f040 8083 	bne.w	800460a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_UART_Transmit+0x2e>
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e07b      	b.n	800460c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_UART_Transmit+0x40>
 800451e:	2302      	movs	r3, #2
 8004520:	e074      	b.n	800460c <HAL_UART_Transmit+0x12a>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2221      	movs	r2, #33	; 0x21
 8004534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004538:	f7fd ff4a 	bl	80023d0 <HAL_GetTick>
 800453c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004552:	e042      	b.n	80045da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d122      	bne.n	80045b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f96a 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e042      	b.n	800460c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004598:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3302      	adds	r3, #2
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	e017      	b.n	80045da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	e013      	b.n	80045da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f947 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e01f      	b.n	800460c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	60ba      	str	r2, [r7, #8]
 80045d2:	781a      	ldrb	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1b7      	bne.n	8004554 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2200      	movs	r2, #0
 80045ec:	2140      	movs	r1, #64	; 0x40
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f92e 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e006      	b.n	800460c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10d      	bne.n	8004666 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_UART_IRQHandler+0x52>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f9e0 	bl	8004a24 <UART_Receive_IT>
      return;
 8004664:	e0d1      	b.n	800480a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80b0 	beq.w	80047ce <HAL_UART_IRQHandler+0x1ba>
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <HAL_UART_IRQHandler+0x70>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80a5 	beq.w	80047ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_UART_IRQHandler+0x90>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_UART_IRQHandler+0xb0>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	f043 0202 	orr.w	r2, r3, #2
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_UART_IRQHandler+0xd0>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	f043 0204 	orr.w	r2, r3, #4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00f      	beq.n	800470e <HAL_UART_IRQHandler+0xfa>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_UART_IRQHandler+0xee>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	f043 0208 	orr.w	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d078      	beq.n	8004808 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_UART_IRQHandler+0x11c>
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f97a 	bl	8004a24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <HAL_UART_IRQHandler+0x144>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d031      	beq.n	80047bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8c3 	bl	80048e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d123      	bne.n	80047b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	4a21      	ldr	r2, [pc, #132]	; (8004810 <HAL_UART_IRQHandler+0x1fc>)
 800478a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	4618      	mov	r0, r3
 8004792:	f7fd ff5c 	bl	800264e <HAL_DMA_Abort_IT>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d016      	beq.n	80047ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047a6:	4610      	mov	r0, r2
 80047a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047aa:	e00e      	b.n	80047ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f845 	bl	800483c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b2:	e00a      	b.n	80047ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f841 	bl	800483c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ba:	e006      	b.n	80047ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f83d 	bl	800483c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80047c8:	e01e      	b.n	8004808 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ca:	bf00      	nop
    return;
 80047cc:	e01c      	b.n	8004808 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_UART_IRQHandler+0x1d6>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8b0 	bl	8004948 <UART_Transmit_IT>
    return;
 80047e8:	e00f      	b.n	800480a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_UART_IRQHandler+0x1f6>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8f8 	bl	80049f4 <UART_EndTransmit_IT>
    return;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004808:	bf00      	nop
  }
}
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	08004921 	.word	0x08004921

08004814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004860:	e02c      	b.n	80048bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d028      	beq.n	80048bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x30>
 8004870:	f7fd fdae 	bl	80023d0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	429a      	cmp	r2, r3
 800487e:	d21d      	bcs.n	80048bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800488e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e00f      	b.n	80048dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d0c3      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff ff7e 	bl	800483c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b21      	cmp	r3, #33	; 0x21
 800495a:	d144      	bne.n	80049e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d11a      	bne.n	800499c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	1c9a      	adds	r2, r3, #2
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	621a      	str	r2, [r3, #32]
 800498e:	e00e      	b.n	80049ae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	621a      	str	r2, [r3, #32]
 800499a:	e008      	b.n	80049ae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6211      	str	r1, [r2, #32]
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4619      	mov	r1, r3
 80049bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fefd 	bl	8004814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b22      	cmp	r3, #34	; 0x22
 8004a36:	d171      	bne.n	8004b1c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a40:	d123      	bne.n	8004a8a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10e      	bne.n	8004a6e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a6c:	e029      	b.n	8004ac2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
 8004a88:	e01b      	b.n	8004ac2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6858      	ldr	r0, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	1c59      	adds	r1, r3, #1
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6291      	str	r1, [r2, #40]	; 0x28
 8004aa2:	b2c2      	uxtb	r2, r0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e00c      	b.n	8004ac2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	1c58      	adds	r0, r3, #1
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	6288      	str	r0, [r1, #40]	; 0x28
 8004aba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d120      	bne.n	8004b18 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0220 	bic.w	r2, r2, #32
 8004ae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fe8a 	bl	8004828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e002      	b.n	8004b1e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e000      	b.n	8004b1e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b6a:	f023 030c 	bic.w	r3, r3, #12
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b96:	f040 818b 	bne.w	8004eb0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4ac1      	ldr	r2, [pc, #772]	; (8004ea4 <UART_SetConfig+0x37c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d005      	beq.n	8004bb0 <UART_SetConfig+0x88>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4abf      	ldr	r2, [pc, #764]	; (8004ea8 <UART_SetConfig+0x380>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	f040 80bd 	bne.w	8004d2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bb0:	f7ff fc36 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8004bb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	461d      	mov	r5, r3
 8004bba:	f04f 0600 	mov.w	r6, #0
 8004bbe:	46a8      	mov	r8, r5
 8004bc0:	46b1      	mov	r9, r6
 8004bc2:	eb18 0308 	adds.w	r3, r8, r8
 8004bc6:	eb49 0409 	adc.w	r4, r9, r9
 8004bca:	4698      	mov	r8, r3
 8004bcc:	46a1      	mov	r9, r4
 8004bce:	eb18 0805 	adds.w	r8, r8, r5
 8004bd2:	eb49 0906 	adc.w	r9, r9, r6
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004be2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004be6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bea:	4688      	mov	r8, r1
 8004bec:	4691      	mov	r9, r2
 8004bee:	eb18 0005 	adds.w	r0, r8, r5
 8004bf2:	eb49 0106 	adc.w	r1, r9, r6
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	f04f 0600 	mov.w	r6, #0
 8004c00:	196b      	adds	r3, r5, r5
 8004c02:	eb46 0406 	adc.w	r4, r6, r6
 8004c06:	461a      	mov	r2, r3
 8004c08:	4623      	mov	r3, r4
 8004c0a:	f7fc f81d 	bl	8000c48 <__aeabi_uldivmod>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	460c      	mov	r4, r1
 8004c12:	461a      	mov	r2, r3
 8004c14:	4ba5      	ldr	r3, [pc, #660]	; (8004eac <UART_SetConfig+0x384>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	461d      	mov	r5, r3
 8004c24:	f04f 0600 	mov.w	r6, #0
 8004c28:	46a9      	mov	r9, r5
 8004c2a:	46b2      	mov	sl, r6
 8004c2c:	eb19 0309 	adds.w	r3, r9, r9
 8004c30:	eb4a 040a 	adc.w	r4, sl, sl
 8004c34:	4699      	mov	r9, r3
 8004c36:	46a2      	mov	sl, r4
 8004c38:	eb19 0905 	adds.w	r9, r9, r5
 8004c3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c54:	4689      	mov	r9, r1
 8004c56:	4692      	mov	sl, r2
 8004c58:	eb19 0005 	adds.w	r0, r9, r5
 8004c5c:	eb4a 0106 	adc.w	r1, sl, r6
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	461d      	mov	r5, r3
 8004c66:	f04f 0600 	mov.w	r6, #0
 8004c6a:	196b      	adds	r3, r5, r5
 8004c6c:	eb46 0406 	adc.w	r4, r6, r6
 8004c70:	461a      	mov	r2, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	f7fb ffe8 	bl	8000c48 <__aeabi_uldivmod>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4b8b      	ldr	r3, [pc, #556]	; (8004eac <UART_SetConfig+0x384>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	; 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	3332      	adds	r3, #50	; 0x32
 8004c92:	4a86      	ldr	r2, [pc, #536]	; (8004eac <UART_SetConfig+0x384>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca0:	4498      	add	r8, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	461d      	mov	r5, r3
 8004ca6:	f04f 0600 	mov.w	r6, #0
 8004caa:	46a9      	mov	r9, r5
 8004cac:	46b2      	mov	sl, r6
 8004cae:	eb19 0309 	adds.w	r3, r9, r9
 8004cb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb6:	4699      	mov	r9, r3
 8004cb8:	46a2      	mov	sl, r4
 8004cba:	eb19 0905 	adds.w	r9, r9, r5
 8004cbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd6:	4689      	mov	r9, r1
 8004cd8:	4692      	mov	sl, r2
 8004cda:	eb19 0005 	adds.w	r0, r9, r5
 8004cde:	eb4a 0106 	adc.w	r1, sl, r6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	f04f 0600 	mov.w	r6, #0
 8004cec:	196b      	adds	r3, r5, r5
 8004cee:	eb46 0406 	adc.w	r4, r6, r6
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	f7fb ffa7 	bl	8000c48 <__aeabi_uldivmod>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b6a      	ldr	r3, [pc, #424]	; (8004eac <UART_SetConfig+0x384>)
 8004d02:	fba3 1302 	umull	r1, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2164      	movs	r1, #100	; 0x64
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	3332      	adds	r3, #50	; 0x32
 8004d14:	4a65      	ldr	r2, [pc, #404]	; (8004eac <UART_SetConfig+0x384>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	f003 0207 	and.w	r2, r3, #7
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4442      	add	r2, r8
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	e26f      	b.n	800520a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d2a:	f7ff fb65 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8004d2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	461d      	mov	r5, r3
 8004d34:	f04f 0600 	mov.w	r6, #0
 8004d38:	46a8      	mov	r8, r5
 8004d3a:	46b1      	mov	r9, r6
 8004d3c:	eb18 0308 	adds.w	r3, r8, r8
 8004d40:	eb49 0409 	adc.w	r4, r9, r9
 8004d44:	4698      	mov	r8, r3
 8004d46:	46a1      	mov	r9, r4
 8004d48:	eb18 0805 	adds.w	r8, r8, r5
 8004d4c:	eb49 0906 	adc.w	r9, r9, r6
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d64:	4688      	mov	r8, r1
 8004d66:	4691      	mov	r9, r2
 8004d68:	eb18 0005 	adds.w	r0, r8, r5
 8004d6c:	eb49 0106 	adc.w	r1, r9, r6
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	461d      	mov	r5, r3
 8004d76:	f04f 0600 	mov.w	r6, #0
 8004d7a:	196b      	adds	r3, r5, r5
 8004d7c:	eb46 0406 	adc.w	r4, r6, r6
 8004d80:	461a      	mov	r2, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	f7fb ff60 	bl	8000c48 <__aeabi_uldivmod>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b47      	ldr	r3, [pc, #284]	; (8004eac <UART_SetConfig+0x384>)
 8004d90:	fba3 2302 	umull	r2, r3, r3, r2
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	461d      	mov	r5, r3
 8004d9e:	f04f 0600 	mov.w	r6, #0
 8004da2:	46a9      	mov	r9, r5
 8004da4:	46b2      	mov	sl, r6
 8004da6:	eb19 0309 	adds.w	r3, r9, r9
 8004daa:	eb4a 040a 	adc.w	r4, sl, sl
 8004dae:	4699      	mov	r9, r3
 8004db0:	46a2      	mov	sl, r4
 8004db2:	eb19 0905 	adds.w	r9, r9, r5
 8004db6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dce:	4689      	mov	r9, r1
 8004dd0:	4692      	mov	sl, r2
 8004dd2:	eb19 0005 	adds.w	r0, r9, r5
 8004dd6:	eb4a 0106 	adc.w	r1, sl, r6
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	461d      	mov	r5, r3
 8004de0:	f04f 0600 	mov.w	r6, #0
 8004de4:	196b      	adds	r3, r5, r5
 8004de6:	eb46 0406 	adc.w	r4, r6, r6
 8004dea:	461a      	mov	r2, r3
 8004dec:	4623      	mov	r3, r4
 8004dee:	f7fb ff2b 	bl	8000c48 <__aeabi_uldivmod>
 8004df2:	4603      	mov	r3, r0
 8004df4:	460c      	mov	r4, r1
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <UART_SetConfig+0x384>)
 8004dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	2164      	movs	r1, #100	; 0x64
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	3332      	adds	r3, #50	; 0x32
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <UART_SetConfig+0x384>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e1a:	4498      	add	r8, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	461d      	mov	r5, r3
 8004e20:	f04f 0600 	mov.w	r6, #0
 8004e24:	46a9      	mov	r9, r5
 8004e26:	46b2      	mov	sl, r6
 8004e28:	eb19 0309 	adds.w	r3, r9, r9
 8004e2c:	eb4a 040a 	adc.w	r4, sl, sl
 8004e30:	4699      	mov	r9, r3
 8004e32:	46a2      	mov	sl, r4
 8004e34:	eb19 0905 	adds.w	r9, r9, r5
 8004e38:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e50:	4689      	mov	r9, r1
 8004e52:	4692      	mov	sl, r2
 8004e54:	eb19 0005 	adds.w	r0, r9, r5
 8004e58:	eb4a 0106 	adc.w	r1, sl, r6
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	461d      	mov	r5, r3
 8004e62:	f04f 0600 	mov.w	r6, #0
 8004e66:	196b      	adds	r3, r5, r5
 8004e68:	eb46 0406 	adc.w	r4, r6, r6
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4623      	mov	r3, r4
 8004e70:	f7fb feea 	bl	8000c48 <__aeabi_uldivmod>
 8004e74:	4603      	mov	r3, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <UART_SetConfig+0x384>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	3332      	adds	r3, #50	; 0x32
 8004e8e:	4a07      	ldr	r2, [pc, #28]	; (8004eac <UART_SetConfig+0x384>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 0207 	and.w	r2, r3, #7
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4442      	add	r2, r8
 8004ea0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ea2:	e1b2      	b.n	800520a <UART_SetConfig+0x6e2>
 8004ea4:	40011000 	.word	0x40011000
 8004ea8:	40011400 	.word	0x40011400
 8004eac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4ad7      	ldr	r2, [pc, #860]	; (8005214 <UART_SetConfig+0x6ec>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d005      	beq.n	8004ec6 <UART_SetConfig+0x39e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4ad6      	ldr	r2, [pc, #856]	; (8005218 <UART_SetConfig+0x6f0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	f040 80d1 	bne.w	8005068 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ec6:	f7ff faab 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8004eca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	469a      	mov	sl, r3
 8004ed0:	f04f 0b00 	mov.w	fp, #0
 8004ed4:	46d0      	mov	r8, sl
 8004ed6:	46d9      	mov	r9, fp
 8004ed8:	eb18 0308 	adds.w	r3, r8, r8
 8004edc:	eb49 0409 	adc.w	r4, r9, r9
 8004ee0:	4698      	mov	r8, r3
 8004ee2:	46a1      	mov	r9, r4
 8004ee4:	eb18 080a 	adds.w	r8, r8, sl
 8004ee8:	eb49 090b 	adc.w	r9, r9, fp
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ef8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004efc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f00:	4688      	mov	r8, r1
 8004f02:	4691      	mov	r9, r2
 8004f04:	eb1a 0508 	adds.w	r5, sl, r8
 8004f08:	eb4b 0609 	adc.w	r6, fp, r9
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4619      	mov	r1, r3
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	f04f 0400 	mov.w	r4, #0
 8004f1e:	0094      	lsls	r4, r2, #2
 8004f20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f24:	008b      	lsls	r3, r1, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	4623      	mov	r3, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	f7fb fe8b 	bl	8000c48 <__aeabi_uldivmod>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	461a      	mov	r2, r3
 8004f38:	4bb8      	ldr	r3, [pc, #736]	; (800521c <UART_SetConfig+0x6f4>)
 8004f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	469b      	mov	fp, r3
 8004f48:	f04f 0c00 	mov.w	ip, #0
 8004f4c:	46d9      	mov	r9, fp
 8004f4e:	46e2      	mov	sl, ip
 8004f50:	eb19 0309 	adds.w	r3, r9, r9
 8004f54:	eb4a 040a 	adc.w	r4, sl, sl
 8004f58:	4699      	mov	r9, r3
 8004f5a:	46a2      	mov	sl, r4
 8004f5c:	eb19 090b 	adds.w	r9, r9, fp
 8004f60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f64:	f04f 0100 	mov.w	r1, #0
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f78:	4689      	mov	r9, r1
 8004f7a:	4692      	mov	sl, r2
 8004f7c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f80:	eb4c 060a 	adc.w	r6, ip, sl
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	0094      	lsls	r4, r2, #2
 8004f98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f9c:	008b      	lsls	r3, r1, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	f7fb fe4f 	bl	8000c48 <__aeabi_uldivmod>
 8004faa:	4603      	mov	r3, r0
 8004fac:	460c      	mov	r4, r1
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b9a      	ldr	r3, [pc, #616]	; (800521c <UART_SetConfig+0x6f4>)
 8004fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2164      	movs	r1, #100	; 0x64
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	3332      	adds	r3, #50	; 0x32
 8004fc4:	4a95      	ldr	r2, [pc, #596]	; (800521c <UART_SetConfig+0x6f4>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd0:	4498      	add	r8, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	469b      	mov	fp, r3
 8004fd6:	f04f 0c00 	mov.w	ip, #0
 8004fda:	46d9      	mov	r9, fp
 8004fdc:	46e2      	mov	sl, ip
 8004fde:	eb19 0309 	adds.w	r3, r9, r9
 8004fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8004fe6:	4699      	mov	r9, r3
 8004fe8:	46a2      	mov	sl, r4
 8004fea:	eb19 090b 	adds.w	r9, r9, fp
 8004fee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ff2:	f04f 0100 	mov.w	r1, #0
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005006:	4689      	mov	r9, r1
 8005008:	4692      	mov	sl, r2
 800500a:	eb1b 0509 	adds.w	r5, fp, r9
 800500e:	eb4c 060a 	adc.w	r6, ip, sl
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4619      	mov	r1, r3
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	f04f 0400 	mov.w	r4, #0
 8005024:	0094      	lsls	r4, r2, #2
 8005026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800502a:	008b      	lsls	r3, r1, #2
 800502c:	461a      	mov	r2, r3
 800502e:	4623      	mov	r3, r4
 8005030:	4628      	mov	r0, r5
 8005032:	4631      	mov	r1, r6
 8005034:	f7fb fe08 	bl	8000c48 <__aeabi_uldivmod>
 8005038:	4603      	mov	r3, r0
 800503a:	460c      	mov	r4, r1
 800503c:	461a      	mov	r2, r3
 800503e:	4b77      	ldr	r3, [pc, #476]	; (800521c <UART_SetConfig+0x6f4>)
 8005040:	fba3 1302 	umull	r1, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	2164      	movs	r1, #100	; 0x64
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	3332      	adds	r3, #50	; 0x32
 8005052:	4a72      	ldr	r2, [pc, #456]	; (800521c <UART_SetConfig+0x6f4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f003 020f 	and.w	r2, r3, #15
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4442      	add	r2, r8
 8005064:	609a      	str	r2, [r3, #8]
 8005066:	e0d0      	b.n	800520a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7ff f9c6 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 800506c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	469a      	mov	sl, r3
 8005072:	f04f 0b00 	mov.w	fp, #0
 8005076:	46d0      	mov	r8, sl
 8005078:	46d9      	mov	r9, fp
 800507a:	eb18 0308 	adds.w	r3, r8, r8
 800507e:	eb49 0409 	adc.w	r4, r9, r9
 8005082:	4698      	mov	r8, r3
 8005084:	46a1      	mov	r9, r4
 8005086:	eb18 080a 	adds.w	r8, r8, sl
 800508a:	eb49 090b 	adc.w	r9, r9, fp
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800509a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800509e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050a2:	4688      	mov	r8, r1
 80050a4:	4691      	mov	r9, r2
 80050a6:	eb1a 0508 	adds.w	r5, sl, r8
 80050aa:	eb4b 0609 	adc.w	r6, fp, r9
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4619      	mov	r1, r3
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	f04f 0400 	mov.w	r4, #0
 80050c0:	0094      	lsls	r4, r2, #2
 80050c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050c6:	008b      	lsls	r3, r1, #2
 80050c8:	461a      	mov	r2, r3
 80050ca:	4623      	mov	r3, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	4631      	mov	r1, r6
 80050d0:	f7fb fdba 	bl	8000c48 <__aeabi_uldivmod>
 80050d4:	4603      	mov	r3, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	461a      	mov	r2, r3
 80050da:	4b50      	ldr	r3, [pc, #320]	; (800521c <UART_SetConfig+0x6f4>)
 80050dc:	fba3 2302 	umull	r2, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	469b      	mov	fp, r3
 80050ea:	f04f 0c00 	mov.w	ip, #0
 80050ee:	46d9      	mov	r9, fp
 80050f0:	46e2      	mov	sl, ip
 80050f2:	eb19 0309 	adds.w	r3, r9, r9
 80050f6:	eb4a 040a 	adc.w	r4, sl, sl
 80050fa:	4699      	mov	r9, r3
 80050fc:	46a2      	mov	sl, r4
 80050fe:	eb19 090b 	adds.w	r9, r9, fp
 8005102:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005106:	f04f 0100 	mov.w	r1, #0
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800511a:	4689      	mov	r9, r1
 800511c:	4692      	mov	sl, r2
 800511e:	eb1b 0509 	adds.w	r5, fp, r9
 8005122:	eb4c 060a 	adc.w	r6, ip, sl
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4619      	mov	r1, r3
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	0094      	lsls	r4, r2, #2
 800513a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800513e:	008b      	lsls	r3, r1, #2
 8005140:	461a      	mov	r2, r3
 8005142:	4623      	mov	r3, r4
 8005144:	4628      	mov	r0, r5
 8005146:	4631      	mov	r1, r6
 8005148:	f7fb fd7e 	bl	8000c48 <__aeabi_uldivmod>
 800514c:	4603      	mov	r3, r0
 800514e:	460c      	mov	r4, r1
 8005150:	461a      	mov	r2, r3
 8005152:	4b32      	ldr	r3, [pc, #200]	; (800521c <UART_SetConfig+0x6f4>)
 8005154:	fba3 1302 	umull	r1, r3, r3, r2
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	2164      	movs	r1, #100	; 0x64
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	3332      	adds	r3, #50	; 0x32
 8005166:	4a2d      	ldr	r2, [pc, #180]	; (800521c <UART_SetConfig+0x6f4>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005172:	4498      	add	r8, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	469b      	mov	fp, r3
 8005178:	f04f 0c00 	mov.w	ip, #0
 800517c:	46d9      	mov	r9, fp
 800517e:	46e2      	mov	sl, ip
 8005180:	eb19 0309 	adds.w	r3, r9, r9
 8005184:	eb4a 040a 	adc.w	r4, sl, sl
 8005188:	4699      	mov	r9, r3
 800518a:	46a2      	mov	sl, r4
 800518c:	eb19 090b 	adds.w	r9, r9, fp
 8005190:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051a8:	4689      	mov	r9, r1
 80051aa:	4692      	mov	sl, r2
 80051ac:	eb1b 0509 	adds.w	r5, fp, r9
 80051b0:	eb4c 060a 	adc.w	r6, ip, sl
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	f04f 0400 	mov.w	r4, #0
 80051c6:	0094      	lsls	r4, r2, #2
 80051c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051cc:	008b      	lsls	r3, r1, #2
 80051ce:	461a      	mov	r2, r3
 80051d0:	4623      	mov	r3, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	4631      	mov	r1, r6
 80051d6:	f7fb fd37 	bl	8000c48 <__aeabi_uldivmod>
 80051da:	4603      	mov	r3, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	461a      	mov	r2, r3
 80051e0:	4b0e      	ldr	r3, [pc, #56]	; (800521c <UART_SetConfig+0x6f4>)
 80051e2:	fba3 1302 	umull	r1, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2164      	movs	r1, #100	; 0x64
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	; 0x32
 80051f4:	4a09      	ldr	r2, [pc, #36]	; (800521c <UART_SetConfig+0x6f4>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4442      	add	r2, r8
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	e7ff      	b.n	800520a <UART_SetConfig+0x6e2>
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005214:	40011000 	.word	0x40011000
 8005218:	40011400 	.word	0x40011400
 800521c:	51eb851f 	.word	0x51eb851f

08005220 <asin>:
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	ed2d 8b02 	vpush	{d8}
 8005226:	4e26      	ldr	r6, [pc, #152]	; (80052c0 <asin+0xa0>)
 8005228:	b08b      	sub	sp, #44	; 0x2c
 800522a:	ec55 4b10 	vmov	r4, r5, d0
 800522e:	f000 f853 	bl	80052d8 <__ieee754_asin>
 8005232:	f996 3000 	ldrsb.w	r3, [r6]
 8005236:	eeb0 8a40 	vmov.f32	s16, s0
 800523a:	eef0 8a60 	vmov.f32	s17, s1
 800523e:	3301      	adds	r3, #1
 8005240:	d036      	beq.n	80052b0 <asin+0x90>
 8005242:	4622      	mov	r2, r4
 8005244:	462b      	mov	r3, r5
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb fc6f 	bl	8000b2c <__aeabi_dcmpun>
 800524e:	4607      	mov	r7, r0
 8005250:	bb70      	cbnz	r0, 80052b0 <asin+0x90>
 8005252:	ec45 4b10 	vmov	d0, r4, r5
 8005256:	f000 fd7f 	bl	8005d58 <fabs>
 800525a:	2200      	movs	r2, #0
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <asin+0xa4>)
 800525e:	ec51 0b10 	vmov	r0, r1, d0
 8005262:	f7fb fc59 	bl	8000b18 <__aeabi_dcmpgt>
 8005266:	b318      	cbz	r0, 80052b0 <asin+0x90>
 8005268:	2301      	movs	r3, #1
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	4816      	ldr	r0, [pc, #88]	; (80052c8 <asin+0xa8>)
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <asin+0xac>)
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	9708      	str	r7, [sp, #32]
 8005274:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005278:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800527c:	f000 fd78 	bl	8005d70 <nan>
 8005280:	f996 3000 	ldrsb.w	r3, [r6]
 8005284:	2b02      	cmp	r3, #2
 8005286:	ed8d 0b06 	vstr	d0, [sp, #24]
 800528a:	d104      	bne.n	8005296 <asin+0x76>
 800528c:	f000 fd78 	bl	8005d80 <__errno>
 8005290:	2321      	movs	r3, #33	; 0x21
 8005292:	6003      	str	r3, [r0, #0]
 8005294:	e004      	b.n	80052a0 <asin+0x80>
 8005296:	4668      	mov	r0, sp
 8005298:	f000 fd67 	bl	8005d6a <matherr>
 800529c:	2800      	cmp	r0, #0
 800529e:	d0f5      	beq.n	800528c <asin+0x6c>
 80052a0:	9b08      	ldr	r3, [sp, #32]
 80052a2:	b11b      	cbz	r3, 80052ac <asin+0x8c>
 80052a4:	f000 fd6c 	bl	8005d80 <__errno>
 80052a8:	9b08      	ldr	r3, [sp, #32]
 80052aa:	6003      	str	r3, [r0, #0]
 80052ac:	ed9d 8b06 	vldr	d8, [sp, #24]
 80052b0:	eeb0 0a48 	vmov.f32	s0, s16
 80052b4:	eef0 0a68 	vmov.f32	s1, s17
 80052b8:	b00b      	add	sp, #44	; 0x2c
 80052ba:	ecbd 8b02 	vpop	{d8}
 80052be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c0:	20000011 	.word	0x20000011
 80052c4:	3ff00000 	.word	0x3ff00000
 80052c8:	08008829 	.word	0x08008829
 80052cc:	08008634 	.word	0x08008634

080052d0 <atan2>:
 80052d0:	f000 ba12 	b.w	80056f8 <__ieee754_atan2>
 80052d4:	0000      	movs	r0, r0
	...

080052d8 <__ieee754_asin>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	ec55 4b10 	vmov	r4, r5, d0
 80052e0:	4bcb      	ldr	r3, [pc, #812]	; (8005610 <__ieee754_asin+0x338>)
 80052e2:	b087      	sub	sp, #28
 80052e4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80052e8:	429f      	cmp	r7, r3
 80052ea:	9501      	str	r5, [sp, #4]
 80052ec:	dd31      	ble.n	8005352 <__ieee754_asin+0x7a>
 80052ee:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80052f2:	ee10 3a10 	vmov	r3, s0
 80052f6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80052fa:	433b      	orrs	r3, r7
 80052fc:	d117      	bne.n	800532e <__ieee754_asin+0x56>
 80052fe:	a3aa      	add	r3, pc, #680	; (adr r3, 80055a8 <__ieee754_asin+0x2d0>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	ee10 0a10 	vmov	r0, s0
 8005308:	4629      	mov	r1, r5
 800530a:	f7fb f975 	bl	80005f8 <__aeabi_dmul>
 800530e:	a3a8      	add	r3, pc, #672	; (adr r3, 80055b0 <__ieee754_asin+0x2d8>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	4606      	mov	r6, r0
 8005316:	460f      	mov	r7, r1
 8005318:	4620      	mov	r0, r4
 800531a:	4629      	mov	r1, r5
 800531c:	f7fb f96c 	bl	80005f8 <__aeabi_dmul>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4630      	mov	r0, r6
 8005326:	4639      	mov	r1, r7
 8005328:	f7fa ffb0 	bl	800028c <__adddf3>
 800532c:	e00a      	b.n	8005344 <__ieee754_asin+0x6c>
 800532e:	ee10 2a10 	vmov	r2, s0
 8005332:	462b      	mov	r3, r5
 8005334:	4620      	mov	r0, r4
 8005336:	4629      	mov	r1, r5
 8005338:	f7fa ffa6 	bl	8000288 <__aeabi_dsub>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	f7fb fa84 	bl	800084c <__aeabi_ddiv>
 8005344:	4604      	mov	r4, r0
 8005346:	460d      	mov	r5, r1
 8005348:	ec45 4b10 	vmov	d0, r4, r5
 800534c:	b007      	add	sp, #28
 800534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005352:	4bb0      	ldr	r3, [pc, #704]	; (8005614 <__ieee754_asin+0x33c>)
 8005354:	429f      	cmp	r7, r3
 8005356:	dc11      	bgt.n	800537c <__ieee754_asin+0xa4>
 8005358:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800535c:	f280 80ae 	bge.w	80054bc <__ieee754_asin+0x1e4>
 8005360:	a395      	add	r3, pc, #596	; (adr r3, 80055b8 <__ieee754_asin+0x2e0>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	ee10 0a10 	vmov	r0, s0
 800536a:	4629      	mov	r1, r5
 800536c:	f7fa ff8e 	bl	800028c <__adddf3>
 8005370:	2200      	movs	r2, #0
 8005372:	4ba9      	ldr	r3, [pc, #676]	; (8005618 <__ieee754_asin+0x340>)
 8005374:	f7fb fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8005378:	2800      	cmp	r0, #0
 800537a:	d1e5      	bne.n	8005348 <__ieee754_asin+0x70>
 800537c:	ec45 4b10 	vmov	d0, r4, r5
 8005380:	f000 fcea 	bl	8005d58 <fabs>
 8005384:	2000      	movs	r0, #0
 8005386:	ec53 2b10 	vmov	r2, r3, d0
 800538a:	49a3      	ldr	r1, [pc, #652]	; (8005618 <__ieee754_asin+0x340>)
 800538c:	f7fa ff7c 	bl	8000288 <__aeabi_dsub>
 8005390:	2200      	movs	r2, #0
 8005392:	4ba2      	ldr	r3, [pc, #648]	; (800561c <__ieee754_asin+0x344>)
 8005394:	f7fb f930 	bl	80005f8 <__aeabi_dmul>
 8005398:	a389      	add	r3, pc, #548	; (adr r3, 80055c0 <__ieee754_asin+0x2e8>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	4604      	mov	r4, r0
 80053a0:	460d      	mov	r5, r1
 80053a2:	f7fb f929 	bl	80005f8 <__aeabi_dmul>
 80053a6:	a388      	add	r3, pc, #544	; (adr r3, 80055c8 <__ieee754_asin+0x2f0>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fa ff6e 	bl	800028c <__adddf3>
 80053b0:	4622      	mov	r2, r4
 80053b2:	462b      	mov	r3, r5
 80053b4:	f7fb f920 	bl	80005f8 <__aeabi_dmul>
 80053b8:	a385      	add	r3, pc, #532	; (adr r3, 80055d0 <__ieee754_asin+0x2f8>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa ff63 	bl	8000288 <__aeabi_dsub>
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f7fb f917 	bl	80005f8 <__aeabi_dmul>
 80053ca:	a383      	add	r3, pc, #524	; (adr r3, 80055d8 <__ieee754_asin+0x300>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fa ff5c 	bl	800028c <__adddf3>
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	f7fb f90e 	bl	80005f8 <__aeabi_dmul>
 80053dc:	a380      	add	r3, pc, #512	; (adr r3, 80055e0 <__ieee754_asin+0x308>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fa ff51 	bl	8000288 <__aeabi_dsub>
 80053e6:	4622      	mov	r2, r4
 80053e8:	462b      	mov	r3, r5
 80053ea:	f7fb f905 	bl	80005f8 <__aeabi_dmul>
 80053ee:	a37e      	add	r3, pc, #504	; (adr r3, 80055e8 <__ieee754_asin+0x310>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fa ff4a 	bl	800028c <__adddf3>
 80053f8:	4622      	mov	r2, r4
 80053fa:	462b      	mov	r3, r5
 80053fc:	f7fb f8fc 	bl	80005f8 <__aeabi_dmul>
 8005400:	a37b      	add	r3, pc, #492	; (adr r3, 80055f0 <__ieee754_asin+0x318>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	4680      	mov	r8, r0
 8005408:	4689      	mov	r9, r1
 800540a:	4620      	mov	r0, r4
 800540c:	4629      	mov	r1, r5
 800540e:	f7fb f8f3 	bl	80005f8 <__aeabi_dmul>
 8005412:	a379      	add	r3, pc, #484	; (adr r3, 80055f8 <__ieee754_asin+0x320>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa ff36 	bl	8000288 <__aeabi_dsub>
 800541c:	4622      	mov	r2, r4
 800541e:	462b      	mov	r3, r5
 8005420:	f7fb f8ea 	bl	80005f8 <__aeabi_dmul>
 8005424:	a376      	add	r3, pc, #472	; (adr r3, 8005600 <__ieee754_asin+0x328>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa ff2f 	bl	800028c <__adddf3>
 800542e:	4622      	mov	r2, r4
 8005430:	462b      	mov	r3, r5
 8005432:	f7fb f8e1 	bl	80005f8 <__aeabi_dmul>
 8005436:	a374      	add	r3, pc, #464	; (adr r3, 8005608 <__ieee754_asin+0x330>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fa ff24 	bl	8000288 <__aeabi_dsub>
 8005440:	4622      	mov	r2, r4
 8005442:	462b      	mov	r3, r5
 8005444:	f7fb f8d8 	bl	80005f8 <__aeabi_dmul>
 8005448:	4b73      	ldr	r3, [pc, #460]	; (8005618 <__ieee754_asin+0x340>)
 800544a:	2200      	movs	r2, #0
 800544c:	f7fa ff1e 	bl	800028c <__adddf3>
 8005450:	ec45 4b10 	vmov	d0, r4, r5
 8005454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005458:	f000 fa2c 	bl	80058b4 <__ieee754_sqrt>
 800545c:	4b70      	ldr	r3, [pc, #448]	; (8005620 <__ieee754_asin+0x348>)
 800545e:	429f      	cmp	r7, r3
 8005460:	ec5b ab10 	vmov	sl, fp, d0
 8005464:	f340 80de 	ble.w	8005624 <__ieee754_asin+0x34c>
 8005468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb f9ec 	bl	800084c <__aeabi_ddiv>
 8005474:	4652      	mov	r2, sl
 8005476:	465b      	mov	r3, fp
 8005478:	f7fb f8be 	bl	80005f8 <__aeabi_dmul>
 800547c:	4652      	mov	r2, sl
 800547e:	465b      	mov	r3, fp
 8005480:	f7fa ff04 	bl	800028c <__adddf3>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	f7fa ff00 	bl	800028c <__adddf3>
 800548c:	a348      	add	r3, pc, #288	; (adr r3, 80055b0 <__ieee754_asin+0x2d8>)
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f7fa fef9 	bl	8000288 <__aeabi_dsub>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	a143      	add	r1, pc, #268	; (adr r1, 80055a8 <__ieee754_asin+0x2d0>)
 800549c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a0:	f7fa fef2 	bl	8000288 <__aeabi_dsub>
 80054a4:	9b01      	ldr	r3, [sp, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfdc      	itt	le
 80054aa:	4602      	movle	r2, r0
 80054ac:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80054b0:	4604      	mov	r4, r0
 80054b2:	460d      	mov	r5, r1
 80054b4:	bfdc      	itt	le
 80054b6:	4614      	movle	r4, r2
 80054b8:	461d      	movle	r5, r3
 80054ba:	e745      	b.n	8005348 <__ieee754_asin+0x70>
 80054bc:	ee10 2a10 	vmov	r2, s0
 80054c0:	ee10 0a10 	vmov	r0, s0
 80054c4:	462b      	mov	r3, r5
 80054c6:	4629      	mov	r1, r5
 80054c8:	f7fb f896 	bl	80005f8 <__aeabi_dmul>
 80054cc:	a33c      	add	r3, pc, #240	; (adr r3, 80055c0 <__ieee754_asin+0x2e8>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	4606      	mov	r6, r0
 80054d4:	460f      	mov	r7, r1
 80054d6:	f7fb f88f 	bl	80005f8 <__aeabi_dmul>
 80054da:	a33b      	add	r3, pc, #236	; (adr r3, 80055c8 <__ieee754_asin+0x2f0>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fa fed4 	bl	800028c <__adddf3>
 80054e4:	4632      	mov	r2, r6
 80054e6:	463b      	mov	r3, r7
 80054e8:	f7fb f886 	bl	80005f8 <__aeabi_dmul>
 80054ec:	a338      	add	r3, pc, #224	; (adr r3, 80055d0 <__ieee754_asin+0x2f8>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f7fa fec9 	bl	8000288 <__aeabi_dsub>
 80054f6:	4632      	mov	r2, r6
 80054f8:	463b      	mov	r3, r7
 80054fa:	f7fb f87d 	bl	80005f8 <__aeabi_dmul>
 80054fe:	a336      	add	r3, pc, #216	; (adr r3, 80055d8 <__ieee754_asin+0x300>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fa fec2 	bl	800028c <__adddf3>
 8005508:	4632      	mov	r2, r6
 800550a:	463b      	mov	r3, r7
 800550c:	f7fb f874 	bl	80005f8 <__aeabi_dmul>
 8005510:	a333      	add	r3, pc, #204	; (adr r3, 80055e0 <__ieee754_asin+0x308>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f7fa feb7 	bl	8000288 <__aeabi_dsub>
 800551a:	4632      	mov	r2, r6
 800551c:	463b      	mov	r3, r7
 800551e:	f7fb f86b 	bl	80005f8 <__aeabi_dmul>
 8005522:	a331      	add	r3, pc, #196	; (adr r3, 80055e8 <__ieee754_asin+0x310>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fa feb0 	bl	800028c <__adddf3>
 800552c:	4632      	mov	r2, r6
 800552e:	463b      	mov	r3, r7
 8005530:	f7fb f862 	bl	80005f8 <__aeabi_dmul>
 8005534:	a32e      	add	r3, pc, #184	; (adr r3, 80055f0 <__ieee754_asin+0x318>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	4680      	mov	r8, r0
 800553c:	4689      	mov	r9, r1
 800553e:	4630      	mov	r0, r6
 8005540:	4639      	mov	r1, r7
 8005542:	f7fb f859 	bl	80005f8 <__aeabi_dmul>
 8005546:	a32c      	add	r3, pc, #176	; (adr r3, 80055f8 <__ieee754_asin+0x320>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fa fe9c 	bl	8000288 <__aeabi_dsub>
 8005550:	4632      	mov	r2, r6
 8005552:	463b      	mov	r3, r7
 8005554:	f7fb f850 	bl	80005f8 <__aeabi_dmul>
 8005558:	a329      	add	r3, pc, #164	; (adr r3, 8005600 <__ieee754_asin+0x328>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fa fe95 	bl	800028c <__adddf3>
 8005562:	4632      	mov	r2, r6
 8005564:	463b      	mov	r3, r7
 8005566:	f7fb f847 	bl	80005f8 <__aeabi_dmul>
 800556a:	a327      	add	r3, pc, #156	; (adr r3, 8005608 <__ieee754_asin+0x330>)
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f7fa fe8a 	bl	8000288 <__aeabi_dsub>
 8005574:	4632      	mov	r2, r6
 8005576:	463b      	mov	r3, r7
 8005578:	f7fb f83e 	bl	80005f8 <__aeabi_dmul>
 800557c:	2200      	movs	r2, #0
 800557e:	4b26      	ldr	r3, [pc, #152]	; (8005618 <__ieee754_asin+0x340>)
 8005580:	f7fa fe84 	bl	800028c <__adddf3>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4640      	mov	r0, r8
 800558a:	4649      	mov	r1, r9
 800558c:	f7fb f95e 	bl	800084c <__aeabi_ddiv>
 8005590:	4622      	mov	r2, r4
 8005592:	462b      	mov	r3, r5
 8005594:	f7fb f830 	bl	80005f8 <__aeabi_dmul>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4620      	mov	r0, r4
 800559e:	4629      	mov	r1, r5
 80055a0:	e6c2      	b.n	8005328 <__ieee754_asin+0x50>
 80055a2:	bf00      	nop
 80055a4:	f3af 8000 	nop.w
 80055a8:	54442d18 	.word	0x54442d18
 80055ac:	3ff921fb 	.word	0x3ff921fb
 80055b0:	33145c07 	.word	0x33145c07
 80055b4:	3c91a626 	.word	0x3c91a626
 80055b8:	8800759c 	.word	0x8800759c
 80055bc:	7e37e43c 	.word	0x7e37e43c
 80055c0:	0dfdf709 	.word	0x0dfdf709
 80055c4:	3f023de1 	.word	0x3f023de1
 80055c8:	7501b288 	.word	0x7501b288
 80055cc:	3f49efe0 	.word	0x3f49efe0
 80055d0:	b5688f3b 	.word	0xb5688f3b
 80055d4:	3fa48228 	.word	0x3fa48228
 80055d8:	0e884455 	.word	0x0e884455
 80055dc:	3fc9c155 	.word	0x3fc9c155
 80055e0:	03eb6f7d 	.word	0x03eb6f7d
 80055e4:	3fd4d612 	.word	0x3fd4d612
 80055e8:	55555555 	.word	0x55555555
 80055ec:	3fc55555 	.word	0x3fc55555
 80055f0:	b12e9282 	.word	0xb12e9282
 80055f4:	3fb3b8c5 	.word	0x3fb3b8c5
 80055f8:	1b8d0159 	.word	0x1b8d0159
 80055fc:	3fe6066c 	.word	0x3fe6066c
 8005600:	9c598ac8 	.word	0x9c598ac8
 8005604:	40002ae5 	.word	0x40002ae5
 8005608:	1c8a2d4b 	.word	0x1c8a2d4b
 800560c:	40033a27 	.word	0x40033a27
 8005610:	3fefffff 	.word	0x3fefffff
 8005614:	3fdfffff 	.word	0x3fdfffff
 8005618:	3ff00000 	.word	0x3ff00000
 800561c:	3fe00000 	.word	0x3fe00000
 8005620:	3fef3332 	.word	0x3fef3332
 8005624:	ee10 2a10 	vmov	r2, s0
 8005628:	ee10 0a10 	vmov	r0, s0
 800562c:	465b      	mov	r3, fp
 800562e:	4659      	mov	r1, fp
 8005630:	f7fa fe2c 	bl	800028c <__adddf3>
 8005634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800563c:	4640      	mov	r0, r8
 800563e:	4649      	mov	r1, r9
 8005640:	f7fb f904 	bl	800084c <__aeabi_ddiv>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800564c:	f7fa ffd4 	bl	80005f8 <__aeabi_dmul>
 8005650:	2600      	movs	r6, #0
 8005652:	4680      	mov	r8, r0
 8005654:	4689      	mov	r9, r1
 8005656:	4632      	mov	r2, r6
 8005658:	465b      	mov	r3, fp
 800565a:	4630      	mov	r0, r6
 800565c:	4659      	mov	r1, fp
 800565e:	f7fa ffcb 	bl	80005f8 <__aeabi_dmul>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	f7fa fe0d 	bl	8000288 <__aeabi_dsub>
 800566e:	4632      	mov	r2, r6
 8005670:	4604      	mov	r4, r0
 8005672:	460d      	mov	r5, r1
 8005674:	465b      	mov	r3, fp
 8005676:	4650      	mov	r0, sl
 8005678:	4659      	mov	r1, fp
 800567a:	f7fa fe07 	bl	800028c <__adddf3>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4620      	mov	r0, r4
 8005684:	4629      	mov	r1, r5
 8005686:	f7fb f8e1 	bl	800084c <__aeabi_ddiv>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	f7fa fdfd 	bl	800028c <__adddf3>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	a114      	add	r1, pc, #80	; (adr r1, 80056e8 <__ieee754_asin+0x410>)
 8005698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800569c:	f7fa fdf4 	bl	8000288 <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa fdee 	bl	8000288 <__aeabi_dsub>
 80056ac:	465f      	mov	r7, fp
 80056ae:	4604      	mov	r4, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	4632      	mov	r2, r6
 80056b4:	465b      	mov	r3, fp
 80056b6:	4630      	mov	r0, r6
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fa fde7 	bl	800028c <__adddf3>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	a10b      	add	r1, pc, #44	; (adr r1, 80056f0 <__ieee754_asin+0x418>)
 80056c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056c8:	f7fa fdde 	bl	8000288 <__aeabi_dsub>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4620      	mov	r0, r4
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7fa fdd8 	bl	8000288 <__aeabi_dsub>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	a104      	add	r1, pc, #16	; (adr r1, 80056f0 <__ieee754_asin+0x418>)
 80056de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056e2:	e6dd      	b.n	80054a0 <__ieee754_asin+0x1c8>
 80056e4:	f3af 8000 	nop.w
 80056e8:	33145c07 	.word	0x33145c07
 80056ec:	3c91a626 	.word	0x3c91a626
 80056f0:	54442d18 	.word	0x54442d18
 80056f4:	3fe921fb 	.word	0x3fe921fb

080056f8 <__ieee754_atan2>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	ec57 6b11 	vmov	r6, r7, d1
 8005700:	4273      	negs	r3, r6
 8005702:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005706:	4333      	orrs	r3, r6
 8005708:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80058b0 <__ieee754_atan2+0x1b8>
 800570c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005710:	4573      	cmp	r3, lr
 8005712:	ec51 0b10 	vmov	r0, r1, d0
 8005716:	ee11 8a10 	vmov	r8, s2
 800571a:	d80a      	bhi.n	8005732 <__ieee754_atan2+0x3a>
 800571c:	4244      	negs	r4, r0
 800571e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005722:	4304      	orrs	r4, r0
 8005724:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005728:	4574      	cmp	r4, lr
 800572a:	468c      	mov	ip, r1
 800572c:	ee10 9a10 	vmov	r9, s0
 8005730:	d907      	bls.n	8005742 <__ieee754_atan2+0x4a>
 8005732:	4632      	mov	r2, r6
 8005734:	463b      	mov	r3, r7
 8005736:	f7fa fda9 	bl	800028c <__adddf3>
 800573a:	ec41 0b10 	vmov	d0, r0, r1
 800573e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005742:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005746:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800574a:	4334      	orrs	r4, r6
 800574c:	d103      	bne.n	8005756 <__ieee754_atan2+0x5e>
 800574e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005752:	f000 b961 	b.w	8005a18 <atan>
 8005756:	17bc      	asrs	r4, r7, #30
 8005758:	f004 0402 	and.w	r4, r4, #2
 800575c:	ea53 0909 	orrs.w	r9, r3, r9
 8005760:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005764:	d107      	bne.n	8005776 <__ieee754_atan2+0x7e>
 8005766:	2c02      	cmp	r4, #2
 8005768:	d073      	beq.n	8005852 <__ieee754_atan2+0x15a>
 800576a:	2c03      	cmp	r4, #3
 800576c:	d1e5      	bne.n	800573a <__ieee754_atan2+0x42>
 800576e:	a13e      	add	r1, pc, #248	; (adr r1, 8005868 <__ieee754_atan2+0x170>)
 8005770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005774:	e7e1      	b.n	800573a <__ieee754_atan2+0x42>
 8005776:	ea52 0808 	orrs.w	r8, r2, r8
 800577a:	d106      	bne.n	800578a <__ieee754_atan2+0x92>
 800577c:	f1bc 0f00 	cmp.w	ip, #0
 8005780:	da6b      	bge.n	800585a <__ieee754_atan2+0x162>
 8005782:	a13b      	add	r1, pc, #236	; (adr r1, 8005870 <__ieee754_atan2+0x178>)
 8005784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005788:	e7d7      	b.n	800573a <__ieee754_atan2+0x42>
 800578a:	4572      	cmp	r2, lr
 800578c:	d120      	bne.n	80057d0 <__ieee754_atan2+0xd8>
 800578e:	4293      	cmp	r3, r2
 8005790:	d111      	bne.n	80057b6 <__ieee754_atan2+0xbe>
 8005792:	2c02      	cmp	r4, #2
 8005794:	d007      	beq.n	80057a6 <__ieee754_atan2+0xae>
 8005796:	2c03      	cmp	r4, #3
 8005798:	d009      	beq.n	80057ae <__ieee754_atan2+0xb6>
 800579a:	2c01      	cmp	r4, #1
 800579c:	d155      	bne.n	800584a <__ieee754_atan2+0x152>
 800579e:	a136      	add	r1, pc, #216	; (adr r1, 8005878 <__ieee754_atan2+0x180>)
 80057a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057a4:	e7c9      	b.n	800573a <__ieee754_atan2+0x42>
 80057a6:	a136      	add	r1, pc, #216	; (adr r1, 8005880 <__ieee754_atan2+0x188>)
 80057a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ac:	e7c5      	b.n	800573a <__ieee754_atan2+0x42>
 80057ae:	a136      	add	r1, pc, #216	; (adr r1, 8005888 <__ieee754_atan2+0x190>)
 80057b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057b4:	e7c1      	b.n	800573a <__ieee754_atan2+0x42>
 80057b6:	2c02      	cmp	r4, #2
 80057b8:	d04b      	beq.n	8005852 <__ieee754_atan2+0x15a>
 80057ba:	2c03      	cmp	r4, #3
 80057bc:	d0d7      	beq.n	800576e <__ieee754_atan2+0x76>
 80057be:	2c01      	cmp	r4, #1
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	d102      	bne.n	80057cc <__ieee754_atan2+0xd4>
 80057c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80057ca:	e7b6      	b.n	800573a <__ieee754_atan2+0x42>
 80057cc:	2100      	movs	r1, #0
 80057ce:	e7b4      	b.n	800573a <__ieee754_atan2+0x42>
 80057d0:	4573      	cmp	r3, lr
 80057d2:	d0d3      	beq.n	800577c <__ieee754_atan2+0x84>
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	151b      	asrs	r3, r3, #20
 80057d8:	2b3c      	cmp	r3, #60	; 0x3c
 80057da:	dc1e      	bgt.n	800581a <__ieee754_atan2+0x122>
 80057dc:	2f00      	cmp	r7, #0
 80057de:	da01      	bge.n	80057e4 <__ieee754_atan2+0xec>
 80057e0:	333c      	adds	r3, #60	; 0x3c
 80057e2:	db1e      	blt.n	8005822 <__ieee754_atan2+0x12a>
 80057e4:	4632      	mov	r2, r6
 80057e6:	463b      	mov	r3, r7
 80057e8:	f7fb f830 	bl	800084c <__aeabi_ddiv>
 80057ec:	ec41 0b10 	vmov	d0, r0, r1
 80057f0:	f000 fab2 	bl	8005d58 <fabs>
 80057f4:	f000 f910 	bl	8005a18 <atan>
 80057f8:	ec51 0b10 	vmov	r0, r1, d0
 80057fc:	2c01      	cmp	r4, #1
 80057fe:	d013      	beq.n	8005828 <__ieee754_atan2+0x130>
 8005800:	2c02      	cmp	r4, #2
 8005802:	d015      	beq.n	8005830 <__ieee754_atan2+0x138>
 8005804:	2c00      	cmp	r4, #0
 8005806:	d098      	beq.n	800573a <__ieee754_atan2+0x42>
 8005808:	a321      	add	r3, pc, #132	; (adr r3, 8005890 <__ieee754_atan2+0x198>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa fd3b 	bl	8000288 <__aeabi_dsub>
 8005812:	a321      	add	r3, pc, #132	; (adr r3, 8005898 <__ieee754_atan2+0x1a0>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	e014      	b.n	8005844 <__ieee754_atan2+0x14c>
 800581a:	a121      	add	r1, pc, #132	; (adr r1, 80058a0 <__ieee754_atan2+0x1a8>)
 800581c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005820:	e7ec      	b.n	80057fc <__ieee754_atan2+0x104>
 8005822:	2000      	movs	r0, #0
 8005824:	2100      	movs	r1, #0
 8005826:	e7e9      	b.n	80057fc <__ieee754_atan2+0x104>
 8005828:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800582c:	4619      	mov	r1, r3
 800582e:	e784      	b.n	800573a <__ieee754_atan2+0x42>
 8005830:	a317      	add	r3, pc, #92	; (adr r3, 8005890 <__ieee754_atan2+0x198>)
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f7fa fd27 	bl	8000288 <__aeabi_dsub>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	a116      	add	r1, pc, #88	; (adr r1, 8005898 <__ieee754_atan2+0x1a0>)
 8005840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005844:	f7fa fd20 	bl	8000288 <__aeabi_dsub>
 8005848:	e777      	b.n	800573a <__ieee754_atan2+0x42>
 800584a:	a117      	add	r1, pc, #92	; (adr r1, 80058a8 <__ieee754_atan2+0x1b0>)
 800584c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005850:	e773      	b.n	800573a <__ieee754_atan2+0x42>
 8005852:	a111      	add	r1, pc, #68	; (adr r1, 8005898 <__ieee754_atan2+0x1a0>)
 8005854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005858:	e76f      	b.n	800573a <__ieee754_atan2+0x42>
 800585a:	a111      	add	r1, pc, #68	; (adr r1, 80058a0 <__ieee754_atan2+0x1a8>)
 800585c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005860:	e76b      	b.n	800573a <__ieee754_atan2+0x42>
 8005862:	bf00      	nop
 8005864:	f3af 8000 	nop.w
 8005868:	54442d18 	.word	0x54442d18
 800586c:	c00921fb 	.word	0xc00921fb
 8005870:	54442d18 	.word	0x54442d18
 8005874:	bff921fb 	.word	0xbff921fb
 8005878:	54442d18 	.word	0x54442d18
 800587c:	bfe921fb 	.word	0xbfe921fb
 8005880:	7f3321d2 	.word	0x7f3321d2
 8005884:	4002d97c 	.word	0x4002d97c
 8005888:	7f3321d2 	.word	0x7f3321d2
 800588c:	c002d97c 	.word	0xc002d97c
 8005890:	33145c07 	.word	0x33145c07
 8005894:	3ca1a626 	.word	0x3ca1a626
 8005898:	54442d18 	.word	0x54442d18
 800589c:	400921fb 	.word	0x400921fb
 80058a0:	54442d18 	.word	0x54442d18
 80058a4:	3ff921fb 	.word	0x3ff921fb
 80058a8:	54442d18 	.word	0x54442d18
 80058ac:	3fe921fb 	.word	0x3fe921fb
 80058b0:	7ff00000 	.word	0x7ff00000

080058b4 <__ieee754_sqrt>:
 80058b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b8:	4955      	ldr	r1, [pc, #340]	; (8005a10 <__ieee754_sqrt+0x15c>)
 80058ba:	ec55 4b10 	vmov	r4, r5, d0
 80058be:	43a9      	bics	r1, r5
 80058c0:	462b      	mov	r3, r5
 80058c2:	462a      	mov	r2, r5
 80058c4:	d112      	bne.n	80058ec <__ieee754_sqrt+0x38>
 80058c6:	ee10 2a10 	vmov	r2, s0
 80058ca:	ee10 0a10 	vmov	r0, s0
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7fa fe92 	bl	80005f8 <__aeabi_dmul>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4620      	mov	r0, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	f7fa fcd6 	bl	800028c <__adddf3>
 80058e0:	4604      	mov	r4, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	ec45 4b10 	vmov	d0, r4, r5
 80058e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	ee10 0a10 	vmov	r0, s0
 80058f2:	4621      	mov	r1, r4
 80058f4:	dc0f      	bgt.n	8005916 <__ieee754_sqrt+0x62>
 80058f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80058fa:	4330      	orrs	r0, r6
 80058fc:	d0f2      	beq.n	80058e4 <__ieee754_sqrt+0x30>
 80058fe:	b155      	cbz	r5, 8005916 <__ieee754_sqrt+0x62>
 8005900:	ee10 2a10 	vmov	r2, s0
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fa fcbe 	bl	8000288 <__aeabi_dsub>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	f7fa ff9c 	bl	800084c <__aeabi_ddiv>
 8005914:	e7e4      	b.n	80058e0 <__ieee754_sqrt+0x2c>
 8005916:	151b      	asrs	r3, r3, #20
 8005918:	d073      	beq.n	8005a02 <__ieee754_sqrt+0x14e>
 800591a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800591e:	07dd      	lsls	r5, r3, #31
 8005920:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005924:	bf48      	it	mi
 8005926:	0fc8      	lsrmi	r0, r1, #31
 8005928:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800592c:	bf44      	itt	mi
 800592e:	0049      	lslmi	r1, r1, #1
 8005930:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005934:	2500      	movs	r5, #0
 8005936:	1058      	asrs	r0, r3, #1
 8005938:	0fcb      	lsrs	r3, r1, #31
 800593a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800593e:	0049      	lsls	r1, r1, #1
 8005940:	2316      	movs	r3, #22
 8005942:	462c      	mov	r4, r5
 8005944:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005948:	19a7      	adds	r7, r4, r6
 800594a:	4297      	cmp	r7, r2
 800594c:	bfde      	ittt	le
 800594e:	19bc      	addle	r4, r7, r6
 8005950:	1bd2      	suble	r2, r2, r7
 8005952:	19ad      	addle	r5, r5, r6
 8005954:	0fcf      	lsrs	r7, r1, #31
 8005956:	3b01      	subs	r3, #1
 8005958:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800595c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005960:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005964:	d1f0      	bne.n	8005948 <__ieee754_sqrt+0x94>
 8005966:	f04f 0c20 	mov.w	ip, #32
 800596a:	469e      	mov	lr, r3
 800596c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005970:	42a2      	cmp	r2, r4
 8005972:	eb06 070e 	add.w	r7, r6, lr
 8005976:	dc02      	bgt.n	800597e <__ieee754_sqrt+0xca>
 8005978:	d112      	bne.n	80059a0 <__ieee754_sqrt+0xec>
 800597a:	428f      	cmp	r7, r1
 800597c:	d810      	bhi.n	80059a0 <__ieee754_sqrt+0xec>
 800597e:	2f00      	cmp	r7, #0
 8005980:	eb07 0e06 	add.w	lr, r7, r6
 8005984:	da42      	bge.n	8005a0c <__ieee754_sqrt+0x158>
 8005986:	f1be 0f00 	cmp.w	lr, #0
 800598a:	db3f      	blt.n	8005a0c <__ieee754_sqrt+0x158>
 800598c:	f104 0801 	add.w	r8, r4, #1
 8005990:	1b12      	subs	r2, r2, r4
 8005992:	428f      	cmp	r7, r1
 8005994:	bf88      	it	hi
 8005996:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800599a:	1bc9      	subs	r1, r1, r7
 800599c:	4433      	add	r3, r6
 800599e:	4644      	mov	r4, r8
 80059a0:	0052      	lsls	r2, r2, #1
 80059a2:	f1bc 0c01 	subs.w	ip, ip, #1
 80059a6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80059aa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80059ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80059b2:	d1dd      	bne.n	8005970 <__ieee754_sqrt+0xbc>
 80059b4:	430a      	orrs	r2, r1
 80059b6:	d006      	beq.n	80059c6 <__ieee754_sqrt+0x112>
 80059b8:	1c5c      	adds	r4, r3, #1
 80059ba:	bf13      	iteet	ne
 80059bc:	3301      	addne	r3, #1
 80059be:	3501      	addeq	r5, #1
 80059c0:	4663      	moveq	r3, ip
 80059c2:	f023 0301 	bicne.w	r3, r3, #1
 80059c6:	106a      	asrs	r2, r5, #1
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	07e9      	lsls	r1, r5, #31
 80059cc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80059d0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80059d4:	bf48      	it	mi
 80059d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80059da:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80059de:	461c      	mov	r4, r3
 80059e0:	e780      	b.n	80058e4 <__ieee754_sqrt+0x30>
 80059e2:	0aca      	lsrs	r2, r1, #11
 80059e4:	3815      	subs	r0, #21
 80059e6:	0549      	lsls	r1, r1, #21
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d0fa      	beq.n	80059e2 <__ieee754_sqrt+0x12e>
 80059ec:	02d6      	lsls	r6, r2, #11
 80059ee:	d50a      	bpl.n	8005a06 <__ieee754_sqrt+0x152>
 80059f0:	f1c3 0420 	rsb	r4, r3, #32
 80059f4:	fa21 f404 	lsr.w	r4, r1, r4
 80059f8:	1e5d      	subs	r5, r3, #1
 80059fa:	4099      	lsls	r1, r3
 80059fc:	4322      	orrs	r2, r4
 80059fe:	1b43      	subs	r3, r0, r5
 8005a00:	e78b      	b.n	800591a <__ieee754_sqrt+0x66>
 8005a02:	4618      	mov	r0, r3
 8005a04:	e7f0      	b.n	80059e8 <__ieee754_sqrt+0x134>
 8005a06:	0052      	lsls	r2, r2, #1
 8005a08:	3301      	adds	r3, #1
 8005a0a:	e7ef      	b.n	80059ec <__ieee754_sqrt+0x138>
 8005a0c:	46a0      	mov	r8, r4
 8005a0e:	e7bf      	b.n	8005990 <__ieee754_sqrt+0xdc>
 8005a10:	7ff00000 	.word	0x7ff00000
 8005a14:	00000000 	.word	0x00000000

08005a18 <atan>:
 8005a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	ec55 4b10 	vmov	r4, r5, d0
 8005a20:	4bc3      	ldr	r3, [pc, #780]	; (8005d30 <atan+0x318>)
 8005a22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005a26:	429e      	cmp	r6, r3
 8005a28:	46ab      	mov	fp, r5
 8005a2a:	dd18      	ble.n	8005a5e <atan+0x46>
 8005a2c:	4bc1      	ldr	r3, [pc, #772]	; (8005d34 <atan+0x31c>)
 8005a2e:	429e      	cmp	r6, r3
 8005a30:	dc01      	bgt.n	8005a36 <atan+0x1e>
 8005a32:	d109      	bne.n	8005a48 <atan+0x30>
 8005a34:	b144      	cbz	r4, 8005a48 <atan+0x30>
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fa fc25 	bl	800028c <__adddf3>
 8005a42:	4604      	mov	r4, r0
 8005a44:	460d      	mov	r5, r1
 8005a46:	e006      	b.n	8005a56 <atan+0x3e>
 8005a48:	f1bb 0f00 	cmp.w	fp, #0
 8005a4c:	f340 8131 	ble.w	8005cb2 <atan+0x29a>
 8005a50:	a59b      	add	r5, pc, #620	; (adr r5, 8005cc0 <atan+0x2a8>)
 8005a52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a56:	ec45 4b10 	vmov	d0, r4, r5
 8005a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5e:	4bb6      	ldr	r3, [pc, #728]	; (8005d38 <atan+0x320>)
 8005a60:	429e      	cmp	r6, r3
 8005a62:	dc14      	bgt.n	8005a8e <atan+0x76>
 8005a64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005a68:	429e      	cmp	r6, r3
 8005a6a:	dc0d      	bgt.n	8005a88 <atan+0x70>
 8005a6c:	a396      	add	r3, pc, #600	; (adr r3, 8005cc8 <atan+0x2b0>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	ee10 0a10 	vmov	r0, s0
 8005a76:	4629      	mov	r1, r5
 8005a78:	f7fa fc08 	bl	800028c <__adddf3>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4baf      	ldr	r3, [pc, #700]	; (8005d3c <atan+0x324>)
 8005a80:	f7fb f84a 	bl	8000b18 <__aeabi_dcmpgt>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d1e6      	bne.n	8005a56 <atan+0x3e>
 8005a88:	f04f 3aff 	mov.w	sl, #4294967295
 8005a8c:	e02b      	b.n	8005ae6 <atan+0xce>
 8005a8e:	f000 f963 	bl	8005d58 <fabs>
 8005a92:	4bab      	ldr	r3, [pc, #684]	; (8005d40 <atan+0x328>)
 8005a94:	429e      	cmp	r6, r3
 8005a96:	ec55 4b10 	vmov	r4, r5, d0
 8005a9a:	f300 80bf 	bgt.w	8005c1c <atan+0x204>
 8005a9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005aa2:	429e      	cmp	r6, r3
 8005aa4:	f300 80a0 	bgt.w	8005be8 <atan+0x1d0>
 8005aa8:	ee10 2a10 	vmov	r2, s0
 8005aac:	ee10 0a10 	vmov	r0, s0
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7fa fbea 	bl	800028c <__adddf3>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4ba0      	ldr	r3, [pc, #640]	; (8005d3c <atan+0x324>)
 8005abc:	f7fa fbe4 	bl	8000288 <__aeabi_dsub>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460f      	mov	r7, r1
 8005ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aca:	4620      	mov	r0, r4
 8005acc:	4629      	mov	r1, r5
 8005ace:	f7fa fbdd 	bl	800028c <__adddf3>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	4639      	mov	r1, r7
 8005ada:	f7fa feb7 	bl	800084c <__aeabi_ddiv>
 8005ade:	f04f 0a00 	mov.w	sl, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	460d      	mov	r5, r1
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	462b      	mov	r3, r5
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa fd83 	bl	80005f8 <__aeabi_dmul>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4680      	mov	r8, r0
 8005af8:	4689      	mov	r9, r1
 8005afa:	f7fa fd7d 	bl	80005f8 <__aeabi_dmul>
 8005afe:	a374      	add	r3, pc, #464	; (adr r3, 8005cd0 <atan+0x2b8>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	f7fa fd76 	bl	80005f8 <__aeabi_dmul>
 8005b0c:	a372      	add	r3, pc, #456	; (adr r3, 8005cd8 <atan+0x2c0>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fbbb 	bl	800028c <__adddf3>
 8005b16:	4632      	mov	r2, r6
 8005b18:	463b      	mov	r3, r7
 8005b1a:	f7fa fd6d 	bl	80005f8 <__aeabi_dmul>
 8005b1e:	a370      	add	r3, pc, #448	; (adr r3, 8005ce0 <atan+0x2c8>)
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f7fa fbb2 	bl	800028c <__adddf3>
 8005b28:	4632      	mov	r2, r6
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	f7fa fd64 	bl	80005f8 <__aeabi_dmul>
 8005b30:	a36d      	add	r3, pc, #436	; (adr r3, 8005ce8 <atan+0x2d0>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f7fa fba9 	bl	800028c <__adddf3>
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	f7fa fd5b 	bl	80005f8 <__aeabi_dmul>
 8005b42:	a36b      	add	r3, pc, #428	; (adr r3, 8005cf0 <atan+0x2d8>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f7fa fba0 	bl	800028c <__adddf3>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	463b      	mov	r3, r7
 8005b50:	f7fa fd52 	bl	80005f8 <__aeabi_dmul>
 8005b54:	a368      	add	r3, pc, #416	; (adr r3, 8005cf8 <atan+0x2e0>)
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f7fa fb97 	bl	800028c <__adddf3>
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	f7fa fd49 	bl	80005f8 <__aeabi_dmul>
 8005b66:	a366      	add	r3, pc, #408	; (adr r3, 8005d00 <atan+0x2e8>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	4689      	mov	r9, r1
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f7fa fd40 	bl	80005f8 <__aeabi_dmul>
 8005b78:	a363      	add	r3, pc, #396	; (adr r3, 8005d08 <atan+0x2f0>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fb83 	bl	8000288 <__aeabi_dsub>
 8005b82:	4632      	mov	r2, r6
 8005b84:	463b      	mov	r3, r7
 8005b86:	f7fa fd37 	bl	80005f8 <__aeabi_dmul>
 8005b8a:	a361      	add	r3, pc, #388	; (adr r3, 8005d10 <atan+0x2f8>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f7fa fb7a 	bl	8000288 <__aeabi_dsub>
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	f7fa fd2e 	bl	80005f8 <__aeabi_dmul>
 8005b9c:	a35e      	add	r3, pc, #376	; (adr r3, 8005d18 <atan+0x300>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fb71 	bl	8000288 <__aeabi_dsub>
 8005ba6:	4632      	mov	r2, r6
 8005ba8:	463b      	mov	r3, r7
 8005baa:	f7fa fd25 	bl	80005f8 <__aeabi_dmul>
 8005bae:	a35c      	add	r3, pc, #368	; (adr r3, 8005d20 <atan+0x308>)
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f7fa fb68 	bl	8000288 <__aeabi_dsub>
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	f7fa fd1c 	bl	80005f8 <__aeabi_dmul>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	f7fa fb60 	bl	800028c <__adddf3>
 8005bcc:	4622      	mov	r2, r4
 8005bce:	462b      	mov	r3, r5
 8005bd0:	f7fa fd12 	bl	80005f8 <__aeabi_dmul>
 8005bd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	d14b      	bne.n	8005c76 <atan+0x25e>
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	f7fa fb51 	bl	8000288 <__aeabi_dsub>
 8005be6:	e72c      	b.n	8005a42 <atan+0x2a>
 8005be8:	ee10 0a10 	vmov	r0, s0
 8005bec:	2200      	movs	r2, #0
 8005bee:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <atan+0x324>)
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa fb49 	bl	8000288 <__aeabi_dsub>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	460f      	mov	r7, r1
 8005bfc:	4b4f      	ldr	r3, [pc, #316]	; (8005d3c <atan+0x324>)
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fb43 	bl	800028c <__adddf3>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	f7fa fe1d 	bl	800084c <__aeabi_ddiv>
 8005c12:	f04f 0a01 	mov.w	sl, #1
 8005c16:	4604      	mov	r4, r0
 8005c18:	460d      	mov	r5, r1
 8005c1a:	e764      	b.n	8005ae6 <atan+0xce>
 8005c1c:	4b49      	ldr	r3, [pc, #292]	; (8005d44 <atan+0x32c>)
 8005c1e:	429e      	cmp	r6, r3
 8005c20:	dc1d      	bgt.n	8005c5e <atan+0x246>
 8005c22:	ee10 0a10 	vmov	r0, s0
 8005c26:	2200      	movs	r2, #0
 8005c28:	4b47      	ldr	r3, [pc, #284]	; (8005d48 <atan+0x330>)
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	f7fa fb2c 	bl	8000288 <__aeabi_dsub>
 8005c30:	2200      	movs	r2, #0
 8005c32:	4606      	mov	r6, r0
 8005c34:	460f      	mov	r7, r1
 8005c36:	4b44      	ldr	r3, [pc, #272]	; (8005d48 <atan+0x330>)
 8005c38:	4620      	mov	r0, r4
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	f7fa fcdc 	bl	80005f8 <__aeabi_dmul>
 8005c40:	2200      	movs	r2, #0
 8005c42:	4b3e      	ldr	r3, [pc, #248]	; (8005d3c <atan+0x324>)
 8005c44:	f7fa fb22 	bl	800028c <__adddf3>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	4639      	mov	r1, r7
 8005c50:	f7fa fdfc 	bl	800084c <__aeabi_ddiv>
 8005c54:	f04f 0a02 	mov.w	sl, #2
 8005c58:	4604      	mov	r4, r0
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	e743      	b.n	8005ae6 <atan+0xce>
 8005c5e:	462b      	mov	r3, r5
 8005c60:	ee10 2a10 	vmov	r2, s0
 8005c64:	2000      	movs	r0, #0
 8005c66:	4939      	ldr	r1, [pc, #228]	; (8005d4c <atan+0x334>)
 8005c68:	f7fa fdf0 	bl	800084c <__aeabi_ddiv>
 8005c6c:	f04f 0a03 	mov.w	sl, #3
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	e737      	b.n	8005ae6 <atan+0xce>
 8005c76:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <atan+0x338>)
 8005c78:	4e36      	ldr	r6, [pc, #216]	; (8005d54 <atan+0x33c>)
 8005c7a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005c7e:	4456      	add	r6, sl
 8005c80:	449a      	add	sl, r3
 8005c82:	e9da 2300 	ldrd	r2, r3, [sl]
 8005c86:	f7fa faff 	bl	8000288 <__aeabi_dsub>
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	f7fa fafb 	bl	8000288 <__aeabi_dsub>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005c9a:	f7fa faf5 	bl	8000288 <__aeabi_dsub>
 8005c9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	460d      	mov	r5, r1
 8005ca6:	f6bf aed6 	bge.w	8005a56 <atan+0x3e>
 8005caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cae:	461d      	mov	r5, r3
 8005cb0:	e6d1      	b.n	8005a56 <atan+0x3e>
 8005cb2:	a51d      	add	r5, pc, #116	; (adr r5, 8005d28 <atan+0x310>)
 8005cb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005cb8:	e6cd      	b.n	8005a56 <atan+0x3e>
 8005cba:	bf00      	nop
 8005cbc:	f3af 8000 	nop.w
 8005cc0:	54442d18 	.word	0x54442d18
 8005cc4:	3ff921fb 	.word	0x3ff921fb
 8005cc8:	8800759c 	.word	0x8800759c
 8005ccc:	7e37e43c 	.word	0x7e37e43c
 8005cd0:	e322da11 	.word	0xe322da11
 8005cd4:	3f90ad3a 	.word	0x3f90ad3a
 8005cd8:	24760deb 	.word	0x24760deb
 8005cdc:	3fa97b4b 	.word	0x3fa97b4b
 8005ce0:	a0d03d51 	.word	0xa0d03d51
 8005ce4:	3fb10d66 	.word	0x3fb10d66
 8005ce8:	c54c206e 	.word	0xc54c206e
 8005cec:	3fb745cd 	.word	0x3fb745cd
 8005cf0:	920083ff 	.word	0x920083ff
 8005cf4:	3fc24924 	.word	0x3fc24924
 8005cf8:	5555550d 	.word	0x5555550d
 8005cfc:	3fd55555 	.word	0x3fd55555
 8005d00:	2c6a6c2f 	.word	0x2c6a6c2f
 8005d04:	bfa2b444 	.word	0xbfa2b444
 8005d08:	52defd9a 	.word	0x52defd9a
 8005d0c:	3fadde2d 	.word	0x3fadde2d
 8005d10:	af749a6d 	.word	0xaf749a6d
 8005d14:	3fb3b0f2 	.word	0x3fb3b0f2
 8005d18:	fe231671 	.word	0xfe231671
 8005d1c:	3fbc71c6 	.word	0x3fbc71c6
 8005d20:	9998ebc4 	.word	0x9998ebc4
 8005d24:	3fc99999 	.word	0x3fc99999
 8005d28:	54442d18 	.word	0x54442d18
 8005d2c:	bff921fb 	.word	0xbff921fb
 8005d30:	440fffff 	.word	0x440fffff
 8005d34:	7ff00000 	.word	0x7ff00000
 8005d38:	3fdbffff 	.word	0x3fdbffff
 8005d3c:	3ff00000 	.word	0x3ff00000
 8005d40:	3ff2ffff 	.word	0x3ff2ffff
 8005d44:	40037fff 	.word	0x40037fff
 8005d48:	3ff80000 	.word	0x3ff80000
 8005d4c:	bff00000 	.word	0xbff00000
 8005d50:	08008660 	.word	0x08008660
 8005d54:	08008640 	.word	0x08008640

08005d58 <fabs>:
 8005d58:	ec51 0b10 	vmov	r0, r1, d0
 8005d5c:	ee10 2a10 	vmov	r2, s0
 8005d60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d64:	ec43 2b10 	vmov	d0, r2, r3
 8005d68:	4770      	bx	lr

08005d6a <matherr>:
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	4770      	bx	lr
	...

08005d70 <nan>:
 8005d70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005d78 <nan+0x8>
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	7ff80000 	.word	0x7ff80000

08005d80 <__errno>:
 8005d80:	4b01      	ldr	r3, [pc, #4]	; (8005d88 <__errno+0x8>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20000014 	.word	0x20000014

08005d8c <__libc_init_array>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	4e0d      	ldr	r6, [pc, #52]	; (8005dc4 <__libc_init_array+0x38>)
 8005d90:	4c0d      	ldr	r4, [pc, #52]	; (8005dc8 <__libc_init_array+0x3c>)
 8005d92:	1ba4      	subs	r4, r4, r6
 8005d94:	10a4      	asrs	r4, r4, #2
 8005d96:	2500      	movs	r5, #0
 8005d98:	42a5      	cmp	r5, r4
 8005d9a:	d109      	bne.n	8005db0 <__libc_init_array+0x24>
 8005d9c:	4e0b      	ldr	r6, [pc, #44]	; (8005dcc <__libc_init_array+0x40>)
 8005d9e:	4c0c      	ldr	r4, [pc, #48]	; (8005dd0 <__libc_init_array+0x44>)
 8005da0:	f002 fbac 	bl	80084fc <_init>
 8005da4:	1ba4      	subs	r4, r4, r6
 8005da6:	10a4      	asrs	r4, r4, #2
 8005da8:	2500      	movs	r5, #0
 8005daa:	42a5      	cmp	r5, r4
 8005dac:	d105      	bne.n	8005dba <__libc_init_array+0x2e>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005db4:	4798      	blx	r3
 8005db6:	3501      	adds	r5, #1
 8005db8:	e7ee      	b.n	8005d98 <__libc_init_array+0xc>
 8005dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dbe:	4798      	blx	r3
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	e7f2      	b.n	8005daa <__libc_init_array+0x1e>
 8005dc4:	08008948 	.word	0x08008948
 8005dc8:	08008948 	.word	0x08008948
 8005dcc:	08008948 	.word	0x08008948
 8005dd0:	0800894c 	.word	0x0800894c

08005dd4 <memset>:
 8005dd4:	4402      	add	r2, r0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d100      	bne.n	8005dde <memset+0xa>
 8005ddc:	4770      	bx	lr
 8005dde:	f803 1b01 	strb.w	r1, [r3], #1
 8005de2:	e7f9      	b.n	8005dd8 <memset+0x4>

08005de4 <__cvt>:
 8005de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	ec55 4b10 	vmov	r4, r5, d0
 8005dec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005dee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	460e      	mov	r6, r1
 8005df6:	4691      	mov	r9, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	bfb8      	it	lt
 8005dfc:	4622      	movlt	r2, r4
 8005dfe:	462b      	mov	r3, r5
 8005e00:	f027 0720 	bic.w	r7, r7, #32
 8005e04:	bfbb      	ittet	lt
 8005e06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e0a:	461d      	movlt	r5, r3
 8005e0c:	2300      	movge	r3, #0
 8005e0e:	232d      	movlt	r3, #45	; 0x2d
 8005e10:	bfb8      	it	lt
 8005e12:	4614      	movlt	r4, r2
 8005e14:	2f46      	cmp	r7, #70	; 0x46
 8005e16:	700b      	strb	r3, [r1, #0]
 8005e18:	d004      	beq.n	8005e24 <__cvt+0x40>
 8005e1a:	2f45      	cmp	r7, #69	; 0x45
 8005e1c:	d100      	bne.n	8005e20 <__cvt+0x3c>
 8005e1e:	3601      	adds	r6, #1
 8005e20:	2102      	movs	r1, #2
 8005e22:	e000      	b.n	8005e26 <__cvt+0x42>
 8005e24:	2103      	movs	r1, #3
 8005e26:	ab03      	add	r3, sp, #12
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	ab02      	add	r3, sp, #8
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4632      	mov	r2, r6
 8005e30:	4653      	mov	r3, sl
 8005e32:	ec45 4b10 	vmov	d0, r4, r5
 8005e36:	f000 fdfb 	bl	8006a30 <_dtoa_r>
 8005e3a:	2f47      	cmp	r7, #71	; 0x47
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	d102      	bne.n	8005e46 <__cvt+0x62>
 8005e40:	f019 0f01 	tst.w	r9, #1
 8005e44:	d026      	beq.n	8005e94 <__cvt+0xb0>
 8005e46:	2f46      	cmp	r7, #70	; 0x46
 8005e48:	eb08 0906 	add.w	r9, r8, r6
 8005e4c:	d111      	bne.n	8005e72 <__cvt+0x8e>
 8005e4e:	f898 3000 	ldrb.w	r3, [r8]
 8005e52:	2b30      	cmp	r3, #48	; 0x30
 8005e54:	d10a      	bne.n	8005e6c <__cvt+0x88>
 8005e56:	2200      	movs	r2, #0
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e62:	b918      	cbnz	r0, 8005e6c <__cvt+0x88>
 8005e64:	f1c6 0601 	rsb	r6, r6, #1
 8005e68:	f8ca 6000 	str.w	r6, [sl]
 8005e6c:	f8da 3000 	ldr.w	r3, [sl]
 8005e70:	4499      	add	r9, r3
 8005e72:	2200      	movs	r2, #0
 8005e74:	2300      	movs	r3, #0
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fe25 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e7e:	b938      	cbnz	r0, 8005e90 <__cvt+0xac>
 8005e80:	2230      	movs	r2, #48	; 0x30
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	454b      	cmp	r3, r9
 8005e86:	d205      	bcs.n	8005e94 <__cvt+0xb0>
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	9103      	str	r1, [sp, #12]
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e7f8      	b.n	8005e82 <__cvt+0x9e>
 8005e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e98:	eba3 0308 	sub.w	r3, r3, r8
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	b004      	add	sp, #16
 8005ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ea6 <__exponent>:
 8005ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea8:	2900      	cmp	r1, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	bfba      	itte	lt
 8005eae:	4249      	neglt	r1, r1
 8005eb0:	232d      	movlt	r3, #45	; 0x2d
 8005eb2:	232b      	movge	r3, #43	; 0x2b
 8005eb4:	2909      	cmp	r1, #9
 8005eb6:	f804 2b02 	strb.w	r2, [r4], #2
 8005eba:	7043      	strb	r3, [r0, #1]
 8005ebc:	dd20      	ble.n	8005f00 <__exponent+0x5a>
 8005ebe:	f10d 0307 	add.w	r3, sp, #7
 8005ec2:	461f      	mov	r7, r3
 8005ec4:	260a      	movs	r6, #10
 8005ec6:	fb91 f5f6 	sdiv	r5, r1, r6
 8005eca:	fb06 1115 	mls	r1, r6, r5, r1
 8005ece:	3130      	adds	r1, #48	; 0x30
 8005ed0:	2d09      	cmp	r5, #9
 8005ed2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ed6:	f103 32ff 	add.w	r2, r3, #4294967295
 8005eda:	4629      	mov	r1, r5
 8005edc:	dc09      	bgt.n	8005ef2 <__exponent+0x4c>
 8005ede:	3130      	adds	r1, #48	; 0x30
 8005ee0:	3b02      	subs	r3, #2
 8005ee2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005ee6:	42bb      	cmp	r3, r7
 8005ee8:	4622      	mov	r2, r4
 8005eea:	d304      	bcc.n	8005ef6 <__exponent+0x50>
 8005eec:	1a10      	subs	r0, r2, r0
 8005eee:	b003      	add	sp, #12
 8005ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	e7e7      	b.n	8005ec6 <__exponent+0x20>
 8005ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005efa:	f804 2b01 	strb.w	r2, [r4], #1
 8005efe:	e7f2      	b.n	8005ee6 <__exponent+0x40>
 8005f00:	2330      	movs	r3, #48	; 0x30
 8005f02:	4419      	add	r1, r3
 8005f04:	7083      	strb	r3, [r0, #2]
 8005f06:	1d02      	adds	r2, r0, #4
 8005f08:	70c1      	strb	r1, [r0, #3]
 8005f0a:	e7ef      	b.n	8005eec <__exponent+0x46>

08005f0c <_printf_float>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	b08d      	sub	sp, #52	; 0x34
 8005f12:	460c      	mov	r4, r1
 8005f14:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005f18:	4616      	mov	r6, r2
 8005f1a:	461f      	mov	r7, r3
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	f001 fcb9 	bl	8007894 <_localeconv_r>
 8005f22:	6803      	ldr	r3, [r0, #0]
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fa f952 	bl	80001d0 <strlen>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f30:	f8d8 3000 	ldr.w	r3, [r8]
 8005f34:	9005      	str	r0, [sp, #20]
 8005f36:	3307      	adds	r3, #7
 8005f38:	f023 0307 	bic.w	r3, r3, #7
 8005f3c:	f103 0208 	add.w	r2, r3, #8
 8005f40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f44:	f8d4 b000 	ldr.w	fp, [r4]
 8005f48:	f8c8 2000 	str.w	r2, [r8]
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f54:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f5c:	9307      	str	r3, [sp, #28]
 8005f5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f62:	f04f 32ff 	mov.w	r2, #4294967295
 8005f66:	4ba7      	ldr	r3, [pc, #668]	; (8006204 <_printf_float+0x2f8>)
 8005f68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f6c:	f7fa fdde 	bl	8000b2c <__aeabi_dcmpun>
 8005f70:	bb70      	cbnz	r0, 8005fd0 <_printf_float+0xc4>
 8005f72:	f04f 32ff 	mov.w	r2, #4294967295
 8005f76:	4ba3      	ldr	r3, [pc, #652]	; (8006204 <_printf_float+0x2f8>)
 8005f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f7c:	f7fa fdb8 	bl	8000af0 <__aeabi_dcmple>
 8005f80:	bb30      	cbnz	r0, 8005fd0 <_printf_float+0xc4>
 8005f82:	2200      	movs	r2, #0
 8005f84:	2300      	movs	r3, #0
 8005f86:	4640      	mov	r0, r8
 8005f88:	4649      	mov	r1, r9
 8005f8a:	f7fa fda7 	bl	8000adc <__aeabi_dcmplt>
 8005f8e:	b110      	cbz	r0, 8005f96 <_printf_float+0x8a>
 8005f90:	232d      	movs	r3, #45	; 0x2d
 8005f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f96:	4a9c      	ldr	r2, [pc, #624]	; (8006208 <_printf_float+0x2fc>)
 8005f98:	4b9c      	ldr	r3, [pc, #624]	; (800620c <_printf_float+0x300>)
 8005f9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005f9e:	bf8c      	ite	hi
 8005fa0:	4690      	movhi	r8, r2
 8005fa2:	4698      	movls	r8, r3
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	f02b 0204 	bic.w	r2, fp, #4
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	f04f 0900 	mov.w	r9, #0
 8005fb2:	9700      	str	r7, [sp, #0]
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f9e6 	bl	800638c <_printf_common>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f040 808d 	bne.w	80060e0 <_printf_float+0x1d4>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fca:	b00d      	add	sp, #52	; 0x34
 8005fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	f7fa fda8 	bl	8000b2c <__aeabi_dcmpun>
 8005fdc:	b110      	cbz	r0, 8005fe4 <_printf_float+0xd8>
 8005fde:	4a8c      	ldr	r2, [pc, #560]	; (8006210 <_printf_float+0x304>)
 8005fe0:	4b8c      	ldr	r3, [pc, #560]	; (8006214 <_printf_float+0x308>)
 8005fe2:	e7da      	b.n	8005f9a <_printf_float+0x8e>
 8005fe4:	6861      	ldr	r1, [r4, #4]
 8005fe6:	1c4b      	adds	r3, r1, #1
 8005fe8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005fec:	a80a      	add	r0, sp, #40	; 0x28
 8005fee:	d13e      	bne.n	800606e <_printf_float+0x162>
 8005ff0:	2306      	movs	r3, #6
 8005ff2:	6063      	str	r3, [r4, #4]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005ffa:	ab09      	add	r3, sp, #36	; 0x24
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	ec49 8b10 	vmov	d0, r8, r9
 8006002:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006006:	6022      	str	r2, [r4, #0]
 8006008:	f8cd a004 	str.w	sl, [sp, #4]
 800600c:	6861      	ldr	r1, [r4, #4]
 800600e:	4628      	mov	r0, r5
 8006010:	f7ff fee8 	bl	8005de4 <__cvt>
 8006014:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006018:	2b47      	cmp	r3, #71	; 0x47
 800601a:	4680      	mov	r8, r0
 800601c:	d109      	bne.n	8006032 <_printf_float+0x126>
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	1cd8      	adds	r0, r3, #3
 8006022:	db02      	blt.n	800602a <_printf_float+0x11e>
 8006024:	6862      	ldr	r2, [r4, #4]
 8006026:	4293      	cmp	r3, r2
 8006028:	dd47      	ble.n	80060ba <_printf_float+0x1ae>
 800602a:	f1aa 0a02 	sub.w	sl, sl, #2
 800602e:	fa5f fa8a 	uxtb.w	sl, sl
 8006032:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006036:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006038:	d824      	bhi.n	8006084 <_printf_float+0x178>
 800603a:	3901      	subs	r1, #1
 800603c:	4652      	mov	r2, sl
 800603e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006042:	9109      	str	r1, [sp, #36]	; 0x24
 8006044:	f7ff ff2f 	bl	8005ea6 <__exponent>
 8006048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800604a:	1813      	adds	r3, r2, r0
 800604c:	2a01      	cmp	r2, #1
 800604e:	4681      	mov	r9, r0
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	dc02      	bgt.n	800605a <_printf_float+0x14e>
 8006054:	6822      	ldr	r2, [r4, #0]
 8006056:	07d1      	lsls	r1, r2, #31
 8006058:	d501      	bpl.n	800605e <_printf_float+0x152>
 800605a:	3301      	adds	r3, #1
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0a5      	beq.n	8005fb2 <_printf_float+0xa6>
 8006066:	232d      	movs	r3, #45	; 0x2d
 8006068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800606c:	e7a1      	b.n	8005fb2 <_printf_float+0xa6>
 800606e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006072:	f000 8177 	beq.w	8006364 <_printf_float+0x458>
 8006076:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800607a:	d1bb      	bne.n	8005ff4 <_printf_float+0xe8>
 800607c:	2900      	cmp	r1, #0
 800607e:	d1b9      	bne.n	8005ff4 <_printf_float+0xe8>
 8006080:	2301      	movs	r3, #1
 8006082:	e7b6      	b.n	8005ff2 <_printf_float+0xe6>
 8006084:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006088:	d119      	bne.n	80060be <_printf_float+0x1b2>
 800608a:	2900      	cmp	r1, #0
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	dd0c      	ble.n	80060aa <_printf_float+0x19e>
 8006090:	6121      	str	r1, [r4, #16]
 8006092:	b913      	cbnz	r3, 800609a <_printf_float+0x18e>
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	07d2      	lsls	r2, r2, #31
 8006098:	d502      	bpl.n	80060a0 <_printf_float+0x194>
 800609a:	3301      	adds	r3, #1
 800609c:	440b      	add	r3, r1
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80060a4:	f04f 0900 	mov.w	r9, #0
 80060a8:	e7d9      	b.n	800605e <_printf_float+0x152>
 80060aa:	b913      	cbnz	r3, 80060b2 <_printf_float+0x1a6>
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	07d0      	lsls	r0, r2, #31
 80060b0:	d501      	bpl.n	80060b6 <_printf_float+0x1aa>
 80060b2:	3302      	adds	r3, #2
 80060b4:	e7f3      	b.n	800609e <_printf_float+0x192>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e7f1      	b.n	800609e <_printf_float+0x192>
 80060ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80060be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060c2:	4293      	cmp	r3, r2
 80060c4:	db05      	blt.n	80060d2 <_printf_float+0x1c6>
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	07d1      	lsls	r1, r2, #31
 80060cc:	d5e8      	bpl.n	80060a0 <_printf_float+0x194>
 80060ce:	3301      	adds	r3, #1
 80060d0:	e7e5      	b.n	800609e <_printf_float+0x192>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bfd4      	ite	le
 80060d6:	f1c3 0302 	rsble	r3, r3, #2
 80060da:	2301      	movgt	r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	e7de      	b.n	800609e <_printf_float+0x192>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	055a      	lsls	r2, r3, #21
 80060e4:	d407      	bmi.n	80060f6 <_printf_float+0x1ea>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	4642      	mov	r2, r8
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	d12b      	bne.n	800614c <_printf_float+0x240>
 80060f4:	e767      	b.n	8005fc6 <_printf_float+0xba>
 80060f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80060fa:	f240 80dc 	bls.w	80062b6 <_printf_float+0x3aa>
 80060fe:	2200      	movs	r2, #0
 8006100:	2300      	movs	r3, #0
 8006102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006106:	f7fa fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800610a:	2800      	cmp	r0, #0
 800610c:	d033      	beq.n	8006176 <_printf_float+0x26a>
 800610e:	2301      	movs	r3, #1
 8006110:	4a41      	ldr	r2, [pc, #260]	; (8006218 <_printf_float+0x30c>)
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f af54 	beq.w	8005fc6 <_printf_float+0xba>
 800611e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006122:	429a      	cmp	r2, r3
 8006124:	db02      	blt.n	800612c <_printf_float+0x220>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	07d8      	lsls	r0, r3, #31
 800612a:	d50f      	bpl.n	800614c <_printf_float+0x240>
 800612c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af45 	beq.w	8005fc6 <_printf_float+0xba>
 800613c:	f04f 0800 	mov.w	r8, #0
 8006140:	f104 091a 	add.w	r9, r4, #26
 8006144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006146:	3b01      	subs	r3, #1
 8006148:	4543      	cmp	r3, r8
 800614a:	dc09      	bgt.n	8006160 <_printf_float+0x254>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	079b      	lsls	r3, r3, #30
 8006150:	f100 8103 	bmi.w	800635a <_printf_float+0x44e>
 8006154:	68e0      	ldr	r0, [r4, #12]
 8006156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006158:	4298      	cmp	r0, r3
 800615a:	bfb8      	it	lt
 800615c:	4618      	movlt	r0, r3
 800615e:	e734      	b.n	8005fca <_printf_float+0xbe>
 8006160:	2301      	movs	r3, #1
 8006162:	464a      	mov	r2, r9
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f af2b 	beq.w	8005fc6 <_printf_float+0xba>
 8006170:	f108 0801 	add.w	r8, r8, #1
 8006174:	e7e6      	b.n	8006144 <_printf_float+0x238>
 8006176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	dc2b      	bgt.n	80061d4 <_printf_float+0x2c8>
 800617c:	2301      	movs	r3, #1
 800617e:	4a26      	ldr	r2, [pc, #152]	; (8006218 <_printf_float+0x30c>)
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f af1d 	beq.w	8005fc6 <_printf_float+0xba>
 800618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618e:	b923      	cbnz	r3, 800619a <_printf_float+0x28e>
 8006190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006192:	b913      	cbnz	r3, 800619a <_printf_float+0x28e>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	07d9      	lsls	r1, r3, #31
 8006198:	d5d8      	bpl.n	800614c <_printf_float+0x240>
 800619a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800619e:	4631      	mov	r1, r6
 80061a0:	4628      	mov	r0, r5
 80061a2:	47b8      	blx	r7
 80061a4:	3001      	adds	r0, #1
 80061a6:	f43f af0e 	beq.w	8005fc6 <_printf_float+0xba>
 80061aa:	f04f 0900 	mov.w	r9, #0
 80061ae:	f104 0a1a 	add.w	sl, r4, #26
 80061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b4:	425b      	negs	r3, r3
 80061b6:	454b      	cmp	r3, r9
 80061b8:	dc01      	bgt.n	80061be <_printf_float+0x2b2>
 80061ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061bc:	e794      	b.n	80060e8 <_printf_float+0x1dc>
 80061be:	2301      	movs	r3, #1
 80061c0:	4652      	mov	r2, sl
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f aefc 	beq.w	8005fc6 <_printf_float+0xba>
 80061ce:	f109 0901 	add.w	r9, r9, #1
 80061d2:	e7ee      	b.n	80061b2 <_printf_float+0x2a6>
 80061d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061d8:	429a      	cmp	r2, r3
 80061da:	bfa8      	it	ge
 80061dc:	461a      	movge	r2, r3
 80061de:	2a00      	cmp	r2, #0
 80061e0:	4691      	mov	r9, r2
 80061e2:	dd07      	ble.n	80061f4 <_printf_float+0x2e8>
 80061e4:	4613      	mov	r3, r2
 80061e6:	4631      	mov	r1, r6
 80061e8:	4642      	mov	r2, r8
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f aee9 	beq.w	8005fc6 <_printf_float+0xba>
 80061f4:	f104 031a 	add.w	r3, r4, #26
 80061f8:	f04f 0b00 	mov.w	fp, #0
 80061fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006200:	9306      	str	r3, [sp, #24]
 8006202:	e015      	b.n	8006230 <_printf_float+0x324>
 8006204:	7fefffff 	.word	0x7fefffff
 8006208:	08008688 	.word	0x08008688
 800620c:	08008684 	.word	0x08008684
 8006210:	08008690 	.word	0x08008690
 8006214:	0800868c 	.word	0x0800868c
 8006218:	08008694 	.word	0x08008694
 800621c:	2301      	movs	r3, #1
 800621e:	9a06      	ldr	r2, [sp, #24]
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f aecd 	beq.w	8005fc6 <_printf_float+0xba>
 800622c:	f10b 0b01 	add.w	fp, fp, #1
 8006230:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006234:	ebaa 0309 	sub.w	r3, sl, r9
 8006238:	455b      	cmp	r3, fp
 800623a:	dcef      	bgt.n	800621c <_printf_float+0x310>
 800623c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006240:	429a      	cmp	r2, r3
 8006242:	44d0      	add	r8, sl
 8006244:	db15      	blt.n	8006272 <_printf_float+0x366>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	07da      	lsls	r2, r3, #31
 800624a:	d412      	bmi.n	8006272 <_printf_float+0x366>
 800624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006250:	eba3 020a 	sub.w	r2, r3, sl
 8006254:	eba3 0a01 	sub.w	sl, r3, r1
 8006258:	4592      	cmp	sl, r2
 800625a:	bfa8      	it	ge
 800625c:	4692      	movge	sl, r2
 800625e:	f1ba 0f00 	cmp.w	sl, #0
 8006262:	dc0e      	bgt.n	8006282 <_printf_float+0x376>
 8006264:	f04f 0800 	mov.w	r8, #0
 8006268:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800626c:	f104 091a 	add.w	r9, r4, #26
 8006270:	e019      	b.n	80062a6 <_printf_float+0x39a>
 8006272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006276:	4631      	mov	r1, r6
 8006278:	4628      	mov	r0, r5
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	d1e5      	bne.n	800624c <_printf_float+0x340>
 8006280:	e6a1      	b.n	8005fc6 <_printf_float+0xba>
 8006282:	4653      	mov	r3, sl
 8006284:	4642      	mov	r2, r8
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	d1e9      	bne.n	8006264 <_printf_float+0x358>
 8006290:	e699      	b.n	8005fc6 <_printf_float+0xba>
 8006292:	2301      	movs	r3, #1
 8006294:	464a      	mov	r2, r9
 8006296:	4631      	mov	r1, r6
 8006298:	4628      	mov	r0, r5
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	f43f ae92 	beq.w	8005fc6 <_printf_float+0xba>
 80062a2:	f108 0801 	add.w	r8, r8, #1
 80062a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	eba3 030a 	sub.w	r3, r3, sl
 80062b0:	4543      	cmp	r3, r8
 80062b2:	dcee      	bgt.n	8006292 <_printf_float+0x386>
 80062b4:	e74a      	b.n	800614c <_printf_float+0x240>
 80062b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062b8:	2a01      	cmp	r2, #1
 80062ba:	dc01      	bgt.n	80062c0 <_printf_float+0x3b4>
 80062bc:	07db      	lsls	r3, r3, #31
 80062be:	d53a      	bpl.n	8006336 <_printf_float+0x42a>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4642      	mov	r2, r8
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f ae7b 	beq.w	8005fc6 <_printf_float+0xba>
 80062d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f108 0801 	add.w	r8, r8, #1
 80062e0:	f43f ae71 	beq.w	8005fc6 <_printf_float+0xba>
 80062e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e6:	2200      	movs	r2, #0
 80062e8:	f103 3aff 	add.w	sl, r3, #4294967295
 80062ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062f0:	2300      	movs	r3, #0
 80062f2:	f7fa fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 80062f6:	b9c8      	cbnz	r0, 800632c <_printf_float+0x420>
 80062f8:	4653      	mov	r3, sl
 80062fa:	4642      	mov	r2, r8
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	d10e      	bne.n	8006324 <_printf_float+0x418>
 8006306:	e65e      	b.n	8005fc6 <_printf_float+0xba>
 8006308:	2301      	movs	r3, #1
 800630a:	4652      	mov	r2, sl
 800630c:	4631      	mov	r1, r6
 800630e:	4628      	mov	r0, r5
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	f43f ae57 	beq.w	8005fc6 <_printf_float+0xba>
 8006318:	f108 0801 	add.w	r8, r8, #1
 800631c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800631e:	3b01      	subs	r3, #1
 8006320:	4543      	cmp	r3, r8
 8006322:	dcf1      	bgt.n	8006308 <_printf_float+0x3fc>
 8006324:	464b      	mov	r3, r9
 8006326:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800632a:	e6de      	b.n	80060ea <_printf_float+0x1de>
 800632c:	f04f 0800 	mov.w	r8, #0
 8006330:	f104 0a1a 	add.w	sl, r4, #26
 8006334:	e7f2      	b.n	800631c <_printf_float+0x410>
 8006336:	2301      	movs	r3, #1
 8006338:	e7df      	b.n	80062fa <_printf_float+0x3ee>
 800633a:	2301      	movs	r3, #1
 800633c:	464a      	mov	r2, r9
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	f43f ae3e 	beq.w	8005fc6 <_printf_float+0xba>
 800634a:	f108 0801 	add.w	r8, r8, #1
 800634e:	68e3      	ldr	r3, [r4, #12]
 8006350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	4543      	cmp	r3, r8
 8006356:	dcf0      	bgt.n	800633a <_printf_float+0x42e>
 8006358:	e6fc      	b.n	8006154 <_printf_float+0x248>
 800635a:	f04f 0800 	mov.w	r8, #0
 800635e:	f104 0919 	add.w	r9, r4, #25
 8006362:	e7f4      	b.n	800634e <_printf_float+0x442>
 8006364:	2900      	cmp	r1, #0
 8006366:	f43f ae8b 	beq.w	8006080 <_printf_float+0x174>
 800636a:	2300      	movs	r3, #0
 800636c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006370:	ab09      	add	r3, sp, #36	; 0x24
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	ec49 8b10 	vmov	d0, r8, r9
 8006378:	6022      	str	r2, [r4, #0]
 800637a:	f8cd a004 	str.w	sl, [sp, #4]
 800637e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006382:	4628      	mov	r0, r5
 8006384:	f7ff fd2e 	bl	8005de4 <__cvt>
 8006388:	4680      	mov	r8, r0
 800638a:	e648      	b.n	800601e <_printf_float+0x112>

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4691      	mov	r9, r2
 8006392:	461f      	mov	r7, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	f8c9 3000 	str.w	r3, [r9]
 80063a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063aa:	4606      	mov	r6, r0
 80063ac:	460c      	mov	r4, r1
 80063ae:	b112      	cbz	r2, 80063b6 <_printf_common+0x2a>
 80063b0:	3301      	adds	r3, #1
 80063b2:	f8c9 3000 	str.w	r3, [r9]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	0699      	lsls	r1, r3, #26
 80063ba:	bf42      	ittt	mi
 80063bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063c0:	3302      	addmi	r3, #2
 80063c2:	f8c9 3000 	strmi.w	r3, [r9]
 80063c6:	6825      	ldr	r5, [r4, #0]
 80063c8:	f015 0506 	ands.w	r5, r5, #6
 80063cc:	d107      	bne.n	80063de <_printf_common+0x52>
 80063ce:	f104 0a19 	add.w	sl, r4, #25
 80063d2:	68e3      	ldr	r3, [r4, #12]
 80063d4:	f8d9 2000 	ldr.w	r2, [r9]
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dc28      	bgt.n	8006430 <_printf_common+0xa4>
 80063de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	3300      	adds	r3, #0
 80063e6:	bf18      	it	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	0692      	lsls	r2, r2, #26
 80063ec:	d42d      	bmi.n	800644a <_printf_common+0xbe>
 80063ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f2:	4639      	mov	r1, r7
 80063f4:	4630      	mov	r0, r6
 80063f6:	47c0      	blx	r8
 80063f8:	3001      	adds	r0, #1
 80063fa:	d020      	beq.n	800643e <_printf_common+0xb2>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	68e5      	ldr	r5, [r4, #12]
 8006400:	f8d9 2000 	ldr.w	r2, [r9]
 8006404:	f003 0306 	and.w	r3, r3, #6
 8006408:	2b04      	cmp	r3, #4
 800640a:	bf08      	it	eq
 800640c:	1aad      	subeq	r5, r5, r2
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	6922      	ldr	r2, [r4, #16]
 8006412:	bf0c      	ite	eq
 8006414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006418:	2500      	movne	r5, #0
 800641a:	4293      	cmp	r3, r2
 800641c:	bfc4      	itt	gt
 800641e:	1a9b      	subgt	r3, r3, r2
 8006420:	18ed      	addgt	r5, r5, r3
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	341a      	adds	r4, #26
 8006428:	454d      	cmp	r5, r9
 800642a:	d11a      	bne.n	8006462 <_printf_common+0xd6>
 800642c:	2000      	movs	r0, #0
 800642e:	e008      	b.n	8006442 <_printf_common+0xb6>
 8006430:	2301      	movs	r3, #1
 8006432:	4652      	mov	r2, sl
 8006434:	4639      	mov	r1, r7
 8006436:	4630      	mov	r0, r6
 8006438:	47c0      	blx	r8
 800643a:	3001      	adds	r0, #1
 800643c:	d103      	bne.n	8006446 <_printf_common+0xba>
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006446:	3501      	adds	r5, #1
 8006448:	e7c3      	b.n	80063d2 <_printf_common+0x46>
 800644a:	18e1      	adds	r1, r4, r3
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	2030      	movs	r0, #48	; 0x30
 8006450:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006454:	4422      	add	r2, r4
 8006456:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800645a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800645e:	3302      	adds	r3, #2
 8006460:	e7c5      	b.n	80063ee <_printf_common+0x62>
 8006462:	2301      	movs	r3, #1
 8006464:	4622      	mov	r2, r4
 8006466:	4639      	mov	r1, r7
 8006468:	4630      	mov	r0, r6
 800646a:	47c0      	blx	r8
 800646c:	3001      	adds	r0, #1
 800646e:	d0e6      	beq.n	800643e <_printf_common+0xb2>
 8006470:	f109 0901 	add.w	r9, r9, #1
 8006474:	e7d8      	b.n	8006428 <_printf_common+0x9c>
	...

08006478 <_printf_i>:
 8006478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800647c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006480:	460c      	mov	r4, r1
 8006482:	7e09      	ldrb	r1, [r1, #24]
 8006484:	b085      	sub	sp, #20
 8006486:	296e      	cmp	r1, #110	; 0x6e
 8006488:	4617      	mov	r7, r2
 800648a:	4606      	mov	r6, r0
 800648c:	4698      	mov	r8, r3
 800648e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006490:	f000 80b3 	beq.w	80065fa <_printf_i+0x182>
 8006494:	d822      	bhi.n	80064dc <_printf_i+0x64>
 8006496:	2963      	cmp	r1, #99	; 0x63
 8006498:	d036      	beq.n	8006508 <_printf_i+0x90>
 800649a:	d80a      	bhi.n	80064b2 <_printf_i+0x3a>
 800649c:	2900      	cmp	r1, #0
 800649e:	f000 80b9 	beq.w	8006614 <_printf_i+0x19c>
 80064a2:	2958      	cmp	r1, #88	; 0x58
 80064a4:	f000 8083 	beq.w	80065ae <_printf_i+0x136>
 80064a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064b0:	e032      	b.n	8006518 <_printf_i+0xa0>
 80064b2:	2964      	cmp	r1, #100	; 0x64
 80064b4:	d001      	beq.n	80064ba <_printf_i+0x42>
 80064b6:	2969      	cmp	r1, #105	; 0x69
 80064b8:	d1f6      	bne.n	80064a8 <_printf_i+0x30>
 80064ba:	6820      	ldr	r0, [r4, #0]
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	0605      	lsls	r5, r0, #24
 80064c0:	f103 0104 	add.w	r1, r3, #4
 80064c4:	d52a      	bpl.n	800651c <_printf_i+0xa4>
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6011      	str	r1, [r2, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da03      	bge.n	80064d6 <_printf_i+0x5e>
 80064ce:	222d      	movs	r2, #45	; 0x2d
 80064d0:	425b      	negs	r3, r3
 80064d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064d6:	486f      	ldr	r0, [pc, #444]	; (8006694 <_printf_i+0x21c>)
 80064d8:	220a      	movs	r2, #10
 80064da:	e039      	b.n	8006550 <_printf_i+0xd8>
 80064dc:	2973      	cmp	r1, #115	; 0x73
 80064de:	f000 809d 	beq.w	800661c <_printf_i+0x1a4>
 80064e2:	d808      	bhi.n	80064f6 <_printf_i+0x7e>
 80064e4:	296f      	cmp	r1, #111	; 0x6f
 80064e6:	d020      	beq.n	800652a <_printf_i+0xb2>
 80064e8:	2970      	cmp	r1, #112	; 0x70
 80064ea:	d1dd      	bne.n	80064a8 <_printf_i+0x30>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	f043 0320 	orr.w	r3, r3, #32
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	e003      	b.n	80064fe <_printf_i+0x86>
 80064f6:	2975      	cmp	r1, #117	; 0x75
 80064f8:	d017      	beq.n	800652a <_printf_i+0xb2>
 80064fa:	2978      	cmp	r1, #120	; 0x78
 80064fc:	d1d4      	bne.n	80064a8 <_printf_i+0x30>
 80064fe:	2378      	movs	r3, #120	; 0x78
 8006500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006504:	4864      	ldr	r0, [pc, #400]	; (8006698 <_printf_i+0x220>)
 8006506:	e055      	b.n	80065b4 <_printf_i+0x13c>
 8006508:	6813      	ldr	r3, [r2, #0]
 800650a:	1d19      	adds	r1, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6011      	str	r1, [r2, #0]
 8006510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006518:	2301      	movs	r3, #1
 800651a:	e08c      	b.n	8006636 <_printf_i+0x1be>
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6011      	str	r1, [r2, #0]
 8006520:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006524:	bf18      	it	ne
 8006526:	b21b      	sxthne	r3, r3
 8006528:	e7cf      	b.n	80064ca <_printf_i+0x52>
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	6825      	ldr	r5, [r4, #0]
 800652e:	1d18      	adds	r0, r3, #4
 8006530:	6010      	str	r0, [r2, #0]
 8006532:	0628      	lsls	r0, r5, #24
 8006534:	d501      	bpl.n	800653a <_printf_i+0xc2>
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	e002      	b.n	8006540 <_printf_i+0xc8>
 800653a:	0668      	lsls	r0, r5, #25
 800653c:	d5fb      	bpl.n	8006536 <_printf_i+0xbe>
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	4854      	ldr	r0, [pc, #336]	; (8006694 <_printf_i+0x21c>)
 8006542:	296f      	cmp	r1, #111	; 0x6f
 8006544:	bf14      	ite	ne
 8006546:	220a      	movne	r2, #10
 8006548:	2208      	moveq	r2, #8
 800654a:	2100      	movs	r1, #0
 800654c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006550:	6865      	ldr	r5, [r4, #4]
 8006552:	60a5      	str	r5, [r4, #8]
 8006554:	2d00      	cmp	r5, #0
 8006556:	f2c0 8095 	blt.w	8006684 <_printf_i+0x20c>
 800655a:	6821      	ldr	r1, [r4, #0]
 800655c:	f021 0104 	bic.w	r1, r1, #4
 8006560:	6021      	str	r1, [r4, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d13d      	bne.n	80065e2 <_printf_i+0x16a>
 8006566:	2d00      	cmp	r5, #0
 8006568:	f040 808e 	bne.w	8006688 <_printf_i+0x210>
 800656c:	4665      	mov	r5, ip
 800656e:	2a08      	cmp	r2, #8
 8006570:	d10b      	bne.n	800658a <_printf_i+0x112>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	07db      	lsls	r3, r3, #31
 8006576:	d508      	bpl.n	800658a <_printf_i+0x112>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	6862      	ldr	r2, [r4, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	bfde      	ittt	le
 8006580:	2330      	movle	r3, #48	; 0x30
 8006582:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006586:	f105 35ff 	addle.w	r5, r5, #4294967295
 800658a:	ebac 0305 	sub.w	r3, ip, r5
 800658e:	6123      	str	r3, [r4, #16]
 8006590:	f8cd 8000 	str.w	r8, [sp]
 8006594:	463b      	mov	r3, r7
 8006596:	aa03      	add	r2, sp, #12
 8006598:	4621      	mov	r1, r4
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff fef6 	bl	800638c <_printf_common>
 80065a0:	3001      	adds	r0, #1
 80065a2:	d14d      	bne.n	8006640 <_printf_i+0x1c8>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	b005      	add	sp, #20
 80065aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ae:	4839      	ldr	r0, [pc, #228]	; (8006694 <_printf_i+0x21c>)
 80065b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065b4:	6813      	ldr	r3, [r2, #0]
 80065b6:	6821      	ldr	r1, [r4, #0]
 80065b8:	1d1d      	adds	r5, r3, #4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6015      	str	r5, [r2, #0]
 80065be:	060a      	lsls	r2, r1, #24
 80065c0:	d50b      	bpl.n	80065da <_printf_i+0x162>
 80065c2:	07ca      	lsls	r2, r1, #31
 80065c4:	bf44      	itt	mi
 80065c6:	f041 0120 	orrmi.w	r1, r1, #32
 80065ca:	6021      	strmi	r1, [r4, #0]
 80065cc:	b91b      	cbnz	r3, 80065d6 <_printf_i+0x15e>
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	f022 0220 	bic.w	r2, r2, #32
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	2210      	movs	r2, #16
 80065d8:	e7b7      	b.n	800654a <_printf_i+0xd2>
 80065da:	064d      	lsls	r5, r1, #25
 80065dc:	bf48      	it	mi
 80065de:	b29b      	uxthmi	r3, r3
 80065e0:	e7ef      	b.n	80065c2 <_printf_i+0x14a>
 80065e2:	4665      	mov	r5, ip
 80065e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80065e8:	fb02 3311 	mls	r3, r2, r1, r3
 80065ec:	5cc3      	ldrb	r3, [r0, r3]
 80065ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065f2:	460b      	mov	r3, r1
 80065f4:	2900      	cmp	r1, #0
 80065f6:	d1f5      	bne.n	80065e4 <_printf_i+0x16c>
 80065f8:	e7b9      	b.n	800656e <_printf_i+0xf6>
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	6825      	ldr	r5, [r4, #0]
 80065fe:	6961      	ldr	r1, [r4, #20]
 8006600:	1d18      	adds	r0, r3, #4
 8006602:	6010      	str	r0, [r2, #0]
 8006604:	0628      	lsls	r0, r5, #24
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	d501      	bpl.n	800660e <_printf_i+0x196>
 800660a:	6019      	str	r1, [r3, #0]
 800660c:	e002      	b.n	8006614 <_printf_i+0x19c>
 800660e:	066a      	lsls	r2, r5, #25
 8006610:	d5fb      	bpl.n	800660a <_printf_i+0x192>
 8006612:	8019      	strh	r1, [r3, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	6123      	str	r3, [r4, #16]
 8006618:	4665      	mov	r5, ip
 800661a:	e7b9      	b.n	8006590 <_printf_i+0x118>
 800661c:	6813      	ldr	r3, [r2, #0]
 800661e:	1d19      	adds	r1, r3, #4
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	681d      	ldr	r5, [r3, #0]
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	2100      	movs	r1, #0
 8006628:	4628      	mov	r0, r5
 800662a:	f7f9 fdd9 	bl	80001e0 <memchr>
 800662e:	b108      	cbz	r0, 8006634 <_printf_i+0x1bc>
 8006630:	1b40      	subs	r0, r0, r5
 8006632:	6060      	str	r0, [r4, #4]
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	6123      	str	r3, [r4, #16]
 8006638:	2300      	movs	r3, #0
 800663a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800663e:	e7a7      	b.n	8006590 <_printf_i+0x118>
 8006640:	6923      	ldr	r3, [r4, #16]
 8006642:	462a      	mov	r2, r5
 8006644:	4639      	mov	r1, r7
 8006646:	4630      	mov	r0, r6
 8006648:	47c0      	blx	r8
 800664a:	3001      	adds	r0, #1
 800664c:	d0aa      	beq.n	80065a4 <_printf_i+0x12c>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	079b      	lsls	r3, r3, #30
 8006652:	d413      	bmi.n	800667c <_printf_i+0x204>
 8006654:	68e0      	ldr	r0, [r4, #12]
 8006656:	9b03      	ldr	r3, [sp, #12]
 8006658:	4298      	cmp	r0, r3
 800665a:	bfb8      	it	lt
 800665c:	4618      	movlt	r0, r3
 800665e:	e7a3      	b.n	80065a8 <_printf_i+0x130>
 8006660:	2301      	movs	r3, #1
 8006662:	464a      	mov	r2, r9
 8006664:	4639      	mov	r1, r7
 8006666:	4630      	mov	r0, r6
 8006668:	47c0      	blx	r8
 800666a:	3001      	adds	r0, #1
 800666c:	d09a      	beq.n	80065a4 <_printf_i+0x12c>
 800666e:	3501      	adds	r5, #1
 8006670:	68e3      	ldr	r3, [r4, #12]
 8006672:	9a03      	ldr	r2, [sp, #12]
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	42ab      	cmp	r3, r5
 8006678:	dcf2      	bgt.n	8006660 <_printf_i+0x1e8>
 800667a:	e7eb      	b.n	8006654 <_printf_i+0x1dc>
 800667c:	2500      	movs	r5, #0
 800667e:	f104 0919 	add.w	r9, r4, #25
 8006682:	e7f5      	b.n	8006670 <_printf_i+0x1f8>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1ac      	bne.n	80065e2 <_printf_i+0x16a>
 8006688:	7803      	ldrb	r3, [r0, #0]
 800668a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800668e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006692:	e76c      	b.n	800656e <_printf_i+0xf6>
 8006694:	08008696 	.word	0x08008696
 8006698:	080086a7 	.word	0x080086a7

0800669c <iprintf>:
 800669c:	b40f      	push	{r0, r1, r2, r3}
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <iprintf+0x2c>)
 80066a0:	b513      	push	{r0, r1, r4, lr}
 80066a2:	681c      	ldr	r4, [r3, #0]
 80066a4:	b124      	cbz	r4, 80066b0 <iprintf+0x14>
 80066a6:	69a3      	ldr	r3, [r4, #24]
 80066a8:	b913      	cbnz	r3, 80066b0 <iprintf+0x14>
 80066aa:	4620      	mov	r0, r4
 80066ac:	f001 f868 	bl	8007780 <__sinit>
 80066b0:	ab05      	add	r3, sp, #20
 80066b2:	9a04      	ldr	r2, [sp, #16]
 80066b4:	68a1      	ldr	r1, [r4, #8]
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	4620      	mov	r0, r4
 80066ba:	f001 fd2b 	bl	8008114 <_vfiprintf_r>
 80066be:	b002      	add	sp, #8
 80066c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c4:	b004      	add	sp, #16
 80066c6:	4770      	bx	lr
 80066c8:	20000014 	.word	0x20000014

080066cc <_puts_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	460e      	mov	r6, r1
 80066d0:	4605      	mov	r5, r0
 80066d2:	b118      	cbz	r0, 80066dc <_puts_r+0x10>
 80066d4:	6983      	ldr	r3, [r0, #24]
 80066d6:	b90b      	cbnz	r3, 80066dc <_puts_r+0x10>
 80066d8:	f001 f852 	bl	8007780 <__sinit>
 80066dc:	69ab      	ldr	r3, [r5, #24]
 80066de:	68ac      	ldr	r4, [r5, #8]
 80066e0:	b913      	cbnz	r3, 80066e8 <_puts_r+0x1c>
 80066e2:	4628      	mov	r0, r5
 80066e4:	f001 f84c 	bl	8007780 <__sinit>
 80066e8:	4b23      	ldr	r3, [pc, #140]	; (8006778 <_puts_r+0xac>)
 80066ea:	429c      	cmp	r4, r3
 80066ec:	d117      	bne.n	800671e <_puts_r+0x52>
 80066ee:	686c      	ldr	r4, [r5, #4]
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	071b      	lsls	r3, r3, #28
 80066f4:	d51d      	bpl.n	8006732 <_puts_r+0x66>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	b1db      	cbz	r3, 8006732 <_puts_r+0x66>
 80066fa:	3e01      	subs	r6, #1
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006702:	3b01      	subs	r3, #1
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	b9e9      	cbnz	r1, 8006744 <_puts_r+0x78>
 8006708:	2b00      	cmp	r3, #0
 800670a:	da2e      	bge.n	800676a <_puts_r+0x9e>
 800670c:	4622      	mov	r2, r4
 800670e:	210a      	movs	r1, #10
 8006710:	4628      	mov	r0, r5
 8006712:	f000 f83f 	bl	8006794 <__swbuf_r>
 8006716:	3001      	adds	r0, #1
 8006718:	d011      	beq.n	800673e <_puts_r+0x72>
 800671a:	200a      	movs	r0, #10
 800671c:	e011      	b.n	8006742 <_puts_r+0x76>
 800671e:	4b17      	ldr	r3, [pc, #92]	; (800677c <_puts_r+0xb0>)
 8006720:	429c      	cmp	r4, r3
 8006722:	d101      	bne.n	8006728 <_puts_r+0x5c>
 8006724:	68ac      	ldr	r4, [r5, #8]
 8006726:	e7e3      	b.n	80066f0 <_puts_r+0x24>
 8006728:	4b15      	ldr	r3, [pc, #84]	; (8006780 <_puts_r+0xb4>)
 800672a:	429c      	cmp	r4, r3
 800672c:	bf08      	it	eq
 800672e:	68ec      	ldreq	r4, [r5, #12]
 8006730:	e7de      	b.n	80066f0 <_puts_r+0x24>
 8006732:	4621      	mov	r1, r4
 8006734:	4628      	mov	r0, r5
 8006736:	f000 f87f 	bl	8006838 <__swsetup_r>
 800673a:	2800      	cmp	r0, #0
 800673c:	d0dd      	beq.n	80066fa <_puts_r+0x2e>
 800673e:	f04f 30ff 	mov.w	r0, #4294967295
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	2b00      	cmp	r3, #0
 8006746:	da04      	bge.n	8006752 <_puts_r+0x86>
 8006748:	69a2      	ldr	r2, [r4, #24]
 800674a:	429a      	cmp	r2, r3
 800674c:	dc06      	bgt.n	800675c <_puts_r+0x90>
 800674e:	290a      	cmp	r1, #10
 8006750:	d004      	beq.n	800675c <_puts_r+0x90>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	6022      	str	r2, [r4, #0]
 8006758:	7019      	strb	r1, [r3, #0]
 800675a:	e7cf      	b.n	80066fc <_puts_r+0x30>
 800675c:	4622      	mov	r2, r4
 800675e:	4628      	mov	r0, r5
 8006760:	f000 f818 	bl	8006794 <__swbuf_r>
 8006764:	3001      	adds	r0, #1
 8006766:	d1c9      	bne.n	80066fc <_puts_r+0x30>
 8006768:	e7e9      	b.n	800673e <_puts_r+0x72>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	200a      	movs	r0, #10
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	6022      	str	r2, [r4, #0]
 8006772:	7018      	strb	r0, [r3, #0]
 8006774:	e7e5      	b.n	8006742 <_puts_r+0x76>
 8006776:	bf00      	nop
 8006778:	080086e8 	.word	0x080086e8
 800677c:	08008708 	.word	0x08008708
 8006780:	080086c8 	.word	0x080086c8

08006784 <puts>:
 8006784:	4b02      	ldr	r3, [pc, #8]	; (8006790 <puts+0xc>)
 8006786:	4601      	mov	r1, r0
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	f7ff bf9f 	b.w	80066cc <_puts_r>
 800678e:	bf00      	nop
 8006790:	20000014 	.word	0x20000014

08006794 <__swbuf_r>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	460e      	mov	r6, r1
 8006798:	4614      	mov	r4, r2
 800679a:	4605      	mov	r5, r0
 800679c:	b118      	cbz	r0, 80067a6 <__swbuf_r+0x12>
 800679e:	6983      	ldr	r3, [r0, #24]
 80067a0:	b90b      	cbnz	r3, 80067a6 <__swbuf_r+0x12>
 80067a2:	f000 ffed 	bl	8007780 <__sinit>
 80067a6:	4b21      	ldr	r3, [pc, #132]	; (800682c <__swbuf_r+0x98>)
 80067a8:	429c      	cmp	r4, r3
 80067aa:	d12a      	bne.n	8006802 <__swbuf_r+0x6e>
 80067ac:	686c      	ldr	r4, [r5, #4]
 80067ae:	69a3      	ldr	r3, [r4, #24]
 80067b0:	60a3      	str	r3, [r4, #8]
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	071a      	lsls	r2, r3, #28
 80067b6:	d52e      	bpl.n	8006816 <__swbuf_r+0x82>
 80067b8:	6923      	ldr	r3, [r4, #16]
 80067ba:	b363      	cbz	r3, 8006816 <__swbuf_r+0x82>
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	1ac0      	subs	r0, r0, r3
 80067c2:	6963      	ldr	r3, [r4, #20]
 80067c4:	b2f6      	uxtb	r6, r6
 80067c6:	4283      	cmp	r3, r0
 80067c8:	4637      	mov	r7, r6
 80067ca:	dc04      	bgt.n	80067d6 <__swbuf_r+0x42>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 ff6c 	bl	80076ac <_fflush_r>
 80067d4:	bb28      	cbnz	r0, 8006822 <__swbuf_r+0x8e>
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	3b01      	subs	r3, #1
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	701e      	strb	r6, [r3, #0]
 80067e4:	6963      	ldr	r3, [r4, #20]
 80067e6:	3001      	adds	r0, #1
 80067e8:	4283      	cmp	r3, r0
 80067ea:	d004      	beq.n	80067f6 <__swbuf_r+0x62>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	07db      	lsls	r3, r3, #31
 80067f0:	d519      	bpl.n	8006826 <__swbuf_r+0x92>
 80067f2:	2e0a      	cmp	r6, #10
 80067f4:	d117      	bne.n	8006826 <__swbuf_r+0x92>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 ff57 	bl	80076ac <_fflush_r>
 80067fe:	b190      	cbz	r0, 8006826 <__swbuf_r+0x92>
 8006800:	e00f      	b.n	8006822 <__swbuf_r+0x8e>
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <__swbuf_r+0x9c>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d101      	bne.n	800680c <__swbuf_r+0x78>
 8006808:	68ac      	ldr	r4, [r5, #8]
 800680a:	e7d0      	b.n	80067ae <__swbuf_r+0x1a>
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <__swbuf_r+0xa0>)
 800680e:	429c      	cmp	r4, r3
 8006810:	bf08      	it	eq
 8006812:	68ec      	ldreq	r4, [r5, #12]
 8006814:	e7cb      	b.n	80067ae <__swbuf_r+0x1a>
 8006816:	4621      	mov	r1, r4
 8006818:	4628      	mov	r0, r5
 800681a:	f000 f80d 	bl	8006838 <__swsetup_r>
 800681e:	2800      	cmp	r0, #0
 8006820:	d0cc      	beq.n	80067bc <__swbuf_r+0x28>
 8006822:	f04f 37ff 	mov.w	r7, #4294967295
 8006826:	4638      	mov	r0, r7
 8006828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800682a:	bf00      	nop
 800682c:	080086e8 	.word	0x080086e8
 8006830:	08008708 	.word	0x08008708
 8006834:	080086c8 	.word	0x080086c8

08006838 <__swsetup_r>:
 8006838:	4b32      	ldr	r3, [pc, #200]	; (8006904 <__swsetup_r+0xcc>)
 800683a:	b570      	push	{r4, r5, r6, lr}
 800683c:	681d      	ldr	r5, [r3, #0]
 800683e:	4606      	mov	r6, r0
 8006840:	460c      	mov	r4, r1
 8006842:	b125      	cbz	r5, 800684e <__swsetup_r+0x16>
 8006844:	69ab      	ldr	r3, [r5, #24]
 8006846:	b913      	cbnz	r3, 800684e <__swsetup_r+0x16>
 8006848:	4628      	mov	r0, r5
 800684a:	f000 ff99 	bl	8007780 <__sinit>
 800684e:	4b2e      	ldr	r3, [pc, #184]	; (8006908 <__swsetup_r+0xd0>)
 8006850:	429c      	cmp	r4, r3
 8006852:	d10f      	bne.n	8006874 <__swsetup_r+0x3c>
 8006854:	686c      	ldr	r4, [r5, #4]
 8006856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800685a:	b29a      	uxth	r2, r3
 800685c:	0715      	lsls	r5, r2, #28
 800685e:	d42c      	bmi.n	80068ba <__swsetup_r+0x82>
 8006860:	06d0      	lsls	r0, r2, #27
 8006862:	d411      	bmi.n	8006888 <__swsetup_r+0x50>
 8006864:	2209      	movs	r2, #9
 8006866:	6032      	str	r2, [r6, #0]
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	f04f 30ff 	mov.w	r0, #4294967295
 8006872:	e03e      	b.n	80068f2 <__swsetup_r+0xba>
 8006874:	4b25      	ldr	r3, [pc, #148]	; (800690c <__swsetup_r+0xd4>)
 8006876:	429c      	cmp	r4, r3
 8006878:	d101      	bne.n	800687e <__swsetup_r+0x46>
 800687a:	68ac      	ldr	r4, [r5, #8]
 800687c:	e7eb      	b.n	8006856 <__swsetup_r+0x1e>
 800687e:	4b24      	ldr	r3, [pc, #144]	; (8006910 <__swsetup_r+0xd8>)
 8006880:	429c      	cmp	r4, r3
 8006882:	bf08      	it	eq
 8006884:	68ec      	ldreq	r4, [r5, #12]
 8006886:	e7e6      	b.n	8006856 <__swsetup_r+0x1e>
 8006888:	0751      	lsls	r1, r2, #29
 800688a:	d512      	bpl.n	80068b2 <__swsetup_r+0x7a>
 800688c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800688e:	b141      	cbz	r1, 80068a2 <__swsetup_r+0x6a>
 8006890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006894:	4299      	cmp	r1, r3
 8006896:	d002      	beq.n	800689e <__swsetup_r+0x66>
 8006898:	4630      	mov	r0, r6
 800689a:	f001 fb69 	bl	8007f70 <_free_r>
 800689e:	2300      	movs	r3, #0
 80068a0:	6363      	str	r3, [r4, #52]	; 0x34
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	2300      	movs	r3, #0
 80068ac:	6063      	str	r3, [r4, #4]
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	f043 0308 	orr.w	r3, r3, #8
 80068b8:	81a3      	strh	r3, [r4, #12]
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	b94b      	cbnz	r3, 80068d2 <__swsetup_r+0x9a>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c8:	d003      	beq.n	80068d2 <__swsetup_r+0x9a>
 80068ca:	4621      	mov	r1, r4
 80068cc:	4630      	mov	r0, r6
 80068ce:	f001 f813 	bl	80078f8 <__smakebuf_r>
 80068d2:	89a2      	ldrh	r2, [r4, #12]
 80068d4:	f012 0301 	ands.w	r3, r2, #1
 80068d8:	d00c      	beq.n	80068f4 <__swsetup_r+0xbc>
 80068da:	2300      	movs	r3, #0
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	6963      	ldr	r3, [r4, #20]
 80068e0:	425b      	negs	r3, r3
 80068e2:	61a3      	str	r3, [r4, #24]
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	b953      	cbnz	r3, 80068fe <__swsetup_r+0xc6>
 80068e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80068f0:	d1ba      	bne.n	8006868 <__swsetup_r+0x30>
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	0792      	lsls	r2, r2, #30
 80068f6:	bf58      	it	pl
 80068f8:	6963      	ldrpl	r3, [r4, #20]
 80068fa:	60a3      	str	r3, [r4, #8]
 80068fc:	e7f2      	b.n	80068e4 <__swsetup_r+0xac>
 80068fe:	2000      	movs	r0, #0
 8006900:	e7f7      	b.n	80068f2 <__swsetup_r+0xba>
 8006902:	bf00      	nop
 8006904:	20000014 	.word	0x20000014
 8006908:	080086e8 	.word	0x080086e8
 800690c:	08008708 	.word	0x08008708
 8006910:	080086c8 	.word	0x080086c8

08006914 <quorem>:
 8006914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006918:	6903      	ldr	r3, [r0, #16]
 800691a:	690c      	ldr	r4, [r1, #16]
 800691c:	42a3      	cmp	r3, r4
 800691e:	4680      	mov	r8, r0
 8006920:	f2c0 8082 	blt.w	8006a28 <quorem+0x114>
 8006924:	3c01      	subs	r4, #1
 8006926:	f101 0714 	add.w	r7, r1, #20
 800692a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800692e:	f100 0614 	add.w	r6, r0, #20
 8006932:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006936:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800693a:	eb06 030c 	add.w	r3, r6, ip
 800693e:	3501      	adds	r5, #1
 8006940:	eb07 090c 	add.w	r9, r7, ip
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	fbb0 f5f5 	udiv	r5, r0, r5
 800694a:	b395      	cbz	r5, 80069b2 <quorem+0x9e>
 800694c:	f04f 0a00 	mov.w	sl, #0
 8006950:	4638      	mov	r0, r7
 8006952:	46b6      	mov	lr, r6
 8006954:	46d3      	mov	fp, sl
 8006956:	f850 2b04 	ldr.w	r2, [r0], #4
 800695a:	b293      	uxth	r3, r2
 800695c:	fb05 a303 	mla	r3, r5, r3, sl
 8006960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006964:	b29b      	uxth	r3, r3
 8006966:	ebab 0303 	sub.w	r3, fp, r3
 800696a:	0c12      	lsrs	r2, r2, #16
 800696c:	f8de b000 	ldr.w	fp, [lr]
 8006970:	fb05 a202 	mla	r2, r5, r2, sl
 8006974:	fa13 f38b 	uxtah	r3, r3, fp
 8006978:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800697c:	fa1f fb82 	uxth.w	fp, r2
 8006980:	f8de 2000 	ldr.w	r2, [lr]
 8006984:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006992:	4581      	cmp	r9, r0
 8006994:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006998:	f84e 3b04 	str.w	r3, [lr], #4
 800699c:	d2db      	bcs.n	8006956 <quorem+0x42>
 800699e:	f856 300c 	ldr.w	r3, [r6, ip]
 80069a2:	b933      	cbnz	r3, 80069b2 <quorem+0x9e>
 80069a4:	9b01      	ldr	r3, [sp, #4]
 80069a6:	3b04      	subs	r3, #4
 80069a8:	429e      	cmp	r6, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	d330      	bcc.n	8006a10 <quorem+0xfc>
 80069ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80069b2:	4640      	mov	r0, r8
 80069b4:	f001 fa08 	bl	8007dc8 <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	db25      	blt.n	8006a08 <quorem+0xf4>
 80069bc:	3501      	adds	r5, #1
 80069be:	4630      	mov	r0, r6
 80069c0:	f04f 0c00 	mov.w	ip, #0
 80069c4:	f857 2b04 	ldr.w	r2, [r7], #4
 80069c8:	f8d0 e000 	ldr.w	lr, [r0]
 80069cc:	b293      	uxth	r3, r2
 80069ce:	ebac 0303 	sub.w	r3, ip, r3
 80069d2:	0c12      	lsrs	r2, r2, #16
 80069d4:	fa13 f38e 	uxtah	r3, r3, lr
 80069d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e6:	45b9      	cmp	r9, r7
 80069e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069ec:	f840 3b04 	str.w	r3, [r0], #4
 80069f0:	d2e8      	bcs.n	80069c4 <quorem+0xb0>
 80069f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80069f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80069fa:	b92a      	cbnz	r2, 8006a08 <quorem+0xf4>
 80069fc:	3b04      	subs	r3, #4
 80069fe:	429e      	cmp	r6, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	d30b      	bcc.n	8006a1c <quorem+0x108>
 8006a04:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a08:	4628      	mov	r0, r5
 8006a0a:	b003      	add	sp, #12
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	3b04      	subs	r3, #4
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	d1ca      	bne.n	80069ae <quorem+0x9a>
 8006a18:	3c01      	subs	r4, #1
 8006a1a:	e7c5      	b.n	80069a8 <quorem+0x94>
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	3b04      	subs	r3, #4
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	d1ef      	bne.n	8006a04 <quorem+0xf0>
 8006a24:	3c01      	subs	r4, #1
 8006a26:	e7ea      	b.n	80069fe <quorem+0xea>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e7ee      	b.n	8006a0a <quorem+0xf6>
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <_dtoa_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	ec57 6b10 	vmov	r6, r7, d0
 8006a38:	b097      	sub	sp, #92	; 0x5c
 8006a3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a3c:	9106      	str	r1, [sp, #24]
 8006a3e:	4604      	mov	r4, r0
 8006a40:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a42:	9312      	str	r3, [sp, #72]	; 0x48
 8006a44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a48:	e9cd 6700 	strd	r6, r7, [sp]
 8006a4c:	b93d      	cbnz	r5, 8006a5e <_dtoa_r+0x2e>
 8006a4e:	2010      	movs	r0, #16
 8006a50:	f000 ff92 	bl	8007978 <malloc>
 8006a54:	6260      	str	r0, [r4, #36]	; 0x24
 8006a56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a5a:	6005      	str	r5, [r0, #0]
 8006a5c:	60c5      	str	r5, [r0, #12]
 8006a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a60:	6819      	ldr	r1, [r3, #0]
 8006a62:	b151      	cbz	r1, 8006a7a <_dtoa_r+0x4a>
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	604a      	str	r2, [r1, #4]
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4093      	lsls	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 ffc9 	bl	8007a06 <_Bfree>
 8006a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	1e3b      	subs	r3, r7, #0
 8006a7c:	bfbb      	ittet	lt
 8006a7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a82:	9301      	strlt	r3, [sp, #4]
 8006a84:	2300      	movge	r3, #0
 8006a86:	2201      	movlt	r2, #1
 8006a88:	bfac      	ite	ge
 8006a8a:	f8c8 3000 	strge.w	r3, [r8]
 8006a8e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a92:	4baf      	ldr	r3, [pc, #700]	; (8006d50 <_dtoa_r+0x320>)
 8006a94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a98:	ea33 0308 	bics.w	r3, r3, r8
 8006a9c:	d114      	bne.n	8006ac8 <_dtoa_r+0x98>
 8006a9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006aa0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	9b00      	ldr	r3, [sp, #0]
 8006aa8:	b923      	cbnz	r3, 8006ab4 <_dtoa_r+0x84>
 8006aaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f000 8542 	beq.w	8007538 <_dtoa_r+0xb08>
 8006ab4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006d64 <_dtoa_r+0x334>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8544 	beq.w	8007548 <_dtoa_r+0xb18>
 8006ac0:	f10b 0303 	add.w	r3, fp, #3
 8006ac4:	f000 bd3e 	b.w	8007544 <_dtoa_r+0xb14>
 8006ac8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7f9 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad8:	4681      	mov	r9, r0
 8006ada:	b168      	cbz	r0, 8006af8 <_dtoa_r+0xc8>
 8006adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ade:	2301      	movs	r3, #1
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8524 	beq.w	8007532 <_dtoa_r+0xb02>
 8006aea:	4b9a      	ldr	r3, [pc, #616]	; (8006d54 <_dtoa_r+0x324>)
 8006aec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006aee:	f103 3bff 	add.w	fp, r3, #4294967295
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	f000 bd28 	b.w	8007548 <_dtoa_r+0xb18>
 8006af8:	aa14      	add	r2, sp, #80	; 0x50
 8006afa:	a915      	add	r1, sp, #84	; 0x54
 8006afc:	ec47 6b10 	vmov	d0, r6, r7
 8006b00:	4620      	mov	r0, r4
 8006b02:	f001 f9d8 	bl	8007eb6 <__d2b>
 8006b06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b0a:	9004      	str	r0, [sp, #16]
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	d07c      	beq.n	8006c0a <_dtoa_r+0x1da>
 8006b10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006b18:	46b2      	mov	sl, r6
 8006b1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006b26:	2200      	movs	r2, #0
 8006b28:	4b8b      	ldr	r3, [pc, #556]	; (8006d58 <_dtoa_r+0x328>)
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	f7f9 fbab 	bl	8000288 <__aeabi_dsub>
 8006b32:	a381      	add	r3, pc, #516	; (adr r3, 8006d38 <_dtoa_r+0x308>)
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f7f9 fd5e 	bl	80005f8 <__aeabi_dmul>
 8006b3c:	a380      	add	r3, pc, #512	; (adr r3, 8006d40 <_dtoa_r+0x310>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fba3 	bl	800028c <__adddf3>
 8006b46:	4606      	mov	r6, r0
 8006b48:	4628      	mov	r0, r5
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	f7f9 fcea 	bl	8000524 <__aeabi_i2d>
 8006b50:	a37d      	add	r3, pc, #500	; (adr r3, 8006d48 <_dtoa_r+0x318>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fd4f 	bl	80005f8 <__aeabi_dmul>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4630      	mov	r0, r6
 8006b60:	4639      	mov	r1, r7
 8006b62:	f7f9 fb93 	bl	800028c <__adddf3>
 8006b66:	4606      	mov	r6, r0
 8006b68:	460f      	mov	r7, r1
 8006b6a:	f7f9 fff5 	bl	8000b58 <__aeabi_d2iz>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4682      	mov	sl, r0
 8006b72:	2300      	movs	r3, #0
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8006b7c:	b148      	cbz	r0, 8006b92 <_dtoa_r+0x162>
 8006b7e:	4650      	mov	r0, sl
 8006b80:	f7f9 fcd0 	bl	8000524 <__aeabi_i2d>
 8006b84:	4632      	mov	r2, r6
 8006b86:	463b      	mov	r3, r7
 8006b88:	f7f9 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b8c:	b908      	cbnz	r0, 8006b92 <_dtoa_r+0x162>
 8006b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b92:	f1ba 0f16 	cmp.w	sl, #22
 8006b96:	d859      	bhi.n	8006c4c <_dtoa_r+0x21c>
 8006b98:	4970      	ldr	r1, [pc, #448]	; (8006d5c <_dtoa_r+0x32c>)
 8006b9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba6:	f7f9 ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d050      	beq.n	8006c50 <_dtoa_r+0x220>
 8006bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bb8:	1b5d      	subs	r5, r3, r5
 8006bba:	f1b5 0801 	subs.w	r8, r5, #1
 8006bbe:	bf49      	itett	mi
 8006bc0:	f1c5 0301 	rsbmi	r3, r5, #1
 8006bc4:	2300      	movpl	r3, #0
 8006bc6:	9305      	strmi	r3, [sp, #20]
 8006bc8:	f04f 0800 	movmi.w	r8, #0
 8006bcc:	bf58      	it	pl
 8006bce:	9305      	strpl	r3, [sp, #20]
 8006bd0:	f1ba 0f00 	cmp.w	sl, #0
 8006bd4:	db3e      	blt.n	8006c54 <_dtoa_r+0x224>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	44d0      	add	r8, sl
 8006bda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006bde:	9307      	str	r3, [sp, #28]
 8006be0:	9b06      	ldr	r3, [sp, #24]
 8006be2:	2b09      	cmp	r3, #9
 8006be4:	f200 8090 	bhi.w	8006d08 <_dtoa_r+0x2d8>
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	bfc4      	itt	gt
 8006bec:	3b04      	subgt	r3, #4
 8006bee:	9306      	strgt	r3, [sp, #24]
 8006bf0:	9b06      	ldr	r3, [sp, #24]
 8006bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8006bf6:	bfcc      	ite	gt
 8006bf8:	2500      	movgt	r5, #0
 8006bfa:	2501      	movle	r5, #1
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	f200 808f 	bhi.w	8006d20 <_dtoa_r+0x2f0>
 8006c02:	e8df f003 	tbb	[pc, r3]
 8006c06:	7f7d      	.short	0x7f7d
 8006c08:	7131      	.short	0x7131
 8006c0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006c0e:	441d      	add	r5, r3
 8006c10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006c14:	2820      	cmp	r0, #32
 8006c16:	dd13      	ble.n	8006c40 <_dtoa_r+0x210>
 8006c18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006c1c:	9b00      	ldr	r3, [sp, #0]
 8006c1e:	fa08 f800 	lsl.w	r8, r8, r0
 8006c22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006c26:	fa23 f000 	lsr.w	r0, r3, r0
 8006c2a:	ea48 0000 	orr.w	r0, r8, r0
 8006c2e:	f7f9 fc69 	bl	8000504 <__aeabi_ui2d>
 8006c32:	2301      	movs	r3, #1
 8006c34:	4682      	mov	sl, r0
 8006c36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006c3a:	3d01      	subs	r5, #1
 8006c3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c3e:	e772      	b.n	8006b26 <_dtoa_r+0xf6>
 8006c40:	9b00      	ldr	r3, [sp, #0]
 8006c42:	f1c0 0020 	rsb	r0, r0, #32
 8006c46:	fa03 f000 	lsl.w	r0, r3, r0
 8006c4a:	e7f0      	b.n	8006c2e <_dtoa_r+0x1fe>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e7b1      	b.n	8006bb4 <_dtoa_r+0x184>
 8006c50:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c52:	e7b0      	b.n	8006bb6 <_dtoa_r+0x186>
 8006c54:	9b05      	ldr	r3, [sp, #20]
 8006c56:	eba3 030a 	sub.w	r3, r3, sl
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	f1ca 0300 	rsb	r3, sl, #0
 8006c60:	9307      	str	r3, [sp, #28]
 8006c62:	2300      	movs	r3, #0
 8006c64:	930e      	str	r3, [sp, #56]	; 0x38
 8006c66:	e7bb      	b.n	8006be0 <_dtoa_r+0x1b0>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dd59      	ble.n	8006d26 <_dtoa_r+0x2f6>
 8006c72:	9302      	str	r3, [sp, #8]
 8006c74:	4699      	mov	r9, r3
 8006c76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c78:	2200      	movs	r2, #0
 8006c7a:	6072      	str	r2, [r6, #4]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	f102 0014 	add.w	r0, r2, #20
 8006c82:	4298      	cmp	r0, r3
 8006c84:	6871      	ldr	r1, [r6, #4]
 8006c86:	d953      	bls.n	8006d30 <_dtoa_r+0x300>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 fe88 	bl	800799e <_Balloc>
 8006c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c90:	6030      	str	r0, [r6, #0]
 8006c92:	f1b9 0f0e 	cmp.w	r9, #14
 8006c96:	f8d3 b000 	ldr.w	fp, [r3]
 8006c9a:	f200 80e6 	bhi.w	8006e6a <_dtoa_r+0x43a>
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	f000 80e3 	beq.w	8006e6a <_dtoa_r+0x43a>
 8006ca4:	ed9d 7b00 	vldr	d7, [sp]
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006cb0:	dd74      	ble.n	8006d9c <_dtoa_r+0x36c>
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <_dtoa_r+0x32c>)
 8006cb4:	f00a 030f 	and.w	r3, sl, #15
 8006cb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cbc:	ed93 7b00 	vldr	d7, [r3]
 8006cc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006cc4:	06f0      	lsls	r0, r6, #27
 8006cc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006cca:	d565      	bpl.n	8006d98 <_dtoa_r+0x368>
 8006ccc:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <_dtoa_r+0x330>)
 8006cce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cd6:	f7f9 fdb9 	bl	800084c <__aeabi_ddiv>
 8006cda:	e9cd 0100 	strd	r0, r1, [sp]
 8006cde:	f006 060f 	and.w	r6, r6, #15
 8006ce2:	2503      	movs	r5, #3
 8006ce4:	4f1e      	ldr	r7, [pc, #120]	; (8006d60 <_dtoa_r+0x330>)
 8006ce6:	e04c      	b.n	8006d82 <_dtoa_r+0x352>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	930a      	str	r3, [sp, #40]	; 0x28
 8006cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cee:	4453      	add	r3, sl
 8006cf0:	f103 0901 	add.w	r9, r3, #1
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	bfb8      	it	lt
 8006cfc:	2301      	movlt	r3, #1
 8006cfe:	e7ba      	b.n	8006c76 <_dtoa_r+0x246>
 8006d00:	2300      	movs	r3, #0
 8006d02:	e7b2      	b.n	8006c6a <_dtoa_r+0x23a>
 8006d04:	2300      	movs	r3, #0
 8006d06:	e7f0      	b.n	8006cea <_dtoa_r+0x2ba>
 8006d08:	2501      	movs	r5, #1
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	9306      	str	r3, [sp, #24]
 8006d0e:	950a      	str	r5, [sp, #40]	; 0x28
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	4699      	mov	r9, r3
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2312      	movs	r3, #18
 8006d1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d1e:	e7aa      	b.n	8006c76 <_dtoa_r+0x246>
 8006d20:	2301      	movs	r3, #1
 8006d22:	930a      	str	r3, [sp, #40]	; 0x28
 8006d24:	e7f4      	b.n	8006d10 <_dtoa_r+0x2e0>
 8006d26:	2301      	movs	r3, #1
 8006d28:	9302      	str	r3, [sp, #8]
 8006d2a:	4699      	mov	r9, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	e7f5      	b.n	8006d1c <_dtoa_r+0x2ec>
 8006d30:	3101      	adds	r1, #1
 8006d32:	6071      	str	r1, [r6, #4]
 8006d34:	0052      	lsls	r2, r2, #1
 8006d36:	e7a2      	b.n	8006c7e <_dtoa_r+0x24e>
 8006d38:	636f4361 	.word	0x636f4361
 8006d3c:	3fd287a7 	.word	0x3fd287a7
 8006d40:	8b60c8b3 	.word	0x8b60c8b3
 8006d44:	3fc68a28 	.word	0x3fc68a28
 8006d48:	509f79fb 	.word	0x509f79fb
 8006d4c:	3fd34413 	.word	0x3fd34413
 8006d50:	7ff00000 	.word	0x7ff00000
 8006d54:	08008695 	.word	0x08008695
 8006d58:	3ff80000 	.word	0x3ff80000
 8006d5c:	08008750 	.word	0x08008750
 8006d60:	08008728 	.word	0x08008728
 8006d64:	080086c1 	.word	0x080086c1
 8006d68:	07f1      	lsls	r1, r6, #31
 8006d6a:	d508      	bpl.n	8006d7e <_dtoa_r+0x34e>
 8006d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	f7f9 fc40 	bl	80005f8 <__aeabi_dmul>
 8006d78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	1076      	asrs	r6, r6, #1
 8006d80:	3708      	adds	r7, #8
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d1f0      	bne.n	8006d68 <_dtoa_r+0x338>
 8006d86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d8e:	f7f9 fd5d 	bl	800084c <__aeabi_ddiv>
 8006d92:	e9cd 0100 	strd	r0, r1, [sp]
 8006d96:	e01a      	b.n	8006dce <_dtoa_r+0x39e>
 8006d98:	2502      	movs	r5, #2
 8006d9a:	e7a3      	b.n	8006ce4 <_dtoa_r+0x2b4>
 8006d9c:	f000 80a0 	beq.w	8006ee0 <_dtoa_r+0x4b0>
 8006da0:	f1ca 0600 	rsb	r6, sl, #0
 8006da4:	4b9f      	ldr	r3, [pc, #636]	; (8007024 <_dtoa_r+0x5f4>)
 8006da6:	4fa0      	ldr	r7, [pc, #640]	; (8007028 <_dtoa_r+0x5f8>)
 8006da8:	f006 020f 	and.w	r2, r6, #15
 8006dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006db8:	f7f9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8006dbc:	e9cd 0100 	strd	r0, r1, [sp]
 8006dc0:	1136      	asrs	r6, r6, #4
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2502      	movs	r5, #2
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	d17f      	bne.n	8006eca <_dtoa_r+0x49a>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e1      	bne.n	8006d92 <_dtoa_r+0x362>
 8006dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8087 	beq.w	8006ee4 <_dtoa_r+0x4b4>
 8006dd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4b93      	ldr	r3, [pc, #588]	; (800702c <_dtoa_r+0x5fc>)
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d07c      	beq.n	8006ee4 <_dtoa_r+0x4b4>
 8006dea:	f1b9 0f00 	cmp.w	r9, #0
 8006dee:	d079      	beq.n	8006ee4 <_dtoa_r+0x4b4>
 8006df0:	9b02      	ldr	r3, [sp, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dd35      	ble.n	8006e62 <_dtoa_r+0x432>
 8006df6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006dfa:	9308      	str	r3, [sp, #32]
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4b8b      	ldr	r3, [pc, #556]	; (8007030 <_dtoa_r+0x600>)
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7f9 fbf8 	bl	80005f8 <__aeabi_dmul>
 8006e08:	e9cd 0100 	strd	r0, r1, [sp]
 8006e0c:	9f02      	ldr	r7, [sp, #8]
 8006e0e:	3501      	adds	r5, #1
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7f9 fb87 	bl	8000524 <__aeabi_i2d>
 8006e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e1a:	f7f9 fbed 	bl	80005f8 <__aeabi_dmul>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4b84      	ldr	r3, [pc, #528]	; (8007034 <_dtoa_r+0x604>)
 8006e22:	f7f9 fa33 	bl	800028c <__adddf3>
 8006e26:	4605      	mov	r5, r0
 8006e28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e2c:	2f00      	cmp	r7, #0
 8006e2e:	d15d      	bne.n	8006eec <_dtoa_r+0x4bc>
 8006e30:	2200      	movs	r2, #0
 8006e32:	4b81      	ldr	r3, [pc, #516]	; (8007038 <_dtoa_r+0x608>)
 8006e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e38:	f7f9 fa26 	bl	8000288 <__aeabi_dsub>
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4633      	mov	r3, r6
 8006e40:	e9cd 0100 	strd	r0, r1, [sp]
 8006e44:	f7f9 fe68 	bl	8000b18 <__aeabi_dcmpgt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f040 8288 	bne.w	800735e <_dtoa_r+0x92e>
 8006e4e:	462a      	mov	r2, r5
 8006e50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e58:	f7f9 fe40 	bl	8000adc <__aeabi_dcmplt>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f040 827c 	bne.w	800735a <_dtoa_r+0x92a>
 8006e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e66:	e9cd 2300 	strd	r2, r3, [sp]
 8006e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f2c0 8150 	blt.w	8007112 <_dtoa_r+0x6e2>
 8006e72:	f1ba 0f0e 	cmp.w	sl, #14
 8006e76:	f300 814c 	bgt.w	8007112 <_dtoa_r+0x6e2>
 8006e7a:	4b6a      	ldr	r3, [pc, #424]	; (8007024 <_dtoa_r+0x5f4>)
 8006e7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e80:	ed93 7b00 	vldr	d7, [r3]
 8006e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e8c:	f280 80d8 	bge.w	8007040 <_dtoa_r+0x610>
 8006e90:	f1b9 0f00 	cmp.w	r9, #0
 8006e94:	f300 80d4 	bgt.w	8007040 <_dtoa_r+0x610>
 8006e98:	f040 825e 	bne.w	8007358 <_dtoa_r+0x928>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4b66      	ldr	r3, [pc, #408]	; (8007038 <_dtoa_r+0x608>)
 8006ea0:	ec51 0b17 	vmov	r0, r1, d7
 8006ea4:	f7f9 fba8 	bl	80005f8 <__aeabi_dmul>
 8006ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eac:	f7f9 fe2a 	bl	8000b04 <__aeabi_dcmpge>
 8006eb0:	464f      	mov	r7, r9
 8006eb2:	464e      	mov	r6, r9
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f040 8234 	bne.w	8007322 <_dtoa_r+0x8f2>
 8006eba:	2331      	movs	r3, #49	; 0x31
 8006ebc:	f10b 0501 	add.w	r5, fp, #1
 8006ec0:	f88b 3000 	strb.w	r3, [fp]
 8006ec4:	f10a 0a01 	add.w	sl, sl, #1
 8006ec8:	e22f      	b.n	800732a <_dtoa_r+0x8fa>
 8006eca:	07f2      	lsls	r2, r6, #31
 8006ecc:	d505      	bpl.n	8006eda <_dtoa_r+0x4aa>
 8006ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed2:	f7f9 fb91 	bl	80005f8 <__aeabi_dmul>
 8006ed6:	3501      	adds	r5, #1
 8006ed8:	2301      	movs	r3, #1
 8006eda:	1076      	asrs	r6, r6, #1
 8006edc:	3708      	adds	r7, #8
 8006ede:	e772      	b.n	8006dc6 <_dtoa_r+0x396>
 8006ee0:	2502      	movs	r5, #2
 8006ee2:	e774      	b.n	8006dce <_dtoa_r+0x39e>
 8006ee4:	f8cd a020 	str.w	sl, [sp, #32]
 8006ee8:	464f      	mov	r7, r9
 8006eea:	e791      	b.n	8006e10 <_dtoa_r+0x3e0>
 8006eec:	4b4d      	ldr	r3, [pc, #308]	; (8007024 <_dtoa_r+0x5f4>)
 8006eee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ef2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d047      	beq.n	8006f8c <_dtoa_r+0x55c>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	2000      	movs	r0, #0
 8006f02:	494e      	ldr	r1, [pc, #312]	; (800703c <_dtoa_r+0x60c>)
 8006f04:	f7f9 fca2 	bl	800084c <__aeabi_ddiv>
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4633      	mov	r3, r6
 8006f0c:	f7f9 f9bc 	bl	8000288 <__aeabi_dsub>
 8006f10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f14:	465d      	mov	r5, fp
 8006f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f1a:	f7f9 fe1d 	bl	8000b58 <__aeabi_d2iz>
 8006f1e:	4606      	mov	r6, r0
 8006f20:	f7f9 fb00 	bl	8000524 <__aeabi_i2d>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f2c:	f7f9 f9ac 	bl	8000288 <__aeabi_dsub>
 8006f30:	3630      	adds	r6, #48	; 0x30
 8006f32:	f805 6b01 	strb.w	r6, [r5], #1
 8006f36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f3e:	f7f9 fdcd 	bl	8000adc <__aeabi_dcmplt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d163      	bne.n	800700e <_dtoa_r+0x5de>
 8006f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	4937      	ldr	r1, [pc, #220]	; (800702c <_dtoa_r+0x5fc>)
 8006f4e:	f7f9 f99b 	bl	8000288 <__aeabi_dsub>
 8006f52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f56:	f7f9 fdc1 	bl	8000adc <__aeabi_dcmplt>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	f040 80b7 	bne.w	80070ce <_dtoa_r+0x69e>
 8006f60:	eba5 030b 	sub.w	r3, r5, fp
 8006f64:	429f      	cmp	r7, r3
 8006f66:	f77f af7c 	ble.w	8006e62 <_dtoa_r+0x432>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	4b30      	ldr	r3, [pc, #192]	; (8007030 <_dtoa_r+0x600>)
 8006f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f72:	f7f9 fb41 	bl	80005f8 <__aeabi_dmul>
 8006f76:	2200      	movs	r2, #0
 8006f78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f7c:	4b2c      	ldr	r3, [pc, #176]	; (8007030 <_dtoa_r+0x600>)
 8006f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f82:	f7f9 fb39 	bl	80005f8 <__aeabi_dmul>
 8006f86:	e9cd 0100 	strd	r0, r1, [sp]
 8006f8a:	e7c4      	b.n	8006f16 <_dtoa_r+0x4e6>
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4633      	mov	r3, r6
 8006f90:	f7f9 fb32 	bl	80005f8 <__aeabi_dmul>
 8006f94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f98:	eb0b 0507 	add.w	r5, fp, r7
 8006f9c:	465e      	mov	r6, fp
 8006f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fa2:	f7f9 fdd9 	bl	8000b58 <__aeabi_d2iz>
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	f7f9 fabc 	bl	8000524 <__aeabi_i2d>
 8006fac:	3730      	adds	r7, #48	; 0x30
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb6:	f7f9 f967 	bl	8000288 <__aeabi_dsub>
 8006fba:	f806 7b01 	strb.w	r7, [r6], #1
 8006fbe:	42ae      	cmp	r6, r5
 8006fc0:	e9cd 0100 	strd	r0, r1, [sp]
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	d126      	bne.n	8007018 <_dtoa_r+0x5e8>
 8006fca:	4b1c      	ldr	r3, [pc, #112]	; (800703c <_dtoa_r+0x60c>)
 8006fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fd0:	f7f9 f95c 	bl	800028c <__adddf3>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fdc:	f7f9 fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d174      	bne.n	80070ce <_dtoa_r+0x69e>
 8006fe4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006fe8:	2000      	movs	r0, #0
 8006fea:	4914      	ldr	r1, [pc, #80]	; (800703c <_dtoa_r+0x60c>)
 8006fec:	f7f9 f94c 	bl	8000288 <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ff8:	f7f9 fd70 	bl	8000adc <__aeabi_dcmplt>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f43f af30 	beq.w	8006e62 <_dtoa_r+0x432>
 8007002:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007006:	2b30      	cmp	r3, #48	; 0x30
 8007008:	f105 32ff 	add.w	r2, r5, #4294967295
 800700c:	d002      	beq.n	8007014 <_dtoa_r+0x5e4>
 800700e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007012:	e04a      	b.n	80070aa <_dtoa_r+0x67a>
 8007014:	4615      	mov	r5, r2
 8007016:	e7f4      	b.n	8007002 <_dtoa_r+0x5d2>
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <_dtoa_r+0x600>)
 800701a:	f7f9 faed 	bl	80005f8 <__aeabi_dmul>
 800701e:	e9cd 0100 	strd	r0, r1, [sp]
 8007022:	e7bc      	b.n	8006f9e <_dtoa_r+0x56e>
 8007024:	08008750 	.word	0x08008750
 8007028:	08008728 	.word	0x08008728
 800702c:	3ff00000 	.word	0x3ff00000
 8007030:	40240000 	.word	0x40240000
 8007034:	401c0000 	.word	0x401c0000
 8007038:	40140000 	.word	0x40140000
 800703c:	3fe00000 	.word	0x3fe00000
 8007040:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007044:	465d      	mov	r5, fp
 8007046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800704a:	4630      	mov	r0, r6
 800704c:	4639      	mov	r1, r7
 800704e:	f7f9 fbfd 	bl	800084c <__aeabi_ddiv>
 8007052:	f7f9 fd81 	bl	8000b58 <__aeabi_d2iz>
 8007056:	4680      	mov	r8, r0
 8007058:	f7f9 fa64 	bl	8000524 <__aeabi_i2d>
 800705c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007060:	f7f9 faca 	bl	80005f8 <__aeabi_dmul>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007070:	f7f9 f90a 	bl	8000288 <__aeabi_dsub>
 8007074:	f805 6b01 	strb.w	r6, [r5], #1
 8007078:	eba5 060b 	sub.w	r6, r5, fp
 800707c:	45b1      	cmp	r9, r6
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	d139      	bne.n	80070f8 <_dtoa_r+0x6c8>
 8007084:	f7f9 f902 	bl	800028c <__adddf3>
 8007088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708c:	4606      	mov	r6, r0
 800708e:	460f      	mov	r7, r1
 8007090:	f7f9 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 8007094:	b9c8      	cbnz	r0, 80070ca <_dtoa_r+0x69a>
 8007096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a2:	b110      	cbz	r0, 80070aa <_dtoa_r+0x67a>
 80070a4:	f018 0f01 	tst.w	r8, #1
 80070a8:	d10f      	bne.n	80070ca <_dtoa_r+0x69a>
 80070aa:	9904      	ldr	r1, [sp, #16]
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 fcaa 	bl	8007a06 <_Bfree>
 80070b2:	2300      	movs	r3, #0
 80070b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070b6:	702b      	strb	r3, [r5, #0]
 80070b8:	f10a 0301 	add.w	r3, sl, #1
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8241 	beq.w	8007548 <_dtoa_r+0xb18>
 80070c6:	601d      	str	r5, [r3, #0]
 80070c8:	e23e      	b.n	8007548 <_dtoa_r+0xb18>
 80070ca:	f8cd a020 	str.w	sl, [sp, #32]
 80070ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070d2:	2a39      	cmp	r2, #57	; 0x39
 80070d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80070d8:	d108      	bne.n	80070ec <_dtoa_r+0x6bc>
 80070da:	459b      	cmp	fp, r3
 80070dc:	d10a      	bne.n	80070f4 <_dtoa_r+0x6c4>
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	3301      	adds	r3, #1
 80070e2:	9308      	str	r3, [sp, #32]
 80070e4:	2330      	movs	r3, #48	; 0x30
 80070e6:	f88b 3000 	strb.w	r3, [fp]
 80070ea:	465b      	mov	r3, fp
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	3201      	adds	r2, #1
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e78c      	b.n	800700e <_dtoa_r+0x5de>
 80070f4:	461d      	mov	r5, r3
 80070f6:	e7ea      	b.n	80070ce <_dtoa_r+0x69e>
 80070f8:	2200      	movs	r2, #0
 80070fa:	4b9b      	ldr	r3, [pc, #620]	; (8007368 <_dtoa_r+0x938>)
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	2200      	movs	r2, #0
 8007102:	2300      	movs	r3, #0
 8007104:	4606      	mov	r6, r0
 8007106:	460f      	mov	r7, r1
 8007108:	f7f9 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800710c:	2800      	cmp	r0, #0
 800710e:	d09a      	beq.n	8007046 <_dtoa_r+0x616>
 8007110:	e7cb      	b.n	80070aa <_dtoa_r+0x67a>
 8007112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007114:	2a00      	cmp	r2, #0
 8007116:	f000 808b 	beq.w	8007230 <_dtoa_r+0x800>
 800711a:	9a06      	ldr	r2, [sp, #24]
 800711c:	2a01      	cmp	r2, #1
 800711e:	dc6e      	bgt.n	80071fe <_dtoa_r+0x7ce>
 8007120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007122:	2a00      	cmp	r2, #0
 8007124:	d067      	beq.n	80071f6 <_dtoa_r+0x7c6>
 8007126:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800712a:	9f07      	ldr	r7, [sp, #28]
 800712c:	9d05      	ldr	r5, [sp, #20]
 800712e:	9a05      	ldr	r2, [sp, #20]
 8007130:	2101      	movs	r1, #1
 8007132:	441a      	add	r2, r3
 8007134:	4620      	mov	r0, r4
 8007136:	9205      	str	r2, [sp, #20]
 8007138:	4498      	add	r8, r3
 800713a:	f000 fd04 	bl	8007b46 <__i2b>
 800713e:	4606      	mov	r6, r0
 8007140:	2d00      	cmp	r5, #0
 8007142:	dd0c      	ble.n	800715e <_dtoa_r+0x72e>
 8007144:	f1b8 0f00 	cmp.w	r8, #0
 8007148:	dd09      	ble.n	800715e <_dtoa_r+0x72e>
 800714a:	4545      	cmp	r5, r8
 800714c:	9a05      	ldr	r2, [sp, #20]
 800714e:	462b      	mov	r3, r5
 8007150:	bfa8      	it	ge
 8007152:	4643      	movge	r3, r8
 8007154:	1ad2      	subs	r2, r2, r3
 8007156:	9205      	str	r2, [sp, #20]
 8007158:	1aed      	subs	r5, r5, r3
 800715a:	eba8 0803 	sub.w	r8, r8, r3
 800715e:	9b07      	ldr	r3, [sp, #28]
 8007160:	b1eb      	cbz	r3, 800719e <_dtoa_r+0x76e>
 8007162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007164:	2b00      	cmp	r3, #0
 8007166:	d067      	beq.n	8007238 <_dtoa_r+0x808>
 8007168:	b18f      	cbz	r7, 800718e <_dtoa_r+0x75e>
 800716a:	4631      	mov	r1, r6
 800716c:	463a      	mov	r2, r7
 800716e:	4620      	mov	r0, r4
 8007170:	f000 fd88 	bl	8007c84 <__pow5mult>
 8007174:	9a04      	ldr	r2, [sp, #16]
 8007176:	4601      	mov	r1, r0
 8007178:	4606      	mov	r6, r0
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fcec 	bl	8007b58 <__multiply>
 8007180:	9904      	ldr	r1, [sp, #16]
 8007182:	9008      	str	r0, [sp, #32]
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fc3e 	bl	8007a06 <_Bfree>
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	1bda      	subs	r2, r3, r7
 8007192:	d004      	beq.n	800719e <_dtoa_r+0x76e>
 8007194:	9904      	ldr	r1, [sp, #16]
 8007196:	4620      	mov	r0, r4
 8007198:	f000 fd74 	bl	8007c84 <__pow5mult>
 800719c:	9004      	str	r0, [sp, #16]
 800719e:	2101      	movs	r1, #1
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fcd0 	bl	8007b46 <__i2b>
 80071a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071a8:	4607      	mov	r7, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 81d0 	beq.w	8007550 <_dtoa_r+0xb20>
 80071b0:	461a      	mov	r2, r3
 80071b2:	4601      	mov	r1, r0
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 fd65 	bl	8007c84 <__pow5mult>
 80071ba:	9b06      	ldr	r3, [sp, #24]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	4607      	mov	r7, r0
 80071c0:	dc40      	bgt.n	8007244 <_dtoa_r+0x814>
 80071c2:	9b00      	ldr	r3, [sp, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d139      	bne.n	800723c <_dtoa_r+0x80c>
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d136      	bne.n	8007240 <_dtoa_r+0x810>
 80071d2:	9b01      	ldr	r3, [sp, #4]
 80071d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071d8:	0d1b      	lsrs	r3, r3, #20
 80071da:	051b      	lsls	r3, r3, #20
 80071dc:	b12b      	cbz	r3, 80071ea <_dtoa_r+0x7ba>
 80071de:	9b05      	ldr	r3, [sp, #20]
 80071e0:	3301      	adds	r3, #1
 80071e2:	9305      	str	r3, [sp, #20]
 80071e4:	f108 0801 	add.w	r8, r8, #1
 80071e8:	2301      	movs	r3, #1
 80071ea:	9307      	str	r3, [sp, #28]
 80071ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d12a      	bne.n	8007248 <_dtoa_r+0x818>
 80071f2:	2001      	movs	r0, #1
 80071f4:	e030      	b.n	8007258 <_dtoa_r+0x828>
 80071f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071fc:	e795      	b.n	800712a <_dtoa_r+0x6fa>
 80071fe:	9b07      	ldr	r3, [sp, #28]
 8007200:	f109 37ff 	add.w	r7, r9, #4294967295
 8007204:	42bb      	cmp	r3, r7
 8007206:	bfbf      	itttt	lt
 8007208:	9b07      	ldrlt	r3, [sp, #28]
 800720a:	9707      	strlt	r7, [sp, #28]
 800720c:	1afa      	sublt	r2, r7, r3
 800720e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007210:	bfbb      	ittet	lt
 8007212:	189b      	addlt	r3, r3, r2
 8007214:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007216:	1bdf      	subge	r7, r3, r7
 8007218:	2700      	movlt	r7, #0
 800721a:	f1b9 0f00 	cmp.w	r9, #0
 800721e:	bfb5      	itete	lt
 8007220:	9b05      	ldrlt	r3, [sp, #20]
 8007222:	9d05      	ldrge	r5, [sp, #20]
 8007224:	eba3 0509 	sublt.w	r5, r3, r9
 8007228:	464b      	movge	r3, r9
 800722a:	bfb8      	it	lt
 800722c:	2300      	movlt	r3, #0
 800722e:	e77e      	b.n	800712e <_dtoa_r+0x6fe>
 8007230:	9f07      	ldr	r7, [sp, #28]
 8007232:	9d05      	ldr	r5, [sp, #20]
 8007234:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007236:	e783      	b.n	8007140 <_dtoa_r+0x710>
 8007238:	9a07      	ldr	r2, [sp, #28]
 800723a:	e7ab      	b.n	8007194 <_dtoa_r+0x764>
 800723c:	2300      	movs	r3, #0
 800723e:	e7d4      	b.n	80071ea <_dtoa_r+0x7ba>
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	e7d2      	b.n	80071ea <_dtoa_r+0x7ba>
 8007244:	2300      	movs	r3, #0
 8007246:	9307      	str	r3, [sp, #28]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800724e:	6918      	ldr	r0, [r3, #16]
 8007250:	f000 fc2b 	bl	8007aaa <__hi0bits>
 8007254:	f1c0 0020 	rsb	r0, r0, #32
 8007258:	4440      	add	r0, r8
 800725a:	f010 001f 	ands.w	r0, r0, #31
 800725e:	d047      	beq.n	80072f0 <_dtoa_r+0x8c0>
 8007260:	f1c0 0320 	rsb	r3, r0, #32
 8007264:	2b04      	cmp	r3, #4
 8007266:	dd3b      	ble.n	80072e0 <_dtoa_r+0x8b0>
 8007268:	9b05      	ldr	r3, [sp, #20]
 800726a:	f1c0 001c 	rsb	r0, r0, #28
 800726e:	4403      	add	r3, r0
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	4405      	add	r5, r0
 8007274:	4480      	add	r8, r0
 8007276:	9b05      	ldr	r3, [sp, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	dd05      	ble.n	8007288 <_dtoa_r+0x858>
 800727c:	461a      	mov	r2, r3
 800727e:	9904      	ldr	r1, [sp, #16]
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fd4d 	bl	8007d20 <__lshift>
 8007286:	9004      	str	r0, [sp, #16]
 8007288:	f1b8 0f00 	cmp.w	r8, #0
 800728c:	dd05      	ble.n	800729a <_dtoa_r+0x86a>
 800728e:	4639      	mov	r1, r7
 8007290:	4642      	mov	r2, r8
 8007292:	4620      	mov	r0, r4
 8007294:	f000 fd44 	bl	8007d20 <__lshift>
 8007298:	4607      	mov	r7, r0
 800729a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729c:	b353      	cbz	r3, 80072f4 <_dtoa_r+0x8c4>
 800729e:	4639      	mov	r1, r7
 80072a0:	9804      	ldr	r0, [sp, #16]
 80072a2:	f000 fd91 	bl	8007dc8 <__mcmp>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	da24      	bge.n	80072f4 <_dtoa_r+0x8c4>
 80072aa:	2300      	movs	r3, #0
 80072ac:	220a      	movs	r2, #10
 80072ae:	9904      	ldr	r1, [sp, #16]
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fbbf 	bl	8007a34 <__multadd>
 80072b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b8:	9004      	str	r0, [sp, #16]
 80072ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 814d 	beq.w	800755e <_dtoa_r+0xb2e>
 80072c4:	2300      	movs	r3, #0
 80072c6:	4631      	mov	r1, r6
 80072c8:	220a      	movs	r2, #10
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 fbb2 	bl	8007a34 <__multadd>
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	4606      	mov	r6, r0
 80072d6:	dc4f      	bgt.n	8007378 <_dtoa_r+0x948>
 80072d8:	9b06      	ldr	r3, [sp, #24]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	dd4c      	ble.n	8007378 <_dtoa_r+0x948>
 80072de:	e011      	b.n	8007304 <_dtoa_r+0x8d4>
 80072e0:	d0c9      	beq.n	8007276 <_dtoa_r+0x846>
 80072e2:	9a05      	ldr	r2, [sp, #20]
 80072e4:	331c      	adds	r3, #28
 80072e6:	441a      	add	r2, r3
 80072e8:	9205      	str	r2, [sp, #20]
 80072ea:	441d      	add	r5, r3
 80072ec:	4498      	add	r8, r3
 80072ee:	e7c2      	b.n	8007276 <_dtoa_r+0x846>
 80072f0:	4603      	mov	r3, r0
 80072f2:	e7f6      	b.n	80072e2 <_dtoa_r+0x8b2>
 80072f4:	f1b9 0f00 	cmp.w	r9, #0
 80072f8:	dc38      	bgt.n	800736c <_dtoa_r+0x93c>
 80072fa:	9b06      	ldr	r3, [sp, #24]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	dd35      	ble.n	800736c <_dtoa_r+0x93c>
 8007300:	f8cd 9008 	str.w	r9, [sp, #8]
 8007304:	9b02      	ldr	r3, [sp, #8]
 8007306:	b963      	cbnz	r3, 8007322 <_dtoa_r+0x8f2>
 8007308:	4639      	mov	r1, r7
 800730a:	2205      	movs	r2, #5
 800730c:	4620      	mov	r0, r4
 800730e:	f000 fb91 	bl	8007a34 <__multadd>
 8007312:	4601      	mov	r1, r0
 8007314:	4607      	mov	r7, r0
 8007316:	9804      	ldr	r0, [sp, #16]
 8007318:	f000 fd56 	bl	8007dc8 <__mcmp>
 800731c:	2800      	cmp	r0, #0
 800731e:	f73f adcc 	bgt.w	8006eba <_dtoa_r+0x48a>
 8007322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007324:	465d      	mov	r5, fp
 8007326:	ea6f 0a03 	mvn.w	sl, r3
 800732a:	f04f 0900 	mov.w	r9, #0
 800732e:	4639      	mov	r1, r7
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fb68 	bl	8007a06 <_Bfree>
 8007336:	2e00      	cmp	r6, #0
 8007338:	f43f aeb7 	beq.w	80070aa <_dtoa_r+0x67a>
 800733c:	f1b9 0f00 	cmp.w	r9, #0
 8007340:	d005      	beq.n	800734e <_dtoa_r+0x91e>
 8007342:	45b1      	cmp	r9, r6
 8007344:	d003      	beq.n	800734e <_dtoa_r+0x91e>
 8007346:	4649      	mov	r1, r9
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fb5c 	bl	8007a06 <_Bfree>
 800734e:	4631      	mov	r1, r6
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fb58 	bl	8007a06 <_Bfree>
 8007356:	e6a8      	b.n	80070aa <_dtoa_r+0x67a>
 8007358:	2700      	movs	r7, #0
 800735a:	463e      	mov	r6, r7
 800735c:	e7e1      	b.n	8007322 <_dtoa_r+0x8f2>
 800735e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007362:	463e      	mov	r6, r7
 8007364:	e5a9      	b.n	8006eba <_dtoa_r+0x48a>
 8007366:	bf00      	nop
 8007368:	40240000 	.word	0x40240000
 800736c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800736e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 80fa 	beq.w	800756c <_dtoa_r+0xb3c>
 8007378:	2d00      	cmp	r5, #0
 800737a:	dd05      	ble.n	8007388 <_dtoa_r+0x958>
 800737c:	4631      	mov	r1, r6
 800737e:	462a      	mov	r2, r5
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fccd 	bl	8007d20 <__lshift>
 8007386:	4606      	mov	r6, r0
 8007388:	9b07      	ldr	r3, [sp, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d04c      	beq.n	8007428 <_dtoa_r+0x9f8>
 800738e:	6871      	ldr	r1, [r6, #4]
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fb04 	bl	800799e <_Balloc>
 8007396:	6932      	ldr	r2, [r6, #16]
 8007398:	3202      	adds	r2, #2
 800739a:	4605      	mov	r5, r0
 800739c:	0092      	lsls	r2, r2, #2
 800739e:	f106 010c 	add.w	r1, r6, #12
 80073a2:	300c      	adds	r0, #12
 80073a4:	f000 faf0 	bl	8007988 <memcpy>
 80073a8:	2201      	movs	r2, #1
 80073aa:	4629      	mov	r1, r5
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fcb7 	bl	8007d20 <__lshift>
 80073b2:	9b00      	ldr	r3, [sp, #0]
 80073b4:	f8cd b014 	str.w	fp, [sp, #20]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	46b1      	mov	r9, r6
 80073be:	9307      	str	r3, [sp, #28]
 80073c0:	4606      	mov	r6, r0
 80073c2:	4639      	mov	r1, r7
 80073c4:	9804      	ldr	r0, [sp, #16]
 80073c6:	f7ff faa5 	bl	8006914 <quorem>
 80073ca:	4649      	mov	r1, r9
 80073cc:	4605      	mov	r5, r0
 80073ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80073d2:	9804      	ldr	r0, [sp, #16]
 80073d4:	f000 fcf8 	bl	8007dc8 <__mcmp>
 80073d8:	4632      	mov	r2, r6
 80073da:	9000      	str	r0, [sp, #0]
 80073dc:	4639      	mov	r1, r7
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fd0c 	bl	8007dfc <__mdiff>
 80073e4:	68c3      	ldr	r3, [r0, #12]
 80073e6:	4602      	mov	r2, r0
 80073e8:	bb03      	cbnz	r3, 800742c <_dtoa_r+0x9fc>
 80073ea:	4601      	mov	r1, r0
 80073ec:	9008      	str	r0, [sp, #32]
 80073ee:	9804      	ldr	r0, [sp, #16]
 80073f0:	f000 fcea 	bl	8007dc8 <__mcmp>
 80073f4:	9a08      	ldr	r2, [sp, #32]
 80073f6:	4603      	mov	r3, r0
 80073f8:	4611      	mov	r1, r2
 80073fa:	4620      	mov	r0, r4
 80073fc:	9308      	str	r3, [sp, #32]
 80073fe:	f000 fb02 	bl	8007a06 <_Bfree>
 8007402:	9b08      	ldr	r3, [sp, #32]
 8007404:	b9a3      	cbnz	r3, 8007430 <_dtoa_r+0xa00>
 8007406:	9a06      	ldr	r2, [sp, #24]
 8007408:	b992      	cbnz	r2, 8007430 <_dtoa_r+0xa00>
 800740a:	9a07      	ldr	r2, [sp, #28]
 800740c:	b982      	cbnz	r2, 8007430 <_dtoa_r+0xa00>
 800740e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007412:	d029      	beq.n	8007468 <_dtoa_r+0xa38>
 8007414:	9b00      	ldr	r3, [sp, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	dd01      	ble.n	800741e <_dtoa_r+0x9ee>
 800741a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800741e:	9b05      	ldr	r3, [sp, #20]
 8007420:	1c5d      	adds	r5, r3, #1
 8007422:	f883 8000 	strb.w	r8, [r3]
 8007426:	e782      	b.n	800732e <_dtoa_r+0x8fe>
 8007428:	4630      	mov	r0, r6
 800742a:	e7c2      	b.n	80073b2 <_dtoa_r+0x982>
 800742c:	2301      	movs	r3, #1
 800742e:	e7e3      	b.n	80073f8 <_dtoa_r+0x9c8>
 8007430:	9a00      	ldr	r2, [sp, #0]
 8007432:	2a00      	cmp	r2, #0
 8007434:	db04      	blt.n	8007440 <_dtoa_r+0xa10>
 8007436:	d125      	bne.n	8007484 <_dtoa_r+0xa54>
 8007438:	9a06      	ldr	r2, [sp, #24]
 800743a:	bb1a      	cbnz	r2, 8007484 <_dtoa_r+0xa54>
 800743c:	9a07      	ldr	r2, [sp, #28]
 800743e:	bb0a      	cbnz	r2, 8007484 <_dtoa_r+0xa54>
 8007440:	2b00      	cmp	r3, #0
 8007442:	ddec      	ble.n	800741e <_dtoa_r+0x9ee>
 8007444:	2201      	movs	r2, #1
 8007446:	9904      	ldr	r1, [sp, #16]
 8007448:	4620      	mov	r0, r4
 800744a:	f000 fc69 	bl	8007d20 <__lshift>
 800744e:	4639      	mov	r1, r7
 8007450:	9004      	str	r0, [sp, #16]
 8007452:	f000 fcb9 	bl	8007dc8 <__mcmp>
 8007456:	2800      	cmp	r0, #0
 8007458:	dc03      	bgt.n	8007462 <_dtoa_r+0xa32>
 800745a:	d1e0      	bne.n	800741e <_dtoa_r+0x9ee>
 800745c:	f018 0f01 	tst.w	r8, #1
 8007460:	d0dd      	beq.n	800741e <_dtoa_r+0x9ee>
 8007462:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007466:	d1d8      	bne.n	800741a <_dtoa_r+0x9ea>
 8007468:	9b05      	ldr	r3, [sp, #20]
 800746a:	9a05      	ldr	r2, [sp, #20]
 800746c:	1c5d      	adds	r5, r3, #1
 800746e:	2339      	movs	r3, #57	; 0x39
 8007470:	7013      	strb	r3, [r2, #0]
 8007472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007476:	2b39      	cmp	r3, #57	; 0x39
 8007478:	f105 32ff 	add.w	r2, r5, #4294967295
 800747c:	d04f      	beq.n	800751e <_dtoa_r+0xaee>
 800747e:	3301      	adds	r3, #1
 8007480:	7013      	strb	r3, [r2, #0]
 8007482:	e754      	b.n	800732e <_dtoa_r+0x8fe>
 8007484:	9a05      	ldr	r2, [sp, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f102 0501 	add.w	r5, r2, #1
 800748c:	dd06      	ble.n	800749c <_dtoa_r+0xa6c>
 800748e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007492:	d0e9      	beq.n	8007468 <_dtoa_r+0xa38>
 8007494:	f108 0801 	add.w	r8, r8, #1
 8007498:	9b05      	ldr	r3, [sp, #20]
 800749a:	e7c2      	b.n	8007422 <_dtoa_r+0x9f2>
 800749c:	9a02      	ldr	r2, [sp, #8]
 800749e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80074a2:	eba5 030b 	sub.w	r3, r5, fp
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d021      	beq.n	80074ee <_dtoa_r+0xabe>
 80074aa:	2300      	movs	r3, #0
 80074ac:	220a      	movs	r2, #10
 80074ae:	9904      	ldr	r1, [sp, #16]
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 fabf 	bl	8007a34 <__multadd>
 80074b6:	45b1      	cmp	r9, r6
 80074b8:	9004      	str	r0, [sp, #16]
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	f04f 020a 	mov.w	r2, #10
 80074c2:	4649      	mov	r1, r9
 80074c4:	4620      	mov	r0, r4
 80074c6:	d105      	bne.n	80074d4 <_dtoa_r+0xaa4>
 80074c8:	f000 fab4 	bl	8007a34 <__multadd>
 80074cc:	4681      	mov	r9, r0
 80074ce:	4606      	mov	r6, r0
 80074d0:	9505      	str	r5, [sp, #20]
 80074d2:	e776      	b.n	80073c2 <_dtoa_r+0x992>
 80074d4:	f000 faae 	bl	8007a34 <__multadd>
 80074d8:	4631      	mov	r1, r6
 80074da:	4681      	mov	r9, r0
 80074dc:	2300      	movs	r3, #0
 80074de:	220a      	movs	r2, #10
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 faa7 	bl	8007a34 <__multadd>
 80074e6:	4606      	mov	r6, r0
 80074e8:	e7f2      	b.n	80074d0 <_dtoa_r+0xaa0>
 80074ea:	f04f 0900 	mov.w	r9, #0
 80074ee:	2201      	movs	r2, #1
 80074f0:	9904      	ldr	r1, [sp, #16]
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 fc14 	bl	8007d20 <__lshift>
 80074f8:	4639      	mov	r1, r7
 80074fa:	9004      	str	r0, [sp, #16]
 80074fc:	f000 fc64 	bl	8007dc8 <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dcb6      	bgt.n	8007472 <_dtoa_r+0xa42>
 8007504:	d102      	bne.n	800750c <_dtoa_r+0xadc>
 8007506:	f018 0f01 	tst.w	r8, #1
 800750a:	d1b2      	bne.n	8007472 <_dtoa_r+0xa42>
 800750c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007510:	2b30      	cmp	r3, #48	; 0x30
 8007512:	f105 32ff 	add.w	r2, r5, #4294967295
 8007516:	f47f af0a 	bne.w	800732e <_dtoa_r+0x8fe>
 800751a:	4615      	mov	r5, r2
 800751c:	e7f6      	b.n	800750c <_dtoa_r+0xadc>
 800751e:	4593      	cmp	fp, r2
 8007520:	d105      	bne.n	800752e <_dtoa_r+0xafe>
 8007522:	2331      	movs	r3, #49	; 0x31
 8007524:	f10a 0a01 	add.w	sl, sl, #1
 8007528:	f88b 3000 	strb.w	r3, [fp]
 800752c:	e6ff      	b.n	800732e <_dtoa_r+0x8fe>
 800752e:	4615      	mov	r5, r2
 8007530:	e79f      	b.n	8007472 <_dtoa_r+0xa42>
 8007532:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007598 <_dtoa_r+0xb68>
 8007536:	e007      	b.n	8007548 <_dtoa_r+0xb18>
 8007538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800753a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800759c <_dtoa_r+0xb6c>
 800753e:	b11b      	cbz	r3, 8007548 <_dtoa_r+0xb18>
 8007540:	f10b 0308 	add.w	r3, fp, #8
 8007544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	4658      	mov	r0, fp
 800754a:	b017      	add	sp, #92	; 0x5c
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	9b06      	ldr	r3, [sp, #24]
 8007552:	2b01      	cmp	r3, #1
 8007554:	f77f ae35 	ble.w	80071c2 <_dtoa_r+0x792>
 8007558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800755a:	9307      	str	r3, [sp, #28]
 800755c:	e649      	b.n	80071f2 <_dtoa_r+0x7c2>
 800755e:	9b02      	ldr	r3, [sp, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	dc03      	bgt.n	800756c <_dtoa_r+0xb3c>
 8007564:	9b06      	ldr	r3, [sp, #24]
 8007566:	2b02      	cmp	r3, #2
 8007568:	f73f aecc 	bgt.w	8007304 <_dtoa_r+0x8d4>
 800756c:	465d      	mov	r5, fp
 800756e:	4639      	mov	r1, r7
 8007570:	9804      	ldr	r0, [sp, #16]
 8007572:	f7ff f9cf 	bl	8006914 <quorem>
 8007576:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800757a:	f805 8b01 	strb.w	r8, [r5], #1
 800757e:	9a02      	ldr	r2, [sp, #8]
 8007580:	eba5 030b 	sub.w	r3, r5, fp
 8007584:	429a      	cmp	r2, r3
 8007586:	ddb0      	ble.n	80074ea <_dtoa_r+0xaba>
 8007588:	2300      	movs	r3, #0
 800758a:	220a      	movs	r2, #10
 800758c:	9904      	ldr	r1, [sp, #16]
 800758e:	4620      	mov	r0, r4
 8007590:	f000 fa50 	bl	8007a34 <__multadd>
 8007594:	9004      	str	r0, [sp, #16]
 8007596:	e7ea      	b.n	800756e <_dtoa_r+0xb3e>
 8007598:	08008694 	.word	0x08008694
 800759c:	080086b8 	.word	0x080086b8

080075a0 <__sflush_r>:
 80075a0:	898a      	ldrh	r2, [r1, #12]
 80075a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a6:	4605      	mov	r5, r0
 80075a8:	0710      	lsls	r0, r2, #28
 80075aa:	460c      	mov	r4, r1
 80075ac:	d458      	bmi.n	8007660 <__sflush_r+0xc0>
 80075ae:	684b      	ldr	r3, [r1, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dc05      	bgt.n	80075c0 <__sflush_r+0x20>
 80075b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dc02      	bgt.n	80075c0 <__sflush_r+0x20>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d0f9      	beq.n	80075ba <__sflush_r+0x1a>
 80075c6:	2300      	movs	r3, #0
 80075c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075cc:	682f      	ldr	r7, [r5, #0]
 80075ce:	6a21      	ldr	r1, [r4, #32]
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	d032      	beq.n	800763a <__sflush_r+0x9a>
 80075d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	075a      	lsls	r2, r3, #29
 80075da:	d505      	bpl.n	80075e8 <__sflush_r+0x48>
 80075dc:	6863      	ldr	r3, [r4, #4]
 80075de:	1ac0      	subs	r0, r0, r3
 80075e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075e2:	b10b      	cbz	r3, 80075e8 <__sflush_r+0x48>
 80075e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075e6:	1ac0      	subs	r0, r0, r3
 80075e8:	2300      	movs	r3, #0
 80075ea:	4602      	mov	r2, r0
 80075ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ee:	6a21      	ldr	r1, [r4, #32]
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b0      	blx	r6
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	d106      	bne.n	8007608 <__sflush_r+0x68>
 80075fa:	6829      	ldr	r1, [r5, #0]
 80075fc:	291d      	cmp	r1, #29
 80075fe:	d848      	bhi.n	8007692 <__sflush_r+0xf2>
 8007600:	4a29      	ldr	r2, [pc, #164]	; (80076a8 <__sflush_r+0x108>)
 8007602:	40ca      	lsrs	r2, r1
 8007604:	07d6      	lsls	r6, r2, #31
 8007606:	d544      	bpl.n	8007692 <__sflush_r+0xf2>
 8007608:	2200      	movs	r2, #0
 800760a:	6062      	str	r2, [r4, #4]
 800760c:	04d9      	lsls	r1, r3, #19
 800760e:	6922      	ldr	r2, [r4, #16]
 8007610:	6022      	str	r2, [r4, #0]
 8007612:	d504      	bpl.n	800761e <__sflush_r+0x7e>
 8007614:	1c42      	adds	r2, r0, #1
 8007616:	d101      	bne.n	800761c <__sflush_r+0x7c>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	b903      	cbnz	r3, 800761e <__sflush_r+0x7e>
 800761c:	6560      	str	r0, [r4, #84]	; 0x54
 800761e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007620:	602f      	str	r7, [r5, #0]
 8007622:	2900      	cmp	r1, #0
 8007624:	d0c9      	beq.n	80075ba <__sflush_r+0x1a>
 8007626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800762a:	4299      	cmp	r1, r3
 800762c:	d002      	beq.n	8007634 <__sflush_r+0x94>
 800762e:	4628      	mov	r0, r5
 8007630:	f000 fc9e 	bl	8007f70 <_free_r>
 8007634:	2000      	movs	r0, #0
 8007636:	6360      	str	r0, [r4, #52]	; 0x34
 8007638:	e7c0      	b.n	80075bc <__sflush_r+0x1c>
 800763a:	2301      	movs	r3, #1
 800763c:	4628      	mov	r0, r5
 800763e:	47b0      	blx	r6
 8007640:	1c41      	adds	r1, r0, #1
 8007642:	d1c8      	bne.n	80075d6 <__sflush_r+0x36>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0c5      	beq.n	80075d6 <__sflush_r+0x36>
 800764a:	2b1d      	cmp	r3, #29
 800764c:	d001      	beq.n	8007652 <__sflush_r+0xb2>
 800764e:	2b16      	cmp	r3, #22
 8007650:	d101      	bne.n	8007656 <__sflush_r+0xb6>
 8007652:	602f      	str	r7, [r5, #0]
 8007654:	e7b1      	b.n	80075ba <__sflush_r+0x1a>
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	e7ad      	b.n	80075bc <__sflush_r+0x1c>
 8007660:	690f      	ldr	r7, [r1, #16]
 8007662:	2f00      	cmp	r7, #0
 8007664:	d0a9      	beq.n	80075ba <__sflush_r+0x1a>
 8007666:	0793      	lsls	r3, r2, #30
 8007668:	680e      	ldr	r6, [r1, #0]
 800766a:	bf08      	it	eq
 800766c:	694b      	ldreq	r3, [r1, #20]
 800766e:	600f      	str	r7, [r1, #0]
 8007670:	bf18      	it	ne
 8007672:	2300      	movne	r3, #0
 8007674:	eba6 0807 	sub.w	r8, r6, r7
 8007678:	608b      	str	r3, [r1, #8]
 800767a:	f1b8 0f00 	cmp.w	r8, #0
 800767e:	dd9c      	ble.n	80075ba <__sflush_r+0x1a>
 8007680:	4643      	mov	r3, r8
 8007682:	463a      	mov	r2, r7
 8007684:	6a21      	ldr	r1, [r4, #32]
 8007686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007688:	4628      	mov	r0, r5
 800768a:	47b0      	blx	r6
 800768c:	2800      	cmp	r0, #0
 800768e:	dc06      	bgt.n	800769e <__sflush_r+0xfe>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	f04f 30ff 	mov.w	r0, #4294967295
 800769c:	e78e      	b.n	80075bc <__sflush_r+0x1c>
 800769e:	4407      	add	r7, r0
 80076a0:	eba8 0800 	sub.w	r8, r8, r0
 80076a4:	e7e9      	b.n	800767a <__sflush_r+0xda>
 80076a6:	bf00      	nop
 80076a8:	20400001 	.word	0x20400001

080076ac <_fflush_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	690b      	ldr	r3, [r1, #16]
 80076b0:	4605      	mov	r5, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	b1db      	cbz	r3, 80076ee <_fflush_r+0x42>
 80076b6:	b118      	cbz	r0, 80076c0 <_fflush_r+0x14>
 80076b8:	6983      	ldr	r3, [r0, #24]
 80076ba:	b90b      	cbnz	r3, 80076c0 <_fflush_r+0x14>
 80076bc:	f000 f860 	bl	8007780 <__sinit>
 80076c0:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <_fflush_r+0x48>)
 80076c2:	429c      	cmp	r4, r3
 80076c4:	d109      	bne.n	80076da <_fflush_r+0x2e>
 80076c6:	686c      	ldr	r4, [r5, #4]
 80076c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076cc:	b17b      	cbz	r3, 80076ee <_fflush_r+0x42>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d6:	f7ff bf63 	b.w	80075a0 <__sflush_r>
 80076da:	4b07      	ldr	r3, [pc, #28]	; (80076f8 <_fflush_r+0x4c>)
 80076dc:	429c      	cmp	r4, r3
 80076de:	d101      	bne.n	80076e4 <_fflush_r+0x38>
 80076e0:	68ac      	ldr	r4, [r5, #8]
 80076e2:	e7f1      	b.n	80076c8 <_fflush_r+0x1c>
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <_fflush_r+0x50>)
 80076e6:	429c      	cmp	r4, r3
 80076e8:	bf08      	it	eq
 80076ea:	68ec      	ldreq	r4, [r5, #12]
 80076ec:	e7ec      	b.n	80076c8 <_fflush_r+0x1c>
 80076ee:	2000      	movs	r0, #0
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	080086e8 	.word	0x080086e8
 80076f8:	08008708 	.word	0x08008708
 80076fc:	080086c8 	.word	0x080086c8

08007700 <std>:
 8007700:	2300      	movs	r3, #0
 8007702:	b510      	push	{r4, lr}
 8007704:	4604      	mov	r4, r0
 8007706:	e9c0 3300 	strd	r3, r3, [r0]
 800770a:	6083      	str	r3, [r0, #8]
 800770c:	8181      	strh	r1, [r0, #12]
 800770e:	6643      	str	r3, [r0, #100]	; 0x64
 8007710:	81c2      	strh	r2, [r0, #14]
 8007712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007716:	6183      	str	r3, [r0, #24]
 8007718:	4619      	mov	r1, r3
 800771a:	2208      	movs	r2, #8
 800771c:	305c      	adds	r0, #92	; 0x5c
 800771e:	f7fe fb59 	bl	8005dd4 <memset>
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <std+0x38>)
 8007724:	6263      	str	r3, [r4, #36]	; 0x24
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <std+0x3c>)
 8007728:	62a3      	str	r3, [r4, #40]	; 0x28
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <std+0x40>)
 800772c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x44>)
 8007730:	6224      	str	r4, [r4, #32]
 8007732:	6323      	str	r3, [r4, #48]	; 0x30
 8007734:	bd10      	pop	{r4, pc}
 8007736:	bf00      	nop
 8007738:	08008361 	.word	0x08008361
 800773c:	08008383 	.word	0x08008383
 8007740:	080083bb 	.word	0x080083bb
 8007744:	080083df 	.word	0x080083df

08007748 <_cleanup_r>:
 8007748:	4901      	ldr	r1, [pc, #4]	; (8007750 <_cleanup_r+0x8>)
 800774a:	f000 b885 	b.w	8007858 <_fwalk_reent>
 800774e:	bf00      	nop
 8007750:	080076ad 	.word	0x080076ad

08007754 <__sfmoreglue>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	1e4a      	subs	r2, r1, #1
 8007758:	2568      	movs	r5, #104	; 0x68
 800775a:	4355      	muls	r5, r2
 800775c:	460e      	mov	r6, r1
 800775e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007762:	f000 fc53 	bl	800800c <_malloc_r>
 8007766:	4604      	mov	r4, r0
 8007768:	b140      	cbz	r0, 800777c <__sfmoreglue+0x28>
 800776a:	2100      	movs	r1, #0
 800776c:	e9c0 1600 	strd	r1, r6, [r0]
 8007770:	300c      	adds	r0, #12
 8007772:	60a0      	str	r0, [r4, #8]
 8007774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007778:	f7fe fb2c 	bl	8005dd4 <memset>
 800777c:	4620      	mov	r0, r4
 800777e:	bd70      	pop	{r4, r5, r6, pc}

08007780 <__sinit>:
 8007780:	6983      	ldr	r3, [r0, #24]
 8007782:	b510      	push	{r4, lr}
 8007784:	4604      	mov	r4, r0
 8007786:	bb33      	cbnz	r3, 80077d6 <__sinit+0x56>
 8007788:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800778c:	6503      	str	r3, [r0, #80]	; 0x50
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <__sinit+0x58>)
 8007790:	4a12      	ldr	r2, [pc, #72]	; (80077dc <__sinit+0x5c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6282      	str	r2, [r0, #40]	; 0x28
 8007796:	4298      	cmp	r0, r3
 8007798:	bf04      	itt	eq
 800779a:	2301      	moveq	r3, #1
 800779c:	6183      	streq	r3, [r0, #24]
 800779e:	f000 f81f 	bl	80077e0 <__sfp>
 80077a2:	6060      	str	r0, [r4, #4]
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 f81b 	bl	80077e0 <__sfp>
 80077aa:	60a0      	str	r0, [r4, #8]
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 f817 	bl	80077e0 <__sfp>
 80077b2:	2200      	movs	r2, #0
 80077b4:	60e0      	str	r0, [r4, #12]
 80077b6:	2104      	movs	r1, #4
 80077b8:	6860      	ldr	r0, [r4, #4]
 80077ba:	f7ff ffa1 	bl	8007700 <std>
 80077be:	2201      	movs	r2, #1
 80077c0:	2109      	movs	r1, #9
 80077c2:	68a0      	ldr	r0, [r4, #8]
 80077c4:	f7ff ff9c 	bl	8007700 <std>
 80077c8:	2202      	movs	r2, #2
 80077ca:	2112      	movs	r1, #18
 80077cc:	68e0      	ldr	r0, [r4, #12]
 80077ce:	f7ff ff97 	bl	8007700 <std>
 80077d2:	2301      	movs	r3, #1
 80077d4:	61a3      	str	r3, [r4, #24]
 80077d6:	bd10      	pop	{r4, pc}
 80077d8:	08008680 	.word	0x08008680
 80077dc:	08007749 	.word	0x08007749

080077e0 <__sfp>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	4b1b      	ldr	r3, [pc, #108]	; (8007850 <__sfp+0x70>)
 80077e4:	681e      	ldr	r6, [r3, #0]
 80077e6:	69b3      	ldr	r3, [r6, #24]
 80077e8:	4607      	mov	r7, r0
 80077ea:	b913      	cbnz	r3, 80077f2 <__sfp+0x12>
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff ffc7 	bl	8007780 <__sinit>
 80077f2:	3648      	adds	r6, #72	; 0x48
 80077f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	d503      	bpl.n	8007804 <__sfp+0x24>
 80077fc:	6833      	ldr	r3, [r6, #0]
 80077fe:	b133      	cbz	r3, 800780e <__sfp+0x2e>
 8007800:	6836      	ldr	r6, [r6, #0]
 8007802:	e7f7      	b.n	80077f4 <__sfp+0x14>
 8007804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007808:	b16d      	cbz	r5, 8007826 <__sfp+0x46>
 800780a:	3468      	adds	r4, #104	; 0x68
 800780c:	e7f4      	b.n	80077f8 <__sfp+0x18>
 800780e:	2104      	movs	r1, #4
 8007810:	4638      	mov	r0, r7
 8007812:	f7ff ff9f 	bl	8007754 <__sfmoreglue>
 8007816:	6030      	str	r0, [r6, #0]
 8007818:	2800      	cmp	r0, #0
 800781a:	d1f1      	bne.n	8007800 <__sfp+0x20>
 800781c:	230c      	movs	r3, #12
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4604      	mov	r4, r0
 8007822:	4620      	mov	r0, r4
 8007824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <__sfp+0x74>)
 8007828:	6665      	str	r5, [r4, #100]	; 0x64
 800782a:	e9c4 5500 	strd	r5, r5, [r4]
 800782e:	60a5      	str	r5, [r4, #8]
 8007830:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007834:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007838:	2208      	movs	r2, #8
 800783a:	4629      	mov	r1, r5
 800783c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007840:	f7fe fac8 	bl	8005dd4 <memset>
 8007844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800784c:	e7e9      	b.n	8007822 <__sfp+0x42>
 800784e:	bf00      	nop
 8007850:	08008680 	.word	0x08008680
 8007854:	ffff0001 	.word	0xffff0001

08007858 <_fwalk_reent>:
 8007858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007864:	2600      	movs	r6, #0
 8007866:	b914      	cbnz	r4, 800786e <_fwalk_reent+0x16>
 8007868:	4630      	mov	r0, r6
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007872:	3f01      	subs	r7, #1
 8007874:	d501      	bpl.n	800787a <_fwalk_reent+0x22>
 8007876:	6824      	ldr	r4, [r4, #0]
 8007878:	e7f5      	b.n	8007866 <_fwalk_reent+0xe>
 800787a:	89ab      	ldrh	r3, [r5, #12]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d907      	bls.n	8007890 <_fwalk_reent+0x38>
 8007880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007884:	3301      	adds	r3, #1
 8007886:	d003      	beq.n	8007890 <_fwalk_reent+0x38>
 8007888:	4629      	mov	r1, r5
 800788a:	4640      	mov	r0, r8
 800788c:	47c8      	blx	r9
 800788e:	4306      	orrs	r6, r0
 8007890:	3568      	adds	r5, #104	; 0x68
 8007892:	e7ee      	b.n	8007872 <_fwalk_reent+0x1a>

08007894 <_localeconv_r>:
 8007894:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <_localeconv_r+0x14>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a18      	ldr	r0, [r3, #32]
 800789a:	4b04      	ldr	r3, [pc, #16]	; (80078ac <_localeconv_r+0x18>)
 800789c:	2800      	cmp	r0, #0
 800789e:	bf08      	it	eq
 80078a0:	4618      	moveq	r0, r3
 80078a2:	30f0      	adds	r0, #240	; 0xf0
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000014 	.word	0x20000014
 80078ac:	20000078 	.word	0x20000078

080078b0 <__swhatbuf_r>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	460e      	mov	r6, r1
 80078b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b8:	2900      	cmp	r1, #0
 80078ba:	b096      	sub	sp, #88	; 0x58
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	da07      	bge.n	80078d2 <__swhatbuf_r+0x22>
 80078c2:	2300      	movs	r3, #0
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	89b3      	ldrh	r3, [r6, #12]
 80078c8:	061a      	lsls	r2, r3, #24
 80078ca:	d410      	bmi.n	80078ee <__swhatbuf_r+0x3e>
 80078cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d0:	e00e      	b.n	80078f0 <__swhatbuf_r+0x40>
 80078d2:	466a      	mov	r2, sp
 80078d4:	f000 fdaa 	bl	800842c <_fstat_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dbf2      	blt.n	80078c2 <__swhatbuf_r+0x12>
 80078dc:	9a01      	ldr	r2, [sp, #4]
 80078de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078e6:	425a      	negs	r2, r3
 80078e8:	415a      	adcs	r2, r3
 80078ea:	602a      	str	r2, [r5, #0]
 80078ec:	e7ee      	b.n	80078cc <__swhatbuf_r+0x1c>
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	2000      	movs	r0, #0
 80078f2:	6023      	str	r3, [r4, #0]
 80078f4:	b016      	add	sp, #88	; 0x58
 80078f6:	bd70      	pop	{r4, r5, r6, pc}

080078f8 <__smakebuf_r>:
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078fc:	079d      	lsls	r5, r3, #30
 80078fe:	4606      	mov	r6, r0
 8007900:	460c      	mov	r4, r1
 8007902:	d507      	bpl.n	8007914 <__smakebuf_r+0x1c>
 8007904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	2301      	movs	r3, #1
 800790e:	6163      	str	r3, [r4, #20]
 8007910:	b002      	add	sp, #8
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	ab01      	add	r3, sp, #4
 8007916:	466a      	mov	r2, sp
 8007918:	f7ff ffca 	bl	80078b0 <__swhatbuf_r>
 800791c:	9900      	ldr	r1, [sp, #0]
 800791e:	4605      	mov	r5, r0
 8007920:	4630      	mov	r0, r6
 8007922:	f000 fb73 	bl	800800c <_malloc_r>
 8007926:	b948      	cbnz	r0, 800793c <__smakebuf_r+0x44>
 8007928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d4ef      	bmi.n	8007910 <__smakebuf_r+0x18>
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	f043 0302 	orr.w	r3, r3, #2
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	e7e3      	b.n	8007904 <__smakebuf_r+0xc>
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <__smakebuf_r+0x7c>)
 800793e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	6163      	str	r3, [r4, #20]
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	6120      	str	r0, [r4, #16]
 8007952:	b15b      	cbz	r3, 800796c <__smakebuf_r+0x74>
 8007954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007958:	4630      	mov	r0, r6
 800795a:	f000 fd79 	bl	8008450 <_isatty_r>
 800795e:	b128      	cbz	r0, 800796c <__smakebuf_r+0x74>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	431d      	orrs	r5, r3
 8007970:	81a5      	strh	r5, [r4, #12]
 8007972:	e7cd      	b.n	8007910 <__smakebuf_r+0x18>
 8007974:	08007749 	.word	0x08007749

08007978 <malloc>:
 8007978:	4b02      	ldr	r3, [pc, #8]	; (8007984 <malloc+0xc>)
 800797a:	4601      	mov	r1, r0
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	f000 bb45 	b.w	800800c <_malloc_r>
 8007982:	bf00      	nop
 8007984:	20000014 	.word	0x20000014

08007988 <memcpy>:
 8007988:	b510      	push	{r4, lr}
 800798a:	1e43      	subs	r3, r0, #1
 800798c:	440a      	add	r2, r1
 800798e:	4291      	cmp	r1, r2
 8007990:	d100      	bne.n	8007994 <memcpy+0xc>
 8007992:	bd10      	pop	{r4, pc}
 8007994:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799c:	e7f7      	b.n	800798e <memcpy+0x6>

0800799e <_Balloc>:
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079a2:	4604      	mov	r4, r0
 80079a4:	460e      	mov	r6, r1
 80079a6:	b93d      	cbnz	r5, 80079b8 <_Balloc+0x1a>
 80079a8:	2010      	movs	r0, #16
 80079aa:	f7ff ffe5 	bl	8007978 <malloc>
 80079ae:	6260      	str	r0, [r4, #36]	; 0x24
 80079b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079b4:	6005      	str	r5, [r0, #0]
 80079b6:	60c5      	str	r5, [r0, #12]
 80079b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80079ba:	68eb      	ldr	r3, [r5, #12]
 80079bc:	b183      	cbz	r3, 80079e0 <_Balloc+0x42>
 80079be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80079c6:	b9b8      	cbnz	r0, 80079f8 <_Balloc+0x5a>
 80079c8:	2101      	movs	r1, #1
 80079ca:	fa01 f506 	lsl.w	r5, r1, r6
 80079ce:	1d6a      	adds	r2, r5, #5
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fabe 	bl	8007f54 <_calloc_r>
 80079d8:	b160      	cbz	r0, 80079f4 <_Balloc+0x56>
 80079da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80079de:	e00e      	b.n	80079fe <_Balloc+0x60>
 80079e0:	2221      	movs	r2, #33	; 0x21
 80079e2:	2104      	movs	r1, #4
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fab5 	bl	8007f54 <_calloc_r>
 80079ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ec:	60e8      	str	r0, [r5, #12]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e4      	bne.n	80079be <_Balloc+0x20>
 80079f4:	2000      	movs	r0, #0
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	6802      	ldr	r2, [r0, #0]
 80079fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80079fe:	2300      	movs	r3, #0
 8007a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a04:	e7f7      	b.n	80079f6 <_Balloc+0x58>

08007a06 <_Bfree>:
 8007a06:	b570      	push	{r4, r5, r6, lr}
 8007a08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	b93c      	cbnz	r4, 8007a20 <_Bfree+0x1a>
 8007a10:	2010      	movs	r0, #16
 8007a12:	f7ff ffb1 	bl	8007978 <malloc>
 8007a16:	6270      	str	r0, [r6, #36]	; 0x24
 8007a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a1c:	6004      	str	r4, [r0, #0]
 8007a1e:	60c4      	str	r4, [r0, #12]
 8007a20:	b13d      	cbz	r5, 8007a32 <_Bfree+0x2c>
 8007a22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a24:	686a      	ldr	r2, [r5, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a2c:	6029      	str	r1, [r5, #0]
 8007a2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007a32:	bd70      	pop	{r4, r5, r6, pc}

08007a34 <__multadd>:
 8007a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a38:	690d      	ldr	r5, [r1, #16]
 8007a3a:	461f      	mov	r7, r3
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	f101 0c14 	add.w	ip, r1, #20
 8007a44:	2300      	movs	r3, #0
 8007a46:	f8dc 0000 	ldr.w	r0, [ip]
 8007a4a:	b281      	uxth	r1, r0
 8007a4c:	fb02 7101 	mla	r1, r2, r1, r7
 8007a50:	0c0f      	lsrs	r7, r1, #16
 8007a52:	0c00      	lsrs	r0, r0, #16
 8007a54:	fb02 7000 	mla	r0, r2, r0, r7
 8007a58:	b289      	uxth	r1, r1
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007a60:	429d      	cmp	r5, r3
 8007a62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007a66:	f84c 1b04 	str.w	r1, [ip], #4
 8007a6a:	dcec      	bgt.n	8007a46 <__multadd+0x12>
 8007a6c:	b1d7      	cbz	r7, 8007aa4 <__multadd+0x70>
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	42ab      	cmp	r3, r5
 8007a72:	dc12      	bgt.n	8007a9a <__multadd+0x66>
 8007a74:	6861      	ldr	r1, [r4, #4]
 8007a76:	4630      	mov	r0, r6
 8007a78:	3101      	adds	r1, #1
 8007a7a:	f7ff ff90 	bl	800799e <_Balloc>
 8007a7e:	6922      	ldr	r2, [r4, #16]
 8007a80:	3202      	adds	r2, #2
 8007a82:	f104 010c 	add.w	r1, r4, #12
 8007a86:	4680      	mov	r8, r0
 8007a88:	0092      	lsls	r2, r2, #2
 8007a8a:	300c      	adds	r0, #12
 8007a8c:	f7ff ff7c 	bl	8007988 <memcpy>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7ff ffb7 	bl	8007a06 <_Bfree>
 8007a98:	4644      	mov	r4, r8
 8007a9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a9e:	3501      	adds	r5, #1
 8007aa0:	615f      	str	r7, [r3, #20]
 8007aa2:	6125      	str	r5, [r4, #16]
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007aaa <__hi0bits>:
 8007aaa:	0c02      	lsrs	r2, r0, #16
 8007aac:	0412      	lsls	r2, r2, #16
 8007aae:	4603      	mov	r3, r0
 8007ab0:	b9b2      	cbnz	r2, 8007ae0 <__hi0bits+0x36>
 8007ab2:	0403      	lsls	r3, r0, #16
 8007ab4:	2010      	movs	r0, #16
 8007ab6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007aba:	bf04      	itt	eq
 8007abc:	021b      	lsleq	r3, r3, #8
 8007abe:	3008      	addeq	r0, #8
 8007ac0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007ac4:	bf04      	itt	eq
 8007ac6:	011b      	lsleq	r3, r3, #4
 8007ac8:	3004      	addeq	r0, #4
 8007aca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ace:	bf04      	itt	eq
 8007ad0:	009b      	lsleq	r3, r3, #2
 8007ad2:	3002      	addeq	r0, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	db06      	blt.n	8007ae6 <__hi0bits+0x3c>
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	d503      	bpl.n	8007ae4 <__hi0bits+0x3a>
 8007adc:	3001      	adds	r0, #1
 8007ade:	4770      	bx	lr
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	e7e8      	b.n	8007ab6 <__hi0bits+0xc>
 8007ae4:	2020      	movs	r0, #32
 8007ae6:	4770      	bx	lr

08007ae8 <__lo0bits>:
 8007ae8:	6803      	ldr	r3, [r0, #0]
 8007aea:	f013 0207 	ands.w	r2, r3, #7
 8007aee:	4601      	mov	r1, r0
 8007af0:	d00b      	beq.n	8007b0a <__lo0bits+0x22>
 8007af2:	07da      	lsls	r2, r3, #31
 8007af4:	d423      	bmi.n	8007b3e <__lo0bits+0x56>
 8007af6:	0798      	lsls	r0, r3, #30
 8007af8:	bf49      	itett	mi
 8007afa:	085b      	lsrmi	r3, r3, #1
 8007afc:	089b      	lsrpl	r3, r3, #2
 8007afe:	2001      	movmi	r0, #1
 8007b00:	600b      	strmi	r3, [r1, #0]
 8007b02:	bf5c      	itt	pl
 8007b04:	600b      	strpl	r3, [r1, #0]
 8007b06:	2002      	movpl	r0, #2
 8007b08:	4770      	bx	lr
 8007b0a:	b298      	uxth	r0, r3
 8007b0c:	b9a8      	cbnz	r0, 8007b3a <__lo0bits+0x52>
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	2010      	movs	r0, #16
 8007b12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b16:	bf04      	itt	eq
 8007b18:	0a1b      	lsreq	r3, r3, #8
 8007b1a:	3008      	addeq	r0, #8
 8007b1c:	071a      	lsls	r2, r3, #28
 8007b1e:	bf04      	itt	eq
 8007b20:	091b      	lsreq	r3, r3, #4
 8007b22:	3004      	addeq	r0, #4
 8007b24:	079a      	lsls	r2, r3, #30
 8007b26:	bf04      	itt	eq
 8007b28:	089b      	lsreq	r3, r3, #2
 8007b2a:	3002      	addeq	r0, #2
 8007b2c:	07da      	lsls	r2, r3, #31
 8007b2e:	d402      	bmi.n	8007b36 <__lo0bits+0x4e>
 8007b30:	085b      	lsrs	r3, r3, #1
 8007b32:	d006      	beq.n	8007b42 <__lo0bits+0x5a>
 8007b34:	3001      	adds	r0, #1
 8007b36:	600b      	str	r3, [r1, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	e7e9      	b.n	8007b12 <__lo0bits+0x2a>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	4770      	bx	lr
 8007b42:	2020      	movs	r0, #32
 8007b44:	4770      	bx	lr

08007b46 <__i2b>:
 8007b46:	b510      	push	{r4, lr}
 8007b48:	460c      	mov	r4, r1
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	f7ff ff27 	bl	800799e <_Balloc>
 8007b50:	2201      	movs	r2, #1
 8007b52:	6144      	str	r4, [r0, #20]
 8007b54:	6102      	str	r2, [r0, #16]
 8007b56:	bd10      	pop	{r4, pc}

08007b58 <__multiply>:
 8007b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	690a      	ldr	r2, [r1, #16]
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	bfb8      	it	lt
 8007b66:	460b      	movlt	r3, r1
 8007b68:	4688      	mov	r8, r1
 8007b6a:	bfbc      	itt	lt
 8007b6c:	46a0      	movlt	r8, r4
 8007b6e:	461c      	movlt	r4, r3
 8007b70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b80:	eb07 0609 	add.w	r6, r7, r9
 8007b84:	42b3      	cmp	r3, r6
 8007b86:	bfb8      	it	lt
 8007b88:	3101      	addlt	r1, #1
 8007b8a:	f7ff ff08 	bl	800799e <_Balloc>
 8007b8e:	f100 0514 	add.w	r5, r0, #20
 8007b92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007b96:	462b      	mov	r3, r5
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4573      	cmp	r3, lr
 8007b9c:	d316      	bcc.n	8007bcc <__multiply+0x74>
 8007b9e:	f104 0214 	add.w	r2, r4, #20
 8007ba2:	f108 0114 	add.w	r1, r8, #20
 8007ba6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007baa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d80c      	bhi.n	8007bd2 <__multiply+0x7a>
 8007bb8:	2e00      	cmp	r6, #0
 8007bba:	dd03      	ble.n	8007bc4 <__multiply+0x6c>
 8007bbc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05d      	beq.n	8007c80 <__multiply+0x128>
 8007bc4:	6106      	str	r6, [r0, #16]
 8007bc6:	b003      	add	sp, #12
 8007bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bcc:	f843 2b04 	str.w	r2, [r3], #4
 8007bd0:	e7e3      	b.n	8007b9a <__multiply+0x42>
 8007bd2:	f8b2 b000 	ldrh.w	fp, [r2]
 8007bd6:	f1bb 0f00 	cmp.w	fp, #0
 8007bda:	d023      	beq.n	8007c24 <__multiply+0xcc>
 8007bdc:	4689      	mov	r9, r1
 8007bde:	46ac      	mov	ip, r5
 8007be0:	f04f 0800 	mov.w	r8, #0
 8007be4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007be8:	f8dc a000 	ldr.w	sl, [ip]
 8007bec:	b2a3      	uxth	r3, r4
 8007bee:	fa1f fa8a 	uxth.w	sl, sl
 8007bf2:	fb0b a303 	mla	r3, fp, r3, sl
 8007bf6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007bfa:	f8dc 4000 	ldr.w	r4, [ip]
 8007bfe:	4443      	add	r3, r8
 8007c00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c04:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c0c:	46e2      	mov	sl, ip
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c14:	454f      	cmp	r7, r9
 8007c16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c1a:	f84a 3b04 	str.w	r3, [sl], #4
 8007c1e:	d82b      	bhi.n	8007c78 <__multiply+0x120>
 8007c20:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c24:	9b01      	ldr	r3, [sp, #4]
 8007c26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c2a:	3204      	adds	r2, #4
 8007c2c:	f1ba 0f00 	cmp.w	sl, #0
 8007c30:	d020      	beq.n	8007c74 <__multiply+0x11c>
 8007c32:	682b      	ldr	r3, [r5, #0]
 8007c34:	4689      	mov	r9, r1
 8007c36:	46a8      	mov	r8, r5
 8007c38:	f04f 0b00 	mov.w	fp, #0
 8007c3c:	f8b9 c000 	ldrh.w	ip, [r9]
 8007c40:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007c44:	fb0a 440c 	mla	r4, sl, ip, r4
 8007c48:	445c      	add	r4, fp
 8007c4a:	46c4      	mov	ip, r8
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c52:	f84c 3b04 	str.w	r3, [ip], #4
 8007c56:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c5a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007c5e:	0c1b      	lsrs	r3, r3, #16
 8007c60:	fb0a b303 	mla	r3, sl, r3, fp
 8007c64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007c68:	454f      	cmp	r7, r9
 8007c6a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007c6e:	d805      	bhi.n	8007c7c <__multiply+0x124>
 8007c70:	f8c8 3004 	str.w	r3, [r8, #4]
 8007c74:	3504      	adds	r5, #4
 8007c76:	e79b      	b.n	8007bb0 <__multiply+0x58>
 8007c78:	46d4      	mov	ip, sl
 8007c7a:	e7b3      	b.n	8007be4 <__multiply+0x8c>
 8007c7c:	46e0      	mov	r8, ip
 8007c7e:	e7dd      	b.n	8007c3c <__multiply+0xe4>
 8007c80:	3e01      	subs	r6, #1
 8007c82:	e799      	b.n	8007bb8 <__multiply+0x60>

08007c84 <__pow5mult>:
 8007c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c88:	4615      	mov	r5, r2
 8007c8a:	f012 0203 	ands.w	r2, r2, #3
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	d007      	beq.n	8007ca4 <__pow5mult+0x20>
 8007c94:	3a01      	subs	r2, #1
 8007c96:	4c21      	ldr	r4, [pc, #132]	; (8007d1c <__pow5mult+0x98>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c9e:	f7ff fec9 	bl	8007a34 <__multadd>
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	10ad      	asrs	r5, r5, #2
 8007ca6:	d035      	beq.n	8007d14 <__pow5mult+0x90>
 8007ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007caa:	b93c      	cbnz	r4, 8007cbc <__pow5mult+0x38>
 8007cac:	2010      	movs	r0, #16
 8007cae:	f7ff fe63 	bl	8007978 <malloc>
 8007cb2:	6270      	str	r0, [r6, #36]	; 0x24
 8007cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cb8:	6004      	str	r4, [r0, #0]
 8007cba:	60c4      	str	r4, [r0, #12]
 8007cbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cc4:	b94c      	cbnz	r4, 8007cda <__pow5mult+0x56>
 8007cc6:	f240 2171 	movw	r1, #625	; 0x271
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff ff3b 	bl	8007b46 <__i2b>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	6003      	str	r3, [r0, #0]
 8007cda:	f04f 0800 	mov.w	r8, #0
 8007cde:	07eb      	lsls	r3, r5, #31
 8007ce0:	d50a      	bpl.n	8007cf8 <__pow5mult+0x74>
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ff36 	bl	8007b58 <__multiply>
 8007cec:	4639      	mov	r1, r7
 8007cee:	4681      	mov	r9, r0
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7ff fe88 	bl	8007a06 <_Bfree>
 8007cf6:	464f      	mov	r7, r9
 8007cf8:	106d      	asrs	r5, r5, #1
 8007cfa:	d00b      	beq.n	8007d14 <__pow5mult+0x90>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	b938      	cbnz	r0, 8007d10 <__pow5mult+0x8c>
 8007d00:	4622      	mov	r2, r4
 8007d02:	4621      	mov	r1, r4
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff ff27 	bl	8007b58 <__multiply>
 8007d0a:	6020      	str	r0, [r4, #0]
 8007d0c:	f8c0 8000 	str.w	r8, [r0]
 8007d10:	4604      	mov	r4, r0
 8007d12:	e7e4      	b.n	8007cde <__pow5mult+0x5a>
 8007d14:	4638      	mov	r0, r7
 8007d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1a:	bf00      	nop
 8007d1c:	08008818 	.word	0x08008818

08007d20 <__lshift>:
 8007d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	460c      	mov	r4, r1
 8007d26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	6849      	ldr	r1, [r1, #4]
 8007d2e:	eb0a 0903 	add.w	r9, sl, r3
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	4607      	mov	r7, r0
 8007d36:	4616      	mov	r6, r2
 8007d38:	f109 0501 	add.w	r5, r9, #1
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	db32      	blt.n	8007da6 <__lshift+0x86>
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff fe2c 	bl	800799e <_Balloc>
 8007d46:	2300      	movs	r3, #0
 8007d48:	4680      	mov	r8, r0
 8007d4a:	f100 0114 	add.w	r1, r0, #20
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4553      	cmp	r3, sl
 8007d52:	db2b      	blt.n	8007dac <__lshift+0x8c>
 8007d54:	6920      	ldr	r0, [r4, #16]
 8007d56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d5a:	f104 0314 	add.w	r3, r4, #20
 8007d5e:	f016 021f 	ands.w	r2, r6, #31
 8007d62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d6a:	d025      	beq.n	8007db8 <__lshift+0x98>
 8007d6c:	f1c2 0e20 	rsb	lr, r2, #32
 8007d70:	2000      	movs	r0, #0
 8007d72:	681e      	ldr	r6, [r3, #0]
 8007d74:	468a      	mov	sl, r1
 8007d76:	4096      	lsls	r6, r2
 8007d78:	4330      	orrs	r0, r6
 8007d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007d82:	459c      	cmp	ip, r3
 8007d84:	fa20 f00e 	lsr.w	r0, r0, lr
 8007d88:	d814      	bhi.n	8007db4 <__lshift+0x94>
 8007d8a:	6048      	str	r0, [r1, #4]
 8007d8c:	b108      	cbz	r0, 8007d92 <__lshift+0x72>
 8007d8e:	f109 0502 	add.w	r5, r9, #2
 8007d92:	3d01      	subs	r5, #1
 8007d94:	4638      	mov	r0, r7
 8007d96:	f8c8 5010 	str.w	r5, [r8, #16]
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	f7ff fe33 	bl	8007a06 <_Bfree>
 8007da0:	4640      	mov	r0, r8
 8007da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da6:	3101      	adds	r1, #1
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	e7c7      	b.n	8007d3c <__lshift+0x1c>
 8007dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007db0:	3301      	adds	r3, #1
 8007db2:	e7cd      	b.n	8007d50 <__lshift+0x30>
 8007db4:	4651      	mov	r1, sl
 8007db6:	e7dc      	b.n	8007d72 <__lshift+0x52>
 8007db8:	3904      	subs	r1, #4
 8007dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dc2:	459c      	cmp	ip, r3
 8007dc4:	d8f9      	bhi.n	8007dba <__lshift+0x9a>
 8007dc6:	e7e4      	b.n	8007d92 <__lshift+0x72>

08007dc8 <__mcmp>:
 8007dc8:	6903      	ldr	r3, [r0, #16]
 8007dca:	690a      	ldr	r2, [r1, #16]
 8007dcc:	1a9b      	subs	r3, r3, r2
 8007dce:	b530      	push	{r4, r5, lr}
 8007dd0:	d10c      	bne.n	8007dec <__mcmp+0x24>
 8007dd2:	0092      	lsls	r2, r2, #2
 8007dd4:	3014      	adds	r0, #20
 8007dd6:	3114      	adds	r1, #20
 8007dd8:	1884      	adds	r4, r0, r2
 8007dda:	4411      	add	r1, r2
 8007ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007de4:	4295      	cmp	r5, r2
 8007de6:	d003      	beq.n	8007df0 <__mcmp+0x28>
 8007de8:	d305      	bcc.n	8007df6 <__mcmp+0x2e>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd30      	pop	{r4, r5, pc}
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d3f3      	bcc.n	8007ddc <__mcmp+0x14>
 8007df4:	e7fa      	b.n	8007dec <__mcmp+0x24>
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfa:	e7f7      	b.n	8007dec <__mcmp+0x24>

08007dfc <__mdiff>:
 8007dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	460d      	mov	r5, r1
 8007e02:	4607      	mov	r7, r0
 8007e04:	4611      	mov	r1, r2
 8007e06:	4628      	mov	r0, r5
 8007e08:	4614      	mov	r4, r2
 8007e0a:	f7ff ffdd 	bl	8007dc8 <__mcmp>
 8007e0e:	1e06      	subs	r6, r0, #0
 8007e10:	d108      	bne.n	8007e24 <__mdiff+0x28>
 8007e12:	4631      	mov	r1, r6
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff fdc2 	bl	800799e <_Balloc>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e24:	bfa4      	itt	ge
 8007e26:	4623      	movge	r3, r4
 8007e28:	462c      	movge	r4, r5
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	6861      	ldr	r1, [r4, #4]
 8007e2e:	bfa6      	itte	ge
 8007e30:	461d      	movge	r5, r3
 8007e32:	2600      	movge	r6, #0
 8007e34:	2601      	movlt	r6, #1
 8007e36:	f7ff fdb2 	bl	800799e <_Balloc>
 8007e3a:	692b      	ldr	r3, [r5, #16]
 8007e3c:	60c6      	str	r6, [r0, #12]
 8007e3e:	6926      	ldr	r6, [r4, #16]
 8007e40:	f105 0914 	add.w	r9, r5, #20
 8007e44:	f104 0214 	add.w	r2, r4, #20
 8007e48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007e4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007e50:	f100 0514 	add.w	r5, r0, #20
 8007e54:	f04f 0e00 	mov.w	lr, #0
 8007e58:	f852 ab04 	ldr.w	sl, [r2], #4
 8007e5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e60:	fa1e f18a 	uxtah	r1, lr, sl
 8007e64:	b2a3      	uxth	r3, r4
 8007e66:	1ac9      	subs	r1, r1, r3
 8007e68:	0c23      	lsrs	r3, r4, #16
 8007e6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007e6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e72:	b289      	uxth	r1, r1
 8007e74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007e78:	45c8      	cmp	r8, r9
 8007e7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e7e:	4694      	mov	ip, r2
 8007e80:	f845 3b04 	str.w	r3, [r5], #4
 8007e84:	d8e8      	bhi.n	8007e58 <__mdiff+0x5c>
 8007e86:	45bc      	cmp	ip, r7
 8007e88:	d304      	bcc.n	8007e94 <__mdiff+0x98>
 8007e8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007e8e:	b183      	cbz	r3, 8007eb2 <__mdiff+0xb6>
 8007e90:	6106      	str	r6, [r0, #16]
 8007e92:	e7c5      	b.n	8007e20 <__mdiff+0x24>
 8007e94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e98:	fa1e f381 	uxtah	r3, lr, r1
 8007e9c:	141a      	asrs	r2, r3, #16
 8007e9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ea8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007eac:	f845 3b04 	str.w	r3, [r5], #4
 8007eb0:	e7e9      	b.n	8007e86 <__mdiff+0x8a>
 8007eb2:	3e01      	subs	r6, #1
 8007eb4:	e7e9      	b.n	8007e8a <__mdiff+0x8e>

08007eb6 <__d2b>:
 8007eb6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007eba:	460e      	mov	r6, r1
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	ec59 8b10 	vmov	r8, r9, d0
 8007ec2:	4615      	mov	r5, r2
 8007ec4:	f7ff fd6b 	bl	800799e <_Balloc>
 8007ec8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ecc:	4607      	mov	r7, r0
 8007ece:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ed2:	bb34      	cbnz	r4, 8007f22 <__d2b+0x6c>
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	f1b8 0300 	subs.w	r3, r8, #0
 8007eda:	d027      	beq.n	8007f2c <__d2b+0x76>
 8007edc:	a802      	add	r0, sp, #8
 8007ede:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007ee2:	f7ff fe01 	bl	8007ae8 <__lo0bits>
 8007ee6:	9900      	ldr	r1, [sp, #0]
 8007ee8:	b1f0      	cbz	r0, 8007f28 <__d2b+0x72>
 8007eea:	9a01      	ldr	r2, [sp, #4]
 8007eec:	f1c0 0320 	rsb	r3, r0, #32
 8007ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	40c2      	lsrs	r2, r0
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	9201      	str	r2, [sp, #4]
 8007efc:	9b01      	ldr	r3, [sp, #4]
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bf14      	ite	ne
 8007f04:	2102      	movne	r1, #2
 8007f06:	2101      	moveq	r1, #1
 8007f08:	6139      	str	r1, [r7, #16]
 8007f0a:	b1c4      	cbz	r4, 8007f3e <__d2b+0x88>
 8007f0c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f10:	4404      	add	r4, r0
 8007f12:	6034      	str	r4, [r6, #0]
 8007f14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f18:	6028      	str	r0, [r5, #0]
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	b003      	add	sp, #12
 8007f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f26:	e7d5      	b.n	8007ed4 <__d2b+0x1e>
 8007f28:	6179      	str	r1, [r7, #20]
 8007f2a:	e7e7      	b.n	8007efc <__d2b+0x46>
 8007f2c:	a801      	add	r0, sp, #4
 8007f2e:	f7ff fddb 	bl	8007ae8 <__lo0bits>
 8007f32:	9b01      	ldr	r3, [sp, #4]
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	2101      	movs	r1, #1
 8007f38:	6139      	str	r1, [r7, #16]
 8007f3a:	3020      	adds	r0, #32
 8007f3c:	e7e5      	b.n	8007f0a <__d2b+0x54>
 8007f3e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007f42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f46:	6030      	str	r0, [r6, #0]
 8007f48:	6918      	ldr	r0, [r3, #16]
 8007f4a:	f7ff fdae 	bl	8007aaa <__hi0bits>
 8007f4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f52:	e7e1      	b.n	8007f18 <__d2b+0x62>

08007f54 <_calloc_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	fb02 f401 	mul.w	r4, r2, r1
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f000 f856 	bl	800800c <_malloc_r>
 8007f60:	4605      	mov	r5, r0
 8007f62:	b118      	cbz	r0, 8007f6c <_calloc_r+0x18>
 8007f64:	4622      	mov	r2, r4
 8007f66:	2100      	movs	r1, #0
 8007f68:	f7fd ff34 	bl	8005dd4 <memset>
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}

08007f70 <_free_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4605      	mov	r5, r0
 8007f74:	2900      	cmp	r1, #0
 8007f76:	d045      	beq.n	8008004 <_free_r+0x94>
 8007f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7c:	1f0c      	subs	r4, r1, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bfb8      	it	lt
 8007f82:	18e4      	addlt	r4, r4, r3
 8007f84:	f000 fa98 	bl	80084b8 <__malloc_lock>
 8007f88:	4a1f      	ldr	r2, [pc, #124]	; (8008008 <_free_r+0x98>)
 8007f8a:	6813      	ldr	r3, [r2, #0]
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	b933      	cbnz	r3, 8007f9e <_free_r+0x2e>
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	6014      	str	r4, [r2, #0]
 8007f94:	4628      	mov	r0, r5
 8007f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f9a:	f000 ba8e 	b.w	80084ba <__malloc_unlock>
 8007f9e:	42a3      	cmp	r3, r4
 8007fa0:	d90c      	bls.n	8007fbc <_free_r+0x4c>
 8007fa2:	6821      	ldr	r1, [r4, #0]
 8007fa4:	1862      	adds	r2, r4, r1
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	bf04      	itt	eq
 8007faa:	681a      	ldreq	r2, [r3, #0]
 8007fac:	685b      	ldreq	r3, [r3, #4]
 8007fae:	6063      	str	r3, [r4, #4]
 8007fb0:	bf04      	itt	eq
 8007fb2:	1852      	addeq	r2, r2, r1
 8007fb4:	6022      	streq	r2, [r4, #0]
 8007fb6:	6004      	str	r4, [r0, #0]
 8007fb8:	e7ec      	b.n	8007f94 <_free_r+0x24>
 8007fba:	4613      	mov	r3, r2
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	b10a      	cbz	r2, 8007fc4 <_free_r+0x54>
 8007fc0:	42a2      	cmp	r2, r4
 8007fc2:	d9fa      	bls.n	8007fba <_free_r+0x4a>
 8007fc4:	6819      	ldr	r1, [r3, #0]
 8007fc6:	1858      	adds	r0, r3, r1
 8007fc8:	42a0      	cmp	r0, r4
 8007fca:	d10b      	bne.n	8007fe4 <_free_r+0x74>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	4401      	add	r1, r0
 8007fd0:	1858      	adds	r0, r3, r1
 8007fd2:	4282      	cmp	r2, r0
 8007fd4:	6019      	str	r1, [r3, #0]
 8007fd6:	d1dd      	bne.n	8007f94 <_free_r+0x24>
 8007fd8:	6810      	ldr	r0, [r2, #0]
 8007fda:	6852      	ldr	r2, [r2, #4]
 8007fdc:	605a      	str	r2, [r3, #4]
 8007fde:	4401      	add	r1, r0
 8007fe0:	6019      	str	r1, [r3, #0]
 8007fe2:	e7d7      	b.n	8007f94 <_free_r+0x24>
 8007fe4:	d902      	bls.n	8007fec <_free_r+0x7c>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	e7d3      	b.n	8007f94 <_free_r+0x24>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	1821      	adds	r1, r4, r0
 8007ff0:	428a      	cmp	r2, r1
 8007ff2:	bf04      	itt	eq
 8007ff4:	6811      	ldreq	r1, [r2, #0]
 8007ff6:	6852      	ldreq	r2, [r2, #4]
 8007ff8:	6062      	str	r2, [r4, #4]
 8007ffa:	bf04      	itt	eq
 8007ffc:	1809      	addeq	r1, r1, r0
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	605c      	str	r4, [r3, #4]
 8008002:	e7c7      	b.n	8007f94 <_free_r+0x24>
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	bf00      	nop
 8008008:	20000214 	.word	0x20000214

0800800c <_malloc_r>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	1ccd      	adds	r5, r1, #3
 8008010:	f025 0503 	bic.w	r5, r5, #3
 8008014:	3508      	adds	r5, #8
 8008016:	2d0c      	cmp	r5, #12
 8008018:	bf38      	it	cc
 800801a:	250c      	movcc	r5, #12
 800801c:	2d00      	cmp	r5, #0
 800801e:	4606      	mov	r6, r0
 8008020:	db01      	blt.n	8008026 <_malloc_r+0x1a>
 8008022:	42a9      	cmp	r1, r5
 8008024:	d903      	bls.n	800802e <_malloc_r+0x22>
 8008026:	230c      	movs	r3, #12
 8008028:	6033      	str	r3, [r6, #0]
 800802a:	2000      	movs	r0, #0
 800802c:	bd70      	pop	{r4, r5, r6, pc}
 800802e:	f000 fa43 	bl	80084b8 <__malloc_lock>
 8008032:	4a21      	ldr	r2, [pc, #132]	; (80080b8 <_malloc_r+0xac>)
 8008034:	6814      	ldr	r4, [r2, #0]
 8008036:	4621      	mov	r1, r4
 8008038:	b991      	cbnz	r1, 8008060 <_malloc_r+0x54>
 800803a:	4c20      	ldr	r4, [pc, #128]	; (80080bc <_malloc_r+0xb0>)
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	b91b      	cbnz	r3, 8008048 <_malloc_r+0x3c>
 8008040:	4630      	mov	r0, r6
 8008042:	f000 f97d 	bl	8008340 <_sbrk_r>
 8008046:	6020      	str	r0, [r4, #0]
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f000 f978 	bl	8008340 <_sbrk_r>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d124      	bne.n	800809e <_malloc_r+0x92>
 8008054:	230c      	movs	r3, #12
 8008056:	6033      	str	r3, [r6, #0]
 8008058:	4630      	mov	r0, r6
 800805a:	f000 fa2e 	bl	80084ba <__malloc_unlock>
 800805e:	e7e4      	b.n	800802a <_malloc_r+0x1e>
 8008060:	680b      	ldr	r3, [r1, #0]
 8008062:	1b5b      	subs	r3, r3, r5
 8008064:	d418      	bmi.n	8008098 <_malloc_r+0x8c>
 8008066:	2b0b      	cmp	r3, #11
 8008068:	d90f      	bls.n	800808a <_malloc_r+0x7e>
 800806a:	600b      	str	r3, [r1, #0]
 800806c:	50cd      	str	r5, [r1, r3]
 800806e:	18cc      	adds	r4, r1, r3
 8008070:	4630      	mov	r0, r6
 8008072:	f000 fa22 	bl	80084ba <__malloc_unlock>
 8008076:	f104 000b 	add.w	r0, r4, #11
 800807a:	1d23      	adds	r3, r4, #4
 800807c:	f020 0007 	bic.w	r0, r0, #7
 8008080:	1ac3      	subs	r3, r0, r3
 8008082:	d0d3      	beq.n	800802c <_malloc_r+0x20>
 8008084:	425a      	negs	r2, r3
 8008086:	50e2      	str	r2, [r4, r3]
 8008088:	e7d0      	b.n	800802c <_malloc_r+0x20>
 800808a:	428c      	cmp	r4, r1
 800808c:	684b      	ldr	r3, [r1, #4]
 800808e:	bf16      	itet	ne
 8008090:	6063      	strne	r3, [r4, #4]
 8008092:	6013      	streq	r3, [r2, #0]
 8008094:	460c      	movne	r4, r1
 8008096:	e7eb      	b.n	8008070 <_malloc_r+0x64>
 8008098:	460c      	mov	r4, r1
 800809a:	6849      	ldr	r1, [r1, #4]
 800809c:	e7cc      	b.n	8008038 <_malloc_r+0x2c>
 800809e:	1cc4      	adds	r4, r0, #3
 80080a0:	f024 0403 	bic.w	r4, r4, #3
 80080a4:	42a0      	cmp	r0, r4
 80080a6:	d005      	beq.n	80080b4 <_malloc_r+0xa8>
 80080a8:	1a21      	subs	r1, r4, r0
 80080aa:	4630      	mov	r0, r6
 80080ac:	f000 f948 	bl	8008340 <_sbrk_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0cf      	beq.n	8008054 <_malloc_r+0x48>
 80080b4:	6025      	str	r5, [r4, #0]
 80080b6:	e7db      	b.n	8008070 <_malloc_r+0x64>
 80080b8:	20000214 	.word	0x20000214
 80080bc:	20000218 	.word	0x20000218

080080c0 <__sfputc_r>:
 80080c0:	6893      	ldr	r3, [r2, #8]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	b410      	push	{r4}
 80080c8:	6093      	str	r3, [r2, #8]
 80080ca:	da08      	bge.n	80080de <__sfputc_r+0x1e>
 80080cc:	6994      	ldr	r4, [r2, #24]
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	db01      	blt.n	80080d6 <__sfputc_r+0x16>
 80080d2:	290a      	cmp	r1, #10
 80080d4:	d103      	bne.n	80080de <__sfputc_r+0x1e>
 80080d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080da:	f7fe bb5b 	b.w	8006794 <__swbuf_r>
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	1c58      	adds	r0, r3, #1
 80080e2:	6010      	str	r0, [r2, #0]
 80080e4:	7019      	strb	r1, [r3, #0]
 80080e6:	4608      	mov	r0, r1
 80080e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <__sfputs_r>:
 80080ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	4614      	mov	r4, r2
 80080f6:	18d5      	adds	r5, r2, r3
 80080f8:	42ac      	cmp	r4, r5
 80080fa:	d101      	bne.n	8008100 <__sfputs_r+0x12>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e007      	b.n	8008110 <__sfputs_r+0x22>
 8008100:	463a      	mov	r2, r7
 8008102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008106:	4630      	mov	r0, r6
 8008108:	f7ff ffda 	bl	80080c0 <__sfputc_r>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d1f3      	bne.n	80080f8 <__sfputs_r+0xa>
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008114 <_vfiprintf_r>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	460c      	mov	r4, r1
 800811a:	b09d      	sub	sp, #116	; 0x74
 800811c:	4617      	mov	r7, r2
 800811e:	461d      	mov	r5, r3
 8008120:	4606      	mov	r6, r0
 8008122:	b118      	cbz	r0, 800812c <_vfiprintf_r+0x18>
 8008124:	6983      	ldr	r3, [r0, #24]
 8008126:	b90b      	cbnz	r3, 800812c <_vfiprintf_r+0x18>
 8008128:	f7ff fb2a 	bl	8007780 <__sinit>
 800812c:	4b7c      	ldr	r3, [pc, #496]	; (8008320 <_vfiprintf_r+0x20c>)
 800812e:	429c      	cmp	r4, r3
 8008130:	d158      	bne.n	80081e4 <_vfiprintf_r+0xd0>
 8008132:	6874      	ldr	r4, [r6, #4]
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	0718      	lsls	r0, r3, #28
 8008138:	d55e      	bpl.n	80081f8 <_vfiprintf_r+0xe4>
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d05b      	beq.n	80081f8 <_vfiprintf_r+0xe4>
 8008140:	2300      	movs	r3, #0
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	2320      	movs	r3, #32
 8008146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800814a:	2330      	movs	r3, #48	; 0x30
 800814c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008150:	9503      	str	r5, [sp, #12]
 8008152:	f04f 0b01 	mov.w	fp, #1
 8008156:	46b8      	mov	r8, r7
 8008158:	4645      	mov	r5, r8
 800815a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800815e:	b10b      	cbz	r3, 8008164 <_vfiprintf_r+0x50>
 8008160:	2b25      	cmp	r3, #37	; 0x25
 8008162:	d154      	bne.n	800820e <_vfiprintf_r+0xfa>
 8008164:	ebb8 0a07 	subs.w	sl, r8, r7
 8008168:	d00b      	beq.n	8008182 <_vfiprintf_r+0x6e>
 800816a:	4653      	mov	r3, sl
 800816c:	463a      	mov	r2, r7
 800816e:	4621      	mov	r1, r4
 8008170:	4630      	mov	r0, r6
 8008172:	f7ff ffbc 	bl	80080ee <__sfputs_r>
 8008176:	3001      	adds	r0, #1
 8008178:	f000 80c2 	beq.w	8008300 <_vfiprintf_r+0x1ec>
 800817c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817e:	4453      	add	r3, sl
 8008180:	9309      	str	r3, [sp, #36]	; 0x24
 8008182:	f898 3000 	ldrb.w	r3, [r8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80ba 	beq.w	8008300 <_vfiprintf_r+0x1ec>
 800818c:	2300      	movs	r3, #0
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	9307      	str	r3, [sp, #28]
 800819a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800819e:	931a      	str	r3, [sp, #104]	; 0x68
 80081a0:	46a8      	mov	r8, r5
 80081a2:	2205      	movs	r2, #5
 80081a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80081a8:	485e      	ldr	r0, [pc, #376]	; (8008324 <_vfiprintf_r+0x210>)
 80081aa:	f7f8 f819 	bl	80001e0 <memchr>
 80081ae:	9b04      	ldr	r3, [sp, #16]
 80081b0:	bb78      	cbnz	r0, 8008212 <_vfiprintf_r+0xfe>
 80081b2:	06d9      	lsls	r1, r3, #27
 80081b4:	bf44      	itt	mi
 80081b6:	2220      	movmi	r2, #32
 80081b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081bc:	071a      	lsls	r2, r3, #28
 80081be:	bf44      	itt	mi
 80081c0:	222b      	movmi	r2, #43	; 0x2b
 80081c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081c6:	782a      	ldrb	r2, [r5, #0]
 80081c8:	2a2a      	cmp	r2, #42	; 0x2a
 80081ca:	d02a      	beq.n	8008222 <_vfiprintf_r+0x10e>
 80081cc:	9a07      	ldr	r2, [sp, #28]
 80081ce:	46a8      	mov	r8, r5
 80081d0:	2000      	movs	r0, #0
 80081d2:	250a      	movs	r5, #10
 80081d4:	4641      	mov	r1, r8
 80081d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081da:	3b30      	subs	r3, #48	; 0x30
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d969      	bls.n	80082b4 <_vfiprintf_r+0x1a0>
 80081e0:	b360      	cbz	r0, 800823c <_vfiprintf_r+0x128>
 80081e2:	e024      	b.n	800822e <_vfiprintf_r+0x11a>
 80081e4:	4b50      	ldr	r3, [pc, #320]	; (8008328 <_vfiprintf_r+0x214>)
 80081e6:	429c      	cmp	r4, r3
 80081e8:	d101      	bne.n	80081ee <_vfiprintf_r+0xda>
 80081ea:	68b4      	ldr	r4, [r6, #8]
 80081ec:	e7a2      	b.n	8008134 <_vfiprintf_r+0x20>
 80081ee:	4b4f      	ldr	r3, [pc, #316]	; (800832c <_vfiprintf_r+0x218>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	bf08      	it	eq
 80081f4:	68f4      	ldreq	r4, [r6, #12]
 80081f6:	e79d      	b.n	8008134 <_vfiprintf_r+0x20>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7fe fb1c 	bl	8006838 <__swsetup_r>
 8008200:	2800      	cmp	r0, #0
 8008202:	d09d      	beq.n	8008140 <_vfiprintf_r+0x2c>
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	b01d      	add	sp, #116	; 0x74
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	46a8      	mov	r8, r5
 8008210:	e7a2      	b.n	8008158 <_vfiprintf_r+0x44>
 8008212:	4a44      	ldr	r2, [pc, #272]	; (8008324 <_vfiprintf_r+0x210>)
 8008214:	1a80      	subs	r0, r0, r2
 8008216:	fa0b f000 	lsl.w	r0, fp, r0
 800821a:	4318      	orrs	r0, r3
 800821c:	9004      	str	r0, [sp, #16]
 800821e:	4645      	mov	r5, r8
 8008220:	e7be      	b.n	80081a0 <_vfiprintf_r+0x8c>
 8008222:	9a03      	ldr	r2, [sp, #12]
 8008224:	1d11      	adds	r1, r2, #4
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	9103      	str	r1, [sp, #12]
 800822a:	2a00      	cmp	r2, #0
 800822c:	db01      	blt.n	8008232 <_vfiprintf_r+0x11e>
 800822e:	9207      	str	r2, [sp, #28]
 8008230:	e004      	b.n	800823c <_vfiprintf_r+0x128>
 8008232:	4252      	negs	r2, r2
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	9207      	str	r2, [sp, #28]
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	f898 3000 	ldrb.w	r3, [r8]
 8008240:	2b2e      	cmp	r3, #46	; 0x2e
 8008242:	d10e      	bne.n	8008262 <_vfiprintf_r+0x14e>
 8008244:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008248:	2b2a      	cmp	r3, #42	; 0x2a
 800824a:	d138      	bne.n	80082be <_vfiprintf_r+0x1aa>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1d1a      	adds	r2, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9203      	str	r2, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfb8      	it	lt
 8008258:	f04f 33ff 	movlt.w	r3, #4294967295
 800825c:	f108 0802 	add.w	r8, r8, #2
 8008260:	9305      	str	r3, [sp, #20]
 8008262:	4d33      	ldr	r5, [pc, #204]	; (8008330 <_vfiprintf_r+0x21c>)
 8008264:	f898 1000 	ldrb.w	r1, [r8]
 8008268:	2203      	movs	r2, #3
 800826a:	4628      	mov	r0, r5
 800826c:	f7f7 ffb8 	bl	80001e0 <memchr>
 8008270:	b140      	cbz	r0, 8008284 <_vfiprintf_r+0x170>
 8008272:	2340      	movs	r3, #64	; 0x40
 8008274:	1b40      	subs	r0, r0, r5
 8008276:	fa03 f000 	lsl.w	r0, r3, r0
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	4303      	orrs	r3, r0
 800827e:	f108 0801 	add.w	r8, r8, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	f898 1000 	ldrb.w	r1, [r8]
 8008288:	482a      	ldr	r0, [pc, #168]	; (8008334 <_vfiprintf_r+0x220>)
 800828a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800828e:	2206      	movs	r2, #6
 8008290:	f108 0701 	add.w	r7, r8, #1
 8008294:	f7f7 ffa4 	bl	80001e0 <memchr>
 8008298:	2800      	cmp	r0, #0
 800829a:	d037      	beq.n	800830c <_vfiprintf_r+0x1f8>
 800829c:	4b26      	ldr	r3, [pc, #152]	; (8008338 <_vfiprintf_r+0x224>)
 800829e:	bb1b      	cbnz	r3, 80082e8 <_vfiprintf_r+0x1d4>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	3307      	adds	r3, #7
 80082a4:	f023 0307 	bic.w	r3, r3, #7
 80082a8:	3308      	adds	r3, #8
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ae:	444b      	add	r3, r9
 80082b0:	9309      	str	r3, [sp, #36]	; 0x24
 80082b2:	e750      	b.n	8008156 <_vfiprintf_r+0x42>
 80082b4:	fb05 3202 	mla	r2, r5, r2, r3
 80082b8:	2001      	movs	r0, #1
 80082ba:	4688      	mov	r8, r1
 80082bc:	e78a      	b.n	80081d4 <_vfiprintf_r+0xc0>
 80082be:	2300      	movs	r3, #0
 80082c0:	f108 0801 	add.w	r8, r8, #1
 80082c4:	9305      	str	r3, [sp, #20]
 80082c6:	4619      	mov	r1, r3
 80082c8:	250a      	movs	r5, #10
 80082ca:	4640      	mov	r0, r8
 80082cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d0:	3a30      	subs	r2, #48	; 0x30
 80082d2:	2a09      	cmp	r2, #9
 80082d4:	d903      	bls.n	80082de <_vfiprintf_r+0x1ca>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0c3      	beq.n	8008262 <_vfiprintf_r+0x14e>
 80082da:	9105      	str	r1, [sp, #20]
 80082dc:	e7c1      	b.n	8008262 <_vfiprintf_r+0x14e>
 80082de:	fb05 2101 	mla	r1, r5, r1, r2
 80082e2:	2301      	movs	r3, #1
 80082e4:	4680      	mov	r8, r0
 80082e6:	e7f0      	b.n	80082ca <_vfiprintf_r+0x1b6>
 80082e8:	ab03      	add	r3, sp, #12
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4622      	mov	r2, r4
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <_vfiprintf_r+0x228>)
 80082f0:	a904      	add	r1, sp, #16
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7fd fe0a 	bl	8005f0c <_printf_float>
 80082f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082fc:	4681      	mov	r9, r0
 80082fe:	d1d5      	bne.n	80082ac <_vfiprintf_r+0x198>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	065b      	lsls	r3, r3, #25
 8008304:	f53f af7e 	bmi.w	8008204 <_vfiprintf_r+0xf0>
 8008308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800830a:	e77d      	b.n	8008208 <_vfiprintf_r+0xf4>
 800830c:	ab03      	add	r3, sp, #12
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4622      	mov	r2, r4
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <_vfiprintf_r+0x228>)
 8008314:	a904      	add	r1, sp, #16
 8008316:	4630      	mov	r0, r6
 8008318:	f7fe f8ae 	bl	8006478 <_printf_i>
 800831c:	e7ec      	b.n	80082f8 <_vfiprintf_r+0x1e4>
 800831e:	bf00      	nop
 8008320:	080086e8 	.word	0x080086e8
 8008324:	08008824 	.word	0x08008824
 8008328:	08008708 	.word	0x08008708
 800832c:	080086c8 	.word	0x080086c8
 8008330:	0800882a 	.word	0x0800882a
 8008334:	0800882e 	.word	0x0800882e
 8008338:	08005f0d 	.word	0x08005f0d
 800833c:	080080ef 	.word	0x080080ef

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4c06      	ldr	r4, [pc, #24]	; (800835c <_sbrk_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4605      	mov	r5, r0
 8008348:	4608      	mov	r0, r1
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	f7f9 ff6e 	bl	800222c <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	200002f0 	.word	0x200002f0

08008360 <__sread>:
 8008360:	b510      	push	{r4, lr}
 8008362:	460c      	mov	r4, r1
 8008364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008368:	f000 f8a8 	bl	80084bc <_read_r>
 800836c:	2800      	cmp	r0, #0
 800836e:	bfab      	itete	ge
 8008370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008372:	89a3      	ldrhlt	r3, [r4, #12]
 8008374:	181b      	addge	r3, r3, r0
 8008376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800837a:	bfac      	ite	ge
 800837c:	6563      	strge	r3, [r4, #84]	; 0x54
 800837e:	81a3      	strhlt	r3, [r4, #12]
 8008380:	bd10      	pop	{r4, pc}

08008382 <__swrite>:
 8008382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008386:	461f      	mov	r7, r3
 8008388:	898b      	ldrh	r3, [r1, #12]
 800838a:	05db      	lsls	r3, r3, #23
 800838c:	4605      	mov	r5, r0
 800838e:	460c      	mov	r4, r1
 8008390:	4616      	mov	r6, r2
 8008392:	d505      	bpl.n	80083a0 <__swrite+0x1e>
 8008394:	2302      	movs	r3, #2
 8008396:	2200      	movs	r2, #0
 8008398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839c:	f000 f868 	bl	8008470 <_lseek_r>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	4632      	mov	r2, r6
 80083ae:	463b      	mov	r3, r7
 80083b0:	4628      	mov	r0, r5
 80083b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b6:	f000 b817 	b.w	80083e8 <_write_r>

080083ba <__sseek>:
 80083ba:	b510      	push	{r4, lr}
 80083bc:	460c      	mov	r4, r1
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 f855 	bl	8008470 <_lseek_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	bf15      	itete	ne
 80083cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083d6:	81a3      	strheq	r3, [r4, #12]
 80083d8:	bf18      	it	ne
 80083da:	81a3      	strhne	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__sclose>:
 80083de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e2:	f000 b813 	b.w	800840c <_close_r>
	...

080083e8 <_write_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4c07      	ldr	r4, [pc, #28]	; (8008408 <_write_r+0x20>)
 80083ec:	4605      	mov	r5, r0
 80083ee:	4608      	mov	r0, r1
 80083f0:	4611      	mov	r1, r2
 80083f2:	2200      	movs	r2, #0
 80083f4:	6022      	str	r2, [r4, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f7f9 fa5c 	bl	80018b4 <_write>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_write_r+0x1e>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	b103      	cbz	r3, 8008406 <_write_r+0x1e>
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	200002f0 	.word	0x200002f0

0800840c <_close_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4c06      	ldr	r4, [pc, #24]	; (8008428 <_close_r+0x1c>)
 8008410:	2300      	movs	r3, #0
 8008412:	4605      	mov	r5, r0
 8008414:	4608      	mov	r0, r1
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	f7f9 fed3 	bl	80021c2 <_close>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_close_r+0x1a>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	b103      	cbz	r3, 8008426 <_close_r+0x1a>
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	200002f0 	.word	0x200002f0

0800842c <_fstat_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4c07      	ldr	r4, [pc, #28]	; (800844c <_fstat_r+0x20>)
 8008430:	2300      	movs	r3, #0
 8008432:	4605      	mov	r5, r0
 8008434:	4608      	mov	r0, r1
 8008436:	4611      	mov	r1, r2
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	f7f9 fece 	bl	80021da <_fstat>
 800843e:	1c43      	adds	r3, r0, #1
 8008440:	d102      	bne.n	8008448 <_fstat_r+0x1c>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	b103      	cbz	r3, 8008448 <_fstat_r+0x1c>
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	bf00      	nop
 800844c:	200002f0 	.word	0x200002f0

08008450 <_isatty_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4c06      	ldr	r4, [pc, #24]	; (800846c <_isatty_r+0x1c>)
 8008454:	2300      	movs	r3, #0
 8008456:	4605      	mov	r5, r0
 8008458:	4608      	mov	r0, r1
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	f7f9 fecd 	bl	80021fa <_isatty>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_isatty_r+0x1a>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	b103      	cbz	r3, 800846a <_isatty_r+0x1a>
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	200002f0 	.word	0x200002f0

08008470 <_lseek_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4c07      	ldr	r4, [pc, #28]	; (8008490 <_lseek_r+0x20>)
 8008474:	4605      	mov	r5, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	2200      	movs	r2, #0
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f7f9 fec6 	bl	8002210 <_lseek>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_lseek_r+0x1e>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	b103      	cbz	r3, 800848e <_lseek_r+0x1e>
 800848c:	602b      	str	r3, [r5, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	200002f0 	.word	0x200002f0

08008494 <__ascii_mbtowc>:
 8008494:	b082      	sub	sp, #8
 8008496:	b901      	cbnz	r1, 800849a <__ascii_mbtowc+0x6>
 8008498:	a901      	add	r1, sp, #4
 800849a:	b142      	cbz	r2, 80084ae <__ascii_mbtowc+0x1a>
 800849c:	b14b      	cbz	r3, 80084b2 <__ascii_mbtowc+0x1e>
 800849e:	7813      	ldrb	r3, [r2, #0]
 80084a0:	600b      	str	r3, [r1, #0]
 80084a2:	7812      	ldrb	r2, [r2, #0]
 80084a4:	1c10      	adds	r0, r2, #0
 80084a6:	bf18      	it	ne
 80084a8:	2001      	movne	r0, #1
 80084aa:	b002      	add	sp, #8
 80084ac:	4770      	bx	lr
 80084ae:	4610      	mov	r0, r2
 80084b0:	e7fb      	b.n	80084aa <__ascii_mbtowc+0x16>
 80084b2:	f06f 0001 	mvn.w	r0, #1
 80084b6:	e7f8      	b.n	80084aa <__ascii_mbtowc+0x16>

080084b8 <__malloc_lock>:
 80084b8:	4770      	bx	lr

080084ba <__malloc_unlock>:
 80084ba:	4770      	bx	lr

080084bc <_read_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4c07      	ldr	r4, [pc, #28]	; (80084dc <_read_r+0x20>)
 80084c0:	4605      	mov	r5, r0
 80084c2:	4608      	mov	r0, r1
 80084c4:	4611      	mov	r1, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f7f9 fe5c 	bl	8002188 <_read>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_read_r+0x1e>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	b103      	cbz	r3, 80084da <_read_r+0x1e>
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	200002f0 	.word	0x200002f0

080084e0 <__ascii_wctomb>:
 80084e0:	b149      	cbz	r1, 80084f6 <__ascii_wctomb+0x16>
 80084e2:	2aff      	cmp	r2, #255	; 0xff
 80084e4:	bf85      	ittet	hi
 80084e6:	238a      	movhi	r3, #138	; 0x8a
 80084e8:	6003      	strhi	r3, [r0, #0]
 80084ea:	700a      	strbls	r2, [r1, #0]
 80084ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80084f0:	bf98      	it	ls
 80084f2:	2001      	movls	r0, #1
 80084f4:	4770      	bx	lr
 80084f6:	4608      	mov	r0, r1
 80084f8:	4770      	bx	lr
	...

080084fc <_init>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr

08008508 <_fini>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	bf00      	nop
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr
